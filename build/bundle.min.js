var EToken =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ((function(modules) {
	// Check all modules for deduplicated modules
	for(var i in modules) {
		if(Object.prototype.hasOwnProperty.call(modules, i)) {
			switch(typeof modules[i]) {
			case "function": break;
			case "object":
				// Module can be created from a template
				modules[i] = (function(_m) {
					var args = _m.slice(1), fn = modules[_m[0]];
					return function (a,b,c) {
						fn.apply(this, [a,b,c].concat(args));
					};
				}(modules[i]));
				break;
			default:
				// Module is a copy of another module
				modules[i] = modules[modules[i]];
				break;
			}
		}
	}
	return modules;
}([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function _typeof(obj) {
	  "@babel/helpers - typeof";

	  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
	    _typeof = function _typeof(obj) {
	      return typeof obj;
	    };
	  } else {
	    _typeof = function _typeof(obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	    };
	  }

	  return _typeof(obj);
	}

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _ambisafeClientJavascript = _interopRequireDefault(__webpack_require__(163));

	var _ethereumjsTx = _interopRequireDefault(__webpack_require__(76));

	var _web = _interopRequireDefault(__webpack_require__(157));

	var _web3ProviderEngine = _interopRequireDefault(__webpack_require__(105));

	var _nonceTracker = _interopRequireDefault(__webpack_require__(107));

	var _filters = _interopRequireDefault(__webpack_require__(106));

	var _rpc = _interopRequireDefault(__webpack_require__(210));

	var _hookedWalletEthtx = _interopRequireDefault(__webpack_require__(207));

	var _logRaws = _interopRequireDefault(__webpack_require__(188));

	var _helpers = __webpack_require__(187);

	var ethUtil = _interopRequireWildcard(__webpack_require__(104));

	function _getRequireWildcardCache() {
	  if (typeof WeakMap !== "function") return null;
	  var cache = new WeakMap();

	  _getRequireWildcardCache = function _getRequireWildcardCache() {
	    return cache;
	  };

	  return cache;
	}

	function _interopRequireWildcard(obj) {
	  if (obj && obj.__esModule) {
	    return obj;
	  }

	  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
	    return {
	      default: obj
	    };
	  }

	  var cache = _getRequireWildcardCache();

	  if (cache && cache.has(obj)) {
	    return cache.get(obj);
	  }

	  var newObj = {};
	  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

	  for (var key in obj) {
	    if (Object.prototype.hasOwnProperty.call(obj, key)) {
	      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

	      if (desc && (desc.get || desc.set)) {
	        Object.defineProperty(newObj, key, desc);
	      } else {
	        newObj[key] = obj[key];
	      }
	    }
	  }

	  newObj.default = obj;

	  if (cache) {
	    cache.set(obj, newObj);
	  }

	  return newObj;
	}

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    default: obj
	  };
	}

	function _toConsumableArray(arr) {
	  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
	}

	function _nonIterableSpread() {
	  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	function _unsupportedIterableToArray(o, minLen) {
	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
	  var n = Object.prototype.toString.call(o).slice(8, -1);
	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return Array.from(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
	}

	function _iterableToArray(iter) {
	  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
	}

	function _arrayWithoutHoles(arr) {
	  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
	}

	function _arrayLikeToArray(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) {
	    arr2[i] = arr[i];
	  }

	  return arr2;
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  return Constructor;
	}

	var EToken = /*#__PURE__*/function () {
	  function EToken() {
	    var rpcUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

	    _classCallCheck(this, EToken);

	    this.engine = new _web3ProviderEngine.default();
	    this.web3 = new _web.default(this.engine);
	    this.engine.addProvider(new _filters.default());
	    this.engine.addProvider(new _nonceTracker.default());
	    this.Ambisafe = _ambisafeClientJavascript.default;
	    this.publicToAddress = _helpers.publicToAddress;
	    this.privateToAddress = _helpers.privateToAddress;
	    this.waitForTransaction = _helpers.waitForTransaction;
	    this.setPrivateKey = this.setPrivateKey.bind(this);
	    this.setRpcUrl = this.setRpcUrl.bind(this);
	    this.buildRawTransaction = this.buildRawTransaction.bind(this);
	    this.sign = this.sign.bind(this);
	    this.chainId = 1;

	    if (rpcUrl) {
	      this.setRpcUrl(rpcUrl);
	    }
	  }

	  _createClass(EToken, [{
	    key: "setPrivateKey",
	    value: function setPrivateKey(privateKey) {
	      this.signerPrivateKey = (0, _helpers.toBuffer)(privateKey);
	      this.signerAddress = (0, _helpers.privateToAddress)(this.signerPrivateKey);
	    }
	  }, {
	    key: "setRpcUrl",
	    value: function setRpcUrl(rpcUrl, rawsLogger) {
	      var _this = this;

	      var doNotSend = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	      if (this.rpcSet) {
	        throw new Error('Rpc url is already set.');
	      }

	      this.rpcSet = true;
	      var that = this;

	      var getPrivateKey = function getPrivateKey(address, callback) {
	        if (address.toLowerCase() == that.signerAddress.toLowerCase()) {
	          callback(null, that.signerPrivateKey);
	        } else {
	          callback(new Error('Unknown address ' + address));
	        }
	      };

	      var getAccounts = function getAccounts(callback) {
	        callback(null, [that.signerAddress.toLowerCase()]);
	      };

	      this.engine.addProvider(new _hookedWalletEthtx.default({
	        getPrivateKey: getPrivateKey,
	        getAccounts: getAccounts
	      }));

	      if (rawsLogger) {
	        this.engine.addProvider(new _logRaws.default(this.web3.sha3, rawsLogger, doNotSend));
	      }

	      this.engine.addProvider(new _rpc.default({
	        rpcUrl: rpcUrl
	      }));
	      this.engine.start();
	      this.web3.version.getNetwork(function (err, res) {
	        _this.chainId = parseInt(res);
	      });
	    }
	  }, {
	    key: "buildRawTransaction",
	    value: function buildRawTransaction(contract, method) {
	      var _this2 = this;

	      return function () {
	        var _contract$method;

	        if (_this2.signerPrivateKey === undefined) {
	          throw Error('Building transaction is only possible after setPrivateKey().');
	        }

	        for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {
	          params[_key] = arguments[_key];
	        }

	        var txData = params.slice(-1)[0];
	        txData.data = txData.data || (_contract$method = contract[method]).getData.apply(_contract$method, _toConsumableArray(params.slice(0, -1)));
	        txData.to = txData.to || contract.address;
	        txData.from = txData.from || _this2.signerAddress;
	        txData.nonce = _this2.web3.toHex(txData.nonce);
	        txData.gas = _this2.web3.toHex(txData.gas || txData.gasLimit);
	        txData.gasLimit = txData.gas;
	        txData.gasPrice = _this2.web3.toHex(txData.gasPrice);
	        txData.value = _this2.web3.toHex(txData.value || 0);
	        txData.chainId = _this2.web3.toHex(txData.chainId || _this2.chainId);
	        var tx = new _ethereumjsTx.default(txData);
	        tx.sign(_this2.signerPrivateKey);
	        return '0x' + tx.serialize().toString('hex');
	      }.bind(this);
	    }
	  }, {
	    key: "sign",
	    value: function sign(hash) {
	      var privateKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
	      var privKey = privateKey || this.signerPrivateKey;

	      if (privKey === undefined) {
	        throw Error('Signing hashes is only possible after setPrivateKey().');
	      }

	      var signature = (0, _helpers.ecsign)(hash, privKey);
	      return {
	        v: signature.v,
	        r: '0x' + signature.r.toString('hex'),
	        s: '0x' + signature.s.toString('hex')
	      };
	    }
	  }]);

	  return EToken;
	}();

	var etoken = new EToken();

	if (typeof window !== 'undefined' && window.opts && window.opts.gethUrl) {
	  etoken.setRpcUrl(window.opts.gethUrl);
	}

	if (typeof window !== 'undefined' && window.opts && window.opts.pk) {
	  etoken.setPrivateKey(window.opts.pk);
	}

	EToken.web3 = etoken.web3;
	EToken.Ambisafe = _ambisafeClientJavascript.default;
	EToken.publicToAddress = _helpers.publicToAddress;
	EToken.privateToAddress = _helpers.privateToAddress;
	EToken.waitForTransaction = _helpers.waitForTransaction;
	EToken.setPrivateKey = etoken.setPrivateKey;
	EToken.buildRawTransaction = etoken.buildRawTransaction;
	EToken.sign = etoken.sign;
	EToken.setRpcUrl = etoken.setRpcUrl;
	EToken.ethUtil = ethUtil;
	var _default = EToken;
	exports.default = _default;

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */

	'use strict'

	var base64 = __webpack_require__(215)
	var ieee754 = __webpack_require__(307)
	var isArray = __webpack_require__(223)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()

	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	exports.kMaxLength = kMaxLength()

	function typedArraySupport () {
	  try {
	    var arr = new Uint8Array(1)
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length)
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length)
	    }
	    that.length = length
	  }

	  return that
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}

	Buffer.poolSize = 8192 // not used by this implementation

	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype
	  return arr
	}

	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }

	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }

	  return fromObject(that, value)
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	}

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer[Symbol.species] === Buffer) {
	    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	    Object.defineProperty(Buffer, Symbol.species, {
	      value: null,
	      configurable: true
	    })
	  }
	}

	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}

	function alloc (that, size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	}

	function allocUnsafe (that, size) {
	  assertSize(size)
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	}
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8'
	  }

	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }

	  var length = byteLength(string, encoding) | 0
	  that = createBuffer(that, length)

	  var actual = that.write(string, encoding)

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual)
	  }

	  return that
	}

	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  that = createBuffer(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength // this throws if `array` is not a valid ArrayBuffer

	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }

	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array)
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset)
	  } else {
	    array = new Uint8Array(array, byteOffset, length)
	  }

	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array)
	  }
	  return that
	}

	function fromObject (that, obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0
	    that = createBuffer(that, len)

	    if (that.length === 0) {
	      return that
	    }

	    obj.copy(that, 0, 0, len)
	    return that
	  }

	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }

	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0
	  }
	  return Buffer.alloc(+length)
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i]
	      y = b[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length
	    }
	  }

	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i]
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos)
	    pos += buf.length
	  }
	  return buffer
	}

	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string
	  }

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0
	  start >>>= 0

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8'

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true

	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}

	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1)
	  }
	  return this
	}

	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3)
	    swap(this, i + 1, i + 2)
	  }
	  return this
	}

	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7)
	    swap(this, i + 1, i + 6)
	    swap(this, i + 2, i + 5)
	    swap(this, i + 3, i + 4)
	  }
	  return this
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }

	  if (start === undefined) {
	    start = 0
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
	    thisStart = 0
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0

	  if (this === target) return 0

	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)

	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i]
	      y = targetCopy[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset
	    byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1)
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding)
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase()
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2
	      arrLength /= 2
	      valLength /= 2
	      byteOffset /= 2
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i
	  if (dir) {
	    var foundIndex = -1
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex
	        foundIndex = -1
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}

	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end)
	    newBuf.__proto__ = Buffer.prototype
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    )
	  }

	  return len
	}

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start
	      start = 0
	      end = this.length
	    } else if (typeof end === 'string') {
	      encoding = end
	      end = this.length
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0)
	      if (code < 256) {
	        val = code
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0

	  if (!val) val = 0

	  var i
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString())
	    var len = bytes.length
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len]
	    }
	  }

	  return this
	}

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer, (function() { return this; }())))

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory();
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define([], factory);
		}
		else {
			// Global (browser)
			root.CryptoJS = factory();
		}
	}(this, function () {

		/**
		 * CryptoJS core components.
		 */
		var CryptoJS = CryptoJS || (function (Math, undefined) {
		    /*
		     * Local polyfil of Object.create
		     */
		    var create = Object.create || (function () {
		        function F() {};

		        return function (obj) {
		            var subtype;

		            F.prototype = obj;

		            subtype = new F();

		            F.prototype = null;

		            return subtype;
		        };
		    }())

		    /**
		     * CryptoJS namespace.
		     */
		    var C = {};

		    /**
		     * Library namespace.
		     */
		    var C_lib = C.lib = {};

		    /**
		     * Base object for prototypal inheritance.
		     */
		    var Base = C_lib.Base = (function () {


		        return {
		            /**
		             * Creates a new object that inherits from this object.
		             *
		             * @param {Object} overrides Properties to copy into the new object.
		             *
		             * @return {Object} The new object.
		             *
		             * @static
		             *
		             * @example
		             *
		             *     var MyType = CryptoJS.lib.Base.extend({
		             *         field: 'value',
		             *
		             *         method: function () {
		             *         }
		             *     });
		             */
		            extend: function (overrides) {
		                // Spawn
		                var subtype = create(this);

		                // Augment
		                if (overrides) {
		                    subtype.mixIn(overrides);
		                }

		                // Create default initializer
		                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
		                    subtype.init = function () {
		                        subtype.$super.init.apply(this, arguments);
		                    };
		                }

		                // Initializer's prototype is the subtype object
		                subtype.init.prototype = subtype;

		                // Reference supertype
		                subtype.$super = this;

		                return subtype;
		            },

		            /**
		             * Extends this object and runs the init method.
		             * Arguments to create() will be passed to init().
		             *
		             * @return {Object} The new object.
		             *
		             * @static
		             *
		             * @example
		             *
		             *     var instance = MyType.create();
		             */
		            create: function () {
		                var instance = this.extend();
		                instance.init.apply(instance, arguments);

		                return instance;
		            },

		            /**
		             * Initializes a newly created object.
		             * Override this method to add some logic when your objects are created.
		             *
		             * @example
		             *
		             *     var MyType = CryptoJS.lib.Base.extend({
		             *         init: function () {
		             *             // ...
		             *         }
		             *     });
		             */
		            init: function () {
		            },

		            /**
		             * Copies properties into this object.
		             *
		             * @param {Object} properties The properties to mix in.
		             *
		             * @example
		             *
		             *     MyType.mixIn({
		             *         field: 'value'
		             *     });
		             */
		            mixIn: function (properties) {
		                for (var propertyName in properties) {
		                    if (properties.hasOwnProperty(propertyName)) {
		                        this[propertyName] = properties[propertyName];
		                    }
		                }

		                // IE won't copy toString using the loop above
		                if (properties.hasOwnProperty('toString')) {
		                    this.toString = properties.toString;
		                }
		            },

		            /**
		             * Creates a copy of this object.
		             *
		             * @return {Object} The clone.
		             *
		             * @example
		             *
		             *     var clone = instance.clone();
		             */
		            clone: function () {
		                return this.init.prototype.extend(this);
		            }
		        };
		    }());

		    /**
		     * An array of 32-bit words.
		     *
		     * @property {Array} words The array of 32-bit words.
		     * @property {number} sigBytes The number of significant bytes in this word array.
		     */
		    var WordArray = C_lib.WordArray = Base.extend({
		        /**
		         * Initializes a newly created word array.
		         *
		         * @param {Array} words (Optional) An array of 32-bit words.
		         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.lib.WordArray.create();
		         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
		         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
		         */
		        init: function (words, sigBytes) {
		            words = this.words = words || [];

		            if (sigBytes != undefined) {
		                this.sigBytes = sigBytes;
		            } else {
		                this.sigBytes = words.length * 4;
		            }
		        },

		        /**
		         * Converts this word array to a string.
		         *
		         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
		         *
		         * @return {string} The stringified word array.
		         *
		         * @example
		         *
		         *     var string = wordArray + '';
		         *     var string = wordArray.toString();
		         *     var string = wordArray.toString(CryptoJS.enc.Utf8);
		         */
		        toString: function (encoder) {
		            return (encoder || Hex).stringify(this);
		        },

		        /**
		         * Concatenates a word array to this word array.
		         *
		         * @param {WordArray} wordArray The word array to append.
		         *
		         * @return {WordArray} This word array.
		         *
		         * @example
		         *
		         *     wordArray1.concat(wordArray2);
		         */
		        concat: function (wordArray) {
		            // Shortcuts
		            var thisWords = this.words;
		            var thatWords = wordArray.words;
		            var thisSigBytes = this.sigBytes;
		            var thatSigBytes = wordArray.sigBytes;

		            // Clamp excess bits
		            this.clamp();

		            // Concat
		            if (thisSigBytes % 4) {
		                // Copy one byte at a time
		                for (var i = 0; i < thatSigBytes; i++) {
		                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
		                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
		                }
		            } else {
		                // Copy one word at a time
		                for (var i = 0; i < thatSigBytes; i += 4) {
		                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];
		                }
		            }
		            this.sigBytes += thatSigBytes;

		            // Chainable
		            return this;
		        },

		        /**
		         * Removes insignificant bits.
		         *
		         * @example
		         *
		         *     wordArray.clamp();
		         */
		        clamp: function () {
		            // Shortcuts
		            var words = this.words;
		            var sigBytes = this.sigBytes;

		            // Clamp
		            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
		            words.length = Math.ceil(sigBytes / 4);
		        },

		        /**
		         * Creates a copy of this word array.
		         *
		         * @return {WordArray} The clone.
		         *
		         * @example
		         *
		         *     var clone = wordArray.clone();
		         */
		        clone: function () {
		            var clone = Base.clone.call(this);
		            clone.words = this.words.slice(0);

		            return clone;
		        },

		        /**
		         * Creates a word array filled with random bytes.
		         *
		         * @param {number} nBytes The number of random bytes to generate.
		         *
		         * @return {WordArray} The random word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.lib.WordArray.random(16);
		         */
		        random: function (nBytes) {
		            var words = [];

		            var r = (function (m_w) {
		                var m_w = m_w;
		                var m_z = 0x3ade68b1;
		                var mask = 0xffffffff;

		                return function () {
		                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;
		                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;
		                    var result = ((m_z << 0x10) + m_w) & mask;
		                    result /= 0x100000000;
		                    result += 0.5;
		                    return result * (Math.random() > .5 ? 1 : -1);
		                }
		            });

		            for (var i = 0, rcache; i < nBytes; i += 4) {
		                var _r = r((rcache || Math.random()) * 0x100000000);

		                rcache = _r() * 0x3ade67b7;
		                words.push((_r() * 0x100000000) | 0);
		            }

		            return new WordArray.init(words, nBytes);
		        }
		    });

		    /**
		     * Encoder namespace.
		     */
		    var C_enc = C.enc = {};

		    /**
		     * Hex encoding strategy.
		     */
		    var Hex = C_enc.Hex = {
		        /**
		         * Converts a word array to a hex string.
		         *
		         * @param {WordArray} wordArray The word array.
		         *
		         * @return {string} The hex string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
		         */
		        stringify: function (wordArray) {
		            // Shortcuts
		            var words = wordArray.words;
		            var sigBytes = wordArray.sigBytes;

		            // Convert
		            var hexChars = [];
		            for (var i = 0; i < sigBytes; i++) {
		                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
		                hexChars.push((bite >>> 4).toString(16));
		                hexChars.push((bite & 0x0f).toString(16));
		            }

		            return hexChars.join('');
		        },

		        /**
		         * Converts a hex string to a word array.
		         *
		         * @param {string} hexStr The hex string.
		         *
		         * @return {WordArray} The word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
		         */
		        parse: function (hexStr) {
		            // Shortcut
		            var hexStrLength = hexStr.length;

		            // Convert
		            var words = [];
		            for (var i = 0; i < hexStrLength; i += 2) {
		                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
		            }

		            return new WordArray.init(words, hexStrLength / 2);
		        }
		    };

		    /**
		     * Latin1 encoding strategy.
		     */
		    var Latin1 = C_enc.Latin1 = {
		        /**
		         * Converts a word array to a Latin1 string.
		         *
		         * @param {WordArray} wordArray The word array.
		         *
		         * @return {string} The Latin1 string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
		         */
		        stringify: function (wordArray) {
		            // Shortcuts
		            var words = wordArray.words;
		            var sigBytes = wordArray.sigBytes;

		            // Convert
		            var latin1Chars = [];
		            for (var i = 0; i < sigBytes; i++) {
		                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
		                latin1Chars.push(String.fromCharCode(bite));
		            }

		            return latin1Chars.join('');
		        },

		        /**
		         * Converts a Latin1 string to a word array.
		         *
		         * @param {string} latin1Str The Latin1 string.
		         *
		         * @return {WordArray} The word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
		         */
		        parse: function (latin1Str) {
		            // Shortcut
		            var latin1StrLength = latin1Str.length;

		            // Convert
		            var words = [];
		            for (var i = 0; i < latin1StrLength; i++) {
		                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
		            }

		            return new WordArray.init(words, latin1StrLength);
		        }
		    };

		    /**
		     * UTF-8 encoding strategy.
		     */
		    var Utf8 = C_enc.Utf8 = {
		        /**
		         * Converts a word array to a UTF-8 string.
		         *
		         * @param {WordArray} wordArray The word array.
		         *
		         * @return {string} The UTF-8 string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
		         */
		        stringify: function (wordArray) {
		            try {
		                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
		            } catch (e) {
		                throw new Error('Malformed UTF-8 data');
		            }
		        },

		        /**
		         * Converts a UTF-8 string to a word array.
		         *
		         * @param {string} utf8Str The UTF-8 string.
		         *
		         * @return {WordArray} The word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
		         */
		        parse: function (utf8Str) {
		            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
		        }
		    };

		    /**
		     * Abstract buffered block algorithm template.
		     *
		     * The property blockSize must be implemented in a concrete subtype.
		     *
		     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
		     */
		    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
		        /**
		         * Resets this block algorithm's data buffer to its initial state.
		         *
		         * @example
		         *
		         *     bufferedBlockAlgorithm.reset();
		         */
		        reset: function () {
		            // Initial values
		            this._data = new WordArray.init();
		            this._nDataBytes = 0;
		        },

		        /**
		         * Adds new data to this block algorithm's buffer.
		         *
		         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
		         *
		         * @example
		         *
		         *     bufferedBlockAlgorithm._append('data');
		         *     bufferedBlockAlgorithm._append(wordArray);
		         */
		        _append: function (data) {
		            // Convert string to WordArray, else assume WordArray already
		            if (typeof data == 'string') {
		                data = Utf8.parse(data);
		            }

		            // Append
		            this._data.concat(data);
		            this._nDataBytes += data.sigBytes;
		        },

		        /**
		         * Processes available data blocks.
		         *
		         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
		         *
		         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
		         *
		         * @return {WordArray} The processed data.
		         *
		         * @example
		         *
		         *     var processedData = bufferedBlockAlgorithm._process();
		         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
		         */
		        _process: function (doFlush) {
		            // Shortcuts
		            var data = this._data;
		            var dataWords = data.words;
		            var dataSigBytes = data.sigBytes;
		            var blockSize = this.blockSize;
		            var blockSizeBytes = blockSize * 4;

		            // Count blocks ready
		            var nBlocksReady = dataSigBytes / blockSizeBytes;
		            if (doFlush) {
		                // Round up to include partial blocks
		                nBlocksReady = Math.ceil(nBlocksReady);
		            } else {
		                // Round down to include only full blocks,
		                // less the number of blocks that must remain in the buffer
		                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
		            }

		            // Count words ready
		            var nWordsReady = nBlocksReady * blockSize;

		            // Count bytes ready
		            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

		            // Process blocks
		            if (nWordsReady) {
		                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
		                    // Perform concrete-algorithm logic
		                    this._doProcessBlock(dataWords, offset);
		                }

		                // Remove processed words
		                var processedWords = dataWords.splice(0, nWordsReady);
		                data.sigBytes -= nBytesReady;
		            }

		            // Return processed words
		            return new WordArray.init(processedWords, nBytesReady);
		        },

		        /**
		         * Creates a copy of this object.
		         *
		         * @return {Object} The clone.
		         *
		         * @example
		         *
		         *     var clone = bufferedBlockAlgorithm.clone();
		         */
		        clone: function () {
		            var clone = Base.clone.call(this);
		            clone._data = this._data.clone();

		            return clone;
		        },

		        _minBufferSize: 0
		    });

		    /**
		     * Abstract hasher template.
		     *
		     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
		     */
		    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
		        /**
		         * Configuration options.
		         */
		        cfg: Base.extend(),

		        /**
		         * Initializes a newly created hasher.
		         *
		         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
		         *
		         * @example
		         *
		         *     var hasher = CryptoJS.algo.SHA256.create();
		         */
		        init: function (cfg) {
		            // Apply config defaults
		            this.cfg = this.cfg.extend(cfg);

		            // Set initial values
		            this.reset();
		        },

		        /**
		         * Resets this hasher to its initial state.
		         *
		         * @example
		         *
		         *     hasher.reset();
		         */
		        reset: function () {
		            // Reset data buffer
		            BufferedBlockAlgorithm.reset.call(this);

		            // Perform concrete-hasher logic
		            this._doReset();
		        },

		        /**
		         * Updates this hasher with a message.
		         *
		         * @param {WordArray|string} messageUpdate The message to append.
		         *
		         * @return {Hasher} This hasher.
		         *
		         * @example
		         *
		         *     hasher.update('message');
		         *     hasher.update(wordArray);
		         */
		        update: function (messageUpdate) {
		            // Append
		            this._append(messageUpdate);

		            // Update the hash
		            this._process();

		            // Chainable
		            return this;
		        },

		        /**
		         * Finalizes the hash computation.
		         * Note that the finalize operation is effectively a destructive, read-once operation.
		         *
		         * @param {WordArray|string} messageUpdate (Optional) A final message update.
		         *
		         * @return {WordArray} The hash.
		         *
		         * @example
		         *
		         *     var hash = hasher.finalize();
		         *     var hash = hasher.finalize('message');
		         *     var hash = hasher.finalize(wordArray);
		         */
		        finalize: function (messageUpdate) {
		            // Final message update
		            if (messageUpdate) {
		                this._append(messageUpdate);
		            }

		            // Perform concrete-hasher logic
		            var hash = this._doFinalize();

		            return hash;
		        },

		        blockSize: 512/32,

		        /**
		         * Creates a shortcut function to a hasher's object interface.
		         *
		         * @param {Hasher} hasher The hasher to create a helper for.
		         *
		         * @return {Function} The shortcut function.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
		         */
		        _createHelper: function (hasher) {
		            return function (message, cfg) {
		                return new hasher.init(cfg).finalize(message);
		            };
		        },

		        /**
		         * Creates a shortcut function to the HMAC's object interface.
		         *
		         * @param {Hasher} hasher The hasher to use in this HMAC helper.
		         *
		         * @return {Function} The shortcut function.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
		         */
		        _createHmacHelper: function (hasher) {
		            return function (message, key) {
		                return new C_algo.HMAC.init(hasher, key).finalize(message);
		            };
		        }
		    });

		    /**
		     * Algorithm namespace.
		     */
		    var C_algo = C.algo = {};

		    return C;
		}(Math));


		return CryptoJS;

	}));

/***/ },
/* 3 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    if (superCtor) {
	      ctor.super_ = superCtor
	      ctor.prototype = Object.create(superCtor.prototype, {
	        constructor: {
	          value: ctor,
	          enumerable: false,
	          writable: true,
	          configurable: true
	        }
	      })
	    }
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    if (superCtor) {
	      ctor.super_ = superCtor
	      var TempCtor = function () {}
	      TempCtor.prototype = superCtor.prototype
	      ctor.prototype = new TempCtor()
	      ctor.prototype.constructor = ctor
	    }
	  }
	}


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {(function (module, exports) {
	  'use strict';

	  // Utils
	  function assert (val, msg) {
	    if (!val) throw new Error(msg || 'Assertion failed');
	  }

	  // Could use `inherits` module, but don't want to move from single file
	  // architecture yet.
	  function inherits (ctor, superCtor) {
	    ctor.super_ = superCtor;
	    var TempCtor = function () {};
	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  }

	  // BN

	  function BN (number, base, endian) {
	    if (BN.isBN(number)) {
	      return number;
	    }

	    this.negative = 0;
	    this.words = null;
	    this.length = 0;

	    // Reduction context
	    this.red = null;

	    if (number !== null) {
	      if (base === 'le' || base === 'be') {
	        endian = base;
	        base = 10;
	      }

	      this._init(number || 0, base || 10, endian || 'be');
	    }
	  }
	  if (typeof module === 'object') {
	    module.exports = BN;
	  } else {
	    exports.BN = BN;
	  }

	  BN.BN = BN;
	  BN.wordSize = 26;

	  var Buffer;
	  try {
	    Buffer = __webpack_require__(421).Buffer;
	  } catch (e) {
	  }

	  BN.isBN = function isBN (num) {
	    if (num instanceof BN) {
	      return true;
	    }

	    return num !== null && typeof num === 'object' &&
	      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
	  };

	  BN.max = function max (left, right) {
	    if (left.cmp(right) > 0) return left;
	    return right;
	  };

	  BN.min = function min (left, right) {
	    if (left.cmp(right) < 0) return left;
	    return right;
	  };

	  BN.prototype._init = function init (number, base, endian) {
	    if (typeof number === 'number') {
	      return this._initNumber(number, base, endian);
	    }

	    if (typeof number === 'object') {
	      return this._initArray(number, base, endian);
	    }

	    if (base === 'hex') {
	      base = 16;
	    }
	    assert(base === (base | 0) && base >= 2 && base <= 36);

	    number = number.toString().replace(/\s+/g, '');
	    var start = 0;
	    if (number[0] === '-') {
	      start++;
	    }

	    if (base === 16) {
	      this._parseHex(number, start);
	    } else {
	      this._parseBase(number, base, start);
	    }

	    if (number[0] === '-') {
	      this.negative = 1;
	    }

	    this.strip();

	    if (endian !== 'le') return;

	    this._initArray(this.toArray(), base, endian);
	  };

	  BN.prototype._initNumber = function _initNumber (number, base, endian) {
	    if (number < 0) {
	      this.negative = 1;
	      number = -number;
	    }
	    if (number < 0x4000000) {
	      this.words = [ number & 0x3ffffff ];
	      this.length = 1;
	    } else if (number < 0x10000000000000) {
	      this.words = [
	        number & 0x3ffffff,
	        (number / 0x4000000) & 0x3ffffff
	      ];
	      this.length = 2;
	    } else {
	      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
	      this.words = [
	        number & 0x3ffffff,
	        (number / 0x4000000) & 0x3ffffff,
	        1
	      ];
	      this.length = 3;
	    }

	    if (endian !== 'le') return;

	    // Reverse the bytes
	    this._initArray(this.toArray(), base, endian);
	  };

	  BN.prototype._initArray = function _initArray (number, base, endian) {
	    // Perhaps a Uint8Array
	    assert(typeof number.length === 'number');
	    if (number.length <= 0) {
	      this.words = [ 0 ];
	      this.length = 1;
	      return this;
	    }

	    this.length = Math.ceil(number.length / 3);
	    this.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      this.words[i] = 0;
	    }

	    var j, w;
	    var off = 0;
	    if (endian === 'be') {
	      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
	        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
	        this.words[j] |= (w << off) & 0x3ffffff;
	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
	        off += 24;
	        if (off >= 26) {
	          off -= 26;
	          j++;
	        }
	      }
	    } else if (endian === 'le') {
	      for (i = 0, j = 0; i < number.length; i += 3) {
	        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
	        this.words[j] |= (w << off) & 0x3ffffff;
	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
	        off += 24;
	        if (off >= 26) {
	          off -= 26;
	          j++;
	        }
	      }
	    }
	    return this.strip();
	  };

	  function parseHex (str, start, end) {
	    var r = 0;
	    var len = Math.min(str.length, end);
	    for (var i = start; i < len; i++) {
	      var c = str.charCodeAt(i) - 48;

	      r <<= 4;

	      // 'a' - 'f'
	      if (c >= 49 && c <= 54) {
	        r |= c - 49 + 0xa;

	      // 'A' - 'F'
	      } else if (c >= 17 && c <= 22) {
	        r |= c - 17 + 0xa;

	      // '0' - '9'
	      } else {
	        r |= c & 0xf;
	      }
	    }
	    return r;
	  }

	  BN.prototype._parseHex = function _parseHex (number, start) {
	    // Create possibly bigger array to ensure that it fits the number
	    this.length = Math.ceil((number.length - start) / 6);
	    this.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      this.words[i] = 0;
	    }

	    var j, w;
	    // Scan 24-bit chunks and add them to the number
	    var off = 0;
	    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
	      w = parseHex(number, i, i + 6);
	      this.words[j] |= (w << off) & 0x3ffffff;
	      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
	      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
	      off += 24;
	      if (off >= 26) {
	        off -= 26;
	        j++;
	      }
	    }
	    if (i + 6 !== start) {
	      w = parseHex(number, start, i + 6);
	      this.words[j] |= (w << off) & 0x3ffffff;
	      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
	    }
	    this.strip();
	  };

	  function parseBase (str, start, end, mul) {
	    var r = 0;
	    var len = Math.min(str.length, end);
	    for (var i = start; i < len; i++) {
	      var c = str.charCodeAt(i) - 48;

	      r *= mul;

	      // 'a'
	      if (c >= 49) {
	        r += c - 49 + 0xa;

	      // 'A'
	      } else if (c >= 17) {
	        r += c - 17 + 0xa;

	      // '0' - '9'
	      } else {
	        r += c;
	      }
	    }
	    return r;
	  }

	  BN.prototype._parseBase = function _parseBase (number, base, start) {
	    // Initialize as zero
	    this.words = [ 0 ];
	    this.length = 1;

	    // Find length of limb in base
	    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
	      limbLen++;
	    }
	    limbLen--;
	    limbPow = (limbPow / base) | 0;

	    var total = number.length - start;
	    var mod = total % limbLen;
	    var end = Math.min(total, total - mod) + start;

	    var word = 0;
	    for (var i = start; i < end; i += limbLen) {
	      word = parseBase(number, i, i + limbLen, base);

	      this.imuln(limbPow);
	      if (this.words[0] + word < 0x4000000) {
	        this.words[0] += word;
	      } else {
	        this._iaddn(word);
	      }
	    }

	    if (mod !== 0) {
	      var pow = 1;
	      word = parseBase(number, i, number.length, base);

	      for (i = 0; i < mod; i++) {
	        pow *= base;
	      }

	      this.imuln(pow);
	      if (this.words[0] + word < 0x4000000) {
	        this.words[0] += word;
	      } else {
	        this._iaddn(word);
	      }
	    }
	  };

	  BN.prototype.copy = function copy (dest) {
	    dest.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      dest.words[i] = this.words[i];
	    }
	    dest.length = this.length;
	    dest.negative = this.negative;
	    dest.red = this.red;
	  };

	  BN.prototype.clone = function clone () {
	    var r = new BN(null);
	    this.copy(r);
	    return r;
	  };

	  BN.prototype._expand = function _expand (size) {
	    while (this.length < size) {
	      this.words[this.length++] = 0;
	    }
	    return this;
	  };

	  // Remove leading `0` from `this`
	  BN.prototype.strip = function strip () {
	    while (this.length > 1 && this.words[this.length - 1] === 0) {
	      this.length--;
	    }
	    return this._normSign();
	  };

	  BN.prototype._normSign = function _normSign () {
	    // -0 = 0
	    if (this.length === 1 && this.words[0] === 0) {
	      this.negative = 0;
	    }
	    return this;
	  };

	  BN.prototype.inspect = function inspect () {
	    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
	  };

	  /*

	  var zeros = [];
	  var groupSizes = [];
	  var groupBases = [];

	  var s = '';
	  var i = -1;
	  while (++i < BN.wordSize) {
	    zeros[i] = s;
	    s += '0';
	  }
	  groupSizes[0] = 0;
	  groupSizes[1] = 0;
	  groupBases[0] = 0;
	  groupBases[1] = 0;
	  var base = 2 - 1;
	  while (++base < 36 + 1) {
	    var groupSize = 0;
	    var groupBase = 1;
	    while (groupBase < (1 << BN.wordSize) / base) {
	      groupBase *= base;
	      groupSize += 1;
	    }
	    groupSizes[base] = groupSize;
	    groupBases[base] = groupBase;
	  }

	  */

	  var zeros = [
	    '',
	    '0',
	    '00',
	    '000',
	    '0000',
	    '00000',
	    '000000',
	    '0000000',
	    '00000000',
	    '000000000',
	    '0000000000',
	    '00000000000',
	    '000000000000',
	    '0000000000000',
	    '00000000000000',
	    '000000000000000',
	    '0000000000000000',
	    '00000000000000000',
	    '000000000000000000',
	    '0000000000000000000',
	    '00000000000000000000',
	    '000000000000000000000',
	    '0000000000000000000000',
	    '00000000000000000000000',
	    '000000000000000000000000',
	    '0000000000000000000000000'
	  ];

	  var groupSizes = [
	    0, 0,
	    25, 16, 12, 11, 10, 9, 8,
	    8, 7, 7, 7, 7, 6, 6,
	    6, 6, 6, 6, 6, 5, 5,
	    5, 5, 5, 5, 5, 5, 5,
	    5, 5, 5, 5, 5, 5, 5
	  ];

	  var groupBases = [
	    0, 0,
	    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
	    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
	    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
	    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
	    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
	  ];

	  BN.prototype.toString = function toString (base, padding) {
	    base = base || 10;
	    padding = padding | 0 || 1;

	    var out;
	    if (base === 16 || base === 'hex') {
	      out = '';
	      var off = 0;
	      var carry = 0;
	      for (var i = 0; i < this.length; i++) {
	        var w = this.words[i];
	        var word = (((w << off) | carry) & 0xffffff).toString(16);
	        carry = (w >>> (24 - off)) & 0xffffff;
	        if (carry !== 0 || i !== this.length - 1) {
	          out = zeros[6 - word.length] + word + out;
	        } else {
	          out = word + out;
	        }
	        off += 2;
	        if (off >= 26) {
	          off -= 26;
	          i--;
	        }
	      }
	      if (carry !== 0) {
	        out = carry.toString(16) + out;
	      }
	      while (out.length % padding !== 0) {
	        out = '0' + out;
	      }
	      if (this.negative !== 0) {
	        out = '-' + out;
	      }
	      return out;
	    }

	    if (base === (base | 0) && base >= 2 && base <= 36) {
	      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
	      var groupSize = groupSizes[base];
	      // var groupBase = Math.pow(base, groupSize);
	      var groupBase = groupBases[base];
	      out = '';
	      var c = this.clone();
	      c.negative = 0;
	      while (!c.isZero()) {
	        var r = c.modn(groupBase).toString(base);
	        c = c.idivn(groupBase);

	        if (!c.isZero()) {
	          out = zeros[groupSize - r.length] + r + out;
	        } else {
	          out = r + out;
	        }
	      }
	      if (this.isZero()) {
	        out = '0' + out;
	      }
	      while (out.length % padding !== 0) {
	        out = '0' + out;
	      }
	      if (this.negative !== 0) {
	        out = '-' + out;
	      }
	      return out;
	    }

	    assert(false, 'Base should be between 2 and 36');
	  };

	  BN.prototype.toNumber = function toNumber () {
	    var ret = this.words[0];
	    if (this.length === 2) {
	      ret += this.words[1] * 0x4000000;
	    } else if (this.length === 3 && this.words[2] === 0x01) {
	      // NOTE: at this stage it is known that the top bit is set
	      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
	    } else if (this.length > 2) {
	      assert(false, 'Number can only safely store up to 53 bits');
	    }
	    return (this.negative !== 0) ? -ret : ret;
	  };

	  BN.prototype.toJSON = function toJSON () {
	    return this.toString(16);
	  };

	  BN.prototype.toBuffer = function toBuffer (endian, length) {
	    assert(typeof Buffer !== 'undefined');
	    return this.toArrayLike(Buffer, endian, length);
	  };

	  BN.prototype.toArray = function toArray (endian, length) {
	    return this.toArrayLike(Array, endian, length);
	  };

	  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
	    var byteLength = this.byteLength();
	    var reqLength = length || Math.max(1, byteLength);
	    assert(byteLength <= reqLength, 'byte array longer than desired length');
	    assert(reqLength > 0, 'Requested array length <= 0');

	    this.strip();
	    var littleEndian = endian === 'le';
	    var res = new ArrayType(reqLength);

	    var b, i;
	    var q = this.clone();
	    if (!littleEndian) {
	      // Assume big-endian
	      for (i = 0; i < reqLength - byteLength; i++) {
	        res[i] = 0;
	      }

	      for (i = 0; !q.isZero(); i++) {
	        b = q.andln(0xff);
	        q.iushrn(8);

	        res[reqLength - i - 1] = b;
	      }
	    } else {
	      for (i = 0; !q.isZero(); i++) {
	        b = q.andln(0xff);
	        q.iushrn(8);

	        res[i] = b;
	      }

	      for (; i < reqLength; i++) {
	        res[i] = 0;
	      }
	    }

	    return res;
	  };

	  if (Math.clz32) {
	    BN.prototype._countBits = function _countBits (w) {
	      return 32 - Math.clz32(w);
	    };
	  } else {
	    BN.prototype._countBits = function _countBits (w) {
	      var t = w;
	      var r = 0;
	      if (t >= 0x1000) {
	        r += 13;
	        t >>>= 13;
	      }
	      if (t >= 0x40) {
	        r += 7;
	        t >>>= 7;
	      }
	      if (t >= 0x8) {
	        r += 4;
	        t >>>= 4;
	      }
	      if (t >= 0x02) {
	        r += 2;
	        t >>>= 2;
	      }
	      return r + t;
	    };
	  }

	  BN.prototype._zeroBits = function _zeroBits (w) {
	    // Short-cut
	    if (w === 0) return 26;

	    var t = w;
	    var r = 0;
	    if ((t & 0x1fff) === 0) {
	      r += 13;
	      t >>>= 13;
	    }
	    if ((t & 0x7f) === 0) {
	      r += 7;
	      t >>>= 7;
	    }
	    if ((t & 0xf) === 0) {
	      r += 4;
	      t >>>= 4;
	    }
	    if ((t & 0x3) === 0) {
	      r += 2;
	      t >>>= 2;
	    }
	    if ((t & 0x1) === 0) {
	      r++;
	    }
	    return r;
	  };

	  // Return number of used bits in a BN
	  BN.prototype.bitLength = function bitLength () {
	    var w = this.words[this.length - 1];
	    var hi = this._countBits(w);
	    return (this.length - 1) * 26 + hi;
	  };

	  function toBitArray (num) {
	    var w = new Array(num.bitLength());

	    for (var bit = 0; bit < w.length; bit++) {
	      var off = (bit / 26) | 0;
	      var wbit = bit % 26;

	      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
	    }

	    return w;
	  }

	  // Number of trailing zero bits
	  BN.prototype.zeroBits = function zeroBits () {
	    if (this.isZero()) return 0;

	    var r = 0;
	    for (var i = 0; i < this.length; i++) {
	      var b = this._zeroBits(this.words[i]);
	      r += b;
	      if (b !== 26) break;
	    }
	    return r;
	  };

	  BN.prototype.byteLength = function byteLength () {
	    return Math.ceil(this.bitLength() / 8);
	  };

	  BN.prototype.toTwos = function toTwos (width) {
	    if (this.negative !== 0) {
	      return this.abs().inotn(width).iaddn(1);
	    }
	    return this.clone();
	  };

	  BN.prototype.fromTwos = function fromTwos (width) {
	    if (this.testn(width - 1)) {
	      return this.notn(width).iaddn(1).ineg();
	    }
	    return this.clone();
	  };

	  BN.prototype.isNeg = function isNeg () {
	    return this.negative !== 0;
	  };

	  // Return negative clone of `this`
	  BN.prototype.neg = function neg () {
	    return this.clone().ineg();
	  };

	  BN.prototype.ineg = function ineg () {
	    if (!this.isZero()) {
	      this.negative ^= 1;
	    }

	    return this;
	  };

	  // Or `num` with `this` in-place
	  BN.prototype.iuor = function iuor (num) {
	    while (this.length < num.length) {
	      this.words[this.length++] = 0;
	    }

	    for (var i = 0; i < num.length; i++) {
	      this.words[i] = this.words[i] | num.words[i];
	    }

	    return this.strip();
	  };

	  BN.prototype.ior = function ior (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuor(num);
	  };

	  // Or `num` with `this`
	  BN.prototype.or = function or (num) {
	    if (this.length > num.length) return this.clone().ior(num);
	    return num.clone().ior(this);
	  };

	  BN.prototype.uor = function uor (num) {
	    if (this.length > num.length) return this.clone().iuor(num);
	    return num.clone().iuor(this);
	  };

	  // And `num` with `this` in-place
	  BN.prototype.iuand = function iuand (num) {
	    // b = min-length(num, this)
	    var b;
	    if (this.length > num.length) {
	      b = num;
	    } else {
	      b = this;
	    }

	    for (var i = 0; i < b.length; i++) {
	      this.words[i] = this.words[i] & num.words[i];
	    }

	    this.length = b.length;

	    return this.strip();
	  };

	  BN.prototype.iand = function iand (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuand(num);
	  };

	  // And `num` with `this`
	  BN.prototype.and = function and (num) {
	    if (this.length > num.length) return this.clone().iand(num);
	    return num.clone().iand(this);
	  };

	  BN.prototype.uand = function uand (num) {
	    if (this.length > num.length) return this.clone().iuand(num);
	    return num.clone().iuand(this);
	  };

	  // Xor `num` with `this` in-place
	  BN.prototype.iuxor = function iuxor (num) {
	    // a.length > b.length
	    var a;
	    var b;
	    if (this.length > num.length) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    for (var i = 0; i < b.length; i++) {
	      this.words[i] = a.words[i] ^ b.words[i];
	    }

	    if (this !== a) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    this.length = a.length;

	    return this.strip();
	  };

	  BN.prototype.ixor = function ixor (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuxor(num);
	  };

	  // Xor `num` with `this`
	  BN.prototype.xor = function xor (num) {
	    if (this.length > num.length) return this.clone().ixor(num);
	    return num.clone().ixor(this);
	  };

	  BN.prototype.uxor = function uxor (num) {
	    if (this.length > num.length) return this.clone().iuxor(num);
	    return num.clone().iuxor(this);
	  };

	  // Not ``this`` with ``width`` bitwidth
	  BN.prototype.inotn = function inotn (width) {
	    assert(typeof width === 'number' && width >= 0);

	    var bytesNeeded = Math.ceil(width / 26) | 0;
	    var bitsLeft = width % 26;

	    // Extend the buffer with leading zeroes
	    this._expand(bytesNeeded);

	    if (bitsLeft > 0) {
	      bytesNeeded--;
	    }

	    // Handle complete words
	    for (var i = 0; i < bytesNeeded; i++) {
	      this.words[i] = ~this.words[i] & 0x3ffffff;
	    }

	    // Handle the residue
	    if (bitsLeft > 0) {
	      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
	    }

	    // And remove leading zeroes
	    return this.strip();
	  };

	  BN.prototype.notn = function notn (width) {
	    return this.clone().inotn(width);
	  };

	  // Set `bit` of `this`
	  BN.prototype.setn = function setn (bit, val) {
	    assert(typeof bit === 'number' && bit >= 0);

	    var off = (bit / 26) | 0;
	    var wbit = bit % 26;

	    this._expand(off + 1);

	    if (val) {
	      this.words[off] = this.words[off] | (1 << wbit);
	    } else {
	      this.words[off] = this.words[off] & ~(1 << wbit);
	    }

	    return this.strip();
	  };

	  // Add `num` to `this` in-place
	  BN.prototype.iadd = function iadd (num) {
	    var r;

	    // negative + positive
	    if (this.negative !== 0 && num.negative === 0) {
	      this.negative = 0;
	      r = this.isub(num);
	      this.negative ^= 1;
	      return this._normSign();

	    // positive + negative
	    } else if (this.negative === 0 && num.negative !== 0) {
	      num.negative = 0;
	      r = this.isub(num);
	      num.negative = 1;
	      return r._normSign();
	    }

	    // a.length > b.length
	    var a, b;
	    if (this.length > num.length) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    var carry = 0;
	    for (var i = 0; i < b.length; i++) {
	      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
	      this.words[i] = r & 0x3ffffff;
	      carry = r >>> 26;
	    }
	    for (; carry !== 0 && i < a.length; i++) {
	      r = (a.words[i] | 0) + carry;
	      this.words[i] = r & 0x3ffffff;
	      carry = r >>> 26;
	    }

	    this.length = a.length;
	    if (carry !== 0) {
	      this.words[this.length] = carry;
	      this.length++;
	    // Copy the rest of the words
	    } else if (a !== this) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    return this;
	  };

	  // Add `num` to `this`
	  BN.prototype.add = function add (num) {
	    var res;
	    if (num.negative !== 0 && this.negative === 0) {
	      num.negative = 0;
	      res = this.sub(num);
	      num.negative ^= 1;
	      return res;
	    } else if (num.negative === 0 && this.negative !== 0) {
	      this.negative = 0;
	      res = num.sub(this);
	      this.negative = 1;
	      return res;
	    }

	    if (this.length > num.length) return this.clone().iadd(num);

	    return num.clone().iadd(this);
	  };

	  // Subtract `num` from `this` in-place
	  BN.prototype.isub = function isub (num) {
	    // this - (-num) = this + num
	    if (num.negative !== 0) {
	      num.negative = 0;
	      var r = this.iadd(num);
	      num.negative = 1;
	      return r._normSign();

	    // -this - num = -(this + num)
	    } else if (this.negative !== 0) {
	      this.negative = 0;
	      this.iadd(num);
	      this.negative = 1;
	      return this._normSign();
	    }

	    // At this point both numbers are positive
	    var cmp = this.cmp(num);

	    // Optimization - zeroify
	    if (cmp === 0) {
	      this.negative = 0;
	      this.length = 1;
	      this.words[0] = 0;
	      return this;
	    }

	    // a > b
	    var a, b;
	    if (cmp > 0) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    var carry = 0;
	    for (var i = 0; i < b.length; i++) {
	      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
	      carry = r >> 26;
	      this.words[i] = r & 0x3ffffff;
	    }
	    for (; carry !== 0 && i < a.length; i++) {
	      r = (a.words[i] | 0) + carry;
	      carry = r >> 26;
	      this.words[i] = r & 0x3ffffff;
	    }

	    // Copy rest of the words
	    if (carry === 0 && i < a.length && a !== this) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    this.length = Math.max(this.length, i);

	    if (a !== this) {
	      this.negative = 1;
	    }

	    return this.strip();
	  };

	  // Subtract `num` from `this`
	  BN.prototype.sub = function sub (num) {
	    return this.clone().isub(num);
	  };

	  function smallMulTo (self, num, out) {
	    out.negative = num.negative ^ self.negative;
	    var len = (self.length + num.length) | 0;
	    out.length = len;
	    len = (len - 1) | 0;

	    // Peel one iteration (compiler can't do it, because of code complexity)
	    var a = self.words[0] | 0;
	    var b = num.words[0] | 0;
	    var r = a * b;

	    var lo = r & 0x3ffffff;
	    var carry = (r / 0x4000000) | 0;
	    out.words[0] = lo;

	    for (var k = 1; k < len; k++) {
	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	      // note that ncarry could be >= 0x3ffffff
	      var ncarry = carry >>> 26;
	      var rword = carry & 0x3ffffff;
	      var maxJ = Math.min(k, num.length - 1);
	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
	        var i = (k - j) | 0;
	        a = self.words[i] | 0;
	        b = num.words[j] | 0;
	        r = a * b + rword;
	        ncarry += (r / 0x4000000) | 0;
	        rword = r & 0x3ffffff;
	      }
	      out.words[k] = rword | 0;
	      carry = ncarry | 0;
	    }
	    if (carry !== 0) {
	      out.words[k] = carry | 0;
	    } else {
	      out.length--;
	    }

	    return out.strip();
	  }

	  // TODO(indutny): it may be reasonable to omit it for users who don't need
	  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
	  // multiplication (like elliptic secp256k1).
	  var comb10MulTo = function comb10MulTo (self, num, out) {
	    var a = self.words;
	    var b = num.words;
	    var o = out.words;
	    var c = 0;
	    var lo;
	    var mid;
	    var hi;
	    var a0 = a[0] | 0;
	    var al0 = a0 & 0x1fff;
	    var ah0 = a0 >>> 13;
	    var a1 = a[1] | 0;
	    var al1 = a1 & 0x1fff;
	    var ah1 = a1 >>> 13;
	    var a2 = a[2] | 0;
	    var al2 = a2 & 0x1fff;
	    var ah2 = a2 >>> 13;
	    var a3 = a[3] | 0;
	    var al3 = a3 & 0x1fff;
	    var ah3 = a3 >>> 13;
	    var a4 = a[4] | 0;
	    var al4 = a4 & 0x1fff;
	    var ah4 = a4 >>> 13;
	    var a5 = a[5] | 0;
	    var al5 = a5 & 0x1fff;
	    var ah5 = a5 >>> 13;
	    var a6 = a[6] | 0;
	    var al6 = a6 & 0x1fff;
	    var ah6 = a6 >>> 13;
	    var a7 = a[7] | 0;
	    var al7 = a7 & 0x1fff;
	    var ah7 = a7 >>> 13;
	    var a8 = a[8] | 0;
	    var al8 = a8 & 0x1fff;
	    var ah8 = a8 >>> 13;
	    var a9 = a[9] | 0;
	    var al9 = a9 & 0x1fff;
	    var ah9 = a9 >>> 13;
	    var b0 = b[0] | 0;
	    var bl0 = b0 & 0x1fff;
	    var bh0 = b0 >>> 13;
	    var b1 = b[1] | 0;
	    var bl1 = b1 & 0x1fff;
	    var bh1 = b1 >>> 13;
	    var b2 = b[2] | 0;
	    var bl2 = b2 & 0x1fff;
	    var bh2 = b2 >>> 13;
	    var b3 = b[3] | 0;
	    var bl3 = b3 & 0x1fff;
	    var bh3 = b3 >>> 13;
	    var b4 = b[4] | 0;
	    var bl4 = b4 & 0x1fff;
	    var bh4 = b4 >>> 13;
	    var b5 = b[5] | 0;
	    var bl5 = b5 & 0x1fff;
	    var bh5 = b5 >>> 13;
	    var b6 = b[6] | 0;
	    var bl6 = b6 & 0x1fff;
	    var bh6 = b6 >>> 13;
	    var b7 = b[7] | 0;
	    var bl7 = b7 & 0x1fff;
	    var bh7 = b7 >>> 13;
	    var b8 = b[8] | 0;
	    var bl8 = b8 & 0x1fff;
	    var bh8 = b8 >>> 13;
	    var b9 = b[9] | 0;
	    var bl9 = b9 & 0x1fff;
	    var bh9 = b9 >>> 13;

	    out.negative = self.negative ^ num.negative;
	    out.length = 19;
	    /* k = 0 */
	    lo = Math.imul(al0, bl0);
	    mid = Math.imul(al0, bh0);
	    mid = (mid + Math.imul(ah0, bl0)) | 0;
	    hi = Math.imul(ah0, bh0);
	    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
	    w0 &= 0x3ffffff;
	    /* k = 1 */
	    lo = Math.imul(al1, bl0);
	    mid = Math.imul(al1, bh0);
	    mid = (mid + Math.imul(ah1, bl0)) | 0;
	    hi = Math.imul(ah1, bh0);
	    lo = (lo + Math.imul(al0, bl1)) | 0;
	    mid = (mid + Math.imul(al0, bh1)) | 0;
	    mid = (mid + Math.imul(ah0, bl1)) | 0;
	    hi = (hi + Math.imul(ah0, bh1)) | 0;
	    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
	    w1 &= 0x3ffffff;
	    /* k = 2 */
	    lo = Math.imul(al2, bl0);
	    mid = Math.imul(al2, bh0);
	    mid = (mid + Math.imul(ah2, bl0)) | 0;
	    hi = Math.imul(ah2, bh0);
	    lo = (lo + Math.imul(al1, bl1)) | 0;
	    mid = (mid + Math.imul(al1, bh1)) | 0;
	    mid = (mid + Math.imul(ah1, bl1)) | 0;
	    hi = (hi + Math.imul(ah1, bh1)) | 0;
	    lo = (lo + Math.imul(al0, bl2)) | 0;
	    mid = (mid + Math.imul(al0, bh2)) | 0;
	    mid = (mid + Math.imul(ah0, bl2)) | 0;
	    hi = (hi + Math.imul(ah0, bh2)) | 0;
	    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
	    w2 &= 0x3ffffff;
	    /* k = 3 */
	    lo = Math.imul(al3, bl0);
	    mid = Math.imul(al3, bh0);
	    mid = (mid + Math.imul(ah3, bl0)) | 0;
	    hi = Math.imul(ah3, bh0);
	    lo = (lo + Math.imul(al2, bl1)) | 0;
	    mid = (mid + Math.imul(al2, bh1)) | 0;
	    mid = (mid + Math.imul(ah2, bl1)) | 0;
	    hi = (hi + Math.imul(ah2, bh1)) | 0;
	    lo = (lo + Math.imul(al1, bl2)) | 0;
	    mid = (mid + Math.imul(al1, bh2)) | 0;
	    mid = (mid + Math.imul(ah1, bl2)) | 0;
	    hi = (hi + Math.imul(ah1, bh2)) | 0;
	    lo = (lo + Math.imul(al0, bl3)) | 0;
	    mid = (mid + Math.imul(al0, bh3)) | 0;
	    mid = (mid + Math.imul(ah0, bl3)) | 0;
	    hi = (hi + Math.imul(ah0, bh3)) | 0;
	    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
	    w3 &= 0x3ffffff;
	    /* k = 4 */
	    lo = Math.imul(al4, bl0);
	    mid = Math.imul(al4, bh0);
	    mid = (mid + Math.imul(ah4, bl0)) | 0;
	    hi = Math.imul(ah4, bh0);
	    lo = (lo + Math.imul(al3, bl1)) | 0;
	    mid = (mid + Math.imul(al3, bh1)) | 0;
	    mid = (mid + Math.imul(ah3, bl1)) | 0;
	    hi = (hi + Math.imul(ah3, bh1)) | 0;
	    lo = (lo + Math.imul(al2, bl2)) | 0;
	    mid = (mid + Math.imul(al2, bh2)) | 0;
	    mid = (mid + Math.imul(ah2, bl2)) | 0;
	    hi = (hi + Math.imul(ah2, bh2)) | 0;
	    lo = (lo + Math.imul(al1, bl3)) | 0;
	    mid = (mid + Math.imul(al1, bh3)) | 0;
	    mid = (mid + Math.imul(ah1, bl3)) | 0;
	    hi = (hi + Math.imul(ah1, bh3)) | 0;
	    lo = (lo + Math.imul(al0, bl4)) | 0;
	    mid = (mid + Math.imul(al0, bh4)) | 0;
	    mid = (mid + Math.imul(ah0, bl4)) | 0;
	    hi = (hi + Math.imul(ah0, bh4)) | 0;
	    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
	    w4 &= 0x3ffffff;
	    /* k = 5 */
	    lo = Math.imul(al5, bl0);
	    mid = Math.imul(al5, bh0);
	    mid = (mid + Math.imul(ah5, bl0)) | 0;
	    hi = Math.imul(ah5, bh0);
	    lo = (lo + Math.imul(al4, bl1)) | 0;
	    mid = (mid + Math.imul(al4, bh1)) | 0;
	    mid = (mid + Math.imul(ah4, bl1)) | 0;
	    hi = (hi + Math.imul(ah4, bh1)) | 0;
	    lo = (lo + Math.imul(al3, bl2)) | 0;
	    mid = (mid + Math.imul(al3, bh2)) | 0;
	    mid = (mid + Math.imul(ah3, bl2)) | 0;
	    hi = (hi + Math.imul(ah3, bh2)) | 0;
	    lo = (lo + Math.imul(al2, bl3)) | 0;
	    mid = (mid + Math.imul(al2, bh3)) | 0;
	    mid = (mid + Math.imul(ah2, bl3)) | 0;
	    hi = (hi + Math.imul(ah2, bh3)) | 0;
	    lo = (lo + Math.imul(al1, bl4)) | 0;
	    mid = (mid + Math.imul(al1, bh4)) | 0;
	    mid = (mid + Math.imul(ah1, bl4)) | 0;
	    hi = (hi + Math.imul(ah1, bh4)) | 0;
	    lo = (lo + Math.imul(al0, bl5)) | 0;
	    mid = (mid + Math.imul(al0, bh5)) | 0;
	    mid = (mid + Math.imul(ah0, bl5)) | 0;
	    hi = (hi + Math.imul(ah0, bh5)) | 0;
	    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
	    w5 &= 0x3ffffff;
	    /* k = 6 */
	    lo = Math.imul(al6, bl0);
	    mid = Math.imul(al6, bh0);
	    mid = (mid + Math.imul(ah6, bl0)) | 0;
	    hi = Math.imul(ah6, bh0);
	    lo = (lo + Math.imul(al5, bl1)) | 0;
	    mid = (mid + Math.imul(al5, bh1)) | 0;
	    mid = (mid + Math.imul(ah5, bl1)) | 0;
	    hi = (hi + Math.imul(ah5, bh1)) | 0;
	    lo = (lo + Math.imul(al4, bl2)) | 0;
	    mid = (mid + Math.imul(al4, bh2)) | 0;
	    mid = (mid + Math.imul(ah4, bl2)) | 0;
	    hi = (hi + Math.imul(ah4, bh2)) | 0;
	    lo = (lo + Math.imul(al3, bl3)) | 0;
	    mid = (mid + Math.imul(al3, bh3)) | 0;
	    mid = (mid + Math.imul(ah3, bl3)) | 0;
	    hi = (hi + Math.imul(ah3, bh3)) | 0;
	    lo = (lo + Math.imul(al2, bl4)) | 0;
	    mid = (mid + Math.imul(al2, bh4)) | 0;
	    mid = (mid + Math.imul(ah2, bl4)) | 0;
	    hi = (hi + Math.imul(ah2, bh4)) | 0;
	    lo = (lo + Math.imul(al1, bl5)) | 0;
	    mid = (mid + Math.imul(al1, bh5)) | 0;
	    mid = (mid + Math.imul(ah1, bl5)) | 0;
	    hi = (hi + Math.imul(ah1, bh5)) | 0;
	    lo = (lo + Math.imul(al0, bl6)) | 0;
	    mid = (mid + Math.imul(al0, bh6)) | 0;
	    mid = (mid + Math.imul(ah0, bl6)) | 0;
	    hi = (hi + Math.imul(ah0, bh6)) | 0;
	    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
	    w6 &= 0x3ffffff;
	    /* k = 7 */
	    lo = Math.imul(al7, bl0);
	    mid = Math.imul(al7, bh0);
	    mid = (mid + Math.imul(ah7, bl0)) | 0;
	    hi = Math.imul(ah7, bh0);
	    lo = (lo + Math.imul(al6, bl1)) | 0;
	    mid = (mid + Math.imul(al6, bh1)) | 0;
	    mid = (mid + Math.imul(ah6, bl1)) | 0;
	    hi = (hi + Math.imul(ah6, bh1)) | 0;
	    lo = (lo + Math.imul(al5, bl2)) | 0;
	    mid = (mid + Math.imul(al5, bh2)) | 0;
	    mid = (mid + Math.imul(ah5, bl2)) | 0;
	    hi = (hi + Math.imul(ah5, bh2)) | 0;
	    lo = (lo + Math.imul(al4, bl3)) | 0;
	    mid = (mid + Math.imul(al4, bh3)) | 0;
	    mid = (mid + Math.imul(ah4, bl3)) | 0;
	    hi = (hi + Math.imul(ah4, bh3)) | 0;
	    lo = (lo + Math.imul(al3, bl4)) | 0;
	    mid = (mid + Math.imul(al3, bh4)) | 0;
	    mid = (mid + Math.imul(ah3, bl4)) | 0;
	    hi = (hi + Math.imul(ah3, bh4)) | 0;
	    lo = (lo + Math.imul(al2, bl5)) | 0;
	    mid = (mid + Math.imul(al2, bh5)) | 0;
	    mid = (mid + Math.imul(ah2, bl5)) | 0;
	    hi = (hi + Math.imul(ah2, bh5)) | 0;
	    lo = (lo + Math.imul(al1, bl6)) | 0;
	    mid = (mid + Math.imul(al1, bh6)) | 0;
	    mid = (mid + Math.imul(ah1, bl6)) | 0;
	    hi = (hi + Math.imul(ah1, bh6)) | 0;
	    lo = (lo + Math.imul(al0, bl7)) | 0;
	    mid = (mid + Math.imul(al0, bh7)) | 0;
	    mid = (mid + Math.imul(ah0, bl7)) | 0;
	    hi = (hi + Math.imul(ah0, bh7)) | 0;
	    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
	    w7 &= 0x3ffffff;
	    /* k = 8 */
	    lo = Math.imul(al8, bl0);
	    mid = Math.imul(al8, bh0);
	    mid = (mid + Math.imul(ah8, bl0)) | 0;
	    hi = Math.imul(ah8, bh0);
	    lo = (lo + Math.imul(al7, bl1)) | 0;
	    mid = (mid + Math.imul(al7, bh1)) | 0;
	    mid = (mid + Math.imul(ah7, bl1)) | 0;
	    hi = (hi + Math.imul(ah7, bh1)) | 0;
	    lo = (lo + Math.imul(al6, bl2)) | 0;
	    mid = (mid + Math.imul(al6, bh2)) | 0;
	    mid = (mid + Math.imul(ah6, bl2)) | 0;
	    hi = (hi + Math.imul(ah6, bh2)) | 0;
	    lo = (lo + Math.imul(al5, bl3)) | 0;
	    mid = (mid + Math.imul(al5, bh3)) | 0;
	    mid = (mid + Math.imul(ah5, bl3)) | 0;
	    hi = (hi + Math.imul(ah5, bh3)) | 0;
	    lo = (lo + Math.imul(al4, bl4)) | 0;
	    mid = (mid + Math.imul(al4, bh4)) | 0;
	    mid = (mid + Math.imul(ah4, bl4)) | 0;
	    hi = (hi + Math.imul(ah4, bh4)) | 0;
	    lo = (lo + Math.imul(al3, bl5)) | 0;
	    mid = (mid + Math.imul(al3, bh5)) | 0;
	    mid = (mid + Math.imul(ah3, bl5)) | 0;
	    hi = (hi + Math.imul(ah3, bh5)) | 0;
	    lo = (lo + Math.imul(al2, bl6)) | 0;
	    mid = (mid + Math.imul(al2, bh6)) | 0;
	    mid = (mid + Math.imul(ah2, bl6)) | 0;
	    hi = (hi + Math.imul(ah2, bh6)) | 0;
	    lo = (lo + Math.imul(al1, bl7)) | 0;
	    mid = (mid + Math.imul(al1, bh7)) | 0;
	    mid = (mid + Math.imul(ah1, bl7)) | 0;
	    hi = (hi + Math.imul(ah1, bh7)) | 0;
	    lo = (lo + Math.imul(al0, bl8)) | 0;
	    mid = (mid + Math.imul(al0, bh8)) | 0;
	    mid = (mid + Math.imul(ah0, bl8)) | 0;
	    hi = (hi + Math.imul(ah0, bh8)) | 0;
	    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
	    w8 &= 0x3ffffff;
	    /* k = 9 */
	    lo = Math.imul(al9, bl0);
	    mid = Math.imul(al9, bh0);
	    mid = (mid + Math.imul(ah9, bl0)) | 0;
	    hi = Math.imul(ah9, bh0);
	    lo = (lo + Math.imul(al8, bl1)) | 0;
	    mid = (mid + Math.imul(al8, bh1)) | 0;
	    mid = (mid + Math.imul(ah8, bl1)) | 0;
	    hi = (hi + Math.imul(ah8, bh1)) | 0;
	    lo = (lo + Math.imul(al7, bl2)) | 0;
	    mid = (mid + Math.imul(al7, bh2)) | 0;
	    mid = (mid + Math.imul(ah7, bl2)) | 0;
	    hi = (hi + Math.imul(ah7, bh2)) | 0;
	    lo = (lo + Math.imul(al6, bl3)) | 0;
	    mid = (mid + Math.imul(al6, bh3)) | 0;
	    mid = (mid + Math.imul(ah6, bl3)) | 0;
	    hi = (hi + Math.imul(ah6, bh3)) | 0;
	    lo = (lo + Math.imul(al5, bl4)) | 0;
	    mid = (mid + Math.imul(al5, bh4)) | 0;
	    mid = (mid + Math.imul(ah5, bl4)) | 0;
	    hi = (hi + Math.imul(ah5, bh4)) | 0;
	    lo = (lo + Math.imul(al4, bl5)) | 0;
	    mid = (mid + Math.imul(al4, bh5)) | 0;
	    mid = (mid + Math.imul(ah4, bl5)) | 0;
	    hi = (hi + Math.imul(ah4, bh5)) | 0;
	    lo = (lo + Math.imul(al3, bl6)) | 0;
	    mid = (mid + Math.imul(al3, bh6)) | 0;
	    mid = (mid + Math.imul(ah3, bl6)) | 0;
	    hi = (hi + Math.imul(ah3, bh6)) | 0;
	    lo = (lo + Math.imul(al2, bl7)) | 0;
	    mid = (mid + Math.imul(al2, bh7)) | 0;
	    mid = (mid + Math.imul(ah2, bl7)) | 0;
	    hi = (hi + Math.imul(ah2, bh7)) | 0;
	    lo = (lo + Math.imul(al1, bl8)) | 0;
	    mid = (mid + Math.imul(al1, bh8)) | 0;
	    mid = (mid + Math.imul(ah1, bl8)) | 0;
	    hi = (hi + Math.imul(ah1, bh8)) | 0;
	    lo = (lo + Math.imul(al0, bl9)) | 0;
	    mid = (mid + Math.imul(al0, bh9)) | 0;
	    mid = (mid + Math.imul(ah0, bl9)) | 0;
	    hi = (hi + Math.imul(ah0, bh9)) | 0;
	    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
	    w9 &= 0x3ffffff;
	    /* k = 10 */
	    lo = Math.imul(al9, bl1);
	    mid = Math.imul(al9, bh1);
	    mid = (mid + Math.imul(ah9, bl1)) | 0;
	    hi = Math.imul(ah9, bh1);
	    lo = (lo + Math.imul(al8, bl2)) | 0;
	    mid = (mid + Math.imul(al8, bh2)) | 0;
	    mid = (mid + Math.imul(ah8, bl2)) | 0;
	    hi = (hi + Math.imul(ah8, bh2)) | 0;
	    lo = (lo + Math.imul(al7, bl3)) | 0;
	    mid = (mid + Math.imul(al7, bh3)) | 0;
	    mid = (mid + Math.imul(ah7, bl3)) | 0;
	    hi = (hi + Math.imul(ah7, bh3)) | 0;
	    lo = (lo + Math.imul(al6, bl4)) | 0;
	    mid = (mid + Math.imul(al6, bh4)) | 0;
	    mid = (mid + Math.imul(ah6, bl4)) | 0;
	    hi = (hi + Math.imul(ah6, bh4)) | 0;
	    lo = (lo + Math.imul(al5, bl5)) | 0;
	    mid = (mid + Math.imul(al5, bh5)) | 0;
	    mid = (mid + Math.imul(ah5, bl5)) | 0;
	    hi = (hi + Math.imul(ah5, bh5)) | 0;
	    lo = (lo + Math.imul(al4, bl6)) | 0;
	    mid = (mid + Math.imul(al4, bh6)) | 0;
	    mid = (mid + Math.imul(ah4, bl6)) | 0;
	    hi = (hi + Math.imul(ah4, bh6)) | 0;
	    lo = (lo + Math.imul(al3, bl7)) | 0;
	    mid = (mid + Math.imul(al3, bh7)) | 0;
	    mid = (mid + Math.imul(ah3, bl7)) | 0;
	    hi = (hi + Math.imul(ah3, bh7)) | 0;
	    lo = (lo + Math.imul(al2, bl8)) | 0;
	    mid = (mid + Math.imul(al2, bh8)) | 0;
	    mid = (mid + Math.imul(ah2, bl8)) | 0;
	    hi = (hi + Math.imul(ah2, bh8)) | 0;
	    lo = (lo + Math.imul(al1, bl9)) | 0;
	    mid = (mid + Math.imul(al1, bh9)) | 0;
	    mid = (mid + Math.imul(ah1, bl9)) | 0;
	    hi = (hi + Math.imul(ah1, bh9)) | 0;
	    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
	    w10 &= 0x3ffffff;
	    /* k = 11 */
	    lo = Math.imul(al9, bl2);
	    mid = Math.imul(al9, bh2);
	    mid = (mid + Math.imul(ah9, bl2)) | 0;
	    hi = Math.imul(ah9, bh2);
	    lo = (lo + Math.imul(al8, bl3)) | 0;
	    mid = (mid + Math.imul(al8, bh3)) | 0;
	    mid = (mid + Math.imul(ah8, bl3)) | 0;
	    hi = (hi + Math.imul(ah8, bh3)) | 0;
	    lo = (lo + Math.imul(al7, bl4)) | 0;
	    mid = (mid + Math.imul(al7, bh4)) | 0;
	    mid = (mid + Math.imul(ah7, bl4)) | 0;
	    hi = (hi + Math.imul(ah7, bh4)) | 0;
	    lo = (lo + Math.imul(al6, bl5)) | 0;
	    mid = (mid + Math.imul(al6, bh5)) | 0;
	    mid = (mid + Math.imul(ah6, bl5)) | 0;
	    hi = (hi + Math.imul(ah6, bh5)) | 0;
	    lo = (lo + Math.imul(al5, bl6)) | 0;
	    mid = (mid + Math.imul(al5, bh6)) | 0;
	    mid = (mid + Math.imul(ah5, bl6)) | 0;
	    hi = (hi + Math.imul(ah5, bh6)) | 0;
	    lo = (lo + Math.imul(al4, bl7)) | 0;
	    mid = (mid + Math.imul(al4, bh7)) | 0;
	    mid = (mid + Math.imul(ah4, bl7)) | 0;
	    hi = (hi + Math.imul(ah4, bh7)) | 0;
	    lo = (lo + Math.imul(al3, bl8)) | 0;
	    mid = (mid + Math.imul(al3, bh8)) | 0;
	    mid = (mid + Math.imul(ah3, bl8)) | 0;
	    hi = (hi + Math.imul(ah3, bh8)) | 0;
	    lo = (lo + Math.imul(al2, bl9)) | 0;
	    mid = (mid + Math.imul(al2, bh9)) | 0;
	    mid = (mid + Math.imul(ah2, bl9)) | 0;
	    hi = (hi + Math.imul(ah2, bh9)) | 0;
	    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
	    w11 &= 0x3ffffff;
	    /* k = 12 */
	    lo = Math.imul(al9, bl3);
	    mid = Math.imul(al9, bh3);
	    mid = (mid + Math.imul(ah9, bl3)) | 0;
	    hi = Math.imul(ah9, bh3);
	    lo = (lo + Math.imul(al8, bl4)) | 0;
	    mid = (mid + Math.imul(al8, bh4)) | 0;
	    mid = (mid + Math.imul(ah8, bl4)) | 0;
	    hi = (hi + Math.imul(ah8, bh4)) | 0;
	    lo = (lo + Math.imul(al7, bl5)) | 0;
	    mid = (mid + Math.imul(al7, bh5)) | 0;
	    mid = (mid + Math.imul(ah7, bl5)) | 0;
	    hi = (hi + Math.imul(ah7, bh5)) | 0;
	    lo = (lo + Math.imul(al6, bl6)) | 0;
	    mid = (mid + Math.imul(al6, bh6)) | 0;
	    mid = (mid + Math.imul(ah6, bl6)) | 0;
	    hi = (hi + Math.imul(ah6, bh6)) | 0;
	    lo = (lo + Math.imul(al5, bl7)) | 0;
	    mid = (mid + Math.imul(al5, bh7)) | 0;
	    mid = (mid + Math.imul(ah5, bl7)) | 0;
	    hi = (hi + Math.imul(ah5, bh7)) | 0;
	    lo = (lo + Math.imul(al4, bl8)) | 0;
	    mid = (mid + Math.imul(al4, bh8)) | 0;
	    mid = (mid + Math.imul(ah4, bl8)) | 0;
	    hi = (hi + Math.imul(ah4, bh8)) | 0;
	    lo = (lo + Math.imul(al3, bl9)) | 0;
	    mid = (mid + Math.imul(al3, bh9)) | 0;
	    mid = (mid + Math.imul(ah3, bl9)) | 0;
	    hi = (hi + Math.imul(ah3, bh9)) | 0;
	    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
	    w12 &= 0x3ffffff;
	    /* k = 13 */
	    lo = Math.imul(al9, bl4);
	    mid = Math.imul(al9, bh4);
	    mid = (mid + Math.imul(ah9, bl4)) | 0;
	    hi = Math.imul(ah9, bh4);
	    lo = (lo + Math.imul(al8, bl5)) | 0;
	    mid = (mid + Math.imul(al8, bh5)) | 0;
	    mid = (mid + Math.imul(ah8, bl5)) | 0;
	    hi = (hi + Math.imul(ah8, bh5)) | 0;
	    lo = (lo + Math.imul(al7, bl6)) | 0;
	    mid = (mid + Math.imul(al7, bh6)) | 0;
	    mid = (mid + Math.imul(ah7, bl6)) | 0;
	    hi = (hi + Math.imul(ah7, bh6)) | 0;
	    lo = (lo + Math.imul(al6, bl7)) | 0;
	    mid = (mid + Math.imul(al6, bh7)) | 0;
	    mid = (mid + Math.imul(ah6, bl7)) | 0;
	    hi = (hi + Math.imul(ah6, bh7)) | 0;
	    lo = (lo + Math.imul(al5, bl8)) | 0;
	    mid = (mid + Math.imul(al5, bh8)) | 0;
	    mid = (mid + Math.imul(ah5, bl8)) | 0;
	    hi = (hi + Math.imul(ah5, bh8)) | 0;
	    lo = (lo + Math.imul(al4, bl9)) | 0;
	    mid = (mid + Math.imul(al4, bh9)) | 0;
	    mid = (mid + Math.imul(ah4, bl9)) | 0;
	    hi = (hi + Math.imul(ah4, bh9)) | 0;
	    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
	    w13 &= 0x3ffffff;
	    /* k = 14 */
	    lo = Math.imul(al9, bl5);
	    mid = Math.imul(al9, bh5);
	    mid = (mid + Math.imul(ah9, bl5)) | 0;
	    hi = Math.imul(ah9, bh5);
	    lo = (lo + Math.imul(al8, bl6)) | 0;
	    mid = (mid + Math.imul(al8, bh6)) | 0;
	    mid = (mid + Math.imul(ah8, bl6)) | 0;
	    hi = (hi + Math.imul(ah8, bh6)) | 0;
	    lo = (lo + Math.imul(al7, bl7)) | 0;
	    mid = (mid + Math.imul(al7, bh7)) | 0;
	    mid = (mid + Math.imul(ah7, bl7)) | 0;
	    hi = (hi + Math.imul(ah7, bh7)) | 0;
	    lo = (lo + Math.imul(al6, bl8)) | 0;
	    mid = (mid + Math.imul(al6, bh8)) | 0;
	    mid = (mid + Math.imul(ah6, bl8)) | 0;
	    hi = (hi + Math.imul(ah6, bh8)) | 0;
	    lo = (lo + Math.imul(al5, bl9)) | 0;
	    mid = (mid + Math.imul(al5, bh9)) | 0;
	    mid = (mid + Math.imul(ah5, bl9)) | 0;
	    hi = (hi + Math.imul(ah5, bh9)) | 0;
	    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
	    w14 &= 0x3ffffff;
	    /* k = 15 */
	    lo = Math.imul(al9, bl6);
	    mid = Math.imul(al9, bh6);
	    mid = (mid + Math.imul(ah9, bl6)) | 0;
	    hi = Math.imul(ah9, bh6);
	    lo = (lo + Math.imul(al8, bl7)) | 0;
	    mid = (mid + Math.imul(al8, bh7)) | 0;
	    mid = (mid + Math.imul(ah8, bl7)) | 0;
	    hi = (hi + Math.imul(ah8, bh7)) | 0;
	    lo = (lo + Math.imul(al7, bl8)) | 0;
	    mid = (mid + Math.imul(al7, bh8)) | 0;
	    mid = (mid + Math.imul(ah7, bl8)) | 0;
	    hi = (hi + Math.imul(ah7, bh8)) | 0;
	    lo = (lo + Math.imul(al6, bl9)) | 0;
	    mid = (mid + Math.imul(al6, bh9)) | 0;
	    mid = (mid + Math.imul(ah6, bl9)) | 0;
	    hi = (hi + Math.imul(ah6, bh9)) | 0;
	    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
	    w15 &= 0x3ffffff;
	    /* k = 16 */
	    lo = Math.imul(al9, bl7);
	    mid = Math.imul(al9, bh7);
	    mid = (mid + Math.imul(ah9, bl7)) | 0;
	    hi = Math.imul(ah9, bh7);
	    lo = (lo + Math.imul(al8, bl8)) | 0;
	    mid = (mid + Math.imul(al8, bh8)) | 0;
	    mid = (mid + Math.imul(ah8, bl8)) | 0;
	    hi = (hi + Math.imul(ah8, bh8)) | 0;
	    lo = (lo + Math.imul(al7, bl9)) | 0;
	    mid = (mid + Math.imul(al7, bh9)) | 0;
	    mid = (mid + Math.imul(ah7, bl9)) | 0;
	    hi = (hi + Math.imul(ah7, bh9)) | 0;
	    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
	    w16 &= 0x3ffffff;
	    /* k = 17 */
	    lo = Math.imul(al9, bl8);
	    mid = Math.imul(al9, bh8);
	    mid = (mid + Math.imul(ah9, bl8)) | 0;
	    hi = Math.imul(ah9, bh8);
	    lo = (lo + Math.imul(al8, bl9)) | 0;
	    mid = (mid + Math.imul(al8, bh9)) | 0;
	    mid = (mid + Math.imul(ah8, bl9)) | 0;
	    hi = (hi + Math.imul(ah8, bh9)) | 0;
	    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
	    w17 &= 0x3ffffff;
	    /* k = 18 */
	    lo = Math.imul(al9, bl9);
	    mid = Math.imul(al9, bh9);
	    mid = (mid + Math.imul(ah9, bl9)) | 0;
	    hi = Math.imul(ah9, bh9);
	    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
	    w18 &= 0x3ffffff;
	    o[0] = w0;
	    o[1] = w1;
	    o[2] = w2;
	    o[3] = w3;
	    o[4] = w4;
	    o[5] = w5;
	    o[6] = w6;
	    o[7] = w7;
	    o[8] = w8;
	    o[9] = w9;
	    o[10] = w10;
	    o[11] = w11;
	    o[12] = w12;
	    o[13] = w13;
	    o[14] = w14;
	    o[15] = w15;
	    o[16] = w16;
	    o[17] = w17;
	    o[18] = w18;
	    if (c !== 0) {
	      o[19] = c;
	      out.length++;
	    }
	    return out;
	  };

	  // Polyfill comb
	  if (!Math.imul) {
	    comb10MulTo = smallMulTo;
	  }

	  function bigMulTo (self, num, out) {
	    out.negative = num.negative ^ self.negative;
	    out.length = self.length + num.length;

	    var carry = 0;
	    var hncarry = 0;
	    for (var k = 0; k < out.length - 1; k++) {
	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	      // note that ncarry could be >= 0x3ffffff
	      var ncarry = hncarry;
	      hncarry = 0;
	      var rword = carry & 0x3ffffff;
	      var maxJ = Math.min(k, num.length - 1);
	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
	        var i = k - j;
	        var a = self.words[i] | 0;
	        var b = num.words[j] | 0;
	        var r = a * b;

	        var lo = r & 0x3ffffff;
	        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
	        lo = (lo + rword) | 0;
	        rword = lo & 0x3ffffff;
	        ncarry = (ncarry + (lo >>> 26)) | 0;

	        hncarry += ncarry >>> 26;
	        ncarry &= 0x3ffffff;
	      }
	      out.words[k] = rword;
	      carry = ncarry;
	      ncarry = hncarry;
	    }
	    if (carry !== 0) {
	      out.words[k] = carry;
	    } else {
	      out.length--;
	    }

	    return out.strip();
	  }

	  function jumboMulTo (self, num, out) {
	    var fftm = new FFTM();
	    return fftm.mulp(self, num, out);
	  }

	  BN.prototype.mulTo = function mulTo (num, out) {
	    var res;
	    var len = this.length + num.length;
	    if (this.length === 10 && num.length === 10) {
	      res = comb10MulTo(this, num, out);
	    } else if (len < 63) {
	      res = smallMulTo(this, num, out);
	    } else if (len < 1024) {
	      res = bigMulTo(this, num, out);
	    } else {
	      res = jumboMulTo(this, num, out);
	    }

	    return res;
	  };

	  // Cooley-Tukey algorithm for FFT
	  // slightly revisited to rely on looping instead of recursion

	  function FFTM (x, y) {
	    this.x = x;
	    this.y = y;
	  }

	  FFTM.prototype.makeRBT = function makeRBT (N) {
	    var t = new Array(N);
	    var l = BN.prototype._countBits(N) - 1;
	    for (var i = 0; i < N; i++) {
	      t[i] = this.revBin(i, l, N);
	    }

	    return t;
	  };

	  // Returns binary-reversed representation of `x`
	  FFTM.prototype.revBin = function revBin (x, l, N) {
	    if (x === 0 || x === N - 1) return x;

	    var rb = 0;
	    for (var i = 0; i < l; i++) {
	      rb |= (x & 1) << (l - i - 1);
	      x >>= 1;
	    }

	    return rb;
	  };

	  // Performs "tweedling" phase, therefore 'emulating'
	  // behaviour of the recursive algorithm
	  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
	    for (var i = 0; i < N; i++) {
	      rtws[i] = rws[rbt[i]];
	      itws[i] = iws[rbt[i]];
	    }
	  };

	  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
	    this.permute(rbt, rws, iws, rtws, itws, N);

	    for (var s = 1; s < N; s <<= 1) {
	      var l = s << 1;

	      var rtwdf = Math.cos(2 * Math.PI / l);
	      var itwdf = Math.sin(2 * Math.PI / l);

	      for (var p = 0; p < N; p += l) {
	        var rtwdf_ = rtwdf;
	        var itwdf_ = itwdf;

	        for (var j = 0; j < s; j++) {
	          var re = rtws[p + j];
	          var ie = itws[p + j];

	          var ro = rtws[p + j + s];
	          var io = itws[p + j + s];

	          var rx = rtwdf_ * ro - itwdf_ * io;

	          io = rtwdf_ * io + itwdf_ * ro;
	          ro = rx;

	          rtws[p + j] = re + ro;
	          itws[p + j] = ie + io;

	          rtws[p + j + s] = re - ro;
	          itws[p + j + s] = ie - io;

	          /* jshint maxdepth : false */
	          if (j !== l) {
	            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

	            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
	            rtwdf_ = rx;
	          }
	        }
	      }
	    }
	  };

	  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
	    var N = Math.max(m, n) | 1;
	    var odd = N & 1;
	    var i = 0;
	    for (N = N / 2 | 0; N; N = N >>> 1) {
	      i++;
	    }

	    return 1 << i + 1 + odd;
	  };

	  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
	    if (N <= 1) return;

	    for (var i = 0; i < N / 2; i++) {
	      var t = rws[i];

	      rws[i] = rws[N - i - 1];
	      rws[N - i - 1] = t;

	      t = iws[i];

	      iws[i] = -iws[N - i - 1];
	      iws[N - i - 1] = -t;
	    }
	  };

	  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
	    var carry = 0;
	    for (var i = 0; i < N / 2; i++) {
	      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
	        Math.round(ws[2 * i] / N) +
	        carry;

	      ws[i] = w & 0x3ffffff;

	      if (w < 0x4000000) {
	        carry = 0;
	      } else {
	        carry = w / 0x4000000 | 0;
	      }
	    }

	    return ws;
	  };

	  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
	    var carry = 0;
	    for (var i = 0; i < len; i++) {
	      carry = carry + (ws[i] | 0);

	      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
	      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
	    }

	    // Pad with zeroes
	    for (i = 2 * len; i < N; ++i) {
	      rws[i] = 0;
	    }

	    assert(carry === 0);
	    assert((carry & ~0x1fff) === 0);
	  };

	  FFTM.prototype.stub = function stub (N) {
	    var ph = new Array(N);
	    for (var i = 0; i < N; i++) {
	      ph[i] = 0;
	    }

	    return ph;
	  };

	  FFTM.prototype.mulp = function mulp (x, y, out) {
	    var N = 2 * this.guessLen13b(x.length, y.length);

	    var rbt = this.makeRBT(N);

	    var _ = this.stub(N);

	    var rws = new Array(N);
	    var rwst = new Array(N);
	    var iwst = new Array(N);

	    var nrws = new Array(N);
	    var nrwst = new Array(N);
	    var niwst = new Array(N);

	    var rmws = out.words;
	    rmws.length = N;

	    this.convert13b(x.words, x.length, rws, N);
	    this.convert13b(y.words, y.length, nrws, N);

	    this.transform(rws, _, rwst, iwst, N, rbt);
	    this.transform(nrws, _, nrwst, niwst, N, rbt);

	    for (var i = 0; i < N; i++) {
	      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
	      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
	      rwst[i] = rx;
	    }

	    this.conjugate(rwst, iwst, N);
	    this.transform(rwst, iwst, rmws, _, N, rbt);
	    this.conjugate(rmws, _, N);
	    this.normalize13b(rmws, N);

	    out.negative = x.negative ^ y.negative;
	    out.length = x.length + y.length;
	    return out.strip();
	  };

	  // Multiply `this` by `num`
	  BN.prototype.mul = function mul (num) {
	    var out = new BN(null);
	    out.words = new Array(this.length + num.length);
	    return this.mulTo(num, out);
	  };

	  // Multiply employing FFT
	  BN.prototype.mulf = function mulf (num) {
	    var out = new BN(null);
	    out.words = new Array(this.length + num.length);
	    return jumboMulTo(this, num, out);
	  };

	  // In-place Multiplication
	  BN.prototype.imul = function imul (num) {
	    return this.clone().mulTo(num, this);
	  };

	  BN.prototype.imuln = function imuln (num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);

	    // Carry
	    var carry = 0;
	    for (var i = 0; i < this.length; i++) {
	      var w = (this.words[i] | 0) * num;
	      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
	      carry >>= 26;
	      carry += (w / 0x4000000) | 0;
	      // NOTE: lo is 27bit maximum
	      carry += lo >>> 26;
	      this.words[i] = lo & 0x3ffffff;
	    }

	    if (carry !== 0) {
	      this.words[i] = carry;
	      this.length++;
	    }

	    return this;
	  };

	  BN.prototype.muln = function muln (num) {
	    return this.clone().imuln(num);
	  };

	  // `this` * `this`
	  BN.prototype.sqr = function sqr () {
	    return this.mul(this);
	  };

	  // `this` * `this` in-place
	  BN.prototype.isqr = function isqr () {
	    return this.imul(this.clone());
	  };

	  // Math.pow(`this`, `num`)
	  BN.prototype.pow = function pow (num) {
	    var w = toBitArray(num);
	    if (w.length === 0) return new BN(1);

	    // Skip leading zeroes
	    var res = this;
	    for (var i = 0; i < w.length; i++, res = res.sqr()) {
	      if (w[i] !== 0) break;
	    }

	    if (++i < w.length) {
	      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
	        if (w[i] === 0) continue;

	        res = res.mul(q);
	      }
	    }

	    return res;
	  };

	  // Shift-left in-place
	  BN.prototype.iushln = function iushln (bits) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var r = bits % 26;
	    var s = (bits - r) / 26;
	    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
	    var i;

	    if (r !== 0) {
	      var carry = 0;

	      for (i = 0; i < this.length; i++) {
	        var newCarry = this.words[i] & carryMask;
	        var c = ((this.words[i] | 0) - newCarry) << r;
	        this.words[i] = c | carry;
	        carry = newCarry >>> (26 - r);
	      }

	      if (carry) {
	        this.words[i] = carry;
	        this.length++;
	      }
	    }

	    if (s !== 0) {
	      for (i = this.length - 1; i >= 0; i--) {
	        this.words[i + s] = this.words[i];
	      }

	      for (i = 0; i < s; i++) {
	        this.words[i] = 0;
	      }

	      this.length += s;
	    }

	    return this.strip();
	  };

	  BN.prototype.ishln = function ishln (bits) {
	    // TODO(indutny): implement me
	    assert(this.negative === 0);
	    return this.iushln(bits);
	  };

	  // Shift-right in-place
	  // NOTE: `hint` is a lowest bit before trailing zeroes
	  // NOTE: if `extended` is present - it will be filled with destroyed bits
	  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var h;
	    if (hint) {
	      h = (hint - (hint % 26)) / 26;
	    } else {
	      h = 0;
	    }

	    var r = bits % 26;
	    var s = Math.min((bits - r) / 26, this.length);
	    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
	    var maskedWords = extended;

	    h -= s;
	    h = Math.max(0, h);

	    // Extended mode, copy masked part
	    if (maskedWords) {
	      for (var i = 0; i < s; i++) {
	        maskedWords.words[i] = this.words[i];
	      }
	      maskedWords.length = s;
	    }

	    if (s === 0) {
	      // No-op, we should not move anything at all
	    } else if (this.length > s) {
	      this.length -= s;
	      for (i = 0; i < this.length; i++) {
	        this.words[i] = this.words[i + s];
	      }
	    } else {
	      this.words[0] = 0;
	      this.length = 1;
	    }

	    var carry = 0;
	    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
	      var word = this.words[i] | 0;
	      this.words[i] = (carry << (26 - r)) | (word >>> r);
	      carry = word & mask;
	    }

	    // Push carried bits as a mask
	    if (maskedWords && carry !== 0) {
	      maskedWords.words[maskedWords.length++] = carry;
	    }

	    if (this.length === 0) {
	      this.words[0] = 0;
	      this.length = 1;
	    }

	    return this.strip();
	  };

	  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
	    // TODO(indutny): implement me
	    assert(this.negative === 0);
	    return this.iushrn(bits, hint, extended);
	  };

	  // Shift-left
	  BN.prototype.shln = function shln (bits) {
	    return this.clone().ishln(bits);
	  };

	  BN.prototype.ushln = function ushln (bits) {
	    return this.clone().iushln(bits);
	  };

	  // Shift-right
	  BN.prototype.shrn = function shrn (bits) {
	    return this.clone().ishrn(bits);
	  };

	  BN.prototype.ushrn = function ushrn (bits) {
	    return this.clone().iushrn(bits);
	  };

	  // Test if n bit is set
	  BN.prototype.testn = function testn (bit) {
	    assert(typeof bit === 'number' && bit >= 0);
	    var r = bit % 26;
	    var s = (bit - r) / 26;
	    var q = 1 << r;

	    // Fast case: bit is much higher than all existing words
	    if (this.length <= s) return false;

	    // Check bit and return
	    var w = this.words[s];

	    return !!(w & q);
	  };

	  // Return only lowers bits of number (in-place)
	  BN.prototype.imaskn = function imaskn (bits) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var r = bits % 26;
	    var s = (bits - r) / 26;

	    assert(this.negative === 0, 'imaskn works only with positive numbers');

	    if (this.length <= s) {
	      return this;
	    }

	    if (r !== 0) {
	      s++;
	    }
	    this.length = Math.min(s, this.length);

	    if (r !== 0) {
	      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
	      this.words[this.length - 1] &= mask;
	    }

	    return this.strip();
	  };

	  // Return only lowers bits of number
	  BN.prototype.maskn = function maskn (bits) {
	    return this.clone().imaskn(bits);
	  };

	  // Add plain number `num` to `this`
	  BN.prototype.iaddn = function iaddn (num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);
	    if (num < 0) return this.isubn(-num);

	    // Possible sign change
	    if (this.negative !== 0) {
	      if (this.length === 1 && (this.words[0] | 0) < num) {
	        this.words[0] = num - (this.words[0] | 0);
	        this.negative = 0;
	        return this;
	      }

	      this.negative = 0;
	      this.isubn(num);
	      this.negative = 1;
	      return this;
	    }

	    // Add without checks
	    return this._iaddn(num);
	  };

	  BN.prototype._iaddn = function _iaddn (num) {
	    this.words[0] += num;

	    // Carry
	    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
	      this.words[i] -= 0x4000000;
	      if (i === this.length - 1) {
	        this.words[i + 1] = 1;
	      } else {
	        this.words[i + 1]++;
	      }
	    }
	    this.length = Math.max(this.length, i + 1);

	    return this;
	  };

	  // Subtract plain number `num` from `this`
	  BN.prototype.isubn = function isubn (num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);
	    if (num < 0) return this.iaddn(-num);

	    if (this.negative !== 0) {
	      this.negative = 0;
	      this.iaddn(num);
	      this.negative = 1;
	      return this;
	    }

	    this.words[0] -= num;

	    if (this.length === 1 && this.words[0] < 0) {
	      this.words[0] = -this.words[0];
	      this.negative = 1;
	    } else {
	      // Carry
	      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
	        this.words[i] += 0x4000000;
	        this.words[i + 1] -= 1;
	      }
	    }

	    return this.strip();
	  };

	  BN.prototype.addn = function addn (num) {
	    return this.clone().iaddn(num);
	  };

	  BN.prototype.subn = function subn (num) {
	    return this.clone().isubn(num);
	  };

	  BN.prototype.iabs = function iabs () {
	    this.negative = 0;

	    return this;
	  };

	  BN.prototype.abs = function abs () {
	    return this.clone().iabs();
	  };

	  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
	    var len = num.length + shift;
	    var i;

	    this._expand(len);

	    var w;
	    var carry = 0;
	    for (i = 0; i < num.length; i++) {
	      w = (this.words[i + shift] | 0) + carry;
	      var right = (num.words[i] | 0) * mul;
	      w -= right & 0x3ffffff;
	      carry = (w >> 26) - ((right / 0x4000000) | 0);
	      this.words[i + shift] = w & 0x3ffffff;
	    }
	    for (; i < this.length - shift; i++) {
	      w = (this.words[i + shift] | 0) + carry;
	      carry = w >> 26;
	      this.words[i + shift] = w & 0x3ffffff;
	    }

	    if (carry === 0) return this.strip();

	    // Subtraction overflow
	    assert(carry === -1);
	    carry = 0;
	    for (i = 0; i < this.length; i++) {
	      w = -(this.words[i] | 0) + carry;
	      carry = w >> 26;
	      this.words[i] = w & 0x3ffffff;
	    }
	    this.negative = 1;

	    return this.strip();
	  };

	  BN.prototype._wordDiv = function _wordDiv (num, mode) {
	    var shift = this.length - num.length;

	    var a = this.clone();
	    var b = num;

	    // Normalize
	    var bhi = b.words[b.length - 1] | 0;
	    var bhiBits = this._countBits(bhi);
	    shift = 26 - bhiBits;
	    if (shift !== 0) {
	      b = b.ushln(shift);
	      a.iushln(shift);
	      bhi = b.words[b.length - 1] | 0;
	    }

	    // Initialize quotient
	    var m = a.length - b.length;
	    var q;

	    if (mode !== 'mod') {
	      q = new BN(null);
	      q.length = m + 1;
	      q.words = new Array(q.length);
	      for (var i = 0; i < q.length; i++) {
	        q.words[i] = 0;
	      }
	    }

	    var diff = a.clone()._ishlnsubmul(b, 1, m);
	    if (diff.negative === 0) {
	      a = diff;
	      if (q) {
	        q.words[m] = 1;
	      }
	    }

	    for (var j = m - 1; j >= 0; j--) {
	      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
	        (a.words[b.length + j - 1] | 0);

	      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
	      // (0x7ffffff)
	      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

	      a._ishlnsubmul(b, qj, j);
	      while (a.negative !== 0) {
	        qj--;
	        a.negative = 0;
	        a._ishlnsubmul(b, 1, j);
	        if (!a.isZero()) {
	          a.negative ^= 1;
	        }
	      }
	      if (q) {
	        q.words[j] = qj;
	      }
	    }
	    if (q) {
	      q.strip();
	    }
	    a.strip();

	    // Denormalize
	    if (mode !== 'div' && shift !== 0) {
	      a.iushrn(shift);
	    }

	    return {
	      div: q || null,
	      mod: a
	    };
	  };

	  // NOTE: 1) `mode` can be set to `mod` to request mod only,
	  //       to `div` to request div only, or be absent to
	  //       request both div & mod
	  //       2) `positive` is true if unsigned mod is requested
	  BN.prototype.divmod = function divmod (num, mode, positive) {
	    assert(!num.isZero());

	    if (this.isZero()) {
	      return {
	        div: new BN(0),
	        mod: new BN(0)
	      };
	    }

	    var div, mod, res;
	    if (this.negative !== 0 && num.negative === 0) {
	      res = this.neg().divmod(num, mode);

	      if (mode !== 'mod') {
	        div = res.div.neg();
	      }

	      if (mode !== 'div') {
	        mod = res.mod.neg();
	        if (positive && mod.negative !== 0) {
	          mod.iadd(num);
	        }
	      }

	      return {
	        div: div,
	        mod: mod
	      };
	    }

	    if (this.negative === 0 && num.negative !== 0) {
	      res = this.divmod(num.neg(), mode);

	      if (mode !== 'mod') {
	        div = res.div.neg();
	      }

	      return {
	        div: div,
	        mod: res.mod
	      };
	    }

	    if ((this.negative & num.negative) !== 0) {
	      res = this.neg().divmod(num.neg(), mode);

	      if (mode !== 'div') {
	        mod = res.mod.neg();
	        if (positive && mod.negative !== 0) {
	          mod.isub(num);
	        }
	      }

	      return {
	        div: res.div,
	        mod: mod
	      };
	    }

	    // Both numbers are positive at this point

	    // Strip both numbers to approximate shift value
	    if (num.length > this.length || this.cmp(num) < 0) {
	      return {
	        div: new BN(0),
	        mod: this
	      };
	    }

	    // Very short reduction
	    if (num.length === 1) {
	      if (mode === 'div') {
	        return {
	          div: this.divn(num.words[0]),
	          mod: null
	        };
	      }

	      if (mode === 'mod') {
	        return {
	          div: null,
	          mod: new BN(this.modn(num.words[0]))
	        };
	      }

	      return {
	        div: this.divn(num.words[0]),
	        mod: new BN(this.modn(num.words[0]))
	      };
	    }

	    return this._wordDiv(num, mode);
	  };

	  // Find `this` / `num`
	  BN.prototype.div = function div (num) {
	    return this.divmod(num, 'div', false).div;
	  };

	  // Find `this` % `num`
	  BN.prototype.mod = function mod (num) {
	    return this.divmod(num, 'mod', false).mod;
	  };

	  BN.prototype.umod = function umod (num) {
	    return this.divmod(num, 'mod', true).mod;
	  };

	  // Find Round(`this` / `num`)
	  BN.prototype.divRound = function divRound (num) {
	    var dm = this.divmod(num);

	    // Fast case - exact division
	    if (dm.mod.isZero()) return dm.div;

	    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

	    var half = num.ushrn(1);
	    var r2 = num.andln(1);
	    var cmp = mod.cmp(half);

	    // Round down
	    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

	    // Round up
	    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
	  };

	  BN.prototype.modn = function modn (num) {
	    assert(num <= 0x3ffffff);
	    var p = (1 << 26) % num;

	    var acc = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      acc = (p * acc + (this.words[i] | 0)) % num;
	    }

	    return acc;
	  };

	  // In-place division by number
	  BN.prototype.idivn = function idivn (num) {
	    assert(num <= 0x3ffffff);

	    var carry = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      var w = (this.words[i] | 0) + carry * 0x4000000;
	      this.words[i] = (w / num) | 0;
	      carry = w % num;
	    }

	    return this.strip();
	  };

	  BN.prototype.divn = function divn (num) {
	    return this.clone().idivn(num);
	  };

	  BN.prototype.egcd = function egcd (p) {
	    assert(p.negative === 0);
	    assert(!p.isZero());

	    var x = this;
	    var y = p.clone();

	    if (x.negative !== 0) {
	      x = x.umod(p);
	    } else {
	      x = x.clone();
	    }

	    // A * x + B * y = x
	    var A = new BN(1);
	    var B = new BN(0);

	    // C * x + D * y = y
	    var C = new BN(0);
	    var D = new BN(1);

	    var g = 0;

	    while (x.isEven() && y.isEven()) {
	      x.iushrn(1);
	      y.iushrn(1);
	      ++g;
	    }

	    var yp = y.clone();
	    var xp = x.clone();

	    while (!x.isZero()) {
	      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
	      if (i > 0) {
	        x.iushrn(i);
	        while (i-- > 0) {
	          if (A.isOdd() || B.isOdd()) {
	            A.iadd(yp);
	            B.isub(xp);
	          }

	          A.iushrn(1);
	          B.iushrn(1);
	        }
	      }

	      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
	      if (j > 0) {
	        y.iushrn(j);
	        while (j-- > 0) {
	          if (C.isOdd() || D.isOdd()) {
	            C.iadd(yp);
	            D.isub(xp);
	          }

	          C.iushrn(1);
	          D.iushrn(1);
	        }
	      }

	      if (x.cmp(y) >= 0) {
	        x.isub(y);
	        A.isub(C);
	        B.isub(D);
	      } else {
	        y.isub(x);
	        C.isub(A);
	        D.isub(B);
	      }
	    }

	    return {
	      a: C,
	      b: D,
	      gcd: y.iushln(g)
	    };
	  };

	  // This is reduced incarnation of the binary EEA
	  // above, designated to invert members of the
	  // _prime_ fields F(p) at a maximal speed
	  BN.prototype._invmp = function _invmp (p) {
	    assert(p.negative === 0);
	    assert(!p.isZero());

	    var a = this;
	    var b = p.clone();

	    if (a.negative !== 0) {
	      a = a.umod(p);
	    } else {
	      a = a.clone();
	    }

	    var x1 = new BN(1);
	    var x2 = new BN(0);

	    var delta = b.clone();

	    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
	      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
	      if (i > 0) {
	        a.iushrn(i);
	        while (i-- > 0) {
	          if (x1.isOdd()) {
	            x1.iadd(delta);
	          }

	          x1.iushrn(1);
	        }
	      }

	      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
	      if (j > 0) {
	        b.iushrn(j);
	        while (j-- > 0) {
	          if (x2.isOdd()) {
	            x2.iadd(delta);
	          }

	          x2.iushrn(1);
	        }
	      }

	      if (a.cmp(b) >= 0) {
	        a.isub(b);
	        x1.isub(x2);
	      } else {
	        b.isub(a);
	        x2.isub(x1);
	      }
	    }

	    var res;
	    if (a.cmpn(1) === 0) {
	      res = x1;
	    } else {
	      res = x2;
	    }

	    if (res.cmpn(0) < 0) {
	      res.iadd(p);
	    }

	    return res;
	  };

	  BN.prototype.gcd = function gcd (num) {
	    if (this.isZero()) return num.abs();
	    if (num.isZero()) return this.abs();

	    var a = this.clone();
	    var b = num.clone();
	    a.negative = 0;
	    b.negative = 0;

	    // Remove common factor of two
	    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
	      a.iushrn(1);
	      b.iushrn(1);
	    }

	    do {
	      while (a.isEven()) {
	        a.iushrn(1);
	      }
	      while (b.isEven()) {
	        b.iushrn(1);
	      }

	      var r = a.cmp(b);
	      if (r < 0) {
	        // Swap `a` and `b` to make `a` always bigger than `b`
	        var t = a;
	        a = b;
	        b = t;
	      } else if (r === 0 || b.cmpn(1) === 0) {
	        break;
	      }

	      a.isub(b);
	    } while (true);

	    return b.iushln(shift);
	  };

	  // Invert number in the field F(num)
	  BN.prototype.invm = function invm (num) {
	    return this.egcd(num).a.umod(num);
	  };

	  BN.prototype.isEven = function isEven () {
	    return (this.words[0] & 1) === 0;
	  };

	  BN.prototype.isOdd = function isOdd () {
	    return (this.words[0] & 1) === 1;
	  };

	  // And first word and num
	  BN.prototype.andln = function andln (num) {
	    return this.words[0] & num;
	  };

	  // Increment at the bit position in-line
	  BN.prototype.bincn = function bincn (bit) {
	    assert(typeof bit === 'number');
	    var r = bit % 26;
	    var s = (bit - r) / 26;
	    var q = 1 << r;

	    // Fast case: bit is much higher than all existing words
	    if (this.length <= s) {
	      this._expand(s + 1);
	      this.words[s] |= q;
	      return this;
	    }

	    // Add bit and propagate, if needed
	    var carry = q;
	    for (var i = s; carry !== 0 && i < this.length; i++) {
	      var w = this.words[i] | 0;
	      w += carry;
	      carry = w >>> 26;
	      w &= 0x3ffffff;
	      this.words[i] = w;
	    }
	    if (carry !== 0) {
	      this.words[i] = carry;
	      this.length++;
	    }
	    return this;
	  };

	  BN.prototype.isZero = function isZero () {
	    return this.length === 1 && this.words[0] === 0;
	  };

	  BN.prototype.cmpn = function cmpn (num) {
	    var negative = num < 0;

	    if (this.negative !== 0 && !negative) return -1;
	    if (this.negative === 0 && negative) return 1;

	    this.strip();

	    var res;
	    if (this.length > 1) {
	      res = 1;
	    } else {
	      if (negative) {
	        num = -num;
	      }

	      assert(num <= 0x3ffffff, 'Number is too big');

	      var w = this.words[0] | 0;
	      res = w === num ? 0 : w < num ? -1 : 1;
	    }
	    if (this.negative !== 0) return -res | 0;
	    return res;
	  };

	  // Compare two numbers and return:
	  // 1 - if `this` > `num`
	  // 0 - if `this` == `num`
	  // -1 - if `this` < `num`
	  BN.prototype.cmp = function cmp (num) {
	    if (this.negative !== 0 && num.negative === 0) return -1;
	    if (this.negative === 0 && num.negative !== 0) return 1;

	    var res = this.ucmp(num);
	    if (this.negative !== 0) return -res | 0;
	    return res;
	  };

	  // Unsigned comparison
	  BN.prototype.ucmp = function ucmp (num) {
	    // At this point both numbers have the same sign
	    if (this.length > num.length) return 1;
	    if (this.length < num.length) return -1;

	    var res = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      var a = this.words[i] | 0;
	      var b = num.words[i] | 0;

	      if (a === b) continue;
	      if (a < b) {
	        res = -1;
	      } else if (a > b) {
	        res = 1;
	      }
	      break;
	    }
	    return res;
	  };

	  BN.prototype.gtn = function gtn (num) {
	    return this.cmpn(num) === 1;
	  };

	  BN.prototype.gt = function gt (num) {
	    return this.cmp(num) === 1;
	  };

	  BN.prototype.gten = function gten (num) {
	    return this.cmpn(num) >= 0;
	  };

	  BN.prototype.gte = function gte (num) {
	    return this.cmp(num) >= 0;
	  };

	  BN.prototype.ltn = function ltn (num) {
	    return this.cmpn(num) === -1;
	  };

	  BN.prototype.lt = function lt (num) {
	    return this.cmp(num) === -1;
	  };

	  BN.prototype.lten = function lten (num) {
	    return this.cmpn(num) <= 0;
	  };

	  BN.prototype.lte = function lte (num) {
	    return this.cmp(num) <= 0;
	  };

	  BN.prototype.eqn = function eqn (num) {
	    return this.cmpn(num) === 0;
	  };

	  BN.prototype.eq = function eq (num) {
	    return this.cmp(num) === 0;
	  };

	  //
	  // A reduce context, could be using montgomery or something better, depending
	  // on the `m` itself.
	  //
	  BN.red = function red (num) {
	    return new Red(num);
	  };

	  BN.prototype.toRed = function toRed (ctx) {
	    assert(!this.red, 'Already a number in reduction context');
	    assert(this.negative === 0, 'red works only with positives');
	    return ctx.convertTo(this)._forceRed(ctx);
	  };

	  BN.prototype.fromRed = function fromRed () {
	    assert(this.red, 'fromRed works only with numbers in reduction context');
	    return this.red.convertFrom(this);
	  };

	  BN.prototype._forceRed = function _forceRed (ctx) {
	    this.red = ctx;
	    return this;
	  };

	  BN.prototype.forceRed = function forceRed (ctx) {
	    assert(!this.red, 'Already a number in reduction context');
	    return this._forceRed(ctx);
	  };

	  BN.prototype.redAdd = function redAdd (num) {
	    assert(this.red, 'redAdd works only with red numbers');
	    return this.red.add(this, num);
	  };

	  BN.prototype.redIAdd = function redIAdd (num) {
	    assert(this.red, 'redIAdd works only with red numbers');
	    return this.red.iadd(this, num);
	  };

	  BN.prototype.redSub = function redSub (num) {
	    assert(this.red, 'redSub works only with red numbers');
	    return this.red.sub(this, num);
	  };

	  BN.prototype.redISub = function redISub (num) {
	    assert(this.red, 'redISub works only with red numbers');
	    return this.red.isub(this, num);
	  };

	  BN.prototype.redShl = function redShl (num) {
	    assert(this.red, 'redShl works only with red numbers');
	    return this.red.shl(this, num);
	  };

	  BN.prototype.redMul = function redMul (num) {
	    assert(this.red, 'redMul works only with red numbers');
	    this.red._verify2(this, num);
	    return this.red.mul(this, num);
	  };

	  BN.prototype.redIMul = function redIMul (num) {
	    assert(this.red, 'redMul works only with red numbers');
	    this.red._verify2(this, num);
	    return this.red.imul(this, num);
	  };

	  BN.prototype.redSqr = function redSqr () {
	    assert(this.red, 'redSqr works only with red numbers');
	    this.red._verify1(this);
	    return this.red.sqr(this);
	  };

	  BN.prototype.redISqr = function redISqr () {
	    assert(this.red, 'redISqr works only with red numbers');
	    this.red._verify1(this);
	    return this.red.isqr(this);
	  };

	  // Square root over p
	  BN.prototype.redSqrt = function redSqrt () {
	    assert(this.red, 'redSqrt works only with red numbers');
	    this.red._verify1(this);
	    return this.red.sqrt(this);
	  };

	  BN.prototype.redInvm = function redInvm () {
	    assert(this.red, 'redInvm works only with red numbers');
	    this.red._verify1(this);
	    return this.red.invm(this);
	  };

	  // Return negative clone of `this` % `red modulo`
	  BN.prototype.redNeg = function redNeg () {
	    assert(this.red, 'redNeg works only with red numbers');
	    this.red._verify1(this);
	    return this.red.neg(this);
	  };

	  BN.prototype.redPow = function redPow (num) {
	    assert(this.red && !num.red, 'redPow(normalNum)');
	    this.red._verify1(this);
	    return this.red.pow(this, num);
	  };

	  // Prime numbers with efficient reduction
	  var primes = {
	    k256: null,
	    p224: null,
	    p192: null,
	    p25519: null
	  };

	  // Pseudo-Mersenne prime
	  function MPrime (name, p) {
	    // P = 2 ^ N - K
	    this.name = name;
	    this.p = new BN(p, 16);
	    this.n = this.p.bitLength();
	    this.k = new BN(1).iushln(this.n).isub(this.p);

	    this.tmp = this._tmp();
	  }

	  MPrime.prototype._tmp = function _tmp () {
	    var tmp = new BN(null);
	    tmp.words = new Array(Math.ceil(this.n / 13));
	    return tmp;
	  };

	  MPrime.prototype.ireduce = function ireduce (num) {
	    // Assumes that `num` is less than `P^2`
	    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
	    var r = num;
	    var rlen;

	    do {
	      this.split(r, this.tmp);
	      r = this.imulK(r);
	      r = r.iadd(this.tmp);
	      rlen = r.bitLength();
	    } while (rlen > this.n);

	    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
	    if (cmp === 0) {
	      r.words[0] = 0;
	      r.length = 1;
	    } else if (cmp > 0) {
	      r.isub(this.p);
	    } else {
	      if (r.strip !== undefined) {
	        // r is BN v4 instance
	        r.strip();
	      } else {
	        // r is BN v5 instance
	        r._strip();
	      }
	    }

	    return r;
	  };

	  MPrime.prototype.split = function split (input, out) {
	    input.iushrn(this.n, 0, out);
	  };

	  MPrime.prototype.imulK = function imulK (num) {
	    return num.imul(this.k);
	  };

	  function K256 () {
	    MPrime.call(
	      this,
	      'k256',
	      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
	  }
	  inherits(K256, MPrime);

	  K256.prototype.split = function split (input, output) {
	    // 256 = 9 * 26 + 22
	    var mask = 0x3fffff;

	    var outLen = Math.min(input.length, 9);
	    for (var i = 0; i < outLen; i++) {
	      output.words[i] = input.words[i];
	    }
	    output.length = outLen;

	    if (input.length <= 9) {
	      input.words[0] = 0;
	      input.length = 1;
	      return;
	    }

	    // Shift by 9 limbs
	    var prev = input.words[9];
	    output.words[output.length++] = prev & mask;

	    for (i = 10; i < input.length; i++) {
	      var next = input.words[i] | 0;
	      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
	      prev = next;
	    }
	    prev >>>= 22;
	    input.words[i - 10] = prev;
	    if (prev === 0 && input.length > 10) {
	      input.length -= 10;
	    } else {
	      input.length -= 9;
	    }
	  };

	  K256.prototype.imulK = function imulK (num) {
	    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
	    num.words[num.length] = 0;
	    num.words[num.length + 1] = 0;
	    num.length += 2;

	    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
	    var lo = 0;
	    for (var i = 0; i < num.length; i++) {
	      var w = num.words[i] | 0;
	      lo += w * 0x3d1;
	      num.words[i] = lo & 0x3ffffff;
	      lo = w * 0x40 + ((lo / 0x4000000) | 0);
	    }

	    // Fast length reduction
	    if (num.words[num.length - 1] === 0) {
	      num.length--;
	      if (num.words[num.length - 1] === 0) {
	        num.length--;
	      }
	    }
	    return num;
	  };

	  function P224 () {
	    MPrime.call(
	      this,
	      'p224',
	      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
	  }
	  inherits(P224, MPrime);

	  function P192 () {
	    MPrime.call(
	      this,
	      'p192',
	      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
	  }
	  inherits(P192, MPrime);

	  function P25519 () {
	    // 2 ^ 255 - 19
	    MPrime.call(
	      this,
	      '25519',
	      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
	  }
	  inherits(P25519, MPrime);

	  P25519.prototype.imulK = function imulK (num) {
	    // K = 0x13
	    var carry = 0;
	    for (var i = 0; i < num.length; i++) {
	      var hi = (num.words[i] | 0) * 0x13 + carry;
	      var lo = hi & 0x3ffffff;
	      hi >>>= 26;

	      num.words[i] = lo;
	      carry = hi;
	    }
	    if (carry !== 0) {
	      num.words[num.length++] = carry;
	    }
	    return num;
	  };

	  // Exported mostly for testing purposes, use plain name instead
	  BN._prime = function prime (name) {
	    // Cached version of prime
	    if (primes[name]) return primes[name];

	    var prime;
	    if (name === 'k256') {
	      prime = new K256();
	    } else if (name === 'p224') {
	      prime = new P224();
	    } else if (name === 'p192') {
	      prime = new P192();
	    } else if (name === 'p25519') {
	      prime = new P25519();
	    } else {
	      throw new Error('Unknown prime ' + name);
	    }
	    primes[name] = prime;

	    return prime;
	  };

	  //
	  // Base reduction engine
	  //
	  function Red (m) {
	    if (typeof m === 'string') {
	      var prime = BN._prime(m);
	      this.m = prime.p;
	      this.prime = prime;
	    } else {
	      assert(m.gtn(1), 'modulus must be greater than 1');
	      this.m = m;
	      this.prime = null;
	    }
	  }

	  Red.prototype._verify1 = function _verify1 (a) {
	    assert(a.negative === 0, 'red works only with positives');
	    assert(a.red, 'red works only with red numbers');
	  };

	  Red.prototype._verify2 = function _verify2 (a, b) {
	    assert((a.negative | b.negative) === 0, 'red works only with positives');
	    assert(a.red && a.red === b.red,
	      'red works only with red numbers');
	  };

	  Red.prototype.imod = function imod (a) {
	    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
	    return a.umod(this.m)._forceRed(this);
	  };

	  Red.prototype.neg = function neg (a) {
	    if (a.isZero()) {
	      return a.clone();
	    }

	    return this.m.sub(a)._forceRed(this);
	  };

	  Red.prototype.add = function add (a, b) {
	    this._verify2(a, b);

	    var res = a.add(b);
	    if (res.cmp(this.m) >= 0) {
	      res.isub(this.m);
	    }
	    return res._forceRed(this);
	  };

	  Red.prototype.iadd = function iadd (a, b) {
	    this._verify2(a, b);

	    var res = a.iadd(b);
	    if (res.cmp(this.m) >= 0) {
	      res.isub(this.m);
	    }
	    return res;
	  };

	  Red.prototype.sub = function sub (a, b) {
	    this._verify2(a, b);

	    var res = a.sub(b);
	    if (res.cmpn(0) < 0) {
	      res.iadd(this.m);
	    }
	    return res._forceRed(this);
	  };

	  Red.prototype.isub = function isub (a, b) {
	    this._verify2(a, b);

	    var res = a.isub(b);
	    if (res.cmpn(0) < 0) {
	      res.iadd(this.m);
	    }
	    return res;
	  };

	  Red.prototype.shl = function shl (a, num) {
	    this._verify1(a);
	    return this.imod(a.ushln(num));
	  };

	  Red.prototype.imul = function imul (a, b) {
	    this._verify2(a, b);
	    return this.imod(a.imul(b));
	  };

	  Red.prototype.mul = function mul (a, b) {
	    this._verify2(a, b);
	    return this.imod(a.mul(b));
	  };

	  Red.prototype.isqr = function isqr (a) {
	    return this.imul(a, a.clone());
	  };

	  Red.prototype.sqr = function sqr (a) {
	    return this.mul(a, a);
	  };

	  Red.prototype.sqrt = function sqrt (a) {
	    if (a.isZero()) return a.clone();

	    var mod3 = this.m.andln(3);
	    assert(mod3 % 2 === 1);

	    // Fast case
	    if (mod3 === 3) {
	      var pow = this.m.add(new BN(1)).iushrn(2);
	      return this.pow(a, pow);
	    }

	    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
	    //
	    // Find Q and S, that Q * 2 ^ S = (P - 1)
	    var q = this.m.subn(1);
	    var s = 0;
	    while (!q.isZero() && q.andln(1) === 0) {
	      s++;
	      q.iushrn(1);
	    }
	    assert(!q.isZero());

	    var one = new BN(1).toRed(this);
	    var nOne = one.redNeg();

	    // Find quadratic non-residue
	    // NOTE: Max is such because of generalized Riemann hypothesis.
	    var lpow = this.m.subn(1).iushrn(1);
	    var z = this.m.bitLength();
	    z = new BN(2 * z * z).toRed(this);

	    while (this.pow(z, lpow).cmp(nOne) !== 0) {
	      z.redIAdd(nOne);
	    }

	    var c = this.pow(z, q);
	    var r = this.pow(a, q.addn(1).iushrn(1));
	    var t = this.pow(a, q);
	    var m = s;
	    while (t.cmp(one) !== 0) {
	      var tmp = t;
	      for (var i = 0; tmp.cmp(one) !== 0; i++) {
	        tmp = tmp.redSqr();
	      }
	      assert(i < m);
	      var b = this.pow(c, new BN(1).iushln(m - i - 1));

	      r = r.redMul(b);
	      c = b.redSqr();
	      t = t.redMul(c);
	      m = i;
	    }

	    return r;
	  };

	  Red.prototype.invm = function invm (a) {
	    var inv = a._invmp(this.m);
	    if (inv.negative !== 0) {
	      inv.negative = 0;
	      return this.imod(inv).redNeg();
	    } else {
	      return this.imod(inv);
	    }
	  };

	  Red.prototype.pow = function pow (a, num) {
	    if (num.isZero()) return new BN(1).toRed(this);
	    if (num.cmpn(1) === 0) return a.clone();

	    var windowSize = 4;
	    var wnd = new Array(1 << windowSize);
	    wnd[0] = new BN(1).toRed(this);
	    wnd[1] = a;
	    for (var i = 2; i < wnd.length; i++) {
	      wnd[i] = this.mul(wnd[i - 1], a);
	    }

	    var res = wnd[0];
	    var current = 0;
	    var currentLen = 0;
	    var start = num.bitLength() % 26;
	    if (start === 0) {
	      start = 26;
	    }

	    for (i = num.length - 1; i >= 0; i--) {
	      var word = num.words[i];
	      for (var j = start - 1; j >= 0; j--) {
	        var bit = (word >> j) & 1;
	        if (res !== wnd[0]) {
	          res = this.sqr(res);
	        }

	        if (bit === 0 && current === 0) {
	          currentLen = 0;
	          continue;
	        }

	        current <<= 1;
	        current |= bit;
	        currentLen++;
	        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

	        res = this.mul(res, wnd[current]);
	        currentLen = 0;
	        current = 0;
	      }
	      start = 26;
	    }

	    return res;
	  };

	  Red.prototype.convertTo = function convertTo (num) {
	    var r = num.umod(this.m);

	    return r === num ? r.clone() : r;
	  };

	  Red.prototype.convertFrom = function convertFrom (num) {
	    var res = num.clone();
	    res.red = null;
	    return res;
	  };

	  //
	  // Montgomery method engine
	  //

	  BN.mont = function mont (num) {
	    return new Mont(num);
	  };

	  function Mont (m) {
	    Red.call(this, m);

	    this.shift = this.m.bitLength();
	    if (this.shift % 26 !== 0) {
	      this.shift += 26 - (this.shift % 26);
	    }

	    this.r = new BN(1).iushln(this.shift);
	    this.r2 = this.imod(this.r.sqr());
	    this.rinv = this.r._invmp(this.m);

	    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
	    this.minv = this.minv.umod(this.r);
	    this.minv = this.r.sub(this.minv);
	  }
	  inherits(Mont, Red);

	  Mont.prototype.convertTo = function convertTo (num) {
	    return this.imod(num.ushln(this.shift));
	  };

	  Mont.prototype.convertFrom = function convertFrom (num) {
	    var r = this.imod(num.mul(this.rinv));
	    r.red = null;
	    return r;
	  };

	  Mont.prototype.imul = function imul (a, b) {
	    if (a.isZero() || b.isZero()) {
	      a.words[0] = 0;
	      a.length = 1;
	      return a;
	    }

	    var t = a.imul(b);
	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	    var u = t.isub(c).iushrn(this.shift);
	    var res = u;

	    if (u.cmp(this.m) >= 0) {
	      res = u.isub(this.m);
	    } else if (u.cmpn(0) < 0) {
	      res = u.iadd(this.m);
	    }

	    return res._forceRed(this);
	  };

	  Mont.prototype.mul = function mul (a, b) {
	    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

	    var t = a.mul(b);
	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	    var u = t.isub(c).iushrn(this.shift);
	    var res = u;
	    if (u.cmp(this.m) >= 0) {
	      res = u.isub(this.m);
	    } else if (u.cmpn(0) < 0) {
	      res = u.iadd(this.m);
	    }

	    return res._forceRed(this);
	  };

	  Mont.prototype.invm = function invm (a) {
	    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
	    var res = this.imod(a._invmp(this.m).mul(this.r2));
	    return res._forceRed(this);
	  };
	})(typeof module === 'undefined' || module, this);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(41)(module)))

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var objectAssign = __webpack_require__(352);

	// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
	// original notice:

	/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	function compare(a, b) {
	  if (a === b) {
	    return 0;
	  }

	  var x = a.length;
	  var y = b.length;

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break;
	    }
	  }

	  if (x < y) {
	    return -1;
	  }
	  if (y < x) {
	    return 1;
	  }
	  return 0;
	}
	function isBuffer(b) {
	  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
	    return global.Buffer.isBuffer(b);
	  }
	  return !!(b != null && b._isBuffer);
	}

	// based on node assert, original notice:
	// NB: The URL to the CommonJS spec is kept just for tradition.
	//     node-assert has evolved a lot since then, both in API and behavior.

	// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
	//
	// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
	//
	// Originally from narwhal.js (http://narwhaljs.org)
	// Copyright (c) 2009 Thomas Robinson <280north.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the 'Software'), to
	// deal in the Software without restriction, including without limitation the
	// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	// sell copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
	// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

	var util = __webpack_require__(169);
	var hasOwn = Object.prototype.hasOwnProperty;
	var pSlice = Array.prototype.slice;
	var functionsHaveNames = (function () {
	  return function foo() {}.name === 'foo';
	}());
	function pToString (obj) {
	  return Object.prototype.toString.call(obj);
	}
	function isView(arrbuf) {
	  if (isBuffer(arrbuf)) {
	    return false;
	  }
	  if (typeof global.ArrayBuffer !== 'function') {
	    return false;
	  }
	  if (typeof ArrayBuffer.isView === 'function') {
	    return ArrayBuffer.isView(arrbuf);
	  }
	  if (!arrbuf) {
	    return false;
	  }
	  if (arrbuf instanceof DataView) {
	    return true;
	  }
	  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
	    return true;
	  }
	  return false;
	}
	// 1. The assert module provides functions that throw
	// AssertionError's when particular conditions are not met. The
	// assert module must conform to the following interface.

	var assert = module.exports = ok;

	// 2. The AssertionError is defined in assert.
	// new assert.AssertionError({ message: message,
	//                             actual: actual,
	//                             expected: expected })

	var regex = /\s*function\s+([^\(\s]*)\s*/;
	// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
	function getName(func) {
	  if (!util.isFunction(func)) {
	    return;
	  }
	  if (functionsHaveNames) {
	    return func.name;
	  }
	  var str = func.toString();
	  var match = str.match(regex);
	  return match && match[1];
	}
	assert.AssertionError = function AssertionError(options) {
	  this.name = 'AssertionError';
	  this.actual = options.actual;
	  this.expected = options.expected;
	  this.operator = options.operator;
	  if (options.message) {
	    this.message = options.message;
	    this.generatedMessage = false;
	  } else {
	    this.message = getMessage(this);
	    this.generatedMessage = true;
	  }
	  var stackStartFunction = options.stackStartFunction || fail;
	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, stackStartFunction);
	  } else {
	    // non v8 browsers so we can have a stacktrace
	    var err = new Error();
	    if (err.stack) {
	      var out = err.stack;

	      // try to strip useless frames
	      var fn_name = getName(stackStartFunction);
	      var idx = out.indexOf('\n' + fn_name);
	      if (idx >= 0) {
	        // once we have located the function frame
	        // we need to strip out everything before it (and its line)
	        var next_line = out.indexOf('\n', idx + 1);
	        out = out.substring(next_line + 1);
	      }

	      this.stack = out;
	    }
	  }
	};

	// assert.AssertionError instanceof Error
	util.inherits(assert.AssertionError, Error);

	function truncate(s, n) {
	  if (typeof s === 'string') {
	    return s.length < n ? s : s.slice(0, n);
	  } else {
	    return s;
	  }
	}
	function inspect(something) {
	  if (functionsHaveNames || !util.isFunction(something)) {
	    return util.inspect(something);
	  }
	  var rawname = getName(something);
	  var name = rawname ? ': ' + rawname : '';
	  return '[Function' +  name + ']';
	}
	function getMessage(self) {
	  return truncate(inspect(self.actual), 128) + ' ' +
	         self.operator + ' ' +
	         truncate(inspect(self.expected), 128);
	}

	// At present only the three keys mentioned above are used and
	// understood by the spec. Implementations or sub modules can pass
	// other keys to the AssertionError's constructor - they will be
	// ignored.

	// 3. All of the following functions must throw an AssertionError
	// when a corresponding condition is not met, with a message that
	// may be undefined if not provided.  All assertion methods provide
	// both the actual and expected values to the assertion error for
	// display purposes.

	function fail(actual, expected, message, operator, stackStartFunction) {
	  throw new assert.AssertionError({
	    message: message,
	    actual: actual,
	    expected: expected,
	    operator: operator,
	    stackStartFunction: stackStartFunction
	  });
	}

	// EXTENSION! allows for well behaved errors defined elsewhere.
	assert.fail = fail;

	// 4. Pure assertion tests whether a value is truthy, as determined
	// by !!guard.
	// assert.ok(guard, message_opt);
	// This statement is equivalent to assert.equal(true, !!guard,
	// message_opt);. To test strictly for the value true, use
	// assert.strictEqual(true, guard, message_opt);.

	function ok(value, message) {
	  if (!value) fail(value, true, message, '==', assert.ok);
	}
	assert.ok = ok;

	// 5. The equality assertion tests shallow, coercive equality with
	// ==.
	// assert.equal(actual, expected, message_opt);

	assert.equal = function equal(actual, expected, message) {
	  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
	};

	// 6. The non-equality assertion tests for whether two objects are not equal
	// with != assert.notEqual(actual, expected, message_opt);

	assert.notEqual = function notEqual(actual, expected, message) {
	  if (actual == expected) {
	    fail(actual, expected, message, '!=', assert.notEqual);
	  }
	};

	// 7. The equivalence assertion tests a deep equality relation.
	// assert.deepEqual(actual, expected, message_opt);

	assert.deepEqual = function deepEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected, false)) {
	    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
	  }
	};

	assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected, true)) {
	    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
	  }
	};

	function _deepEqual(actual, expected, strict, memos) {
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;
	  } else if (isBuffer(actual) && isBuffer(expected)) {
	    return compare(actual, expected) === 0;

	  // 7.2. If the expected value is a Date object, the actual value is
	  // equivalent if it is also a Date object that refers to the same time.
	  } else if (util.isDate(actual) && util.isDate(expected)) {
	    return actual.getTime() === expected.getTime();

	  // 7.3 If the expected value is a RegExp object, the actual value is
	  // equivalent if it is also a RegExp object with the same source and
	  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
	  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
	    return actual.source === expected.source &&
	           actual.global === expected.global &&
	           actual.multiline === expected.multiline &&
	           actual.lastIndex === expected.lastIndex &&
	           actual.ignoreCase === expected.ignoreCase;

	  // 7.4. Other pairs that do not both pass typeof value == 'object',
	  // equivalence is determined by ==.
	  } else if ((actual === null || typeof actual !== 'object') &&
	             (expected === null || typeof expected !== 'object')) {
	    return strict ? actual === expected : actual == expected;

	  // If both values are instances of typed arrays, wrap their underlying
	  // ArrayBuffers in a Buffer each to increase performance
	  // This optimization requires the arrays to have the same type as checked by
	  // Object.prototype.toString (aka pToString). Never perform binary
	  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
	  // bit patterns are not identical.
	  } else if (isView(actual) && isView(expected) &&
	             pToString(actual) === pToString(expected) &&
	             !(actual instanceof Float32Array ||
	               actual instanceof Float64Array)) {
	    return compare(new Uint8Array(actual.buffer),
	                   new Uint8Array(expected.buffer)) === 0;

	  // 7.5 For all other Object pairs, including Array objects, equivalence is
	  // determined by having the same number of owned properties (as verified
	  // with Object.prototype.hasOwnProperty.call), the same set of keys
	  // (although not necessarily the same order), equivalent values for every
	  // corresponding key, and an identical 'prototype' property. Note: this
	  // accounts for both named and indexed properties on Arrays.
	  } else if (isBuffer(actual) !== isBuffer(expected)) {
	    return false;
	  } else {
	    memos = memos || {actual: [], expected: []};

	    var actualIndex = memos.actual.indexOf(actual);
	    if (actualIndex !== -1) {
	      if (actualIndex === memos.expected.indexOf(expected)) {
	        return true;
	      }
	    }

	    memos.actual.push(actual);
	    memos.expected.push(expected);

	    return objEquiv(actual, expected, strict, memos);
	  }
	}

	function isArguments(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	}

	function objEquiv(a, b, strict, actualVisitedObjects) {
	  if (a === null || a === undefined || b === null || b === undefined)
	    return false;
	  // if one is a primitive, the other must be same
	  if (util.isPrimitive(a) || util.isPrimitive(b))
	    return a === b;
	  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
	    return false;
	  var aIsArgs = isArguments(a);
	  var bIsArgs = isArguments(b);
	  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
	    return false;
	  if (aIsArgs) {
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return _deepEqual(a, b, strict);
	  }
	  var ka = objectKeys(a);
	  var kb = objectKeys(b);
	  var key, i;
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length !== kb.length)
	    return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] !== kb[i])
	      return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
	      return false;
	  }
	  return true;
	}

	// 8. The non-equivalence assertion tests for any deep inequality.
	// assert.notDeepEqual(actual, expected, message_opt);

	assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected, false)) {
	    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
	  }
	};

	assert.notDeepStrictEqual = notDeepStrictEqual;
	function notDeepStrictEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected, true)) {
	    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
	  }
	}


	// 9. The strict equality assertion tests strict equality, as determined by ===.
	// assert.strictEqual(actual, expected, message_opt);

	assert.strictEqual = function strictEqual(actual, expected, message) {
	  if (actual !== expected) {
	    fail(actual, expected, message, '===', assert.strictEqual);
	  }
	};

	// 10. The strict non-equality assertion tests for strict inequality, as
	// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

	assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
	  if (actual === expected) {
	    fail(actual, expected, message, '!==', assert.notStrictEqual);
	  }
	};

	function expectedException(actual, expected) {
	  if (!actual || !expected) {
	    return false;
	  }

	  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
	    return expected.test(actual);
	  }

	  try {
	    if (actual instanceof expected) {
	      return true;
	    }
	  } catch (e) {
	    // Ignore.  The instanceof check doesn't work for arrow functions.
	  }

	  if (Error.isPrototypeOf(expected)) {
	    return false;
	  }

	  return expected.call({}, actual) === true;
	}

	function _tryBlock(block) {
	  var error;
	  try {
	    block();
	  } catch (e) {
	    error = e;
	  }
	  return error;
	}

	function _throws(shouldThrow, block, expected, message) {
	  var actual;

	  if (typeof block !== 'function') {
	    throw new TypeError('"block" argument must be a function');
	  }

	  if (typeof expected === 'string') {
	    message = expected;
	    expected = null;
	  }

	  actual = _tryBlock(block);

	  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
	            (message ? ' ' + message : '.');

	  if (shouldThrow && !actual) {
	    fail(actual, expected, 'Missing expected exception' + message);
	  }

	  var userProvidedMessage = typeof message === 'string';
	  var isUnwantedException = !shouldThrow && util.isError(actual);
	  var isUnexpectedException = !shouldThrow && actual && !expected;

	  if ((isUnwantedException &&
	      userProvidedMessage &&
	      expectedException(actual, expected)) ||
	      isUnexpectedException) {
	    fail(actual, expected, 'Got unwanted exception' + message);
	  }

	  if ((shouldThrow && actual && expected &&
	      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
	    throw actual;
	  }
	}

	// 11. Expected to throw an error:
	// assert.throws(block, Error_opt, message_opt);

	assert.throws = function(block, /*optional*/error, /*optional*/message) {
	  _throws(true, block, error, message);
	};

	// EXTENSION! This is annoying to write outside this module.
	assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
	  _throws(false, block, error, message);
	};

	assert.ifError = function(err) { if (err) throw err; };

	// Expose a strict only variant of assert
	function strict(value, message) {
	  if (!value) fail(value, true, message, '==', strict);
	}
	assert.strict = objectAssign(strict, assert, {
	  equal: assert.strictEqual,
	  deepEqual: assert.deepStrictEqual,
	  notEqual: assert.notStrictEqual,
	  notDeepEqual: assert.notDeepStrictEqual
	});
	assert.strict.strict = assert.strict;

	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    if (hasOwn.call(obj, key)) keys.push(key);
	  }
	  return keys;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
	/* eslint-disable node/no-deprecated-api */
	var buffer = __webpack_require__(1)
	var Buffer = buffer.Buffer

	// alternative to using Object.keys for old browsers
	function copyProps (src, dst) {
	  for (var key in src) {
	    dst[key] = src[key]
	  }
	}
	if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
	  module.exports = buffer
	} else {
	  // Copy properties from require('buffer')
	  copyProps(buffer, exports)
	  exports.Buffer = SafeBuffer
	}

	function SafeBuffer (arg, encodingOrOffset, length) {
	  return Buffer(arg, encodingOrOffset, length)
	}

	SafeBuffer.prototype = Object.create(Buffer.prototype)

	// Copy static methods from Buffer
	copyProps(Buffer, SafeBuffer)

	SafeBuffer.from = function (arg, encodingOrOffset, length) {
	  if (typeof arg === 'number') {
	    throw new TypeError('Argument must not be a number')
	  }
	  return Buffer(arg, encodingOrOffset, length)
	}

	SafeBuffer.alloc = function (size, fill, encoding) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  var buf = Buffer(size)
	  if (fill !== undefined) {
	    if (typeof encoding === 'string') {
	      buf.fill(fill, encoding)
	    } else {
	      buf.fill(fill)
	    }
	  } else {
	    buf.fill(0)
	  }
	  return buf
	}

	SafeBuffer.allocUnsafe = function (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  return Buffer(size)
	}

	SafeBuffer.allocUnsafeSlow = function (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  return buffer.SlowBuffer(size)
	}


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(26));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./evpkdf"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		/**
		 * Cipher core components.
		 */
		CryptoJS.lib.Cipher || (function (undefined) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var Base = C_lib.Base;
		    var WordArray = C_lib.WordArray;
		    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
		    var C_enc = C.enc;
		    var Utf8 = C_enc.Utf8;
		    var Base64 = C_enc.Base64;
		    var C_algo = C.algo;
		    var EvpKDF = C_algo.EvpKDF;

		    /**
		     * Abstract base cipher template.
		     *
		     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
		     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
		     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
		     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
		     */
		    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {WordArray} iv The IV to use for this operation.
		         */
		        cfg: Base.extend(),

		        /**
		         * Creates this cipher in encryption mode.
		         *
		         * @param {WordArray} key The key.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @return {Cipher} A cipher instance.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
		         */
		        createEncryptor: function (key, cfg) {
		            return this.create(this._ENC_XFORM_MODE, key, cfg);
		        },

		        /**
		         * Creates this cipher in decryption mode.
		         *
		         * @param {WordArray} key The key.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @return {Cipher} A cipher instance.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
		         */
		        createDecryptor: function (key, cfg) {
		            return this.create(this._DEC_XFORM_MODE, key, cfg);
		        },

		        /**
		         * Initializes a newly created cipher.
		         *
		         * @param {number} xformMode Either the encryption or decryption transormation mode constant.
		         * @param {WordArray} key The key.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @example
		         *
		         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
		         */
		        init: function (xformMode, key, cfg) {
		            // Apply config defaults
		            this.cfg = this.cfg.extend(cfg);

		            // Store transform mode and key
		            this._xformMode = xformMode;
		            this._key = key;

		            // Set initial values
		            this.reset();
		        },

		        /**
		         * Resets this cipher to its initial state.
		         *
		         * @example
		         *
		         *     cipher.reset();
		         */
		        reset: function () {
		            // Reset data buffer
		            BufferedBlockAlgorithm.reset.call(this);

		            // Perform concrete-cipher logic
		            this._doReset();
		        },

		        /**
		         * Adds data to be encrypted or decrypted.
		         *
		         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
		         *
		         * @return {WordArray} The data after processing.
		         *
		         * @example
		         *
		         *     var encrypted = cipher.process('data');
		         *     var encrypted = cipher.process(wordArray);
		         */
		        process: function (dataUpdate) {
		            // Append
		            this._append(dataUpdate);

		            // Process available blocks
		            return this._process();
		        },

		        /**
		         * Finalizes the encryption or decryption process.
		         * Note that the finalize operation is effectively a destructive, read-once operation.
		         *
		         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
		         *
		         * @return {WordArray} The data after final processing.
		         *
		         * @example
		         *
		         *     var encrypted = cipher.finalize();
		         *     var encrypted = cipher.finalize('data');
		         *     var encrypted = cipher.finalize(wordArray);
		         */
		        finalize: function (dataUpdate) {
		            // Final data update
		            if (dataUpdate) {
		                this._append(dataUpdate);
		            }

		            // Perform concrete-cipher logic
		            var finalProcessedData = this._doFinalize();

		            return finalProcessedData;
		        },

		        keySize: 128/32,

		        ivSize: 128/32,

		        _ENC_XFORM_MODE: 1,

		        _DEC_XFORM_MODE: 2,

		        /**
		         * Creates shortcut functions to a cipher's object interface.
		         *
		         * @param {Cipher} cipher The cipher to create a helper for.
		         *
		         * @return {Object} An object with encrypt and decrypt shortcut functions.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
		         */
		        _createHelper: (function () {
		            function selectCipherStrategy(key) {
		                if (typeof key == 'string') {
		                    return PasswordBasedCipher;
		                } else {
		                    return SerializableCipher;
		                }
		            }

		            return function (cipher) {
		                return {
		                    encrypt: function (message, key, cfg) {
		                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
		                    },

		                    decrypt: function (ciphertext, key, cfg) {
		                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
		                    }
		                };
		            };
		        }())
		    });

		    /**
		     * Abstract base stream cipher template.
		     *
		     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
		     */
		    var StreamCipher = C_lib.StreamCipher = Cipher.extend({
		        _doFinalize: function () {
		            // Process partial blocks
		            var finalProcessedBlocks = this._process(!!'flush');

		            return finalProcessedBlocks;
		        },

		        blockSize: 1
		    });

		    /**
		     * Mode namespace.
		     */
		    var C_mode = C.mode = {};

		    /**
		     * Abstract base block cipher mode template.
		     */
		    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
		        /**
		         * Creates this mode for encryption.
		         *
		         * @param {Cipher} cipher A block cipher instance.
		         * @param {Array} iv The IV words.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
		         */
		        createEncryptor: function (cipher, iv) {
		            return this.Encryptor.create(cipher, iv);
		        },

		        /**
		         * Creates this mode for decryption.
		         *
		         * @param {Cipher} cipher A block cipher instance.
		         * @param {Array} iv The IV words.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
		         */
		        createDecryptor: function (cipher, iv) {
		            return this.Decryptor.create(cipher, iv);
		        },

		        /**
		         * Initializes a newly created mode.
		         *
		         * @param {Cipher} cipher A block cipher instance.
		         * @param {Array} iv The IV words.
		         *
		         * @example
		         *
		         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
		         */
		        init: function (cipher, iv) {
		            this._cipher = cipher;
		            this._iv = iv;
		        }
		    });

		    /**
		     * Cipher Block Chaining mode.
		     */
		    var CBC = C_mode.CBC = (function () {
		        /**
		         * Abstract base CBC mode.
		         */
		        var CBC = BlockCipherMode.extend();

		        /**
		         * CBC encryptor.
		         */
		        CBC.Encryptor = CBC.extend({
		            /**
		             * Processes the data block at offset.
		             *
		             * @param {Array} words The data words to operate on.
		             * @param {number} offset The offset where the block starts.
		             *
		             * @example
		             *
		             *     mode.processBlock(data.words, offset);
		             */
		            processBlock: function (words, offset) {
		                // Shortcuts
		                var cipher = this._cipher;
		                var blockSize = cipher.blockSize;

		                // XOR and encrypt
		                xorBlock.call(this, words, offset, blockSize);
		                cipher.encryptBlock(words, offset);

		                // Remember this block to use with next block
		                this._prevBlock = words.slice(offset, offset + blockSize);
		            }
		        });

		        /**
		         * CBC decryptor.
		         */
		        CBC.Decryptor = CBC.extend({
		            /**
		             * Processes the data block at offset.
		             *
		             * @param {Array} words The data words to operate on.
		             * @param {number} offset The offset where the block starts.
		             *
		             * @example
		             *
		             *     mode.processBlock(data.words, offset);
		             */
		            processBlock: function (words, offset) {
		                // Shortcuts
		                var cipher = this._cipher;
		                var blockSize = cipher.blockSize;

		                // Remember this block to use with next block
		                var thisBlock = words.slice(offset, offset + blockSize);

		                // Decrypt and XOR
		                cipher.decryptBlock(words, offset);
		                xorBlock.call(this, words, offset, blockSize);

		                // This block becomes the previous block
		                this._prevBlock = thisBlock;
		            }
		        });

		        function xorBlock(words, offset, blockSize) {
		            // Shortcut
		            var iv = this._iv;

		            // Choose mixing block
		            if (iv) {
		                var block = iv;

		                // Remove IV for subsequent blocks
		                this._iv = undefined;
		            } else {
		                var block = this._prevBlock;
		            }

		            // XOR blocks
		            for (var i = 0; i < blockSize; i++) {
		                words[offset + i] ^= block[i];
		            }
		        }

		        return CBC;
		    }());

		    /**
		     * Padding namespace.
		     */
		    var C_pad = C.pad = {};

		    /**
		     * PKCS #5/7 padding strategy.
		     */
		    var Pkcs7 = C_pad.Pkcs7 = {
		        /**
		         * Pads data using the algorithm defined in PKCS #5/7.
		         *
		         * @param {WordArray} data The data to pad.
		         * @param {number} blockSize The multiple that the data should be padded to.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
		         */
		        pad: function (data, blockSize) {
		            // Shortcut
		            var blockSizeBytes = blockSize * 4;

		            // Count padding bytes
		            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

		            // Create padding word
		            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;

		            // Create padding
		            var paddingWords = [];
		            for (var i = 0; i < nPaddingBytes; i += 4) {
		                paddingWords.push(paddingWord);
		            }
		            var padding = WordArray.create(paddingWords, nPaddingBytes);

		            // Add padding
		            data.concat(padding);
		        },

		        /**
		         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
		         *
		         * @param {WordArray} data The data to unpad.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     CryptoJS.pad.Pkcs7.unpad(wordArray);
		         */
		        unpad: function (data) {
		            // Get number of padding bytes from last byte
		            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

		            // Remove padding
		            data.sigBytes -= nPaddingBytes;
		        }
		    };

		    /**
		     * Abstract base block cipher template.
		     *
		     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
		     */
		    var BlockCipher = C_lib.BlockCipher = Cipher.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {Mode} mode The block mode to use. Default: CBC
		         * @property {Padding} padding The padding strategy to use. Default: Pkcs7
		         */
		        cfg: Cipher.cfg.extend({
		            mode: CBC,
		            padding: Pkcs7
		        }),

		        reset: function () {
		            // Reset cipher
		            Cipher.reset.call(this);

		            // Shortcuts
		            var cfg = this.cfg;
		            var iv = cfg.iv;
		            var mode = cfg.mode;

		            // Reset block mode
		            if (this._xformMode == this._ENC_XFORM_MODE) {
		                var modeCreator = mode.createEncryptor;
		            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
		                var modeCreator = mode.createDecryptor;
		                // Keep at least one block in the buffer for unpadding
		                this._minBufferSize = 1;
		            }

		            if (this._mode && this._mode.__creator == modeCreator) {
		                this._mode.init(this, iv && iv.words);
		            } else {
		                this._mode = modeCreator.call(mode, this, iv && iv.words);
		                this._mode.__creator = modeCreator;
		            }
		        },

		        _doProcessBlock: function (words, offset) {
		            this._mode.processBlock(words, offset);
		        },

		        _doFinalize: function () {
		            // Shortcut
		            var padding = this.cfg.padding;

		            // Finalize
		            if (this._xformMode == this._ENC_XFORM_MODE) {
		                // Pad data
		                padding.pad(this._data, this.blockSize);

		                // Process final blocks
		                var finalProcessedBlocks = this._process(!!'flush');
		            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
		                // Process final blocks
		                var finalProcessedBlocks = this._process(!!'flush');

		                // Unpad data
		                padding.unpad(finalProcessedBlocks);
		            }

		            return finalProcessedBlocks;
		        },

		        blockSize: 128/32
		    });

		    /**
		     * A collection of cipher parameters.
		     *
		     * @property {WordArray} ciphertext The raw ciphertext.
		     * @property {WordArray} key The key to this ciphertext.
		     * @property {WordArray} iv The IV used in the ciphering operation.
		     * @property {WordArray} salt The salt used with a key derivation function.
		     * @property {Cipher} algorithm The cipher algorithm.
		     * @property {Mode} mode The block mode used in the ciphering operation.
		     * @property {Padding} padding The padding scheme used in the ciphering operation.
		     * @property {number} blockSize The block size of the cipher.
		     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
		     */
		    var CipherParams = C_lib.CipherParams = Base.extend({
		        /**
		         * Initializes a newly created cipher params object.
		         *
		         * @param {Object} cipherParams An object with any of the possible cipher parameters.
		         *
		         * @example
		         *
		         *     var cipherParams = CryptoJS.lib.CipherParams.create({
		         *         ciphertext: ciphertextWordArray,
		         *         key: keyWordArray,
		         *         iv: ivWordArray,
		         *         salt: saltWordArray,
		         *         algorithm: CryptoJS.algo.AES,
		         *         mode: CryptoJS.mode.CBC,
		         *         padding: CryptoJS.pad.PKCS7,
		         *         blockSize: 4,
		         *         formatter: CryptoJS.format.OpenSSL
		         *     });
		         */
		        init: function (cipherParams) {
		            this.mixIn(cipherParams);
		        },

		        /**
		         * Converts this cipher params object to a string.
		         *
		         * @param {Format} formatter (Optional) The formatting strategy to use.
		         *
		         * @return {string} The stringified cipher params.
		         *
		         * @throws Error If neither the formatter nor the default formatter is set.
		         *
		         * @example
		         *
		         *     var string = cipherParams + '';
		         *     var string = cipherParams.toString();
		         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
		         */
		        toString: function (formatter) {
		            return (formatter || this.formatter).stringify(this);
		        }
		    });

		    /**
		     * Format namespace.
		     */
		    var C_format = C.format = {};

		    /**
		     * OpenSSL formatting strategy.
		     */
		    var OpenSSLFormatter = C_format.OpenSSL = {
		        /**
		         * Converts a cipher params object to an OpenSSL-compatible string.
		         *
		         * @param {CipherParams} cipherParams The cipher params object.
		         *
		         * @return {string} The OpenSSL-compatible string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
		         */
		        stringify: function (cipherParams) {
		            // Shortcuts
		            var ciphertext = cipherParams.ciphertext;
		            var salt = cipherParams.salt;

		            // Format
		            if (salt) {
		                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
		            } else {
		                var wordArray = ciphertext;
		            }

		            return wordArray.toString(Base64);
		        },

		        /**
		         * Converts an OpenSSL-compatible string to a cipher params object.
		         *
		         * @param {string} openSSLStr The OpenSSL-compatible string.
		         *
		         * @return {CipherParams} The cipher params object.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
		         */
		        parse: function (openSSLStr) {
		            // Parse base64
		            var ciphertext = Base64.parse(openSSLStr);

		            // Shortcut
		            var ciphertextWords = ciphertext.words;

		            // Test for salt
		            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
		                // Extract salt
		                var salt = WordArray.create(ciphertextWords.slice(2, 4));

		                // Remove salt from ciphertext
		                ciphertextWords.splice(0, 4);
		                ciphertext.sigBytes -= 16;
		            }

		            return CipherParams.create({ ciphertext: ciphertext, salt: salt });
		        }
		    };

		    /**
		     * A cipher wrapper that returns ciphertext as a serializable cipher params object.
		     */
		    var SerializableCipher = C_lib.SerializableCipher = Base.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
		         */
		        cfg: Base.extend({
		            format: OpenSSLFormatter
		        }),

		        /**
		         * Encrypts a message.
		         *
		         * @param {Cipher} cipher The cipher algorithm to use.
		         * @param {WordArray|string} message The message to encrypt.
		         * @param {WordArray} key The key.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @return {CipherParams} A cipher params object.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
		         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
		         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
		         */
		        encrypt: function (cipher, message, key, cfg) {
		            // Apply config defaults
		            cfg = this.cfg.extend(cfg);

		            // Encrypt
		            var encryptor = cipher.createEncryptor(key, cfg);
		            var ciphertext = encryptor.finalize(message);

		            // Shortcut
		            var cipherCfg = encryptor.cfg;

		            // Create and return serializable cipher params
		            return CipherParams.create({
		                ciphertext: ciphertext,
		                key: key,
		                iv: cipherCfg.iv,
		                algorithm: cipher,
		                mode: cipherCfg.mode,
		                padding: cipherCfg.padding,
		                blockSize: cipher.blockSize,
		                formatter: cfg.format
		            });
		        },

		        /**
		         * Decrypts serialized ciphertext.
		         *
		         * @param {Cipher} cipher The cipher algorithm to use.
		         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
		         * @param {WordArray} key The key.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @return {WordArray} The plaintext.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
		         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
		         */
		        decrypt: function (cipher, ciphertext, key, cfg) {
		            // Apply config defaults
		            cfg = this.cfg.extend(cfg);

		            // Convert string to CipherParams
		            ciphertext = this._parse(ciphertext, cfg.format);

		            // Decrypt
		            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);

		            return plaintext;
		        },

		        /**
		         * Converts serialized ciphertext to CipherParams,
		         * else assumed CipherParams already and returns ciphertext unchanged.
		         *
		         * @param {CipherParams|string} ciphertext The ciphertext.
		         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
		         *
		         * @return {CipherParams} The unserialized ciphertext.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
		         */
		        _parse: function (ciphertext, format) {
		            if (typeof ciphertext == 'string') {
		                return format.parse(ciphertext, this);
		            } else {
		                return ciphertext;
		            }
		        }
		    });

		    /**
		     * Key derivation function namespace.
		     */
		    var C_kdf = C.kdf = {};

		    /**
		     * OpenSSL key derivation function.
		     */
		    var OpenSSLKdf = C_kdf.OpenSSL = {
		        /**
		         * Derives a key and IV from a password.
		         *
		         * @param {string} password The password to derive from.
		         * @param {number} keySize The size in words of the key to generate.
		         * @param {number} ivSize The size in words of the IV to generate.
		         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
		         *
		         * @return {CipherParams} A cipher params object with the key, IV, and salt.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
		         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
		         */
		        execute: function (password, keySize, ivSize, salt) {
		            // Generate random salt
		            if (!salt) {
		                salt = WordArray.random(64/8);
		            }

		            // Derive key and IV
		            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);

		            // Separate key and IV
		            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
		            key.sigBytes = keySize * 4;

		            // Return params
		            return CipherParams.create({ key: key, iv: iv, salt: salt });
		        }
		    };

		    /**
		     * A serializable cipher wrapper that derives the key from a password,
		     * and returns ciphertext as a serializable cipher params object.
		     */
		    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
		         */
		        cfg: SerializableCipher.cfg.extend({
		            kdf: OpenSSLKdf
		        }),

		        /**
		         * Encrypts a message using a password.
		         *
		         * @param {Cipher} cipher The cipher algorithm to use.
		         * @param {WordArray|string} message The message to encrypt.
		         * @param {string} password The password.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @return {CipherParams} A cipher params object.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
		         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
		         */
		        encrypt: function (cipher, message, password, cfg) {
		            // Apply config defaults
		            cfg = this.cfg.extend(cfg);

		            // Derive key and other params
		            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);

		            // Add IV to config
		            cfg.iv = derivedParams.iv;

		            // Encrypt
		            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);

		            // Mix in derived params
		            ciphertext.mixIn(derivedParams);

		            return ciphertext;
		        },

		        /**
		         * Decrypts serialized ciphertext using a password.
		         *
		         * @param {Cipher} cipher The cipher algorithm to use.
		         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
		         * @param {string} password The password.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @return {WordArray} The plaintext.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
		         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
		         */
		        decrypt: function (cipher, ciphertext, password, cfg) {
		            // Apply config defaults
		            cfg = this.cfg.extend(cfg);

		            // Convert string to CipherParams
		            ciphertext = this._parse(ciphertext, cfg.format);

		            // Derive key and other params
		            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);

		            // Add IV to config
		            cfg.iv = derivedParams.iv;

		            // Decrypt
		            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);

		            return plaintext;
		        }
		    });
		}());


	}));

/***/ },
/* 8 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;

	process.listeners = function (name) { return [] }

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/*
	    This file is part of web3.js.

	    web3.js is free software: you can redistribute it and/or modify
	    it under the terms of the GNU Lesser General Public License as published by
	    the Free Software Foundation, either version 3 of the License, or
	    (at your option) any later version.

	    web3.js is distributed in the hope that it will be useful,
	    but WITHOUT ANY WARRANTY; without even the implied warranty of
	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	    GNU Lesser General Public License for more details.

	    You should have received a copy of the GNU Lesser General Public License
	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	*/
	/**
	 * @file utils.js
	 * @author Marek Kotewicz <marek@ethdev.com>
	 * @date 2015
	 */

	/**
	 * Utils
	 *
	 * @module utils
	 */

	/**
	 * Utility functions
	 *
	 * @class [utils] utils
	 * @constructor
	 */


	var BigNumber = __webpack_require__(42);
	var sha3 = __webpack_require__(50);
	var utf8 = __webpack_require__(381);

	var unitMap = {
	    'noether':      '0',
	    'wei':          '1',
	    'kwei':         '1000',
	    'Kwei':         '1000',
	    'babbage':      '1000',
	    'femtoether':   '1000',
	    'mwei':         '1000000',
	    'Mwei':         '1000000',
	    'lovelace':     '1000000',
	    'picoether':    '1000000',
	    'gwei':         '1000000000',
	    'Gwei':         '1000000000',
	    'shannon':      '1000000000',
	    'nanoether':    '1000000000',
	    'nano':         '1000000000',
	    'szabo':        '1000000000000',
	    'microether':   '1000000000000',
	    'micro':        '1000000000000',
	    'finney':       '1000000000000000',
	    'milliether':   '1000000000000000',
	    'milli':        '1000000000000000',
	    'ether':        '1000000000000000000',
	    'kether':       '1000000000000000000000',
	    'grand':        '1000000000000000000000',
	    'mether':       '1000000000000000000000000',
	    'gether':       '1000000000000000000000000000',
	    'tether':       '1000000000000000000000000000000'
	};

	/**
	 * Should be called to pad string to expected length
	 *
	 * @method padLeft
	 * @param {String} string to be padded
	 * @param {Number} characters that result string should have
	 * @param {String} sign, by default 0
	 * @returns {String} right aligned string
	 */
	var padLeft = function (string, chars, sign) {
	    return new Array(chars - string.length + 1).join(sign ? sign : "0") + string;
	};

	/**
	 * Should be called to pad string to expected length
	 *
	 * @method padRight
	 * @param {String} string to be padded
	 * @param {Number} characters that result string should have
	 * @param {String} sign, by default 0
	 * @returns {String} right aligned string
	 */
	var padRight = function (string, chars, sign) {
	    return string + (new Array(chars - string.length + 1).join(sign ? sign : "0"));
	};

	/**
	 * Should be called to get utf8 from it's hex representation
	 *
	 * @method toUtf8
	 * @param {String} string in hex
	 * @returns {String} ascii string representation of hex value
	 */
	var toUtf8 = function(hex) {
	// Find termination
	    var str = "";
	    var i = 0, l = hex.length;
	    if (hex.substring(0, 2) === '0x') {
	        i = 2;
	    }
	    for (; i < l; i+=2) {
	        var code = parseInt(hex.substr(i, 2), 16);
	        if (code === 0)
	            break;
	        str += String.fromCharCode(code);
	    }

	    return utf8.decode(str);
	};

	/**
	 * Should be called to get ascii from it's hex representation
	 *
	 * @method toAscii
	 * @param {String} string in hex
	 * @returns {String} ascii string representation of hex value
	 */
	var toAscii = function(hex) {
	// Find termination
	    var str = "";
	    var i = 0, l = hex.length;
	    if (hex.substring(0, 2) === '0x') {
	        i = 2;
	    }
	    for (; i < l; i+=2) {
	        var code = parseInt(hex.substr(i, 2), 16);
	        str += String.fromCharCode(code);
	    }

	    return str;
	};

	/**
	 * Should be called to get hex representation (prefixed by 0x) of utf8 string
	 *
	 * @method fromUtf8
	 * @param {String} string
	 * @param {Boolean} allowZero to convert code point zero to 00 instead of end of string
	 * @returns {String} hex representation of input string
	 */
	var fromUtf8 = function(str, allowZero) {
	    str = utf8.encode(str);
	    var hex = "";
	    for(var i = 0; i < str.length; i++) {
	        var code = str.charCodeAt(i);
	        if (code === 0) {
	            if (allowZero) {
	                hex += '00';
	            } else {
	                break;
	            }
	        } else {
	            var n = code.toString(16);
	            hex += n.length < 2 ? '0' + n : n;
	        }
	    }

	    return "0x" + hex;
	};

	/**
	 * Should be called to get hex representation (prefixed by 0x) of ascii string
	 *
	 * @method fromAscii
	 * @param {String} string
	 * @param {Number} optional padding
	 * @returns {String} hex representation of input string
	 */
	var fromAscii = function(str, num) {
	    var hex = "";
	    for(var i = 0; i < str.length; i++) {
	        var code = str.charCodeAt(i);
	        var n = code.toString(16);
	        hex += n.length < 2 ? '0' + n : n;
	    }

	    return "0x" + hex.padEnd(num,'0');
	};

	/**
	 * Should be used to create full function/event name from json abi
	 *
	 * @method transformToFullName
	 * @param {Object} json-abi
	 * @return {String} full fnction/event name
	 */
	var transformToFullName = function (json) {
	    if (json.name.indexOf('(') !== -1) {
	        return json.name;
	    }

	    var typeName = json.inputs.map(function(i){return i.type; }).join();
	    return json.name + '(' + typeName + ')';
	};

	/**
	 * Should be called to get display name of contract function
	 *
	 * @method extractDisplayName
	 * @param {String} name of function/event
	 * @returns {String} display name for function/event eg. multiply(uint256) -> multiply
	 */
	var extractDisplayName = function (name) {
	    var stBracket = name.indexOf('(');
	    var endBracket = name.indexOf(')');
	    return (stBracket !== -1 && endBracket !== -1) ? name.substr(0, stBracket) : name;
	};

	/**
	 * Should be called to get type name of contract function
	 *
	 * @method extractTypeName
	 * @param {String} name of function/event
	 * @returns {String} type name for function/event eg. multiply(uint256) -> uint256
	 */
	var extractTypeName = function (name) {
	    var stBracket = name.indexOf('(');
	    var endBracket = name.indexOf(')');
	    return (stBracket !== -1 && endBracket !== -1) ? name.substr(stBracket + 1, endBracket - stBracket - 1).replace(' ', '') : "";
	};

	/**
	 * Converts value to it's decimal representation in string
	 *
	 * @method toDecimal
	 * @param {String|Number|BigNumber}
	 * @return {String}
	 */
	var toDecimal = function (value) {
	    return toBigNumber(value).toNumber();
	};

	/**
	 * Converts value to it's hex representation
	 *
	 * @method fromDecimal
	 * @param {String|Number|BigNumber}
	 * @return {String}
	 */
	var fromDecimal = function (value) {
	    var number = toBigNumber(value);
	    var result = number.toString(16);

	    return number.lessThan(0) ? '-0x' + result.substr(1) : '0x' + result;
	};

	/**
	 * Auto converts any given value into it's hex representation.
	 *
	 * And even stringifys objects before.
	 *
	 * @method toHex
	 * @param {String|Number|BigNumber|Object}
	 * @return {String}
	 */
	var toHex = function (val) {
	    /*jshint maxcomplexity: 8 */

	    if (isBoolean(val))
	        return fromDecimal(+val);

	    if (isBigNumber(val))
	        return fromDecimal(val);

	    if (typeof val === 'object')
	        return fromUtf8(JSON.stringify(val));

	    // if its a negative number, pass it through fromDecimal
	    if (isString(val)) {
	        if (val.indexOf('-0x') === 0)
	            return fromDecimal(val);
	        else if(val.indexOf('0x') === 0)
	            return val;
	        else if (!isFinite(val))
	            return fromUtf8(val,1);
	    }

	    return fromDecimal(val);
	};

	/**
	 * Returns value of unit in Wei
	 *
	 * @method getValueOfUnit
	 * @param {String} unit the unit to convert to, default ether
	 * @returns {BigNumber} value of the unit (in Wei)
	 * @throws error if the unit is not correct:w
	 */
	var getValueOfUnit = function (unit) {
	    unit = unit ? unit.toLowerCase() : 'ether';
	    var unitValue = unitMap[unit];
	    if (unitValue === undefined) {
	        throw new Error('This unit doesn\'t exists, please use the one of the following units' + JSON.stringify(unitMap, null, 2));
	    }
	    return new BigNumber(unitValue, 10);
	};

	/**
	 * Takes a number of wei and converts it to any other ether unit.
	 *
	 * Possible units are:
	 *   SI Short   SI Full        Effigy       Other
	 * - kwei       femtoether     babbage
	 * - mwei       picoether      lovelace
	 * - gwei       nanoether      shannon      nano
	 * - --         microether     szabo        micro
	 * - --         milliether     finney       milli
	 * - ether      --             --
	 * - kether                    --           grand
	 * - mether
	 * - gether
	 * - tether
	 *
	 * @method fromWei
	 * @param {Number|String} number can be a number, number string or a HEX of a decimal
	 * @param {String} unit the unit to convert to, default ether
	 * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number
	*/
	var fromWei = function(number, unit) {
	    var returnValue = toBigNumber(number).dividedBy(getValueOfUnit(unit));

	    return isBigNumber(number) ? returnValue : returnValue.toString(10);
	};

	/**
	 * Takes a number of a unit and converts it to wei.
	 *
	 * Possible units are:
	 *   SI Short   SI Full        Effigy       Other
	 * - kwei       femtoether     babbage
	 * - mwei       picoether      lovelace
	 * - gwei       nanoether      shannon      nano
	 * - --         microether     szabo        micro
	 * - --         milliether     finney       milli
	 * - ether      --             --
	 * - kether                    --           grand
	 * - mether
	 * - gether
	 * - tether
	 *
	 * @method toWei
	 * @param {Number|String|BigNumber} number can be a number, number string or a HEX of a decimal
	 * @param {String} unit the unit to convert from, default ether
	 * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number
	*/
	var toWei = function(number, unit) {
	    var returnValue = toBigNumber(number).times(getValueOfUnit(unit));

	    return isBigNumber(number) ? returnValue : returnValue.toString(10);
	};

	/**
	 * Takes an input and transforms it into an bignumber
	 *
	 * @method toBigNumber
	 * @param {Number|String|BigNumber} a number, string, HEX string or BigNumber
	 * @return {BigNumber} BigNumber
	*/
	var toBigNumber = function(number) {
	    /*jshint maxcomplexity:5 */
	    number = number || 0;
	    if (isBigNumber(number))
	        return number;

	    if (isString(number) && (number.indexOf('0x') === 0 || number.indexOf('-0x') === 0)) {
	        return new BigNumber(number.replace('0x',''), 16);
	    }

	    return new BigNumber(number.toString(10), 10);
	};

	/**
	 * Takes and input transforms it into bignumber and if it is negative value, into two's complement
	 *
	 * @method toTwosComplement
	 * @param {Number|String|BigNumber}
	 * @return {BigNumber}
	 */
	var toTwosComplement = function (number) {
	    var bigNumber = toBigNumber(number).round();
	    if (bigNumber.lessThan(0)) {
	        return new BigNumber("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 16).plus(bigNumber).plus(1);
	    }
	    return bigNumber;
	};

	/**
	 * Checks if the given string is strictly an address
	 *
	 * @method isStrictAddress
	 * @param {String} address the given HEX adress
	 * @return {Boolean}
	*/
	var isStrictAddress = function (address) {
	    return /^0x[0-9a-f]{40}$/i.test(address);
	};

	/**
	 * Checks if the given string is an address
	 *
	 * @method isAddress
	 * @param {String} address the given HEX adress
	 * @return {Boolean}
	*/
	var isAddress = function (address) {
	    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {
	        // check if it has the basic requirements of an address
	        return false;
	    } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {
	        // If it's all small caps or all all caps, return true
	        return true;
	    } else {
	        // Otherwise check each case
	        return isChecksumAddress(address);
	    }
	};

	/**
	 * Checks if the given string is a checksummed address
	 *
	 * @method isChecksumAddress
	 * @param {String} address the given HEX adress
	 * @return {Boolean}
	*/
	var isChecksumAddress = function (address) {
	    // Check each case
	    address = address.replace('0x','');
	    var addressHash = sha3(address.toLowerCase());

	    for (var i = 0; i < 40; i++ ) {
	        // the nth letter should be uppercase if the nth digit of casemap is 1
	        if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {
	            return false;
	        }
	    }
	    return true;
	};



	/**
	 * Makes a checksum address
	 *
	 * @method toChecksumAddress
	 * @param {String} address the given HEX adress
	 * @return {String}
	*/
	var toChecksumAddress = function (address) {
	    if (typeof address === 'undefined') return '';

	    address = address.toLowerCase().replace('0x','');
	    var addressHash = sha3(address);
	    var checksumAddress = '0x';

	    for (var i = 0; i < address.length; i++ ) {
	        // If ith character is 9 to f then make it uppercase
	        if (parseInt(addressHash[i], 16) > 7) {
	          checksumAddress += address[i].toUpperCase();
	        } else {
	            checksumAddress += address[i];
	        }
	    }
	    return checksumAddress;
	};

	/**
	 * Transforms given string to valid 20 bytes-length addres with 0x prefix
	 *
	 * @method toAddress
	 * @param {String} address
	 * @return {String} formatted address
	 */
	var toAddress = function (address) {
	    if (isStrictAddress(address)) {
	        return address;
	    }

	    if (/^[0-9a-f]{40}$/.test(address)) {
	        return '0x' + address;
	    }

	    return '0x' + padLeft(toHex(address).substr(2), 40);
	};

	/**
	 * Returns true if object is BigNumber, otherwise false
	 *
	 * @method isBigNumber
	 * @param {Object}
	 * @return {Boolean}
	 */
	var isBigNumber = function (object) {
	    return object instanceof BigNumber ||
	        (object && object.constructor && object.constructor.name === 'BigNumber');
	};

	/**
	 * Returns true if object is string, otherwise false
	 *
	 * @method isString
	 * @param {Object}
	 * @return {Boolean}
	 */
	var isString = function (object) {
	    return typeof object === 'string' ||
	        (object && object.constructor && object.constructor.name === 'String');
	};

	/**
	 * Returns true if object is function, otherwise false
	 *
	 * @method isFunction
	 * @param {Object}
	 * @return {Boolean}
	 */
	var isFunction = function (object) {
	    return typeof object === 'function';
	};

	/**
	 * Returns true if object is Objet, otherwise false
	 *
	 * @method isObject
	 * @param {Object}
	 * @return {Boolean}
	 */
	var isObject = function (object) {
	    return object !== null && !(Array.isArray(object)) && typeof object === 'object';
	};

	/**
	 * Returns true if object is boolean, otherwise false
	 *
	 * @method isBoolean
	 * @param {Object}
	 * @return {Boolean}
	 */
	var isBoolean = function (object) {
	    return typeof object === 'boolean';
	};

	/**
	 * Returns true if object is array, otherwise false
	 *
	 * @method isArray
	 * @param {Object}
	 * @return {Boolean}
	 */
	var isArray = function (object) {
	    return Array.isArray(object);
	};

	/**
	 * Returns true if given string is valid json object
	 *
	 * @method isJson
	 * @param {String}
	 * @return {Boolean}
	 */
	var isJson = function (str) {
	    try {
	        return !!JSON.parse(str);
	    } catch (e) {
	        return false;
	    }
	};

	/**
	 * Returns true if given string is a valid Ethereum block header bloom.
	 *
	 * @method isBloom
	 * @param {String} hex encoded bloom filter
	 * @return {Boolean}
	 */
	var isBloom = function (bloom) {
	    if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {
	        return false;
	    } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {
	        return true;
	    }
	    return false;
	};

	/**
	 * Returns true if given string is a valid log topic.
	 *
	 * @method isTopic
	 * @param {String} hex encoded topic
	 * @return {Boolean}
	 */
	var isTopic = function (topic) {
	    if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {
	        return false;
	    } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {
	        return true;
	    }
	    return false;
	};

	module.exports = {
	    padLeft: padLeft,
	    padRight: padRight,
	    toHex: toHex,
	    toDecimal: toDecimal,
	    fromDecimal: fromDecimal,
	    toUtf8: toUtf8,
	    toAscii: toAscii,
	    fromUtf8: fromUtf8,
	    fromAscii: fromAscii,
	    transformToFullName: transformToFullName,
	    extractDisplayName: extractDisplayName,
	    extractTypeName: extractTypeName,
	    toWei: toWei,
	    fromWei: fromWei,
	    toBigNumber: toBigNumber,
	    toTwosComplement: toTwosComplement,
	    toAddress: toAddress,
	    isBigNumber: isBigNumber,
	    isStrictAddress: isStrictAddress,
	    isAddress: isAddress,
	    isChecksumAddress: isChecksumAddress,
	    toChecksumAddress: toChecksumAddress,
	    isFunction: isFunction,
	    isString: isString,
	    isObject: isObject,
	    isBoolean: isBoolean,
	    isArray: isArray,
	    isJson: isJson,
	    isBloom: isBloom,
	    isTopic: isTopic,
	};


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = exports;
	var BN = __webpack_require__(4);
	var minAssert = __webpack_require__(27);
	var minUtils = __webpack_require__(139);

	utils.assert = minAssert;
	utils.toArray = minUtils.toArray;
	utils.zero2 = minUtils.zero2;
	utils.toHex = minUtils.toHex;
	utils.encode = minUtils.encode;

	// Represent num in a w-NAF form
	function getNAF(num, w, bits) {
	  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
	  naf.fill(0);

	  var ws = 1 << (w + 1);
	  var k = num.clone();

	  for (var i = 0; i < naf.length; i++) {
	    var z;
	    var mod = k.andln(ws - 1);
	    if (k.isOdd()) {
	      if (mod > (ws >> 1) - 1)
	        z = (ws >> 1) - mod;
	      else
	        z = mod;
	      k.isubn(z);
	    } else {
	      z = 0;
	    }

	    naf[i] = z;
	    k.iushrn(1);
	  }

	  return naf;
	}
	utils.getNAF = getNAF;

	// Represent k1, k2 in a Joint Sparse Form
	function getJSF(k1, k2) {
	  var jsf = [
	    [],
	    []
	  ];

	  k1 = k1.clone();
	  k2 = k2.clone();
	  var d1 = 0;
	  var d2 = 0;
	  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

	    // First phase
	    var m14 = (k1.andln(3) + d1) & 3;
	    var m24 = (k2.andln(3) + d2) & 3;
	    if (m14 === 3)
	      m14 = -1;
	    if (m24 === 3)
	      m24 = -1;
	    var u1;
	    if ((m14 & 1) === 0) {
	      u1 = 0;
	    } else {
	      var m8 = (k1.andln(7) + d1) & 7;
	      if ((m8 === 3 || m8 === 5) && m24 === 2)
	        u1 = -m14;
	      else
	        u1 = m14;
	    }
	    jsf[0].push(u1);

	    var u2;
	    if ((m24 & 1) === 0) {
	      u2 = 0;
	    } else {
	      var m8 = (k2.andln(7) + d2) & 7;
	      if ((m8 === 3 || m8 === 5) && m14 === 2)
	        u2 = -m24;
	      else
	        u2 = m24;
	    }
	    jsf[1].push(u2);

	    // Second phase
	    if (2 * d1 === u1 + 1)
	      d1 = 1 - d1;
	    if (2 * d2 === u2 + 1)
	      d2 = 1 - d2;
	    k1.iushrn(1);
	    k2.iushrn(1);
	  }

	  return jsf;
	}
	utils.getJSF = getJSF;

	function cachedProperty(obj, name, computer) {
	  var key = '_' + name;
	  obj.prototype[name] = function cachedProperty() {
	    return this[key] !== undefined ? this[key] :
	           this[key] = computer.call(this);
	  };
	}
	utils.cachedProperty = cachedProperty;

	function parseBytes(bytes) {
	  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
	                                     bytes;
	}
	utils.parseBytes = parseBytes;

	function intFromLE(bytes) {
	  return new BN(bytes, 'hex', 'le');
	}
	utils.intFromLE = intFromLE;



/***/ },
/* 11 */
[428, 384, 383],
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/*
	    This file is part of web3.js.

	    web3.js is free software: you can redistribute it and/or modify
	    it under the terms of the GNU Lesser General Public License as published by
	    the Free Software Foundation, either version 3 of the License, or
	    (at your option) any later version.

	    web3.js is distributed in the hope that it will be useful,
	    but WITHOUT ANY WARRANTY; without even the implied warranty of
	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	    GNU Lesser General Public License for more details.

	    You should have received a copy of the GNU Lesser General Public License
	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	*/
	/**
	 * @file formatters.js
	 * @author Marek Kotewicz <marek@ethdev.com>
	 * @date 2015
	 */

	var BigNumber = __webpack_require__(42);
	var utils = __webpack_require__(9);
	var c = __webpack_require__(67);
	var SolidityParam = __webpack_require__(158);


	/**
	 * Formats input value to byte representation of int
	 * If value is negative, return it's two's complement
	 * If the value is floating point, round it down
	 *
	 * @method formatInputInt
	 * @param {String|Number|BigNumber} value that needs to be formatted
	 * @returns {SolidityParam}
	 */
	var formatInputInt = function (value) {
	    BigNumber.config(c.ETH_BIGNUMBER_ROUNDING_MODE);
	    var result = utils.padLeft(utils.toTwosComplement(value).toString(16), 64);
	    return new SolidityParam(result);
	};

	/**
	 * Formats input bytes
	 *
	 * @method formatInputBytes
	 * @param {String}
	 * @returns {SolidityParam}
	 */
	var formatInputBytes = function (value) {
	    var result = utils.toHex(value).substr(2);
	    var l = Math.floor((result.length + 63) / 64);
	    result = utils.padRight(result, l * 64);
	    return new SolidityParam(result);
	};

	/**
	 * Formats input bytes
	 *
	 * @method formatDynamicInputBytes
	 * @param {String}
	 * @returns {SolidityParam}
	 */
	var formatInputDynamicBytes = function (value) {
	    var result = utils.toHex(value).substr(2);
	    var length = result.length / 2;
	    var l = Math.floor((result.length + 63) / 64);
	    result = utils.padRight(result, l * 64);
	    return new SolidityParam(formatInputInt(length).value + result);
	};

	/**
	 * Formats input value to byte representation of string
	 *
	 * @method formatInputString
	 * @param {String}
	 * @returns {SolidityParam}
	 */
	var formatInputString = function (value) {
	    var result = utils.fromUtf8(value).substr(2);
	    var length = result.length / 2;
	    var l = Math.floor((result.length + 63) / 64);
	    result = utils.padRight(result, l * 64);
	    return new SolidityParam(formatInputInt(length).value + result);
	};

	/**
	 * Formats input value to byte representation of bool
	 *
	 * @method formatInputBool
	 * @param {Boolean}
	 * @returns {SolidityParam}
	 */
	var formatInputBool = function (value) {
	    var result = '000000000000000000000000000000000000000000000000000000000000000' + (value ?  '1' : '0');
	    return new SolidityParam(result);
	};

	/**
	 * Formats input value to byte representation of real
	 * Values are multiplied by 2^m and encoded as integers
	 *
	 * @method formatInputReal
	 * @param {String|Number|BigNumber}
	 * @returns {SolidityParam}
	 */
	var formatInputReal = function (value) {
	    return formatInputInt(new BigNumber(value).times(new BigNumber(2).pow(128)));
	};

	/**
	 * Check if input value is negative
	 *
	 * @method signedIsNegative
	 * @param {String} value is hex format
	 * @returns {Boolean} true if it is negative, otherwise false
	 */
	var signedIsNegative = function (value) {
	    return (new BigNumber(value.substr(0, 1), 16).toString(2).substr(0, 1)) === '1';
	};

	/**
	 * Formats right-aligned output bytes to int
	 *
	 * @method formatOutputInt
	 * @param {SolidityParam} param
	 * @returns {BigNumber} right-aligned output bytes formatted to big number
	 */
	var formatOutputInt = function (param) {
	    var value = param.staticPart() || "0";

	    // check if it's negative number
	    // it it is, return two's complement
	    if (signedIsNegative(value)) {
	        return new BigNumber(value, 16).minus(new BigNumber('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16)).minus(1);
	    }
	    return new BigNumber(value, 16);
	};

	/**
	 * Formats right-aligned output bytes to uint
	 *
	 * @method formatOutputUInt
	 * @param {SolidityParam}
	 * @returns {BigNumeber} right-aligned output bytes formatted to uint
	 */
	var formatOutputUInt = function (param) {
	    var value = param.staticPart() || "0";
	    return new BigNumber(value, 16);
	};

	/**
	 * Formats right-aligned output bytes to real
	 *
	 * @method formatOutputReal
	 * @param {SolidityParam}
	 * @returns {BigNumber} input bytes formatted to real
	 */
	var formatOutputReal = function (param) {
	    return formatOutputInt(param).dividedBy(new BigNumber(2).pow(128));
	};

	/**
	 * Formats right-aligned output bytes to ureal
	 *
	 * @method formatOutputUReal
	 * @param {SolidityParam}
	 * @returns {BigNumber} input bytes formatted to ureal
	 */
	var formatOutputUReal = function (param) {
	    return formatOutputUInt(param).dividedBy(new BigNumber(2).pow(128));
	};

	/**
	 * Should be used to format output bool
	 *
	 * @method formatOutputBool
	 * @param {SolidityParam}
	 * @returns {Boolean} right-aligned input bytes formatted to bool
	 */
	var formatOutputBool = function (param) {
	    return param.staticPart() === '0000000000000000000000000000000000000000000000000000000000000001' ? true : false;
	};

	/**
	 * Should be used to format output bytes
	 *
	 * @method formatOutputBytes
	 * @param {SolidityParam} left-aligned hex representation of string
	 * @param {String} name type name
	 * @returns {String} hex string
	 */
	var formatOutputBytes = function (param, name) {
	    var matches = name.match(/^bytes([0-9]*)/);
	    var size = parseInt(matches[1]);
	    return '0x' + param.staticPart().slice(0, 2 * size);
	};

	/**
	 * Should be used to format output bytes
	 *
	 * @method formatOutputDynamicBytes
	 * @param {SolidityParam} left-aligned hex representation of string
	 * @returns {String} hex string
	 */
	var formatOutputDynamicBytes = function (param) {
	    var length = (new BigNumber(param.dynamicPart().slice(0, 64), 16)).toNumber() * 2;
	    return '0x' + param.dynamicPart().substr(64, length);
	};

	/**
	 * Should be used to format output string
	 *
	 * @method formatOutputString
	 * @param {SolidityParam} left-aligned hex representation of string
	 * @returns {String} ascii string
	 */
	var formatOutputString = function (param) {
	    var length = (new BigNumber(param.dynamicPart().slice(0, 64), 16)).toNumber() * 2;
	    return utils.toUtf8(param.dynamicPart().substr(64, length));
	};

	/**
	 * Should be used to format output address
	 *
	 * @method formatOutputAddress
	 * @param {SolidityParam} right-aligned input bytes
	 * @returns {String} address
	 */
	var formatOutputAddress = function (param) {
	    var value = param.staticPart();
	    return "0x" + value.slice(value.length - 40, value.length);
	};

	module.exports = {
	    formatInputInt: formatInputInt,
	    formatInputBytes: formatInputBytes,
	    formatInputDynamicBytes: formatInputDynamicBytes,
	    formatInputString: formatInputString,
	    formatInputBool: formatInputBool,
	    formatInputReal: formatInputReal,
	    formatOutputInt: formatOutputInt,
	    formatOutputUInt: formatOutputUInt,
	    formatOutputReal: formatOutputReal,
	    formatOutputUReal: formatOutputUReal,
	    formatOutputBool: formatOutputBool,
	    formatOutputBytes: formatOutputBytes,
	    formatOutputDynamicBytes: formatOutputDynamicBytes,
	    formatOutputString: formatOutputString,
	    formatOutputAddress: formatOutputAddress
	};


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var assert = __webpack_require__(27);
	var inherits = __webpack_require__(3);

	exports.inherits = inherits;

	function isSurrogatePair(msg, i) {
	  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
	    return false;
	  }
	  if (i < 0 || i + 1 >= msg.length) {
	    return false;
	  }
	  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
	}

	function toArray(msg, enc) {
	  if (Array.isArray(msg))
	    return msg.slice();
	  if (!msg)
	    return [];
	  var res = [];
	  if (typeof msg === 'string') {
	    if (!enc) {
	      // Inspired by stringToUtf8ByteArray() in closure-library by Google
	      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
	      // Apache License 2.0
	      // https://github.com/google/closure-library/blob/master/LICENSE
	      var p = 0;
	      for (var i = 0; i < msg.length; i++) {
	        var c = msg.charCodeAt(i);
	        if (c < 128) {
	          res[p++] = c;
	        } else if (c < 2048) {
	          res[p++] = (c >> 6) | 192;
	          res[p++] = (c & 63) | 128;
	        } else if (isSurrogatePair(msg, i)) {
	          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
	          res[p++] = (c >> 18) | 240;
	          res[p++] = ((c >> 12) & 63) | 128;
	          res[p++] = ((c >> 6) & 63) | 128;
	          res[p++] = (c & 63) | 128;
	        } else {
	          res[p++] = (c >> 12) | 224;
	          res[p++] = ((c >> 6) & 63) | 128;
	          res[p++] = (c & 63) | 128;
	        }
	      }
	    } else if (enc === 'hex') {
	      msg = msg.replace(/[^a-z0-9]+/ig, '');
	      if (msg.length % 2 !== 0)
	        msg = '0' + msg;
	      for (i = 0; i < msg.length; i += 2)
	        res.push(parseInt(msg[i] + msg[i + 1], 16));
	    }
	  } else {
	    for (i = 0; i < msg.length; i++)
	      res[i] = msg[i] | 0;
	  }
	  return res;
	}
	exports.toArray = toArray;

	function toHex(msg) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++)
	    res += zero2(msg[i].toString(16));
	  return res;
	}
	exports.toHex = toHex;

	function htonl(w) {
	  var res = (w >>> 24) |
	            ((w >>> 8) & 0xff00) |
	            ((w << 8) & 0xff0000) |
	            ((w & 0xff) << 24);
	  return res >>> 0;
	}
	exports.htonl = htonl;

	function toHex32(msg, endian) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++) {
	    var w = msg[i];
	    if (endian === 'little')
	      w = htonl(w);
	    res += zero8(w.toString(16));
	  }
	  return res;
	}
	exports.toHex32 = toHex32;

	function zero2(word) {
	  if (word.length === 1)
	    return '0' + word;
	  else
	    return word;
	}
	exports.zero2 = zero2;

	function zero8(word) {
	  if (word.length === 7)
	    return '0' + word;
	  else if (word.length === 6)
	    return '00' + word;
	  else if (word.length === 5)
	    return '000' + word;
	  else if (word.length === 4)
	    return '0000' + word;
	  else if (word.length === 3)
	    return '00000' + word;
	  else if (word.length === 2)
	    return '000000' + word;
	  else if (word.length === 1)
	    return '0000000' + word;
	  else
	    return word;
	}
	exports.zero8 = zero8;

	function join32(msg, start, end, endian) {
	  var len = end - start;
	  assert(len % 4 === 0);
	  var res = new Array(len / 4);
	  for (var i = 0, k = start; i < res.length; i++, k += 4) {
	    var w;
	    if (endian === 'big')
	      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
	    else
	      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
	    res[i] = w >>> 0;
	  }
	  return res;
	}
	exports.join32 = join32;

	function split32(msg, endian) {
	  var res = new Array(msg.length * 4);
	  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
	    var m = msg[i];
	    if (endian === 'big') {
	      res[k] = m >>> 24;
	      res[k + 1] = (m >>> 16) & 0xff;
	      res[k + 2] = (m >>> 8) & 0xff;
	      res[k + 3] = m & 0xff;
	    } else {
	      res[k + 3] = m >>> 24;
	      res[k + 2] = (m >>> 16) & 0xff;
	      res[k + 1] = (m >>> 8) & 0xff;
	      res[k] = m & 0xff;
	    }
	  }
	  return res;
	}
	exports.split32 = split32;

	function rotr32(w, b) {
	  return (w >>> b) | (w << (32 - b));
	}
	exports.rotr32 = rotr32;

	function rotl32(w, b) {
	  return (w << b) | (w >>> (32 - b));
	}
	exports.rotl32 = rotl32;

	function sum32(a, b) {
	  return (a + b) >>> 0;
	}
	exports.sum32 = sum32;

	function sum32_3(a, b, c) {
	  return (a + b + c) >>> 0;
	}
	exports.sum32_3 = sum32_3;

	function sum32_4(a, b, c, d) {
	  return (a + b + c + d) >>> 0;
	}
	exports.sum32_4 = sum32_4;

	function sum32_5(a, b, c, d, e) {
	  return (a + b + c + d + e) >>> 0;
	}
	exports.sum32_5 = sum32_5;

	function sum64(buf, pos, ah, al) {
	  var bh = buf[pos];
	  var bl = buf[pos + 1];

	  var lo = (al + bl) >>> 0;
	  var hi = (lo < al ? 1 : 0) + ah + bh;
	  buf[pos] = hi >>> 0;
	  buf[pos + 1] = lo;
	}
	exports.sum64 = sum64;

	function sum64_hi(ah, al, bh, bl) {
	  var lo = (al + bl) >>> 0;
	  var hi = (lo < al ? 1 : 0) + ah + bh;
	  return hi >>> 0;
	}
	exports.sum64_hi = sum64_hi;

	function sum64_lo(ah, al, bh, bl) {
	  var lo = al + bl;
	  return lo >>> 0;
	}
	exports.sum64_lo = sum64_lo;

	function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
	  var carry = 0;
	  var lo = al;
	  lo = (lo + bl) >>> 0;
	  carry += lo < al ? 1 : 0;
	  lo = (lo + cl) >>> 0;
	  carry += lo < cl ? 1 : 0;
	  lo = (lo + dl) >>> 0;
	  carry += lo < dl ? 1 : 0;

	  var hi = ah + bh + ch + dh + carry;
	  return hi >>> 0;
	}
	exports.sum64_4_hi = sum64_4_hi;

	function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
	  var lo = al + bl + cl + dl;
	  return lo >>> 0;
	}
	exports.sum64_4_lo = sum64_4_lo;

	function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
	  var carry = 0;
	  var lo = al;
	  lo = (lo + bl) >>> 0;
	  carry += lo < al ? 1 : 0;
	  lo = (lo + cl) >>> 0;
	  carry += lo < cl ? 1 : 0;
	  lo = (lo + dl) >>> 0;
	  carry += lo < dl ? 1 : 0;
	  lo = (lo + el) >>> 0;
	  carry += lo < el ? 1 : 0;

	  var hi = ah + bh + ch + dh + eh + carry;
	  return hi >>> 0;
	}
	exports.sum64_5_hi = sum64_5_hi;

	function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
	  var lo = al + bl + cl + dl + el;

	  return lo >>> 0;
	}
	exports.sum64_5_lo = sum64_5_lo;

	function rotr64_hi(ah, al, num) {
	  var r = (al << (32 - num)) | (ah >>> num);
	  return r >>> 0;
	}
	exports.rotr64_hi = rotr64_hi;

	function rotr64_lo(ah, al, num) {
	  var r = (ah << (32 - num)) | (al >>> num);
	  return r >>> 0;
	}
	exports.rotr64_lo = rotr64_lo;

	function shr64_hi(ah, al, num) {
	  return ah >>> num;
	}
	exports.shr64_hi = shr64_hi;

	function shr64_lo(ah, al, num) {
	  var r = (ah << (32 - num)) | (al >>> num);
	  return r >>> 0;
	}
	exports.shr64_lo = shr64_lo;


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	var ERRORS = __webpack_require__(155)
	var NATIVE = __webpack_require__(96)

	// short-hand
	var tfJSON = ERRORS.tfJSON
	var TfTypeError = ERRORS.TfTypeError
	var TfPropertyTypeError = ERRORS.TfPropertyTypeError
	var tfSubError = ERRORS.tfSubError
	var getValueTypeName = ERRORS.getValueTypeName

	var TYPES = {
	  arrayOf: function arrayOf (type, options) {
	    type = compile(type)
	    options = options || {}

	    function _arrayOf (array, strict) {
	      if (!NATIVE.Array(array)) return false
	      if (NATIVE.Nil(array)) return false
	      if (options.minLength !== undefined && array.length < options.minLength) return false
	      if (options.maxLength !== undefined && array.length > options.maxLength) return false
	      if (options.length !== undefined && array.length !== options.length) return false

	      return array.every(function (value, i) {
	        try {
	          return typeforce(type, value, strict)
	        } catch (e) {
	          throw tfSubError(e, i)
	        }
	      })
	    }
	    _arrayOf.toJSON = function () {
	      var str = '[' + tfJSON(type) + ']'
	      if (options.length !== undefined) {
	        str += '{' + options.length + '}'
	      } else if (options.minLength !== undefined || options.maxLength !== undefined) {
	        str += '{' +
	          (options.minLength === undefined ? 0 : options.minLength) + ',' +
	          (options.maxLength === undefined ? Infinity : options.maxLength) + '}'
	      }
	      return str
	    }

	    return _arrayOf
	  },

	  maybe: function maybe (type) {
	    type = compile(type)

	    function _maybe (value, strict) {
	      return NATIVE.Nil(value) || type(value, strict, maybe)
	    }
	    _maybe.toJSON = function () { return '?' + tfJSON(type) }

	    return _maybe
	  },

	  map: function map (propertyType, propertyKeyType) {
	    propertyType = compile(propertyType)
	    if (propertyKeyType) propertyKeyType = compile(propertyKeyType)

	    function _map (value, strict) {
	      if (!NATIVE.Object(value)) return false
	      if (NATIVE.Nil(value)) return false

	      for (var propertyName in value) {
	        try {
	          if (propertyKeyType) {
	            typeforce(propertyKeyType, propertyName, strict)
	          }
	        } catch (e) {
	          throw tfSubError(e, propertyName, 'key')
	        }

	        try {
	          var propertyValue = value[propertyName]
	          typeforce(propertyType, propertyValue, strict)
	        } catch (e) {
	          throw tfSubError(e, propertyName)
	        }
	      }

	      return true
	    }

	    if (propertyKeyType) {
	      _map.toJSON = function () {
	        return '{' + tfJSON(propertyKeyType) + ': ' + tfJSON(propertyType) + '}'
	      }
	    } else {
	      _map.toJSON = function () { return '{' + tfJSON(propertyType) + '}' }
	    }

	    return _map
	  },

	  object: function object (uncompiled) {
	    var type = {}

	    for (var typePropertyName in uncompiled) {
	      type[typePropertyName] = compile(uncompiled[typePropertyName])
	    }

	    function _object (value, strict) {
	      if (!NATIVE.Object(value)) return false
	      if (NATIVE.Nil(value)) return false

	      var propertyName

	      try {
	        for (propertyName in type) {
	          var propertyType = type[propertyName]
	          var propertyValue = value[propertyName]

	          typeforce(propertyType, propertyValue, strict)
	        }
	      } catch (e) {
	        throw tfSubError(e, propertyName)
	      }

	      if (strict) {
	        for (propertyName in value) {
	          if (type[propertyName]) continue

	          throw new TfPropertyTypeError(undefined, propertyName)
	        }
	      }

	      return true
	    }
	    _object.toJSON = function () { return tfJSON(type) }

	    return _object
	  },

	  anyOf: function anyOf () {
	    var types = [].slice.call(arguments).map(compile)

	    function _anyOf (value, strict) {
	      return types.some(function (type) {
	        try {
	          return typeforce(type, value, strict)
	        } catch (e) {
	          return false
	        }
	      })
	    }
	    _anyOf.toJSON = function () { return types.map(tfJSON).join('|') }

	    return _anyOf
	  },

	  allOf: function allOf () {
	    var types = [].slice.call(arguments).map(compile)

	    function _allOf (value, strict) {
	      return types.every(function (type) {
	        try {
	          return typeforce(type, value, strict)
	        } catch (e) {
	          return false
	        }
	      })
	    }
	    _allOf.toJSON = function () { return types.map(tfJSON).join(' & ') }

	    return _allOf
	  },

	  quacksLike: function quacksLike (type) {
	    function _quacksLike (value) {
	      return type === getValueTypeName(value)
	    }
	    _quacksLike.toJSON = function () { return type }

	    return _quacksLike
	  },

	  tuple: function tuple () {
	    var types = [].slice.call(arguments).map(compile)

	    function _tuple (values, strict) {
	      if (NATIVE.Nil(values)) return false
	      if (NATIVE.Nil(values.length)) return false
	      if (strict && (values.length !== types.length)) return false

	      return types.every(function (type, i) {
	        try {
	          return typeforce(type, values[i], strict)
	        } catch (e) {
	          throw tfSubError(e, i)
	        }
	      })
	    }
	    _tuple.toJSON = function () { return '(' + types.map(tfJSON).join(', ') + ')' }

	    return _tuple
	  },

	  value: function value (expected) {
	    function _value (actual) {
	      return actual === expected
	    }
	    _value.toJSON = function () { return expected }

	    return _value
	  }
	}

	// TODO: deprecate
	TYPES.oneOf = TYPES.anyOf

	function compile (type) {
	  if (NATIVE.String(type)) {
	    if (type[0] === '?') return TYPES.maybe(type.slice(1))

	    return NATIVE[type] || TYPES.quacksLike(type)
	  } else if (type && NATIVE.Object(type)) {
	    if (NATIVE.Array(type)) {
	      if (type.length !== 1) throw new TypeError('Expected compile() parameter of type Array of length 1')
	      return TYPES.arrayOf(type[0])
	    }

	    return TYPES.object(type)
	  } else if (NATIVE.Function(type)) {
	    return type
	  }

	  return TYPES.value(type)
	}

	function typeforce (type, value, strict, surrogate) {
	  if (NATIVE.Function(type)) {
	    if (type(value, strict)) return true

	    throw new TfTypeError(surrogate || type, value)
	  }

	  // JIT
	  return typeforce(compile(type), value, strict)
	}

	// assign types to typeforce function
	for (var typeName in NATIVE) {
	  typeforce[typeName] = NATIVE[typeName]
	}

	for (typeName in TYPES) {
	  typeforce[typeName] = TYPES[typeName]
	}

	var EXTRA = __webpack_require__(379)
	for (typeName in EXTRA) {
	  typeforce[typeName] = EXTRA[typeName]
	}

	typeforce.compile = compile
	typeforce.TfTypeError = TfTypeError
	typeforce.TfPropertyTypeError = TfPropertyTypeError

	module.exports = typeforce


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	var BigInteger = __webpack_require__(109)

	//addons
	__webpack_require__(216)

	module.exports = BigInteger

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Stream;

	var EE = __webpack_require__(19).EventEmitter;
	var inherits = __webpack_require__(3);

	inherits(Stream, EE);
	Stream.Readable = __webpack_require__(374);
	Stream.Writable = __webpack_require__(376);
	Stream.Duplex = __webpack_require__(372);
	Stream.Transform = __webpack_require__(375);
	Stream.PassThrough = __webpack_require__(373);

	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;



	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.

	function Stream() {
	  EE.call(this);
	}

	Stream.prototype.pipe = function(dest, options) {
	  var source = this;

	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }

	  source.on('data', ondata);

	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }

	  dest.on('drain', ondrain);

	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }

	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    dest.end();
	  }


	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    if (typeof dest.destroy === 'function') dest.destroy();
	  }

	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
	    cleanup();
	    if (EE.listenerCount(this, 'error') === 0) {
	      throw er; // Unhandled stream error in pipe.
	    }
	  }

	  source.on('error', onerror);
	  dest.on('error', onerror);

	  // remove all the event listeners that were added.
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);

	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);

	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);

	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);

	    dest.removeListener('close', cleanup);
	  }

	  source.on('end', cleanup);
	  source.on('close', cleanup);

	  dest.on('close', cleanup);

	  dest.emit('pipe', source);

	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	var f = __webpack_require__(12);
	var SolidityParam = __webpack_require__(158);

	/**
	 * SolidityType prototype is used to encode/decode solidity params of certain type
	 */
	var SolidityType = function (config) {
	    this._inputFormatter = config.inputFormatter;
	    this._outputFormatter = config.outputFormatter;
	};

	/**
	 * Should be used to determine if this SolidityType do match given name
	 *
	 * @method isType
	 * @param {String} name
	 * @return {Bool} true if type match this SolidityType, otherwise false
	 */
	SolidityType.prototype.isType = function (name) {
	    throw "this method should be overrwritten for type " + name;
	};

	/**
	 * Should be used to determine what is the length of static part in given type
	 *
	 * @method staticPartLength
	 * @param {String} name
	 * @return {Number} length of static part in bytes
	 */
	SolidityType.prototype.staticPartLength = function (name) {
	    // If name isn't an array then treat it like a single element array.
	    return (this.nestedTypes(name) || ['[1]'])
	        .map(function (type) {
	            // the length of the nested array
	            return parseInt(type.slice(1, -1), 10) || 1;
	        })
	        .reduce(function (previous, current) {
	            return previous * current;
	        // all basic types are 32 bytes long
	        }, 32);
	};

	/**
	 * Should be used to determine if type is dynamic array
	 * eg:
	 * "type[]" => true
	 * "type[4]" => false
	 *
	 * @method isDynamicArray
	 * @param {String} name
	 * @return {Bool} true if the type is dynamic array
	 */
	SolidityType.prototype.isDynamicArray = function (name) {
	    var nestedTypes = this.nestedTypes(name);
	    return !!nestedTypes && !nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);
	};

	/**
	 * Should be used to determine if type is static array
	 * eg:
	 * "type[]" => false
	 * "type[4]" => true
	 *
	 * @method isStaticArray
	 * @param {String} name
	 * @return {Bool} true if the type is static array
	 */
	SolidityType.prototype.isStaticArray = function (name) {
	    var nestedTypes = this.nestedTypes(name);
	    return !!nestedTypes && !!nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);
	};

	/**
	 * Should return length of static array
	 * eg.
	 * "int[32]" => 32
	 * "int256[14]" => 14
	 * "int[2][3]" => 3
	 * "int" => 1
	 * "int[1]" => 1
	 * "int[]" => 1
	 *
	 * @method staticArrayLength
	 * @param {String} name
	 * @return {Number} static array length
	 */
	SolidityType.prototype.staticArrayLength = function (name) {
	    var nestedTypes = this.nestedTypes(name);
	    if (nestedTypes) {
	       return parseInt(nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g) || 1);
	    }
	    return 1;
	};

	/**
	 * Should return nested type
	 * eg.
	 * "int[32]" => "int"
	 * "int256[14]" => "int256"
	 * "int[2][3]" => "int[2]"
	 * "int" => "int"
	 * "int[]" => "int"
	 *
	 * @method nestedName
	 * @param {String} name
	 * @return {String} nested name
	 */
	SolidityType.prototype.nestedName = function (name) {
	    // remove last [] in name
	    var nestedTypes = this.nestedTypes(name);
	    if (!nestedTypes) {
	        return name;
	    }

	    return name.substr(0, name.length - nestedTypes[nestedTypes.length - 1].length);
	};

	/**
	 * Should return true if type has dynamic size by default
	 * such types are "string", "bytes"
	 *
	 * @method isDynamicType
	 * @param {String} name
	 * @return {Bool} true if is dynamic, otherwise false
	 */
	SolidityType.prototype.isDynamicType = function () {
	    return false;
	};

	/**
	 * Should return array of nested types
	 * eg.
	 * "int[2][3][]" => ["[2]", "[3]", "[]"]
	 * "int[] => ["[]"]
	 * "int" => null
	 *
	 * @method nestedTypes
	 * @param {String} name
	 * @return {Array} array of nested types
	 */
	SolidityType.prototype.nestedTypes = function (name) {
	    // return list of strings eg. "[]", "[3]", "[]", "[2]"
	    return name.match(/(\[[0-9]*\])/g);
	};

	/**
	 * Should be used to encode the value
	 *
	 * @method encode
	 * @param {Object} value
	 * @param {String} name
	 * @return {String} encoded value
	 */
	SolidityType.prototype.encode = function (value, name) {
	    var self = this;
	    if (this.isDynamicArray(name)) {

	        return (function () {
	            var length = value.length;                          // in int
	            var nestedName = self.nestedName(name);

	            var result = [];
	            result.push(f.formatInputInt(length).encode());

	            value.forEach(function (v) {
	                result.push(self.encode(v, nestedName));
	            });

	            return result;
	        })();

	    } else if (this.isStaticArray(name)) {

	        return (function () {
	            var length = self.staticArrayLength(name);          // in int
	            var nestedName = self.nestedName(name);

	            var result = [];
	            for (var i = 0; i < length; i++) {
	                result.push(self.encode(value[i], nestedName));
	            }

	            return result;
	        })();

	    }

	    return this._inputFormatter(value, name).encode();
	};

	/**
	 * Should be used to decode value from bytes
	 *
	 * @method decode
	 * @param {String} bytes
	 * @param {Number} offset in bytes
	 * @param {String} name type name
	 * @returns {Object} decoded value
	 */
	SolidityType.prototype.decode = function (bytes, offset, name) {
	    var self = this;

	    if (this.isDynamicArray(name)) {

	        return (function () {
	            var arrayOffset = parseInt('0x' + bytes.substr(offset * 2, 64)); // in bytes
	            var length = parseInt('0x' + bytes.substr(arrayOffset * 2, 64)); // in int
	            var arrayStart = arrayOffset + 32; // array starts after length; // in bytes

	            var nestedName = self.nestedName(name);
	            var nestedStaticPartLength = self.staticPartLength(nestedName);  // in bytes
	            var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;
	            var result = [];

	            for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {
	                result.push(self.decode(bytes, arrayStart + i, nestedName));
	            }

	            return result;
	        })();

	    } else if (this.isStaticArray(name)) {

	        return (function () {
	            var length = self.staticArrayLength(name);                      // in int
	            var arrayStart = offset;                                        // in bytes

	            var nestedName = self.nestedName(name);
	            var nestedStaticPartLength = self.staticPartLength(nestedName); // in bytes
	            var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;
	            var result = [];

	            for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {
	                result.push(self.decode(bytes, arrayStart + i, nestedName));
	            }

	            return result;
	        })();
	    } else if (this.isDynamicType(name)) {

	        return (function () {
	            var dynamicOffset = parseInt('0x' + bytes.substr(offset * 2, 64));      // in bytes
	            var length = parseInt('0x' + bytes.substr(dynamicOffset * 2, 64));      // in bytes
	            var roundedLength = Math.floor((length + 31) / 32);                     // in int
	            var param = new SolidityParam(bytes.substr(dynamicOffset * 2, ( 1 + roundedLength) * 64), 0);
	            return self._outputFormatter(param, name);
	        })();
	    }

	    var length = this.staticPartLength(name);
	    var param = new SolidityParam(bytes.substr(offset * 2, length * 2));
	    return this._outputFormatter(param, name);
	};

	module.exports = SolidityType;


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

	var isHexPrefixed = __webpack_require__(130);
	var stripHexPrefix = __webpack_require__(377);

	/**
	 * Pads a `String` to have an even length
	 * @param {String} value
	 * @return {String} output
	 */
	function padToEven(value) {
	  var a = value; // eslint-disable-line

	  if (typeof a !== 'string') {
	    throw new Error('[ethjs-util] while padding to even, value must be string, is currently ' + typeof a + ', while padToEven.');
	  }

	  if (a.length % 2) {
	    a = '0' + a;
	  }

	  return a;
	}

	/**
	 * Converts a `Number` into a hex `String`
	 * @param {Number} i
	 * @return {String}
	 */
	function intToHex(i) {
	  var hex = i.toString(16); // eslint-disable-line

	  return '0x' + hex;
	}

	/**
	 * Converts an `Number` to a `Buffer`
	 * @param {Number} i
	 * @return {Buffer}
	 */
	function intToBuffer(i) {
	  var hex = intToHex(i);

	  return new Buffer(padToEven(hex.slice(2)), 'hex');
	}

	/**
	 * Get the binary size of a string
	 * @param {String} str
	 * @return {Number}
	 */
	function getBinarySize(str) {
	  if (typeof str !== 'string') {
	    throw new Error('[ethjs-util] while getting binary size, method getBinarySize requires input \'str\' to be type String, got \'' + typeof str + '\'.');
	  }

	  return Buffer.byteLength(str, 'utf8');
	}

	/**
	 * Returns TRUE if the first specified array contains all elements
	 * from the second one. FALSE otherwise.
	 *
	 * @param {array} superset
	 * @param {array} subset
	 *
	 * @returns {boolean}
	 */
	function arrayContainsArray(superset, subset, some) {
	  if (Array.isArray(superset) !== true) {
	    throw new Error('[ethjs-util] method arrayContainsArray requires input \'superset\' to be an array got type \'' + typeof superset + '\'');
	  }
	  if (Array.isArray(subset) !== true) {
	    throw new Error('[ethjs-util] method arrayContainsArray requires input \'subset\' to be an array got type \'' + typeof subset + '\'');
	  }

	  return subset[Boolean(some) && 'some' || 'every'](function (value) {
	    return superset.indexOf(value) >= 0;
	  });
	}

	/**
	 * Should be called to get utf8 from it's hex representation
	 *
	 * @method toUtf8
	 * @param {String} string in hex
	 * @returns {String} ascii string representation of hex value
	 */
	function toUtf8(hex) {
	  var bufferValue = new Buffer(padToEven(stripHexPrefix(hex).replace(/^0+|0+$/g, '')), 'hex');

	  return bufferValue.toString('utf8');
	}

	/**
	 * Should be called to get ascii from it's hex representation
	 *
	 * @method toAscii
	 * @param {String} string in hex
	 * @returns {String} ascii string representation of hex value
	 */
	function toAscii(hex) {
	  var str = ''; // eslint-disable-line
	  var i = 0,
	      l = hex.length; // eslint-disable-line

	  if (hex.substring(0, 2) === '0x') {
	    i = 2;
	  }

	  for (; i < l; i += 2) {
	    var code = parseInt(hex.substr(i, 2), 16);
	    str += String.fromCharCode(code);
	  }

	  return str;
	}

	/**
	 * Should be called to get hex representation (prefixed by 0x) of utf8 string
	 *
	 * @method fromUtf8
	 * @param {String} string
	 * @param {Number} optional padding
	 * @returns {String} hex representation of input string
	 */
	function fromUtf8(stringValue) {
	  var str = new Buffer(stringValue, 'utf8');

	  return '0x' + padToEven(str.toString('hex')).replace(/^0+|0+$/g, '');
	}

	/**
	 * Should be called to get hex representation (prefixed by 0x) of ascii string
	 *
	 * @method fromAscii
	 * @param {String} string
	 * @param {Number} optional padding
	 * @returns {String} hex representation of input string
	 */
	function fromAscii(stringValue) {
	  var hex = ''; // eslint-disable-line
	  for (var i = 0; i < stringValue.length; i++) {
	    // eslint-disable-line
	    var code = stringValue.charCodeAt(i);
	    var n = code.toString(16);
	    hex += n.length < 2 ? '0' + n : n;
	  }

	  return '0x' + hex;
	}

	/**
	 * getKeys([{a: 1, b: 2}, {a: 3, b: 4}], 'a') => [1, 3]
	 *
	 * @method getKeys get specific key from inner object array of objects
	 * @param {String} params
	 * @param {String} key
	 * @param {Boolean} allowEmpty
	 * @returns {Array} output just a simple array of output keys
	 */
	function getKeys(params, key, allowEmpty) {
	  if (!Array.isArray(params)) {
	    throw new Error('[ethjs-util] method getKeys expecting type Array as \'params\' input, got \'' + typeof params + '\'');
	  }
	  if (typeof key !== 'string') {
	    throw new Error('[ethjs-util] method getKeys expecting type String for input \'key\' got \'' + typeof key + '\'.');
	  }

	  var result = []; // eslint-disable-line

	  for (var i = 0; i < params.length; i++) {
	    // eslint-disable-line
	    var value = params[i][key]; // eslint-disable-line
	    if (allowEmpty && !value) {
	      value = '';
	    } else if (typeof value !== 'string') {
	      throw new Error('invalid abi');
	    }
	    result.push(value);
	  }

	  return result;
	}

	/**
	 * Is the string a hex string.
	 *
	 * @method check if string is hex string of specific length
	 * @param {String} value
	 * @param {Number} length
	 * @returns {Boolean} output the string is a hex string
	 */
	function isHexString(value, length) {
	  if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {
	    return false;
	  }

	  if (length && value.length !== 2 + 2 * length) {
	    return false;
	  }

	  return true;
	}

	module.exports = {
	  arrayContainsArray: arrayContainsArray,
	  intToBuffer: intToBuffer,
	  getBinarySize: getBinarySize,
	  isHexPrefixed: isHexPrefixed,
	  stripHexPrefix: stripHexPrefix,
	  padToEven: padToEven,
	  intToHex: intToHex,
	  fromAscii: fromAscii,
	  fromUtf8: fromUtf8,
	  toAscii: toAscii,
	  toUtf8: toUtf8,
	  getKeys: getKeys,
	  isHexString: isHexString
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 19 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	var R = typeof Reflect === 'object' ? Reflect : null
	var ReflectApply = R && typeof R.apply === 'function'
	  ? R.apply
	  : function ReflectApply(target, receiver, args) {
	    return Function.prototype.apply.call(target, receiver, args);
	  }

	var ReflectOwnKeys
	if (R && typeof R.ownKeys === 'function') {
	  ReflectOwnKeys = R.ownKeys
	} else if (Object.getOwnPropertySymbols) {
	  ReflectOwnKeys = function ReflectOwnKeys(target) {
	    return Object.getOwnPropertyNames(target)
	      .concat(Object.getOwnPropertySymbols(target));
	  };
	} else {
	  ReflectOwnKeys = function ReflectOwnKeys(target) {
	    return Object.getOwnPropertyNames(target);
	  };
	}

	function ProcessEmitWarning(warning) {
	  if (console && console.warn) console.warn(warning);
	}

	var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
	  return value !== value;
	}

	function EventEmitter() {
	  EventEmitter.init.call(this);
	}
	module.exports = EventEmitter;
	module.exports.once = once;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._eventsCount = 0;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	var defaultMaxListeners = 10;

	function checkListener(listener) {
	  if (typeof listener !== 'function') {
	    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
	  }
	}

	Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
	  enumerable: true,
	  get: function() {
	    return defaultMaxListeners;
	  },
	  set: function(arg) {
	    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
	      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
	    }
	    defaultMaxListeners = arg;
	  }
	});

	EventEmitter.init = function() {

	  if (this._events === undefined ||
	      this._events === Object.getPrototypeOf(this)._events) {
	    this._events = Object.create(null);
	    this._eventsCount = 0;
	  }

	  this._maxListeners = this._maxListeners || undefined;
	};

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
	  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
	    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
	  }
	  this._maxListeners = n;
	  return this;
	};

	function _getMaxListeners(that) {
	  if (that._maxListeners === undefined)
	    return EventEmitter.defaultMaxListeners;
	  return that._maxListeners;
	}

	EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
	  return _getMaxListeners(this);
	};

	EventEmitter.prototype.emit = function emit(type) {
	  var args = [];
	  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
	  var doError = (type === 'error');

	  var events = this._events;
	  if (events !== undefined)
	    doError = (doError && events.error === undefined);
	  else if (!doError)
	    return false;

	  // If there is no 'error' event listener then throw.
	  if (doError) {
	    var er;
	    if (args.length > 0)
	      er = args[0];
	    if (er instanceof Error) {
	      // Note: The comments on the `throw` lines are intentional, they show
	      // up in Node's output if this results in an unhandled exception.
	      throw er; // Unhandled 'error' event
	    }
	    // At least give some kind of context to the user
	    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
	    err.context = er;
	    throw err; // Unhandled 'error' event
	  }

	  var handler = events[type];

	  if (handler === undefined)
	    return false;

	  if (typeof handler === 'function') {
	    ReflectApply(handler, this, args);
	  } else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      ReflectApply(listeners[i], this, args);
	  }

	  return true;
	};

	function _addListener(target, type, listener, prepend) {
	  var m;
	  var events;
	  var existing;

	  checkListener(listener);

	  events = target._events;
	  if (events === undefined) {
	    events = target._events = Object.create(null);
	    target._eventsCount = 0;
	  } else {
	    // To avoid recursion in the case that type === "newListener"! Before
	    // adding it to the listeners, first emit "newListener".
	    if (events.newListener !== undefined) {
	      target.emit('newListener', type,
	                  listener.listener ? listener.listener : listener);

	      // Re-assign `events` because a newListener handler could have caused the
	      // this._events to be assigned to a new object
	      events = target._events;
	    }
	    existing = events[type];
	  }

	  if (existing === undefined) {
	    // Optimize the case of one listener. Don't need the extra array object.
	    existing = events[type] = listener;
	    ++target._eventsCount;
	  } else {
	    if (typeof existing === 'function') {
	      // Adding the second element, need to change to array.
	      existing = events[type] =
	        prepend ? [listener, existing] : [existing, listener];
	      // If we've already got an array, just append.
	    } else if (prepend) {
	      existing.unshift(listener);
	    } else {
	      existing.push(listener);
	    }

	    // Check for listener leak
	    m = _getMaxListeners(target);
	    if (m > 0 && existing.length > m && !existing.warned) {
	      existing.warned = true;
	      // No error code for this since it is a Warning
	      // eslint-disable-next-line no-restricted-syntax
	      var w = new Error('Possible EventEmitter memory leak detected. ' +
	                          existing.length + ' ' + String(type) + ' listeners ' +
	                          'added. Use emitter.setMaxListeners() to ' +
	                          'increase limit');
	      w.name = 'MaxListenersExceededWarning';
	      w.emitter = target;
	      w.type = type;
	      w.count = existing.length;
	      ProcessEmitWarning(w);
	    }
	  }

	  return target;
	}

	EventEmitter.prototype.addListener = function addListener(type, listener) {
	  return _addListener(this, type, listener, false);
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.prependListener =
	    function prependListener(type, listener) {
	      return _addListener(this, type, listener, true);
	    };

	function onceWrapper() {
	  if (!this.fired) {
	    this.target.removeListener(this.type, this.wrapFn);
	    this.fired = true;
	    if (arguments.length === 0)
	      return this.listener.call(this.target);
	    return this.listener.apply(this.target, arguments);
	  }
	}

	function _onceWrap(target, type, listener) {
	  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
	  var wrapped = onceWrapper.bind(state);
	  wrapped.listener = listener;
	  state.wrapFn = wrapped;
	  return wrapped;
	}

	EventEmitter.prototype.once = function once(type, listener) {
	  checkListener(listener);
	  this.on(type, _onceWrap(this, type, listener));
	  return this;
	};

	EventEmitter.prototype.prependOnceListener =
	    function prependOnceListener(type, listener) {
	      checkListener(listener);
	      this.prependListener(type, _onceWrap(this, type, listener));
	      return this;
	    };

	// Emits a 'removeListener' event if and only if the listener was removed.
	EventEmitter.prototype.removeListener =
	    function removeListener(type, listener) {
	      var list, events, position, i, originalListener;

	      checkListener(listener);

	      events = this._events;
	      if (events === undefined)
	        return this;

	      list = events[type];
	      if (list === undefined)
	        return this;

	      if (list === listener || list.listener === listener) {
	        if (--this._eventsCount === 0)
	          this._events = Object.create(null);
	        else {
	          delete events[type];
	          if (events.removeListener)
	            this.emit('removeListener', type, list.listener || listener);
	        }
	      } else if (typeof list !== 'function') {
	        position = -1;

	        for (i = list.length - 1; i >= 0; i--) {
	          if (list[i] === listener || list[i].listener === listener) {
	            originalListener = list[i].listener;
	            position = i;
	            break;
	          }
	        }

	        if (position < 0)
	          return this;

	        if (position === 0)
	          list.shift();
	        else {
	          spliceOne(list, position);
	        }

	        if (list.length === 1)
	          events[type] = list[0];

	        if (events.removeListener !== undefined)
	          this.emit('removeListener', type, originalListener || listener);
	      }

	      return this;
	    };

	EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

	EventEmitter.prototype.removeAllListeners =
	    function removeAllListeners(type) {
	      var listeners, events, i;

	      events = this._events;
	      if (events === undefined)
	        return this;

	      // not listening for removeListener, no need to emit
	      if (events.removeListener === undefined) {
	        if (arguments.length === 0) {
	          this._events = Object.create(null);
	          this._eventsCount = 0;
	        } else if (events[type] !== undefined) {
	          if (--this._eventsCount === 0)
	            this._events = Object.create(null);
	          else
	            delete events[type];
	        }
	        return this;
	      }

	      // emit removeListener for all listeners on all events
	      if (arguments.length === 0) {
	        var keys = Object.keys(events);
	        var key;
	        for (i = 0; i < keys.length; ++i) {
	          key = keys[i];
	          if (key === 'removeListener') continue;
	          this.removeAllListeners(key);
	        }
	        this.removeAllListeners('removeListener');
	        this._events = Object.create(null);
	        this._eventsCount = 0;
	        return this;
	      }

	      listeners = events[type];

	      if (typeof listeners === 'function') {
	        this.removeListener(type, listeners);
	      } else if (listeners !== undefined) {
	        // LIFO order
	        for (i = listeners.length - 1; i >= 0; i--) {
	          this.removeListener(type, listeners[i]);
	        }
	      }

	      return this;
	    };

	function _listeners(target, type, unwrap) {
	  var events = target._events;

	  if (events === undefined)
	    return [];

	  var evlistener = events[type];
	  if (evlistener === undefined)
	    return [];

	  if (typeof evlistener === 'function')
	    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

	  return unwrap ?
	    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
	}

	EventEmitter.prototype.listeners = function listeners(type) {
	  return _listeners(this, type, true);
	};

	EventEmitter.prototype.rawListeners = function rawListeners(type) {
	  return _listeners(this, type, false);
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  if (typeof emitter.listenerCount === 'function') {
	    return emitter.listenerCount(type);
	  } else {
	    return listenerCount.call(emitter, type);
	  }
	};

	EventEmitter.prototype.listenerCount = listenerCount;
	function listenerCount(type) {
	  var events = this._events;

	  if (events !== undefined) {
	    var evlistener = events[type];

	    if (typeof evlistener === 'function') {
	      return 1;
	    } else if (evlistener !== undefined) {
	      return evlistener.length;
	    }
	  }

	  return 0;
	}

	EventEmitter.prototype.eventNames = function eventNames() {
	  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
	};

	function arrayClone(arr, n) {
	  var copy = new Array(n);
	  for (var i = 0; i < n; ++i)
	    copy[i] = arr[i];
	  return copy;
	}

	function spliceOne(list, index) {
	  for (; index + 1 < list.length; index++)
	    list[index] = list[index + 1];
	  list.pop();
	}

	function unwrapListeners(arr) {
	  var ret = new Array(arr.length);
	  for (var i = 0; i < ret.length; ++i) {
	    ret[i] = arr[i].listener || arr[i];
	  }
	  return ret;
	}

	function once(emitter, name) {
	  return new Promise(function (resolve, reject) {
	    function eventListener() {
	      if (errorListener !== undefined) {
	        emitter.removeListener('error', errorListener);
	      }
	      resolve([].slice.call(arguments));
	    };
	    var errorListener;

	    // Adding an error listener is not optional because
	    // if an error is thrown on an event emitter we cannot
	    // guarantee that the actual event we are waiting will
	    // be fired. The result could be a silent way to create
	    // memory or file descriptor leaks, which is something
	    // we should avoid.
	    if (name !== 'error') {
	      errorListener = function errorListener(err) {
	        emitter.removeListener(name, eventListener);
	        reject(err);
	      };

	      emitter.once('error', errorListener);
	    }

	    emitter.once(name, eventListener);
	  });
	}


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/*
	    This file is part of web3.js.

	    web3.js is free software: you can redistribute it and/or modify
	    it under the terms of the GNU Lesser General Public License as published by
	    the Free Software Foundation, either version 3 of the License, or
	    (at your option) any later version.

	    web3.js is distributed in the hope that it will be useful,
	    but WITHOUT ANY WARRANTY; without even the implied warranty of
	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	    GNU Lesser General Public License for more details.

	    You should have received a copy of the GNU Lesser General Public License
	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	*/
	/**
	 * @file formatters.js
	 * @author Marek Kotewicz <marek@ethdev.com>
	 * @author Fabian Vogelsteller <fabian@ethdev.com>
	 * @date 2015
	 */

	'use strict';


	var utils = __webpack_require__(9);
	var config = __webpack_require__(67);
	var Iban = __webpack_require__(69);

	/**
	 * Should the format output to a big number
	 *
	 * @method outputBigNumberFormatter
	 * @param {String|Number|BigNumber}
	 * @returns {BigNumber} object
	 */
	var outputBigNumberFormatter = function (number) {
	    return utils.toBigNumber(number);
	};

	var isPredefinedBlockNumber = function (blockNumber) {
	    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';
	};

	var inputDefaultBlockNumberFormatter = function (blockNumber) {
	    if (blockNumber === undefined) {
	        return config.defaultBlock;
	    }
	    return inputBlockNumberFormatter(blockNumber);
	};

	var inputBlockNumberFormatter = function (blockNumber) {
	    if (blockNumber === undefined) {
	        return undefined;
	    } else if (isPredefinedBlockNumber(blockNumber)) {
	        return blockNumber;
	    }
	    return utils.toHex(blockNumber);
	};

	/**
	 * Formats the input of a transaction and converts all values to HEX
	 *
	 * @method inputCallFormatter
	 * @param {Object} transaction options
	 * @returns object
	*/
	var inputCallFormatter = function (options){

	    options.from = options.from || config.defaultAccount;

	    if (options.from) {
	        options.from = inputAddressFormatter(options.from);
	    }

	    if (options.to) { // it might be contract creation
	        options.to = inputAddressFormatter(options.to);
	    }

	    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {
	        return options[key] !== undefined;
	    }).forEach(function(key){
	        options[key] = utils.fromDecimal(options[key]);
	    });

	    return options;
	};

	/**
	 * Formats the input of a transaction and converts all values to HEX
	 *
	 * @method inputTransactionFormatter
	 * @param {Object} transaction options
	 * @returns object
	*/
	var inputTransactionFormatter = function (options){

	    options.from = options.from || config.defaultAccount;
	    options.from = inputAddressFormatter(options.from);

	    if (options.to) { // it might be contract creation
	        options.to = inputAddressFormatter(options.to);
	    }

	    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {
	        return options[key] !== undefined;
	    }).forEach(function(key){
	        options[key] = utils.fromDecimal(options[key]);
	    });

	    return options;
	};

	/**
	 * Formats the output of a transaction to its proper values
	 *
	 * @method outputTransactionFormatter
	 * @param {Object} tx
	 * @returns {Object}
	*/
	var outputTransactionFormatter = function (tx){
	    if(tx.blockNumber !== null)
	        tx.blockNumber = utils.toDecimal(tx.blockNumber);
	    if(tx.transactionIndex !== null)
	        tx.transactionIndex = utils.toDecimal(tx.transactionIndex);
	    tx.nonce = utils.toDecimal(tx.nonce);
	    tx.gas = utils.toDecimal(tx.gas);
	    tx.gasPrice = utils.toBigNumber(tx.gasPrice);
	    tx.value = utils.toBigNumber(tx.value);
	    return tx;
	};

	/**
	 * Formats the output of a transaction receipt to its proper values
	 *
	 * @method outputTransactionReceiptFormatter
	 * @param {Object} receipt
	 * @returns {Object}
	*/
	var outputTransactionReceiptFormatter = function (receipt){
	    if(receipt.blockNumber !== null)
	        receipt.blockNumber = utils.toDecimal(receipt.blockNumber);
	    if(receipt.transactionIndex !== null)
	        receipt.transactionIndex = utils.toDecimal(receipt.transactionIndex);
	    receipt.cumulativeGasUsed = utils.toDecimal(receipt.cumulativeGasUsed);
	    receipt.gasUsed = utils.toDecimal(receipt.gasUsed);

	    if(utils.isArray(receipt.logs)) {
	        receipt.logs = receipt.logs.map(function(log){
	            return outputLogFormatter(log);
	        });
	    }

	    return receipt;
	};

	/**
	 * Formats the output of a block to its proper values
	 *
	 * @method outputBlockFormatter
	 * @param {Object} block
	 * @returns {Object}
	*/
	var outputBlockFormatter = function(block) {

	    // transform to number
	    block.gasLimit = utils.toDecimal(block.gasLimit);
	    block.gasUsed = utils.toDecimal(block.gasUsed);
	    block.size = utils.toDecimal(block.size);
	    block.timestamp = utils.toDecimal(block.timestamp);
	    if(block.number !== null)
	        block.number = utils.toDecimal(block.number);

	    block.difficulty = utils.toBigNumber(block.difficulty);
	    block.totalDifficulty = utils.toBigNumber(block.totalDifficulty);

	    if (utils.isArray(block.transactions)) {
	        block.transactions.forEach(function(item){
	            if(!utils.isString(item))
	                return outputTransactionFormatter(item);
	        });
	    }

	    return block;
	};

	/**
	 * Formats the output of a log
	 *
	 * @method outputLogFormatter
	 * @param {Object} log object
	 * @returns {Object} log
	*/
	var outputLogFormatter = function(log) {
	    if(log.blockNumber)
	        log.blockNumber = utils.toDecimal(log.blockNumber);
	    if(log.transactionIndex)
	        log.transactionIndex = utils.toDecimal(log.transactionIndex);
	    if(log.logIndex)
	        log.logIndex = utils.toDecimal(log.logIndex);

	    return log;
	};

	/**
	 * Formats the input of a whisper post and converts all values to HEX
	 *
	 * @method inputPostFormatter
	 * @param {Object} transaction object
	 * @returns {Object}
	*/
	var inputPostFormatter = function(post) {

	    // post.payload = utils.toHex(post.payload);
	    post.ttl = utils.fromDecimal(post.ttl);
	    post.workToProve = utils.fromDecimal(post.workToProve);
	    post.priority = utils.fromDecimal(post.priority);

	    // fallback
	    if (!utils.isArray(post.topics)) {
	        post.topics = post.topics ? [post.topics] : [];
	    }

	    // format the following options
	    post.topics = post.topics.map(function(topic){
	        // convert only if not hex
	        return (topic.indexOf('0x') === 0) ? topic : utils.fromUtf8(topic);
	    });

	    return post;
	};

	/**
	 * Formats the output of a received post message
	 *
	 * @method outputPostFormatter
	 * @param {Object}
	 * @returns {Object}
	 */
	var outputPostFormatter = function(post){

	    post.expiry = utils.toDecimal(post.expiry);
	    post.sent = utils.toDecimal(post.sent);
	    post.ttl = utils.toDecimal(post.ttl);
	    post.workProved = utils.toDecimal(post.workProved);
	    // post.payloadRaw = post.payload;
	    // post.payload = utils.toAscii(post.payload);

	    // if (utils.isJson(post.payload)) {
	    //     post.payload = JSON.parse(post.payload);
	    // }

	    // format the following options
	    if (!post.topics) {
	        post.topics = [];
	    }
	    post.topics = post.topics.map(function(topic){
	        return utils.toAscii(topic);
	    });

	    return post;
	};

	var inputAddressFormatter = function (address) {
	    var iban = new Iban(address);
	    if (iban.isValid() && iban.isDirect()) {
	        return '0x' + iban.address();
	    } else if (utils.isStrictAddress(address)) {
	        return address;
	    } else if (utils.isAddress(address)) {
	        return '0x' + address;
	    }
	    throw new Error('invalid address');
	};


	var outputSyncingFormatter = function(result) {
	    if (!result) {
	        return result;
	    }

	    result.startingBlock = utils.toDecimal(result.startingBlock);
	    result.currentBlock = utils.toDecimal(result.currentBlock);
	    result.highestBlock = utils.toDecimal(result.highestBlock);
	    if (result.knownStates) {
	        result.knownStates = utils.toDecimal(result.knownStates);
	        result.pulledStates = utils.toDecimal(result.pulledStates);
	    }

	    return result;
	};

	module.exports = {
	    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,
	    inputBlockNumberFormatter: inputBlockNumberFormatter,
	    inputCallFormatter: inputCallFormatter,
	    inputTransactionFormatter: inputTransactionFormatter,
	    inputAddressFormatter: inputAddressFormatter,
	    inputPostFormatter: inputPostFormatter,
	    outputBigNumberFormatter: outputBigNumberFormatter,
	    outputTransactionFormatter: outputTransactionFormatter,
	    outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,
	    outputBlockFormatter: outputBlockFormatter,
	    outputLogFormatter: outputLogFormatter,
	    outputPostFormatter: outputPostFormatter,
	    outputSyncingFormatter: outputSyncingFormatter
	};



/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.isAsync = undefined;

	var _asyncify = __webpack_require__(170);

	var _asyncify2 = _interopRequireDefault(_asyncify);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var supportsSymbol = typeof Symbol === 'function';

	function isAsync(fn) {
	    return supportsSymbol && fn[Symbol.toStringTag] === 'AsyncFunction';
	}

	function wrapAsync(asyncFn) {
	    return isAsync(asyncFn) ? (0, _asyncify2.default)(asyncFn) : asyncFn;
	}

	exports.default = wrapAsync;
	exports.isAsync = isAsync;

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.getLength = exports.decode = exports.encode = void 0;

	var BN = __webpack_require__(4);
	/**
	 * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP
	 * This function takes in a data, convert it to buffer if not, and a length for recursion
	 * @param input - will be converted to buffer
	 * @returns returns buffer of encoded data
	 **/


	function encode(input) {
	  if (Array.isArray(input)) {
	    var output = [];

	    for (var i = 0; i < input.length; i++) {
	      output.push(encode(input[i]));
	    }

	    var buf = Buffer.concat(output);
	    return Buffer.concat([encodeLength(buf.length, 192), buf]);
	  } else {
	    var inputBuf = toBuffer(input);
	    return inputBuf.length === 1 && inputBuf[0] < 128 ? inputBuf : Buffer.concat([encodeLength(inputBuf.length, 128), inputBuf]);
	  }
	}

	exports.encode = encode;
	/**
	 * Parse integers. Check if there is no leading zeros
	 * @param v The value to parse
	 * @param base The base to parse the integer into
	 */

	function safeParseInt(v, base) {
	  if (v.slice(0, 2) === '00') {
	    throw new Error('invalid RLP: extra zeros');
	  }

	  return parseInt(v, base);
	}

	function encodeLength(len, offset) {
	  if (len < 56) {
	    return Buffer.from([len + offset]);
	  } else {
	    var hexLength = intToHex(len);
	    var lLength = hexLength.length / 2;
	    var firstByte = intToHex(offset + 55 + lLength);
	    return Buffer.from(firstByte + hexLength, 'hex');
	  }
	}

	function decode(input, stream) {
	  if (stream === void 0) {
	    stream = false;
	  }

	  if (!input || input.length === 0) {
	    return Buffer.from([]);
	  }

	  var inputBuffer = toBuffer(input);

	  var decoded = _decode(inputBuffer);

	  if (stream) {
	    return decoded;
	  }

	  if (decoded.remainder.length !== 0) {
	    throw new Error('invalid remainder');
	  }

	  return decoded.data;
	}

	exports.decode = decode;
	/**
	 * Get the length of the RLP input
	 * @param input
	 * @returns The length of the input or an empty Buffer if no input
	 */

	function getLength(input) {
	  if (!input || input.length === 0) {
	    return Buffer.from([]);
	  }

	  var inputBuffer = toBuffer(input);
	  var firstByte = inputBuffer[0];

	  if (firstByte <= 0x7f) {
	    return inputBuffer.length;
	  } else if (firstByte <= 0xb7) {
	    return firstByte - 0x7f;
	  } else if (firstByte <= 0xbf) {
	    return firstByte - 0xb6;
	  } else if (firstByte <= 0xf7) {
	    // a list between  0-55 bytes long
	    return firstByte - 0xbf;
	  } else {
	    // a list  over 55 bytes long
	    var llength = firstByte - 0xf6;
	    var length = safeParseInt(inputBuffer.slice(1, llength).toString('hex'), 16);
	    return llength + length;
	  }
	}

	exports.getLength = getLength;
	/** Decode an input with RLP */

	function _decode(input) {
	  var length, llength, data, innerRemainder, d;
	  var decoded = [];
	  var firstByte = input[0];

	  if (firstByte <= 0x7f) {
	    // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.
	    return {
	      data: input.slice(0, 1),
	      remainder: input.slice(1)
	    };
	  } else if (firstByte <= 0xb7) {
	    // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string
	    // The range of the first byte is [0x80, 0xb7]
	    length = firstByte - 0x7f; // set 0x80 null to 0

	    if (firstByte === 0x80) {
	      data = Buffer.from([]);
	    } else {
	      data = input.slice(1, length);
	    }

	    if (length === 2 && data[0] < 0x80) {
	      throw new Error('invalid rlp encoding: byte must be less 0x80');
	    }

	    return {
	      data: data,
	      remainder: input.slice(length)
	    };
	  } else if (firstByte <= 0xbf) {
	    // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),
	    // followed by the length, followed by the string
	    llength = firstByte - 0xb6;

	    if (input.length - 1 < llength) {
	      throw new Error('invalid RLP: not enough bytes for string length');
	    }

	    length = safeParseInt(input.slice(1, llength).toString('hex'), 16);

	    if (length <= 55) {
	      throw new Error('invalid RLP: expected string length to be greater than 55');
	    }

	    data = input.slice(llength, length + llength);

	    if (data.length < length) {
	      throw new Error('invalid RLP: not enough bytes for string');
	    }

	    return {
	      data: data,
	      remainder: input.slice(length + llength)
	    };
	  } else if (firstByte <= 0xf7) {
	    // a list between  0-55 bytes long
	    length = firstByte - 0xbf;
	    innerRemainder = input.slice(1, length);

	    while (innerRemainder.length) {
	      d = _decode(innerRemainder);
	      decoded.push(d.data);
	      innerRemainder = d.remainder;
	    }

	    return {
	      data: decoded,
	      remainder: input.slice(length)
	    };
	  } else {
	    // a list  over 55 bytes long
	    llength = firstByte - 0xf6;
	    length = safeParseInt(input.slice(1, llength).toString('hex'), 16);
	    var totalLength = llength + length;

	    if (totalLength > input.length) {
	      throw new Error('invalid rlp: total length is larger than the data');
	    }

	    innerRemainder = input.slice(llength, totalLength);

	    if (innerRemainder.length === 0) {
	      throw new Error('invalid rlp, List has a invalid length');
	    }

	    while (innerRemainder.length) {
	      d = _decode(innerRemainder);
	      decoded.push(d.data);
	      innerRemainder = d.remainder;
	    }

	    return {
	      data: decoded,
	      remainder: input.slice(totalLength)
	    };
	  }
	}
	/** Check if a string is prefixed by 0x */


	function isHexPrefixed(str) {
	  return str.slice(0, 2) === '0x';
	}
	/** Removes 0x from a given String */


	function stripHexPrefix(str) {
	  if (typeof str !== 'string') {
	    return str;
	  }

	  return isHexPrefixed(str) ? str.slice(2) : str;
	}
	/** Transform an integer into its hexadecimal value */


	function intToHex(integer) {
	  if (integer < 0) {
	    throw new Error('Invalid integer as argument, must be unsigned!');
	  }

	  var hex = integer.toString(16);
	  return hex.length % 2 ? "0" + hex : hex;
	}
	/** Pad a string to be even */


	function padToEven(a) {
	  return a.length % 2 ? "0" + a : a;
	}
	/** Transform an integer into a Buffer */


	function intToBuffer(integer) {
	  var hex = intToHex(integer);
	  return Buffer.from(hex, 'hex');
	}
	/** Transform anything into a Buffer */


	function toBuffer(v) {
	  if (!Buffer.isBuffer(v)) {
	    if (typeof v === 'string') {
	      if (isHexPrefixed(v)) {
	        return Buffer.from(padToEven(stripHexPrefix(v)), 'hex');
	      } else {
	        return Buffer.from(v);
	      }
	    } else if (typeof v === 'number' || typeof v === 'bigint') {
	      if (!v) {
	        return Buffer.from([]);
	      } else {
	        return intToBuffer(v);
	      }
	    } else if (v === null || v === undefined) {
	      return Buffer.from([]);
	    } else if (v instanceof Uint8Array) {
	      return Buffer.from(v);
	    } else if (BN.isBN(v)) {
	      // converts a BN to a Buffer
	      return Buffer.from(v.toArray());
	    } else {
	      throw new Error('invalid type');
	    }
	  }

	  return v;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	var createHash = __webpack_require__(25)

	function hash160 (buffer) {
	  return ripemd160(sha256(buffer))
	}

	function hash256 (buffer) {
	  return sha256(sha256(buffer))
	}

	function ripemd160 (buffer) {
	  return createHash('rmd160').update(buffer).digest()
	}

	function sha1 (buffer) {
	  return createHash('sha1').update(buffer).digest()
	}

	function sha256 (buffer) {
	  return createHash('sha256').update(buffer).digest()
	}

	// FIXME: Name not consistent with others
	var createHmac = __webpack_require__(79)

	function HmacSHA256 (buffer, secret) {
	  console.warn('Hmac* functions are deprecated for removal in 2.0.0, use node crypto instead')
	  return createHmac('sha256', secret).update(buffer).digest()
	}

	function HmacSHA512 (buffer, secret) {
	  console.warn('Hmac* functions are deprecated for removal in 2.0.0, use node crypto instead')
	  return createHmac('sha512', secret).update(buffer).digest()
	}

	module.exports = {
	  ripemd160: ripemd160,
	  sha1: sha1,
	  sha256: sha256,
	  hash160: hash160,
	  hash256: hash256,
	  HmacSHA256: HmacSHA256,
	  HmacSHA512: HmacSHA512
	}


/***/ },
/* 24 */
/***/ function(module, exports) {

	// https://en.bitcoin.it/wiki/List_of_address_prefixes
	// Dogecoin BIP32 is a proposed standard: https://bitcointalk.org/index.php?topic=409731

	var networks = {
	  bitcoin: {
	    magicPrefix: '\x18Bitcoin Signed Message:\n',
	    bip32: {
	      public: 0x0488b21e,
	      private: 0x0488ade4
	    },
	    pubKeyHash: 0x00,
	    scriptHash: 0x05,
	    wif: 0x80,
	    dustThreshold: 546, // https://github.com/bitcoin/bitcoin/blob/v0.9.2/src/core.h#L151-L162
	    feePerKb: 10000, // https://github.com/bitcoin/bitcoin/blob/v0.9.2/src/main.cpp#L53
	    estimateFee: estimateFee('bitcoin')
	  },
	  testnet: {
	    magicPrefix: '\x18Bitcoin Signed Message:\n',
	    bip32: {
	      public: 0x043587cf,
	      private: 0x04358394
	    },
	    pubKeyHash: 0x6f,
	    scriptHash: 0xc4,
	    wif: 0xef,
	    dustThreshold: 546,
	    feePerKb: 10000,
	    estimateFee: estimateFee('testnet')
	  },
	  litecoin: {
	    magicPrefix: '\x19Litecoin Signed Message:\n',
	    bip32: {
	      public: 0x019da462,
	      private: 0x019d9cfe
	    },
	    pubKeyHash: 0x30,
	    scriptHash: 0x05,
	    wif: 0xb0,
	    dustThreshold: 0, // https://github.com/litecoin-project/litecoin/blob/v0.8.7.2/src/main.cpp#L360-L365
	    dustSoftThreshold: 100000, // https://github.com/litecoin-project/litecoin/blob/v0.8.7.2/src/main.h#L53
	    feePerKb: 100000, // https://github.com/litecoin-project/litecoin/blob/v0.8.7.2/src/main.cpp#L56
	    estimateFee: estimateFee('litecoin')
	  },
	  dogecoin: {
	    magicPrefix: '\x19Dogecoin Signed Message:\n',
	    bip32: {
	      public: 0x02facafd,
	      private: 0x02fac398
	    },
	    pubKeyHash: 0x1e,
	    scriptHash: 0x16,
	    wif: 0x9e,
	    dustThreshold: 0, // https://github.com/dogecoin/dogecoin/blob/v1.7.1/src/core.h#L155-L160
	    dustSoftThreshold: 100000000, // https://github.com/dogecoin/dogecoin/blob/v1.7.1/src/main.h#L62
	    feePerKb: 100000000, // https://github.com/dogecoin/dogecoin/blob/v1.7.1/src/main.cpp#L58
	    estimateFee: estimateFee('dogecoin')
	  },
	  viacoin: {
	    magicPrefix: '\x18Viacoin Signed Message:\n',
	    bip32: {
	      public: 0x0488b21e,
	      private: 0x0488ade4
	    },
	    pubKeyHash: 0x47,
	    scriptHash: 0x21,
	    wif: 0xc7,
	    dustThreshold: 560,
	    dustSoftThreshold: 100000,
	    feePerKb: 100000, //
	    estimateFee: estimateFee('viacoin')
	  },
	  viacointestnet: {
	    magicPrefix: '\x18Viacoin Signed Message:\n',
	    bip32: {
	      public: 0x043587cf,
	      private: 0x04358394
	    },
	    pubKeyHash: 0x7f,
	    scriptHash: 0xc4,
	    wif: 0xff,
	    dustThreshold: 560,
	    dustSoftThreshold: 100000,
	    feePerKb: 100000,
	    estimateFee: estimateFee('viacointestnet')
	  },
	  gamerscoin: {
	    magicPrefix: '\x19Gamerscoin Signed Message:\n',
	    bip32: {
	      public: 0x019da462,
	      private: 0x019d9cfe
	    },
	    pubKeyHash: 0x26,
	    scriptHash: 0x05,
	    wif: 0xA6,
	    dustThreshold: 0, // https://github.com/gamers-coin/gamers-coinv3/blob/master/src/main.cpp#L358-L363
	    dustSoftThreshold: 100000, // https://github.com/gamers-coin/gamers-coinv3/blob/master/src/main.cpp#L51
	    feePerKb: 100000, // https://github.com/gamers-coin/gamers-coinv3/blob/master/src/main.cpp#L54
	    estimateFee: estimateFee('gamerscoin')
	  },
	  jumbucks: {
	    magicPrefix: '\x19Jumbucks Signed Message:\n',
	    bip32: {
	      public: 0x037a689a,
	      private: 0x037a6460
	    },
	    pubKeyHash: 0x2b,
	    scriptHash: 0x05,
	    wif: 0xab,
	    dustThreshold: 0,
	    dustSoftThreshold: 10000,
	    feePerKb: 10000,
	    estimateFee: estimateFee('jumbucks')
	  },
	  zetacoin: {
	    magicPrefix: '\x18Zetacoin Signed Message:\n',
	    bip32: {
	      public: 0x0488b21e,
	      private: 0x0488ade4
	    },
	    pubKeyHash: 0x50,
	    scriptHash: 0x09,
	    wif: 0xe0,
	    dustThreshold: 546, // https://github.com/zetacoin/zetacoin/blob/master/src/core.h#L159
	    feePerKb: 10000, // https://github.com/zetacoin/zetacoin/blob/master/src/main.cpp#L54
	    estimateFee: estimateFee('zetacoin')
	  }
	}

	function estimateFee (type) {
	  return function (tx) {
	    var network = networks[type]
	    var baseFee = network.feePerKb
	    var byteSize = tx.toBuffer().length

	    var fee = baseFee * Math.ceil(byteSize / 1000)
	    if (network.dustSoftThreshold === undefined) return fee

	    tx.outs.forEach(function (e) {
	      if (e.value < network.dustSoftThreshold) {
	        fee += baseFee
	      }
	    })

	    return fee
	  }
	}

	module.exports = networks


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	var inherits = __webpack_require__(3)
	var MD5 = __webpack_require__(138)
	var RIPEMD160 = __webpack_require__(146)
	var sha = __webpack_require__(149)
	var Base = __webpack_require__(78)

	function Hash (hash) {
	  Base.call(this, 'digest')

	  this._hash = hash
	}

	inherits(Hash, Base)

	Hash.prototype._update = function (data) {
	  this._hash.update(data)
	}

	Hash.prototype._final = function () {
	  return this._hash.digest()
	}

	module.exports = function createHash (alg) {
	  alg = alg.toLowerCase()
	  if (alg === 'md5') return new MD5()
	  if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()

	  return new Hash(sha(alg))
	}


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(81), __webpack_require__(80));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./sha1", "./hmac"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var Base = C_lib.Base;
		    var WordArray = C_lib.WordArray;
		    var C_algo = C.algo;
		    var MD5 = C_algo.MD5;

		    /**
		     * This key derivation function is meant to conform with EVP_BytesToKey.
		     * www.openssl.org/docs/crypto/EVP_BytesToKey.html
		     */
		    var EvpKDF = C_algo.EvpKDF = Base.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
		         * @property {Hasher} hasher The hash algorithm to use. Default: MD5
		         * @property {number} iterations The number of iterations to perform. Default: 1
		         */
		        cfg: Base.extend({
		            keySize: 128/32,
		            hasher: MD5,
		            iterations: 1
		        }),

		        /**
		         * Initializes a newly created key derivation function.
		         *
		         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
		         *
		         * @example
		         *
		         *     var kdf = CryptoJS.algo.EvpKDF.create();
		         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
		         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
		         */
		        init: function (cfg) {
		            this.cfg = this.cfg.extend(cfg);
		        },

		        /**
		         * Derives a key from a password.
		         *
		         * @param {WordArray|string} password The password.
		         * @param {WordArray|string} salt A salt.
		         *
		         * @return {WordArray} The derived key.
		         *
		         * @example
		         *
		         *     var key = kdf.compute(password, salt);
		         */
		        compute: function (password, salt) {
		            // Shortcut
		            var cfg = this.cfg;

		            // Init hasher
		            var hasher = cfg.hasher.create();

		            // Initial values
		            var derivedKey = WordArray.create();

		            // Shortcuts
		            var derivedKeyWords = derivedKey.words;
		            var keySize = cfg.keySize;
		            var iterations = cfg.iterations;

		            // Generate key
		            while (derivedKeyWords.length < keySize) {
		                if (block) {
		                    hasher.update(block);
		                }
		                var block = hasher.update(password).finalize(salt);
		                hasher.reset();

		                // Iterations
		                for (var i = 1; i < iterations; i++) {
		                    block = hasher.finalize(block);
		                    hasher.reset();
		                }

		                derivedKey.concat(block);
		            }
		            derivedKey.sigBytes = keySize * 4;

		            return derivedKey;
		        }
		    });

		    /**
		     * Derives a key from a password.
		     *
		     * @param {WordArray|string} password The password.
		     * @param {WordArray|string} salt A salt.
		     * @param {Object} cfg (Optional) The configuration options to use for this computation.
		     *
		     * @return {WordArray} The derived key.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var key = CryptoJS.EvpKDF(password, salt);
		     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
		     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
		     */
		    C.EvpKDF = function (password, salt, cfg) {
		        return EvpKDF.create(cfg).compute(password, salt);
		    };
		}());


		return CryptoJS.EvpKDF;

	}));

/***/ },
/* 27 */
/***/ function(module, exports) {

	module.exports = assert;

	function assert(val, msg) {
	  if (!val)
	    throw new Error(msg || 'Assertion failed');
	}

	assert.equal = function assertEqual(l, r, msg) {
	  if (l != r)
	    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
	};


/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.

	module.exports = Duplex;

	/*<replacement>*/
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  return keys;
	}
	/*</replacement>*/


	/*<replacement>*/
	var util = __webpack_require__(45);
	util.inherits = __webpack_require__(3);
	/*</replacement>*/

	var Readable = __webpack_require__(153);
	var Writable = __webpack_require__(94);

	util.inherits(Duplex, Readable);

	forEach(objectKeys(Writable.prototype), function(method) {
	  if (!Duplex.prototype[method])
	    Duplex.prototype[method] = Writable.prototype[method];
	});

	function Duplex(options) {
	  if (!(this instanceof Duplex))
	    return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false)
	    this.readable = false;

	  if (options && options.writable === false)
	    this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false)
	    this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended)
	    return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  process.nextTick(this.end.bind(this));
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/*
	    This file is part of web3.js.

	    web3.js is free software: you can redistribute it and/or modify
	    it under the terms of the GNU Lesser General Public License as published by
	    the Free Software Foundation, either version 3 of the License, or
	    (at your option) any later version.

	    web3.js is distributed in the hope that it will be useful,
	    but WITHOUT ANY WARRANTY; without even the implied warranty of
	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	    GNU Lesser General Public License for more details.

	    You should have received a copy of the GNU Lesser General Public License
	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	*/
	/**
	 * @file method.js
	 * @author Marek Kotewicz <marek@ethdev.com>
	 * @date 2015
	 */

	var utils = __webpack_require__(9);
	var errors = __webpack_require__(39);

	var Method = function (options) {
	    this.name = options.name;
	    this.call = options.call;
	    this.params = options.params || 0;
	    this.inputFormatter = options.inputFormatter;
	    this.outputFormatter = options.outputFormatter;
	    this.requestManager = null;
	};

	Method.prototype.setRequestManager = function (rm) {
	    this.requestManager = rm;
	};

	/**
	 * Should be used to determine name of the jsonrpc method based on arguments
	 *
	 * @method getCall
	 * @param {Array} arguments
	 * @return {String} name of jsonrpc method
	 */
	Method.prototype.getCall = function (args) {
	    return utils.isFunction(this.call) ? this.call(args) : this.call;
	};

	/**
	 * Should be used to extract callback from array of arguments. Modifies input param
	 *
	 * @method extractCallback
	 * @param {Array} arguments
	 * @return {Function|Null} callback, if exists
	 */
	Method.prototype.extractCallback = function (args) {
	    if (utils.isFunction(args[args.length - 1])) {
	        return args.pop(); // modify the args array!
	    }
	};

	/**
	 * Should be called to check if the number of arguments is correct
	 * 
	 * @method validateArgs
	 * @param {Array} arguments
	 * @throws {Error} if it is not
	 */
	Method.prototype.validateArgs = function (args) {
	    if (args.length !== this.params) {
	        throw errors.InvalidNumberOfRPCParams();
	    }
	};

	/**
	 * Should be called to format input args of method
	 * 
	 * @method formatInput
	 * @param {Array}
	 * @return {Array}
	 */
	Method.prototype.formatInput = function (args) {
	    if (!this.inputFormatter) {
	        return args;
	    }

	    return this.inputFormatter.map(function (formatter, index) {
	        return formatter ? formatter(args[index]) : args[index];
	    });
	};

	/**
	 * Should be called to format output(result) of method
	 *
	 * @method formatOutput
	 * @param {Object}
	 * @return {Object}
	 */
	Method.prototype.formatOutput = function (result) {
	    return this.outputFormatter && result ? this.outputFormatter(result) : result;
	};

	/**
	 * Should create payload from given input args
	 *
	 * @method toPayload
	 * @param {Array} args
	 * @return {Object}
	 */
	Method.prototype.toPayload = function (args) {
	    var call = this.getCall(args);
	    var callback = this.extractCallback(args);
	    var params = this.formatInput(args);
	    this.validateArgs(params);

	    return {
	        method: call,
	        params: params,
	        callback: callback
	    };
	};

	Method.prototype.attachToObject = function (obj) {
	    var func = this.buildCall();
	    func.call = this.call; // TODO!!! that's ugly. filter.js uses it
	    var name = this.name.split('.');
	    if (name.length > 1) {
	        obj[name[0]] = obj[name[0]] || {};
	        obj[name[0]][name[1]] = func;
	    } else {
	        obj[name[0]] = func; 
	    }
	};

	Method.prototype.buildCall = function() {
	    var method = this;
	    var send = function () {
	        var payload = method.toPayload(Array.prototype.slice.call(arguments));
	        if (payload.callback) {
	            return method.requestManager.sendAsync(payload, function (err, result) {
	                payload.callback(err, method.formatOutput(result));
	            });
	        }
	        return method.formatOutput(method.requestManager.send(payload));
	    };
	    send.request = this.request.bind(this);
	    return send;
	};

	/**
	 * Should be called to create pure JSONRPC request which can be used in batch request
	 *
	 * @method request
	 * @param {...} params
	 * @return {Object} jsonrpc request
	 */
	Method.prototype.request = function () {
	    var payload = this.toPayload(Array.prototype.slice.call(arguments));
	    payload.format = this.formatOutput.bind(this);
	    return payload;
	};

	module.exports = Method;


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var assert = __webpack_require__(5)
	var opcodes = __webpack_require__(32)

	// https://github.com/feross/buffer/blob/master/index.js#L1127
	function verifuint (value, max) {
	  assert(typeof value === 'number', 'cannot write a non-number as a number')
	  assert(value >= 0, 'specified a negative value for writing an unsigned value')
	  assert(value <= max, 'value is larger than maximum value for type')
	  assert(Math.floor(value) === value, 'value has a fractional component')
	}

	function pushDataSize (i) {
	  return i < opcodes.OP_PUSHDATA1 ? 1
	  : i < 0xff ? 2
	  : i < 0xffff ? 3
	  : 5
	}

	function readPushDataInt (buffer, offset) {
	  var opcode = buffer.readUInt8(offset)
	  var number, size

	  // ~6 bit
	  if (opcode < opcodes.OP_PUSHDATA1) {
	    number = opcode
	    size = 1

	  // 8 bit
	  } else if (opcode === opcodes.OP_PUSHDATA1) {
	    if (offset + 2 > buffer.length) return null
	    number = buffer.readUInt8(offset + 1)
	    size = 2

	  // 16 bit
	  } else if (opcode === opcodes.OP_PUSHDATA2) {
	    if (offset + 3 > buffer.length) return null
	    number = buffer.readUInt16LE(offset + 1)
	    size = 3

	  // 32 bit
	  } else {
	    if (offset + 5 > buffer.length) return null
	    assert.equal(opcode, opcodes.OP_PUSHDATA4, 'Unexpected opcode')

	    number = buffer.readUInt32LE(offset + 1)
	    size = 5
	  }

	  return {
	    opcode: opcode,
	    number: number,
	    size: size
	  }
	}

	function readUInt64LE (buffer, offset) {
	  var a = buffer.readUInt32LE(offset)
	  var b = buffer.readUInt32LE(offset + 4)
	  b *= 0x100000000

	  verifuint(b + a, 0x001fffffffffffff)

	  return b + a
	}

	function readVarInt (buffer, offset) {
	  var t = buffer.readUInt8(offset)
	  var number, size

	  // 8 bit
	  if (t < 253) {
	    number = t
	    size = 1

	  // 16 bit
	  } else if (t < 254) {
	    number = buffer.readUInt16LE(offset + 1)
	    size = 3

	  // 32 bit
	  } else if (t < 255) {
	    number = buffer.readUInt32LE(offset + 1)
	    size = 5

	  // 64 bit
	  } else {
	    number = readUInt64LE(buffer, offset + 1)
	    size = 9
	  }

	  return {
	    number: number,
	    size: size
	  }
	}

	function writePushDataInt (buffer, number, offset) {
	  var size = pushDataSize(number)

	  // ~6 bit
	  if (size === 1) {
	    buffer.writeUInt8(number, offset)

	  // 8 bit
	  } else if (size === 2) {
	    buffer.writeUInt8(opcodes.OP_PUSHDATA1, offset)
	    buffer.writeUInt8(number, offset + 1)

	  // 16 bit
	  } else if (size === 3) {
	    buffer.writeUInt8(opcodes.OP_PUSHDATA2, offset)
	    buffer.writeUInt16LE(number, offset + 1)

	  // 32 bit
	  } else {
	    buffer.writeUInt8(opcodes.OP_PUSHDATA4, offset)
	    buffer.writeUInt32LE(number, offset + 1)
	  }

	  return size
	}

	function writeUInt64LE (buffer, value, offset) {
	  verifuint(value, 0x001fffffffffffff)

	  buffer.writeInt32LE(value & -1, offset)
	  buffer.writeUInt32LE(Math.floor(value / 0x100000000), offset + 4)
	}

	function varIntSize (i) {
	  return i < 253 ? 1
	  : i < 0x10000 ? 3
	  : i < 0x100000000 ? 5
	  : 9
	}

	function writeVarInt (buffer, number, offset) {
	  var size = varIntSize(number)

	  // 8 bit
	  if (size === 1) {
	    buffer.writeUInt8(number, offset)

	  // 16 bit
	  } else if (size === 3) {
	    buffer.writeUInt8(253, offset)
	    buffer.writeUInt16LE(number, offset + 1)

	  // 32 bit
	  } else if (size === 5) {
	    buffer.writeUInt8(254, offset)
	    buffer.writeUInt32LE(number, offset + 1)

	  // 64 bit
	  } else {
	    buffer.writeUInt8(255, offset)
	    writeUInt64LE(buffer, number, offset + 1)
	  }

	  return size
	}

	function varIntBuffer (i) {
	  var size = varIntSize(i)
	  var buffer = new Buffer(size)
	  writeVarInt(buffer, i, 0)

	  return buffer
	}

	function reverse (buffer) {
	  var buffer2 = new Buffer(buffer)
	  Array.prototype.reverse.call(buffer2)
	  return buffer2
	}

	module.exports = {
	  pushDataSize: pushDataSize,
	  readPushDataInt: readPushDataInt,
	  readUInt64LE: readUInt64LE,
	  readVarInt: readVarInt,
	  reverse: reverse,
	  varIntBuffer: varIntBuffer,
	  varIntSize: varIntSize,
	  writePushDataInt: writePushDataInt,
	  writeUInt64LE: writeUInt64LE,
	  writeVarInt: writeVarInt
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var assert = __webpack_require__(5)
	var typeForce = __webpack_require__(14)

	var BigInteger = __webpack_require__(15)

	function ECSignature (r, s) {
	  typeForce('BigInteger', r)
	  typeForce('BigInteger', s)

	  this.r = r
	  this.s = s
	}

	ECSignature.parseCompact = function (buffer) {
	  assert.equal(buffer.length, 65, 'Invalid signature length')
	  var i = buffer.readUInt8(0) - 27

	  // At most 3 bits
	  assert.equal(i, i & 7, 'Invalid signature parameter')
	  var compressed = !!(i & 4)

	  // Recovery param only
	  i = i & 3

	  var r = BigInteger.fromBuffer(buffer.slice(1, 33))
	  var s = BigInteger.fromBuffer(buffer.slice(33))

	  return {
	    compressed: compressed,
	    i: i,
	    signature: new ECSignature(r, s)
	  }
	}

	ECSignature.fromDER = function (buffer) {
	  assert.equal(buffer.readUInt8(0), 0x30, 'Not a DER sequence')
	  assert.equal(buffer.readUInt8(1), buffer.length - 2, 'Invalid sequence length')
	  assert.equal(buffer.readUInt8(2), 0x02, 'Expected a DER integer')

	  var rLen = buffer.readUInt8(3)
	  assert(rLen > 0, 'R length is zero')

	  var offset = 4 + rLen
	  assert.equal(buffer.readUInt8(offset), 0x02, 'Expected a DER integer (2)')

	  var sLen = buffer.readUInt8(offset + 1)
	  assert(sLen > 0, 'S length is zero')

	  var rB = buffer.slice(4, offset)
	  var sB = buffer.slice(offset + 2)
	  offset += 2 + sLen

	  if (rLen > 1 && rB.readUInt8(0) === 0x00) {
	    assert(rB.readUInt8(1) & 0x80, 'R value excessively padded')
	  }

	  if (sLen > 1 && sB.readUInt8(0) === 0x00) {
	    assert(sB.readUInt8(1) & 0x80, 'S value excessively padded')
	  }

	  assert.equal(offset, buffer.length, 'Invalid DER encoding')
	  var r = BigInteger.fromDERInteger(rB)
	  var s = BigInteger.fromDERInteger(sB)

	  assert(r.signum() >= 0, 'R value is negative')
	  assert(s.signum() >= 0, 'S value is negative')

	  return new ECSignature(r, s)
	}

	// BIP62: 1 byte hashType flag (only 0x01, 0x02, 0x03, 0x81, 0x82 and 0x83 are allowed)
	ECSignature.parseScriptSignature = function (buffer) {
	  var hashType = buffer.readUInt8(buffer.length - 1)
	  var hashTypeMod = hashType & ~0x80

	  assert(hashTypeMod > 0x00 && hashTypeMod < 0x04, 'Invalid hashType ' + hashType)

	  return {
	    signature: ECSignature.fromDER(buffer.slice(0, -1)),
	    hashType: hashType
	  }
	}

	ECSignature.prototype.toCompact = function (i, compressed) {
	  if (compressed) {
	    i += 4
	  }

	  i += 27

	  var buffer = new Buffer(65)
	  buffer.writeUInt8(i, 0)

	  this.r.toBuffer(32).copy(buffer, 1)
	  this.s.toBuffer(32).copy(buffer, 33)

	  return buffer
	}

	ECSignature.prototype.toDER = function () {
	  var rBa = this.r.toDERInteger()
	  var sBa = this.s.toDERInteger()

	  var sequence = []

	  // INTEGER
	  sequence.push(0x02, rBa.length)
	  sequence = sequence.concat(rBa)

	  // INTEGER
	  sequence.push(0x02, sBa.length)
	  sequence = sequence.concat(sBa)

	  // SEQUENCE
	  sequence.unshift(0x30, sequence.length)

	  return new Buffer(sequence)
	}

	ECSignature.prototype.toScriptSignature = function (hashType) {
	  var hashTypeMod = hashType & ~0x80
	  assert(hashTypeMod > 0x00 && hashTypeMod < 0x04, 'Invalid hashType ' + hashType)

	  var hashTypeBuffer = new Buffer(1)
	  hashTypeBuffer.writeUInt8(hashType, 0)

	  return Buffer.concat([this.toDER(), hashTypeBuffer])
	}

	module.exports = ECSignature

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 32 */
/***/ function(module, exports) {

	module.exports = {
	  // push value
	  OP_FALSE: 0,
	  OP_0: 0,
	  OP_PUSHDATA1: 76,
	  OP_PUSHDATA2: 77,
	  OP_PUSHDATA4: 78,
	  OP_1NEGATE: 79,
	  OP_RESERVED: 80,
	  OP_1: 81,
	  OP_TRUE: 81,
	  OP_2: 82,
	  OP_3: 83,
	  OP_4: 84,
	  OP_5: 85,
	  OP_6: 86,
	  OP_7: 87,
	  OP_8: 88,
	  OP_9: 89,
	  OP_10: 90,
	  OP_11: 91,
	  OP_12: 92,
	  OP_13: 93,
	  OP_14: 94,
	  OP_15: 95,
	  OP_16: 96,

	  // control
	  OP_NOP: 97,
	  OP_VER: 98,
	  OP_IF: 99,
	  OP_NOTIF: 100,
	  OP_VERIF: 101,
	  OP_VERNOTIF: 102,
	  OP_ELSE: 103,
	  OP_ENDIF: 104,
	  OP_VERIFY: 105,
	  OP_RETURN: 106,

	  // stack ops
	  OP_TOALTSTACK: 107,
	  OP_FROMALTSTACK: 108,
	  OP_2DROP: 109,
	  OP_2DUP: 110,
	  OP_3DUP: 111,
	  OP_2OVER: 112,
	  OP_2ROT: 113,
	  OP_2SWAP: 114,
	  OP_IFDUP: 115,
	  OP_DEPTH: 116,
	  OP_DROP: 117,
	  OP_DUP: 118,
	  OP_NIP: 119,
	  OP_OVER: 120,
	  OP_PICK: 121,
	  OP_ROLL: 122,
	  OP_ROT: 123,
	  OP_SWAP: 124,
	  OP_TUCK: 125,

	  // splice ops
	  OP_CAT: 126,
	  OP_SUBSTR: 127,
	  OP_LEFT: 128,
	  OP_RIGHT: 129,
	  OP_SIZE: 130,

	  // bit logic
	  OP_INVERT: 131,
	  OP_AND: 132,
	  OP_OR: 133,
	  OP_XOR: 134,
	  OP_EQUAL: 135,
	  OP_EQUALVERIFY: 136,
	  OP_RESERVED1: 137,
	  OP_RESERVED2: 138,

	  // numeric
	  OP_1ADD: 139,
	  OP_1SUB: 140,
	  OP_2MUL: 141,
	  OP_2DIV: 142,
	  OP_NEGATE: 143,
	  OP_ABS: 144,
	  OP_NOT: 145,
	  OP_0NOTEQUAL: 146,

	  OP_ADD: 147,
	  OP_SUB: 148,
	  OP_MUL: 149,
	  OP_DIV: 150,
	  OP_MOD: 151,
	  OP_LSHIFT: 152,
	  OP_RSHIFT: 153,

	  OP_BOOLAND: 154,
	  OP_BOOLOR: 155,
	  OP_NUMEQUAL: 156,
	  OP_NUMEQUALVERIFY: 157,
	  OP_NUMNOTEQUAL: 158,
	  OP_LESSTHAN: 159,
	  OP_GREATERTHAN: 160,
	  OP_LESSTHANOREQUAL: 161,
	  OP_GREATERTHANOREQUAL: 162,
	  OP_MIN: 163,
	  OP_MAX: 164,

	  OP_WITHIN: 165,

	  // crypto
	  OP_RIPEMD160: 166,
	  OP_SHA1: 167,
	  OP_SHA256: 168,
	  OP_HASH160: 169,
	  OP_HASH256: 170,
	  OP_CODESEPARATOR: 171,
	  OP_CHECKSIG: 172,
	  OP_CHECKSIGVERIFY: 173,
	  OP_CHECKMULTISIG: 174,
	  OP_CHECKMULTISIGVERIFY: 175,

	  // expansion
	  OP_NOP1: 176,
	  OP_NOP2: 177,
	  OP_NOP3: 178,
	  OP_NOP4: 179,
	  OP_NOP5: 180,
	  OP_NOP6: 181,
	  OP_NOP7: 182,
	  OP_NOP8: 183,
	  OP_NOP9: 184,
	  OP_NOP10: 185,

	  // template matching params
	  OP_PUBKEYHASH: 253,
	  OP_PUBKEY: 254,
	  OP_INVALIDOPCODE: 255
	}


/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var C_enc = C.enc;

		    /**
		     * Base64 encoding strategy.
		     */
		    var Base64 = C_enc.Base64 = {
		        /**
		         * Converts a word array to a Base64 string.
		         *
		         * @param {WordArray} wordArray The word array.
		         *
		         * @return {string} The Base64 string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
		         */
		        stringify: function (wordArray) {
		            // Shortcuts
		            var words = wordArray.words;
		            var sigBytes = wordArray.sigBytes;
		            var map = this._map;

		            // Clamp excess bits
		            wordArray.clamp();

		            // Convert
		            var base64Chars = [];
		            for (var i = 0; i < sigBytes; i += 3) {
		                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;
		                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;
		                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;

		                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;

		                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {
		                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));
		                }
		            }

		            // Add padding
		            var paddingChar = map.charAt(64);
		            if (paddingChar) {
		                while (base64Chars.length % 4) {
		                    base64Chars.push(paddingChar);
		                }
		            }

		            return base64Chars.join('');
		        },

		        /**
		         * Converts a Base64 string to a word array.
		         *
		         * @param {string} base64Str The Base64 string.
		         *
		         * @return {WordArray} The word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
		         */
		        parse: function (base64Str) {
		            // Shortcuts
		            var base64StrLength = base64Str.length;
		            var map = this._map;
		            var reverseMap = this._reverseMap;

		            if (!reverseMap) {
		                    reverseMap = this._reverseMap = [];
		                    for (var j = 0; j < map.length; j++) {
		                        reverseMap[map.charCodeAt(j)] = j;
		                    }
		            }

		            // Ignore padding
		            var paddingChar = map.charAt(64);
		            if (paddingChar) {
		                var paddingIndex = base64Str.indexOf(paddingChar);
		                if (paddingIndex !== -1) {
		                    base64StrLength = paddingIndex;
		                }
		            }

		            // Convert
		            return parseLoop(base64Str, base64StrLength, reverseMap);

		        },

		        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
		    };

		    function parseLoop(base64Str, base64StrLength, reverseMap) {
		      var words = [];
		      var nBytes = 0;
		      for (var i = 0; i < base64StrLength; i++) {
		          if (i % 4) {
		              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);
		              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);
		              words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);
		              nBytes++;
		          }
		      }
		      return WordArray.create(words, nBytes);
		    }
		}());


		return CryptoJS.enc.Base64;

	}));

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function (Math) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var Hasher = C_lib.Hasher;
		    var C_algo = C.algo;

		    // Constants table
		    var T = [];

		    // Compute constants
		    (function () {
		        for (var i = 0; i < 64; i++) {
		            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;
		        }
		    }());

		    /**
		     * MD5 hash algorithm.
		     */
		    var MD5 = C_algo.MD5 = Hasher.extend({
		        _doReset: function () {
		            this._hash = new WordArray.init([
		                0x67452301, 0xefcdab89,
		                0x98badcfe, 0x10325476
		            ]);
		        },

		        _doProcessBlock: function (M, offset) {
		            // Swap endian
		            for (var i = 0; i < 16; i++) {
		                // Shortcuts
		                var offset_i = offset + i;
		                var M_offset_i = M[offset_i];

		                M[offset_i] = (
		                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
		                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
		                );
		            }

		            // Shortcuts
		            var H = this._hash.words;

		            var M_offset_0  = M[offset + 0];
		            var M_offset_1  = M[offset + 1];
		            var M_offset_2  = M[offset + 2];
		            var M_offset_3  = M[offset + 3];
		            var M_offset_4  = M[offset + 4];
		            var M_offset_5  = M[offset + 5];
		            var M_offset_6  = M[offset + 6];
		            var M_offset_7  = M[offset + 7];
		            var M_offset_8  = M[offset + 8];
		            var M_offset_9  = M[offset + 9];
		            var M_offset_10 = M[offset + 10];
		            var M_offset_11 = M[offset + 11];
		            var M_offset_12 = M[offset + 12];
		            var M_offset_13 = M[offset + 13];
		            var M_offset_14 = M[offset + 14];
		            var M_offset_15 = M[offset + 15];

		            // Working varialbes
		            var a = H[0];
		            var b = H[1];
		            var c = H[2];
		            var d = H[3];

		            // Computation
		            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);
		            d = FF(d, a, b, c, M_offset_1,  12, T[1]);
		            c = FF(c, d, a, b, M_offset_2,  17, T[2]);
		            b = FF(b, c, d, a, M_offset_3,  22, T[3]);
		            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);
		            d = FF(d, a, b, c, M_offset_5,  12, T[5]);
		            c = FF(c, d, a, b, M_offset_6,  17, T[6]);
		            b = FF(b, c, d, a, M_offset_7,  22, T[7]);
		            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);
		            d = FF(d, a, b, c, M_offset_9,  12, T[9]);
		            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
		            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
		            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);
		            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
		            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
		            b = FF(b, c, d, a, M_offset_15, 22, T[15]);

		            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);
		            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);
		            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
		            b = GG(b, c, d, a, M_offset_0,  20, T[19]);
		            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);
		            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);
		            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
		            b = GG(b, c, d, a, M_offset_4,  20, T[23]);
		            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);
		            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);
		            c = GG(c, d, a, b, M_offset_3,  14, T[26]);
		            b = GG(b, c, d, a, M_offset_8,  20, T[27]);
		            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);
		            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);
		            c = GG(c, d, a, b, M_offset_7,  14, T[30]);
		            b = GG(b, c, d, a, M_offset_12, 20, T[31]);

		            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);
		            d = HH(d, a, b, c, M_offset_8,  11, T[33]);
		            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
		            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
		            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);
		            d = HH(d, a, b, c, M_offset_4,  11, T[37]);
		            c = HH(c, d, a, b, M_offset_7,  16, T[38]);
		            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
		            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);
		            d = HH(d, a, b, c, M_offset_0,  11, T[41]);
		            c = HH(c, d, a, b, M_offset_3,  16, T[42]);
		            b = HH(b, c, d, a, M_offset_6,  23, T[43]);
		            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);
		            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
		            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
		            b = HH(b, c, d, a, M_offset_2,  23, T[47]);

		            a = II(a, b, c, d, M_offset_0,  6,  T[48]);
		            d = II(d, a, b, c, M_offset_7,  10, T[49]);
		            c = II(c, d, a, b, M_offset_14, 15, T[50]);
		            b = II(b, c, d, a, M_offset_5,  21, T[51]);
		            a = II(a, b, c, d, M_offset_12, 6,  T[52]);
		            d = II(d, a, b, c, M_offset_3,  10, T[53]);
		            c = II(c, d, a, b, M_offset_10, 15, T[54]);
		            b = II(b, c, d, a, M_offset_1,  21, T[55]);
		            a = II(a, b, c, d, M_offset_8,  6,  T[56]);
		            d = II(d, a, b, c, M_offset_15, 10, T[57]);
		            c = II(c, d, a, b, M_offset_6,  15, T[58]);
		            b = II(b, c, d, a, M_offset_13, 21, T[59]);
		            a = II(a, b, c, d, M_offset_4,  6,  T[60]);
		            d = II(d, a, b, c, M_offset_11, 10, T[61]);
		            c = II(c, d, a, b, M_offset_2,  15, T[62]);
		            b = II(b, c, d, a, M_offset_9,  21, T[63]);

		            // Intermediate hash value
		            H[0] = (H[0] + a) | 0;
		            H[1] = (H[1] + b) | 0;
		            H[2] = (H[2] + c) | 0;
		            H[3] = (H[3] + d) | 0;
		        },

		        _doFinalize: function () {
		            // Shortcuts
		            var data = this._data;
		            var dataWords = data.words;

		            var nBitsTotal = this._nDataBytes * 8;
		            var nBitsLeft = data.sigBytes * 8;

		            // Add padding
		            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);

		            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
		            var nBitsTotalL = nBitsTotal;
		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (
		                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |
		                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)
		            );
		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
		                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |
		                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)
		            );

		            data.sigBytes = (dataWords.length + 1) * 4;

		            // Hash final blocks
		            this._process();

		            // Shortcuts
		            var hash = this._hash;
		            var H = hash.words;

		            // Swap endian
		            for (var i = 0; i < 4; i++) {
		                // Shortcut
		                var H_i = H[i];

		                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
		                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
		            }

		            // Return final computed hash
		            return hash;
		        },

		        clone: function () {
		            var clone = Hasher.clone.call(this);
		            clone._hash = this._hash.clone();

		            return clone;
		        }
		    });

		    function FF(a, b, c, d, x, s, t) {
		        var n = a + ((b & c) | (~b & d)) + x + t;
		        return ((n << s) | (n >>> (32 - s))) + b;
		    }

		    function GG(a, b, c, d, x, s, t) {
		        var n = a + ((b & d) | (c & ~d)) + x + t;
		        return ((n << s) | (n >>> (32 - s))) + b;
		    }

		    function HH(a, b, c, d, x, s, t) {
		        var n = a + (b ^ c ^ d) + x + t;
		        return ((n << s) | (n >>> (32 - s))) + b;
		    }

		    function II(a, b, c, d, x, s, t) {
		        var n = a + (c ^ (b | ~d)) + x + t;
		        return ((n << s) | (n >>> (32 - s))) + b;
		    }

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.MD5('message');
		     *     var hash = CryptoJS.MD5(wordArray);
		     */
		    C.MD5 = Hasher._createHelper(MD5);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacMD5(message, key);
		     */
		    C.HmacMD5 = Hasher._createHmacHelper(MD5);
		}(Math));


		return CryptoJS.MD5;

	}));

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var elliptic = exports;

	elliptic.version = __webpack_require__(313).version;
	elliptic.utils = __webpack_require__(10);
	elliptic.rand = __webpack_require__(114);
	elliptic.curve = __webpack_require__(121);
	elliptic.curves = __webpack_require__(82);

	// Protocols
	elliptic.ec = __webpack_require__(265);
	elliptic.eddsa = __webpack_require__(268);


/***/ },
/* 36 */
/***/ function(module, exports) {

	'use strict';

	const codes = {};

	function createErrorType(code, message, Base) {
	  if (!Base) {
	    Base = Error
	  }

	  function getMessage (arg1, arg2, arg3) {
	    if (typeof message === 'string') {
	      return message
	    } else {
	      return message(arg1, arg2, arg3)
	    }
	  }

	  class NodeError extends Base {
	    constructor (arg1, arg2, arg3) {
	      super(getMessage(arg1, arg2, arg3));
	    }
	  }

	  NodeError.prototype.name = Base.name;
	  NodeError.prototype.code = code;

	  codes[code] = NodeError;
	}

	// https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
	function oneOf(expected, thing) {
	  if (Array.isArray(expected)) {
	    const len = expected.length;
	    expected = expected.map((i) => String(i));
	    if (len > 2) {
	      return `one of ${thing} ${expected.slice(0, len - 1).join(', ')}, or ` +
	             expected[len - 1];
	    } else if (len === 2) {
	      return `one of ${thing} ${expected[0]} or ${expected[1]}`;
	    } else {
	      return `of ${thing} ${expected[0]}`;
	    }
	  } else {
	    return `of ${thing} ${String(expected)}`;
	  }
	}

	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
	function startsWith(str, search, pos) {
		return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
	}

	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
	function endsWith(str, search, this_len) {
		if (this_len === undefined || this_len > str.length) {
			this_len = str.length;
		}
		return str.substring(this_len - search.length, this_len) === search;
	}

	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
	function includes(str, search, start) {
	  if (typeof start !== 'number') {
	    start = 0;
	  }

	  if (start + search.length > str.length) {
	    return false;
	  } else {
	    return str.indexOf(search, start) !== -1;
	  }
	}

	createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
	  return 'The value "' + value + '" is invalid for option "' + name + '"'
	}, TypeError);
	createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
	  // determiner: 'must be' or 'must not be'
	  let determiner;
	  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
	    determiner = 'must not be';
	    expected = expected.replace(/^not /, '');
	  } else {
	    determiner = 'must be';
	  }

	  let msg;
	  if (endsWith(name, ' argument')) {
	    // For cases like 'first argument'
	    msg = `The ${name} ${determiner} ${oneOf(expected, 'type')}`;
	  } else {
	    const type = includes(name, '.') ? 'property' : 'argument';
	    msg = `The "${name}" ${type} ${determiner} ${oneOf(expected, 'type')}`;
	  }

	  msg += `. Received type ${typeof actual}`;
	  return msg;
	}, TypeError);
	createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
	createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
	  return 'The ' + name + ' method is not implemented'
	});
	createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
	createErrorType('ERR_STREAM_DESTROYED', function (name) {
	  return 'Cannot call ' + name + ' after a stream was destroyed';
	});
	createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
	createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
	createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
	createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
	createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
	  return 'Unknown encoding: ' + arg
	}, TypeError);
	createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');

	module.exports.codes = codes;


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.
	'use strict';
	/*<replacement>*/

	var objectKeys = Object.keys || function (obj) {
	  var keys = [];

	  for (var key in obj) {
	    keys.push(key);
	  }

	  return keys;
	};
	/*</replacement>*/


	module.exports = Duplex;

	var Readable = __webpack_require__(140);

	var Writable = __webpack_require__(142);

	__webpack_require__(3)(Duplex, Readable);

	{
	  // Allow the keys array to be GC'ed.
	  var keys = objectKeys(Writable.prototype);

	  for (var v = 0; v < keys.length; v++) {
	    var method = keys[v];
	    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
	  }
	}

	function Duplex(options) {
	  if (!(this instanceof Duplex)) return new Duplex(options);
	  Readable.call(this, options);
	  Writable.call(this, options);
	  this.allowHalfOpen = true;

	  if (options) {
	    if (options.readable === false) this.readable = false;
	    if (options.writable === false) this.writable = false;

	    if (options.allowHalfOpen === false) {
	      this.allowHalfOpen = false;
	      this.once('end', onend);
	    }
	  }
	}

	Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState.highWaterMark;
	  }
	});
	Object.defineProperty(Duplex.prototype, 'writableBuffer', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState && this._writableState.getBuffer();
	  }
	});
	Object.defineProperty(Duplex.prototype, 'writableLength', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState.length;
	  }
	}); // the no-half-open enforcer

	function onend() {
	  // If the writable side ended, then we're ok.
	  if (this._writableState.ended) return; // no more data can be written.
	  // But allow more writes to happen in this tick.

	  process.nextTick(onEndNT, this);
	}

	function onEndNT(self) {
	  self.end();
	}

	Object.defineProperty(Duplex.prototype, 'destroyed', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    if (this._readableState === undefined || this._writableState === undefined) {
	      return false;
	    }

	    return this._readableState.destroyed && this._writableState.destroyed;
	  },
	  set: function set(value) {
	    // we ignore the value if the stream
	    // has not been initialized yet
	    if (this._readableState === undefined || this._writableState === undefined) {
	      return;
	    } // backward compatibility, the user is explicitly
	    // managing destroyed


	    this._readableState.destroyed = value;
	    this._writableState.destroyed = value;
	  }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	var Buffer = __webpack_require__(6).Buffer

	// prototype class for hash functions
	function Hash (blockSize, finalSize) {
	  this._block = Buffer.alloc(blockSize)
	  this._finalSize = finalSize
	  this._blockSize = blockSize
	  this._len = 0
	}

	Hash.prototype.update = function (data, enc) {
	  if (typeof data === 'string') {
	    enc = enc || 'utf8'
	    data = Buffer.from(data, enc)
	  }

	  var block = this._block
	  var blockSize = this._blockSize
	  var length = data.length
	  var accum = this._len

	  for (var offset = 0; offset < length;) {
	    var assigned = accum % blockSize
	    var remainder = Math.min(length - offset, blockSize - assigned)

	    for (var i = 0; i < remainder; i++) {
	      block[assigned + i] = data[offset + i]
	    }

	    accum += remainder
	    offset += remainder

	    if ((accum % blockSize) === 0) {
	      this._update(block)
	    }
	  }

	  this._len += length
	  return this
	}

	Hash.prototype.digest = function (enc) {
	  var rem = this._len % this._blockSize

	  this._block[rem] = 0x80

	  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
	  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
	  this._block.fill(0, rem + 1)

	  if (rem >= this._finalSize) {
	    this._update(this._block)
	    this._block.fill(0)
	  }

	  var bits = this._len * 8

	  // uint32
	  if (bits <= 0xffffffff) {
	    this._block.writeUInt32BE(bits, this._blockSize - 4)

	  // uint64
	  } else {
	    var lowBits = (bits & 0xffffffff) >>> 0
	    var highBits = (bits - lowBits) / 0x100000000

	    this._block.writeUInt32BE(highBits, this._blockSize - 8)
	    this._block.writeUInt32BE(lowBits, this._blockSize - 4)
	  }

	  this._update(this._block)
	  var hash = this._hash()

	  return enc ? hash.toString(enc) : hash
	}

	Hash.prototype._update = function () {
	  throw new Error('_update must be implemented by subclass')
	}

	module.exports = Hash


/***/ },
/* 39 */
/***/ function(module, exports) {

	/*
	    This file is part of web3.js.

	    web3.js is free software: you can redistribute it and/or modify
	    it under the terms of the GNU Lesser General Public License as published by
	    the Free Software Foundation, either version 3 of the License, or
	    (at your option) any later version.

	    web3.js is distributed in the hope that it will be useful,
	    but WITHOUT ANY WARRANTY; without even the implied warranty of
	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	    GNU Lesser General Public License for more details.

	    You should have received a copy of the GNU Lesser General Public License
	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	*/
	/** 
	 * @file errors.js
	 * @author Marek Kotewicz <marek@ethdev.com>
	 * @date 2015
	 */

	module.exports = {
	    InvalidNumberOfSolidityArgs: function () {
	        return new Error('Invalid number of arguments to Solidity function');
	    },
	    InvalidNumberOfRPCParams: function () {
	        return new Error('Invalid number of input parameters to RPC method');
	    },
	    InvalidConnection: function (host){
	        return new Error('CONNECTION ERROR: Couldn\'t connect to node '+ host +'.');
	    },
	    InvalidProvider: function () {
	        return new Error('Provider not set or invalid');
	    },
	    InvalidResponse: function (result){
	        var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(result);
	        return new Error(message);
	    },
	    ConnectionTimeout: function (ms){
	        return new Error('CONNECTION TIMEOUT: timeout of ' + ms + ' ms achived');
	    }
	};


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/*
	    This file is part of web3.js.

	    web3.js is free software: you can redistribute it and/or modify
	    it under the terms of the GNU Lesser General Public License as published by
	    the Free Software Foundation, either version 3 of the License, or
	    (at your option) any later version.

	    web3.js is distributed in the hope that it will be useful,
	    but WITHOUT ANY WARRANTY; without even the implied warranty of
	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	    GNU Lesser General Public License for more details.

	    You should have received a copy of the GNU Lesser General Public License
	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	*/
	/**
	 * @file property.js
	 * @author Fabian Vogelsteller <fabian@frozeman.de>
	 * @author Marek Kotewicz <marek@ethdev.com>
	 * @date 2015
	 */

	var utils = __webpack_require__(9);

	var Property = function (options) {
	    this.name = options.name;
	    this.getter = options.getter;
	    this.setter = options.setter;
	    this.outputFormatter = options.outputFormatter;
	    this.inputFormatter = options.inputFormatter;
	    this.requestManager = null;
	};

	Property.prototype.setRequestManager = function (rm) {
	    this.requestManager = rm;
	};

	/**
	 * Should be called to format input args of method
	 *
	 * @method formatInput
	 * @param {Array}
	 * @return {Array}
	 */
	Property.prototype.formatInput = function (arg) {
	    return this.inputFormatter ? this.inputFormatter(arg) : arg;
	};

	/**
	 * Should be called to format output(result) of method
	 *
	 * @method formatOutput
	 * @param {Object}
	 * @return {Object}
	 */
	Property.prototype.formatOutput = function (result) {
	    return this.outputFormatter && result !== null && result !== undefined ? this.outputFormatter(result) : result;
	};

	/**
	 * Should be used to extract callback from array of arguments. Modifies input param
	 *
	 * @method extractCallback
	 * @param {Array} arguments
	 * @return {Function|Null} callback, if exists
	 */
	Property.prototype.extractCallback = function (args) {
	    if (utils.isFunction(args[args.length - 1])) {
	        return args.pop(); // modify the args array!
	    }
	};


	/**
	 * Should attach function to method
	 *
	 * @method attachToObject
	 * @param {Object}
	 * @param {Function}
	 */
	Property.prototype.attachToObject = function (obj) {
	    var proto = {
	        get: this.buildGet(),
	        enumerable: true
	    };

	    var names = this.name.split('.');
	    var name = names[0];
	    if (names.length > 1) {
	        obj[names[0]] = obj[names[0]] || {};
	        obj = obj[names[0]];
	        name = names[1];
	    }

	    Object.defineProperty(obj, name, proto);
	    obj[asyncGetterName(name)] = this.buildAsyncGet();
	};

	var asyncGetterName = function (name) {
	    return 'get' + name.charAt(0).toUpperCase() + name.slice(1);
	};

	Property.prototype.buildGet = function () {
	    var property = this;
	    return function get() {
	        return property.formatOutput(property.requestManager.send({
	            method: property.getter
	        }));
	    };
	};

	Property.prototype.buildAsyncGet = function () {
	    var property = this;
	    var get = function (callback) {
	        property.requestManager.sendAsync({
	            method: property.getter
	        }, function (err, result) {
	            callback(err, property.formatOutput(result));
	        });
	    };
	    get.request = this.request.bind(this);
	    return get;
	};

	/**
	 * Should be called to create pure JSONRPC request which can be used in batch request
	 *
	 * @method request
	 * @param {...} params
	 * @return {Object} jsonrpc request
	 */
	Property.prototype.request = function () {
	    var payload = {
	        method: this.getter,
	        params: [],
	        callback: this.extractCallback(Array.prototype.slice.call(arguments))
	    };
	    payload.format = this.formatOutput.bind(this);
	    return payload;
	};

	module.exports = Property;



/***/ },
/* 41 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*! bignumber.js v2.0.7 https://github.com/MikeMcl/bignumber.js/LICENCE */

	;(function (global) {
	    'use strict';

	    /*
	      bignumber.js v2.0.7
	      A JavaScript library for arbitrary-precision arithmetic.
	      https://github.com/MikeMcl/bignumber.js
	      Copyright (c) 2015 Michael Mclaughlin <M8ch88l@gmail.com>
	      MIT Expat Licence
	    */


	    var BigNumber, crypto, parseNumeric,
	        isNumeric = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
	        mathceil = Math.ceil,
	        mathfloor = Math.floor,
	        notBool = ' not a boolean or binary digit',
	        roundingMode = 'rounding mode',
	        tooManyDigits = 'number type has more than 15 significant digits',
	        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',
	        BASE = 1e14,
	        LOG_BASE = 14,
	        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1
	        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
	        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
	        SQRT_BASE = 1e7,

	        /*
	         * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
	         * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an
	         * exception is thrown (if ERRORS is true).
	         */
	        MAX = 1E9;                                   // 0 to MAX_INT32


	    /*
	     * Create and return a BigNumber constructor.
	     */
	    function another(configObj) {
	        var div,

	            // id tracks the caller function, so its name can be included in error messages.
	            id = 0,
	            P = BigNumber.prototype,
	            ONE = new BigNumber(1),


	            /********************************* EDITABLE DEFAULTS **********************************/


	            /*
	             * The default values below must be integers within the inclusive ranges stated.
	             * The values can also be changed at run-time using BigNumber.config.
	             */

	            // The maximum number of decimal places for operations involving division.
	            DECIMAL_PLACES = 20,                     // 0 to MAX

	            /*
	             * The rounding mode used when rounding to the above decimal places, and when using
	             * toExponential, toFixed, toFormat and toPrecision, and round (default value).
	             * UP         0 Away from zero.
	             * DOWN       1 Towards zero.
	             * CEIL       2 Towards +Infinity.
	             * FLOOR      3 Towards -Infinity.
	             * HALF_UP    4 Towards nearest neighbour. If equidistant, up.
	             * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
	             * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
	             * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
	             * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
	             */
	            ROUNDING_MODE = 4,                       // 0 to 8

	            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

	            // The exponent value at and beneath which toString returns exponential notation.
	            // Number type: -7
	            TO_EXP_NEG = -7,                         // 0 to -MAX

	            // The exponent value at and above which toString returns exponential notation.
	            // Number type: 21
	            TO_EXP_POS = 21,                         // 0 to MAX

	            // RANGE : [MIN_EXP, MAX_EXP]

	            // The minimum exponent value, beneath which underflow to zero occurs.
	            // Number type: -324  (5e-324)
	            MIN_EXP = -1e7,                          // -1 to -MAX

	            // The maximum exponent value, above which overflow to Infinity occurs.
	            // Number type:  308  (1.7976931348623157e+308)
	            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
	            MAX_EXP = 1e7,                           // 1 to MAX

	            // Whether BigNumber Errors are ever thrown.
	            ERRORS = true,                           // true or false

	            // Change to intValidatorNoErrors if ERRORS is false.
	            isValidInt = intValidatorWithErrors,     // intValidatorWithErrors/intValidatorNoErrors

	            // Whether to use cryptographically-secure random number generation, if available.
	            CRYPTO = false,                          // true or false

	            /*
	             * The modulo mode used when calculating the modulus: a mod n.
	             * The quotient (q = a / n) is calculated according to the corresponding rounding mode.
	             * The remainder (r) is calculated as: r = a - n * q.
	             *
	             * UP        0 The remainder is positive if the dividend is negative, else is negative.
	             * DOWN      1 The remainder has the same sign as the dividend.
	             *             This modulo mode is commonly known as 'truncated division' and is
	             *             equivalent to (a % n) in JavaScript.
	             * FLOOR     3 The remainder has the same sign as the divisor (Python %).
	             * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
	             * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
	             *             The remainder is always positive.
	             *
	             * The truncated division, floored division, Euclidian division and IEEE 754 remainder
	             * modes are commonly used for the modulus operation.
	             * Although the other rounding modes can also be used, they may not give useful results.
	             */
	            MODULO_MODE = 1,                         // 0 to 9

	            // The maximum number of significant digits of the result of the toPower operation.
	            // If POW_PRECISION is 0, there will be unlimited significant digits.
	            POW_PRECISION = 100,                     // 0 to MAX

	            // The format specification used by the BigNumber.prototype.toFormat method.
	            FORMAT = {
	                decimalSeparator: '.',
	                groupSeparator: ',',
	                groupSize: 3,
	                secondaryGroupSize: 0,
	                fractionGroupSeparator: '\xA0',      // non-breaking space
	                fractionGroupSize: 0
	            };


	        /******************************************************************************************/


	        // CONSTRUCTOR


	        /*
	         * The BigNumber constructor and exported function.
	         * Create and return a new instance of a BigNumber object.
	         *
	         * n {number|string|BigNumber} A numeric value.
	         * [b] {number} The base of n. Integer, 2 to 64 inclusive.
	         */
	        function BigNumber( n, b ) {
	            var c, e, i, num, len, str,
	                x = this;

	            // Enable constructor usage without new.
	            if ( !( x instanceof BigNumber ) ) {

	                // 'BigNumber() constructor call without new: {n}'
	                if (ERRORS) raise( 26, 'constructor call without new', n );
	                return new BigNumber( n, b );
	            }

	            // 'new BigNumber() base not an integer: {b}'
	            // 'new BigNumber() base out of range: {b}'
	            if ( b == null || !isValidInt( b, 2, 64, id, 'base' ) ) {

	                // Duplicate.
	                if ( n instanceof BigNumber ) {
	                    x.s = n.s;
	                    x.e = n.e;
	                    x.c = ( n = n.c ) ? n.slice() : n;
	                    id = 0;
	                    return;
	                }

	                if ( ( num = typeof n == 'number' ) && n * 0 == 0 ) {
	                    x.s = 1 / n < 0 ? ( n = -n, -1 ) : 1;

	                    // Fast path for integers.
	                    if ( n === ~~n ) {
	                        for ( e = 0, i = n; i >= 10; i /= 10, e++ );
	                        x.e = e;
	                        x.c = [n];
	                        id = 0;
	                        return;
	                    }

	                    str = n + '';
	                } else {
	                    if ( !isNumeric.test( str = n + '' ) ) return parseNumeric( x, str, num );
	                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;
	                }
	            } else {
	                b = b | 0;
	                str = n + '';

	                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.
	                // Allow exponential notation to be used with base 10 argument.
	                if ( b == 10 ) {
	                    x = new BigNumber( n instanceof BigNumber ? n : str );
	                    return round( x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE );
	                }

	                // Avoid potential interpretation of Infinity and NaN as base 44+ values.
	                // Any number in exponential form will fail due to the [Ee][+-].
	                if ( ( num = typeof n == 'number' ) && n * 0 != 0 ||
	                  !( new RegExp( '^-?' + ( c = '[' + ALPHABET.slice( 0, b ) + ']+' ) +
	                    '(?:\\.' + c + ')?$',b < 37 ? 'i' : '' ) ).test(str) ) {
	                    return parseNumeric( x, str, num, b );
	                }

	                if (num) {
	                    x.s = 1 / n < 0 ? ( str = str.slice(1), -1 ) : 1;

	                    if ( ERRORS && str.replace( /^0\.0*|\./, '' ).length > 15 ) {

	                        // 'new BigNumber() number type has more than 15 significant digits: {n}'
	                        raise( id, tooManyDigits, n );
	                    }

	                    // Prevent later check for length on converted number.
	                    num = false;
	                } else {
	                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;
	                }

	                str = convertBase( str, 10, b, x.s );
	            }

	            // Decimal point?
	            if ( ( e = str.indexOf('.') ) > -1 ) str = str.replace( '.', '' );

	            // Exponential form?
	            if ( ( i = str.search( /e/i ) ) > 0 ) {

	                // Determine exponent.
	                if ( e < 0 ) e = i;
	                e += +str.slice( i + 1 );
	                str = str.substring( 0, i );
	            } else if ( e < 0 ) {

	                // Integer.
	                e = str.length;
	            }

	            // Determine leading zeros.
	            for ( i = 0; str.charCodeAt(i) === 48; i++ );

	            // Determine trailing zeros.
	            for ( len = str.length; str.charCodeAt(--len) === 48; );
	            str = str.slice( i, len + 1 );

	            if (str) {
	                len = str.length;

	                // Disallow numbers with over 15 significant digits if number type.
	                // 'new BigNumber() number type has more than 15 significant digits: {n}'
	                if ( num && ERRORS && len > 15 ) raise( id, tooManyDigits, x.s * n );

	                e = e - i - 1;

	                 // Overflow?
	                if ( e > MAX_EXP ) {

	                    // Infinity.
	                    x.c = x.e = null;

	                // Underflow?
	                } else if ( e < MIN_EXP ) {

	                    // Zero.
	                    x.c = [ x.e = 0 ];
	                } else {
	                    x.e = e;
	                    x.c = [];

	                    // Transform base

	                    // e is the base 10 exponent.
	                    // i is where to slice str to get the first element of the coefficient array.
	                    i = ( e + 1 ) % LOG_BASE;
	                    if ( e < 0 ) i += LOG_BASE;

	                    if ( i < len ) {
	                        if (i) x.c.push( +str.slice( 0, i ) );

	                        for ( len -= LOG_BASE; i < len; ) {
	                            x.c.push( +str.slice( i, i += LOG_BASE ) );
	                        }

	                        str = str.slice(i);
	                        i = LOG_BASE - str.length;
	                    } else {
	                        i -= len;
	                    }

	                    for ( ; i--; str += '0' );
	                    x.c.push( +str );
	                }
	            } else {

	                // Zero.
	                x.c = [ x.e = 0 ];
	            }

	            id = 0;
	        }


	        // CONSTRUCTOR PROPERTIES


	        BigNumber.another = another;

	        BigNumber.ROUND_UP = 0;
	        BigNumber.ROUND_DOWN = 1;
	        BigNumber.ROUND_CEIL = 2;
	        BigNumber.ROUND_FLOOR = 3;
	        BigNumber.ROUND_HALF_UP = 4;
	        BigNumber.ROUND_HALF_DOWN = 5;
	        BigNumber.ROUND_HALF_EVEN = 6;
	        BigNumber.ROUND_HALF_CEIL = 7;
	        BigNumber.ROUND_HALF_FLOOR = 8;
	        BigNumber.EUCLID = 9;


	        /*
	         * Configure infrequently-changing library-wide settings.
	         *
	         * Accept an object or an argument list, with one or many of the following properties or
	         * parameters respectively:
	         *
	         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive
	         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive
	         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or
	         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]
	         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or
	         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]
	         *   ERRORS          {boolean|number}   true, false, 1 or 0
	         *   CRYPTO          {boolean|number}   true, false, 1 or 0
	         *   MODULO_MODE     {number}           0 to 9 inclusive
	         *   POW_PRECISION   {number}           0 to MAX inclusive
	         *   FORMAT          {object}           See BigNumber.prototype.toFormat
	         *      decimalSeparator       {string}
	         *      groupSeparator         {string}
	         *      groupSize              {number}
	         *      secondaryGroupSize     {number}
	         *      fractionGroupSeparator {string}
	         *      fractionGroupSize      {number}
	         *
	         * (The values assigned to the above FORMAT object properties are not checked for validity.)
	         *
	         * E.g.
	         * BigNumber.config(20, 4) is equivalent to
	         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
	         *
	         * Ignore properties/parameters set to null or undefined.
	         * Return an object with the properties current values.
	         */
	        BigNumber.config = function () {
	            var v, p,
	                i = 0,
	                r = {},
	                a = arguments,
	                o = a[0],
	                has = o && typeof o == 'object'
	                  ? function () { if ( o.hasOwnProperty(p) ) return ( v = o[p] ) != null; }
	                  : function () { if ( a.length > i ) return ( v = a[i++] ) != null; };

	            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
	            // 'config() DECIMAL_PLACES not an integer: {v}'
	            // 'config() DECIMAL_PLACES out of range: {v}'
	            if ( has( p = 'DECIMAL_PLACES' ) && isValidInt( v, 0, MAX, 2, p ) ) {
	                DECIMAL_PLACES = v | 0;
	            }
	            r[p] = DECIMAL_PLACES;

	            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
	            // 'config() ROUNDING_MODE not an integer: {v}'
	            // 'config() ROUNDING_MODE out of range: {v}'
	            if ( has( p = 'ROUNDING_MODE' ) && isValidInt( v, 0, 8, 2, p ) ) {
	                ROUNDING_MODE = v | 0;
	            }
	            r[p] = ROUNDING_MODE;

	            // EXPONENTIAL_AT {number|number[]}
	            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].
	            // 'config() EXPONENTIAL_AT not an integer: {v}'
	            // 'config() EXPONENTIAL_AT out of range: {v}'
	            if ( has( p = 'EXPONENTIAL_AT' ) ) {

	                if ( isArray(v) ) {
	                    if ( isValidInt( v[0], -MAX, 0, 2, p ) && isValidInt( v[1], 0, MAX, 2, p ) ) {
	                        TO_EXP_NEG = v[0] | 0;
	                        TO_EXP_POS = v[1] | 0;
	                    }
	                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {
	                    TO_EXP_NEG = -( TO_EXP_POS = ( v < 0 ? -v : v ) | 0 );
	                }
	            }
	            r[p] = [ TO_EXP_NEG, TO_EXP_POS ];

	            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
	            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
	            // 'config() RANGE not an integer: {v}'
	            // 'config() RANGE cannot be zero: {v}'
	            // 'config() RANGE out of range: {v}'
	            if ( has( p = 'RANGE' ) ) {

	                if ( isArray(v) ) {
	                    if ( isValidInt( v[0], -MAX, -1, 2, p ) && isValidInt( v[1], 1, MAX, 2, p ) ) {
	                        MIN_EXP = v[0] | 0;
	                        MAX_EXP = v[1] | 0;
	                    }
	                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {
	                    if ( v | 0 ) MIN_EXP = -( MAX_EXP = ( v < 0 ? -v : v ) | 0 );
	                    else if (ERRORS) raise( 2, p + ' cannot be zero', v );
	                }
	            }
	            r[p] = [ MIN_EXP, MAX_EXP ];

	            // ERRORS {boolean|number} true, false, 1 or 0.
	            // 'config() ERRORS not a boolean or binary digit: {v}'
	            if ( has( p = 'ERRORS' ) ) {

	                if ( v === !!v || v === 1 || v === 0 ) {
	                    id = 0;
	                    isValidInt = ( ERRORS = !!v ) ? intValidatorWithErrors : intValidatorNoErrors;
	                } else if (ERRORS) {
	                    raise( 2, p + notBool, v );
	                }
	            }
	            r[p] = ERRORS;

	            // CRYPTO {boolean|number} true, false, 1 or 0.
	            // 'config() CRYPTO not a boolean or binary digit: {v}'
	            // 'config() crypto unavailable: {crypto}'
	            if ( has( p = 'CRYPTO' ) ) {

	                if ( v === !!v || v === 1 || v === 0 ) {
	                    CRYPTO = !!( v && crypto && typeof crypto == 'object' );
	                    if ( v && !CRYPTO && ERRORS ) raise( 2, 'crypto unavailable', crypto );
	                } else if (ERRORS) {
	                    raise( 2, p + notBool, v );
	                }
	            }
	            r[p] = CRYPTO;

	            // MODULO_MODE {number} Integer, 0 to 9 inclusive.
	            // 'config() MODULO_MODE not an integer: {v}'
	            // 'config() MODULO_MODE out of range: {v}'
	            if ( has( p = 'MODULO_MODE' ) && isValidInt( v, 0, 9, 2, p ) ) {
	                MODULO_MODE = v | 0;
	            }
	            r[p] = MODULO_MODE;

	            // POW_PRECISION {number} Integer, 0 to MAX inclusive.
	            // 'config() POW_PRECISION not an integer: {v}'
	            // 'config() POW_PRECISION out of range: {v}'
	            if ( has( p = 'POW_PRECISION' ) && isValidInt( v, 0, MAX, 2, p ) ) {
	                POW_PRECISION = v | 0;
	            }
	            r[p] = POW_PRECISION;

	            // FORMAT {object}
	            // 'config() FORMAT not an object: {v}'
	            if ( has( p = 'FORMAT' ) ) {

	                if ( typeof v == 'object' ) {
	                    FORMAT = v;
	                } else if (ERRORS) {
	                    raise( 2, p + ' not an object', v );
	                }
	            }
	            r[p] = FORMAT;

	            return r;
	        };


	        /*
	         * Return a new BigNumber whose value is the maximum of the arguments.
	         *
	         * arguments {number|string|BigNumber}
	         */
	        BigNumber.max = function () { return maxOrMin( arguments, P.lt ); };


	        /*
	         * Return a new BigNumber whose value is the minimum of the arguments.
	         *
	         * arguments {number|string|BigNumber}
	         */
	        BigNumber.min = function () { return maxOrMin( arguments, P.gt ); };


	        /*
	         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
	         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
	         * zeros are produced).
	         *
	         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	         *
	         * 'random() decimal places not an integer: {dp}'
	         * 'random() decimal places out of range: {dp}'
	         * 'random() crypto unavailable: {crypto}'
	         */
	        BigNumber.random = (function () {
	            var pow2_53 = 0x20000000000000;

	            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
	            // Check if Math.random() produces more than 32 bits of randomness.
	            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
	            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
	            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff
	              ? function () { return mathfloor( Math.random() * pow2_53 ); }
	              : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +
	                  (Math.random() * 0x800000 | 0); };

	            return function (dp) {
	                var a, b, e, k, v,
	                    i = 0,
	                    c = [],
	                    rand = new BigNumber(ONE);

	                dp = dp == null || !isValidInt( dp, 0, MAX, 14 ) ? DECIMAL_PLACES : dp | 0;
	                k = mathceil( dp / LOG_BASE );

	                if (CRYPTO) {

	                    // Browsers supporting crypto.getRandomValues.
	                    if ( crypto && crypto.getRandomValues ) {

	                        a = crypto.getRandomValues( new Uint32Array( k *= 2 ) );

	                        for ( ; i < k; ) {

	                            // 53 bits:
	                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
	                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000
	                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
	                            //                                     11111 11111111 11111111
	                            // 0x20000 is 2^21.
	                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);

	                            // Rejection sampling:
	                            // 0 <= v < 9007199254740992
	                            // Probability that v >= 9e15, is
	                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
	                            if ( v >= 9e15 ) {
	                                b = crypto.getRandomValues( new Uint32Array(2) );
	                                a[i] = b[0];
	                                a[i + 1] = b[1];
	                            } else {

	                                // 0 <= v <= 8999999999999999
	                                // 0 <= (v % 1e14) <= 99999999999999
	                                c.push( v % 1e14 );
	                                i += 2;
	                            }
	                        }
	                        i = k / 2;

	                    // Node.js supporting crypto.randomBytes.
	                    } else if ( crypto && crypto.randomBytes ) {

	                        // buffer
	                        a = crypto.randomBytes( k *= 7 );

	                        for ( ; i < k; ) {

	                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
	                            // 0x100000000 is 2^32, 0x1000000 is 2^24
	                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111
	                            // 0 <= v < 9007199254740992
	                            v = ( ( a[i] & 31 ) * 0x1000000000000 ) + ( a[i + 1] * 0x10000000000 ) +
	                                  ( a[i + 2] * 0x100000000 ) + ( a[i + 3] * 0x1000000 ) +
	                                  ( a[i + 4] << 16 ) + ( a[i + 5] << 8 ) + a[i + 6];

	                            if ( v >= 9e15 ) {
	                                crypto.randomBytes(7).copy( a, i );
	                            } else {

	                                // 0 <= (v % 1e14) <= 99999999999999
	                                c.push( v % 1e14 );
	                                i += 7;
	                            }
	                        }
	                        i = k / 7;
	                    } else if (ERRORS) {
	                        raise( 14, 'crypto unavailable', crypto );
	                    }
	                }

	                // Use Math.random: CRYPTO is false or crypto is unavailable and ERRORS is false.
	                if (!i) {

	                    for ( ; i < k; ) {
	                        v = random53bitInt();
	                        if ( v < 9e15 ) c[i++] = v % 1e14;
	                    }
	                }

	                k = c[--i];
	                dp %= LOG_BASE;

	                // Convert trailing digits to zeros according to dp.
	                if ( k && dp ) {
	                    v = POWS_TEN[LOG_BASE - dp];
	                    c[i] = mathfloor( k / v ) * v;
	                }

	                // Remove trailing elements which are zero.
	                for ( ; c[i] === 0; c.pop(), i-- );

	                // Zero?
	                if ( i < 0 ) {
	                    c = [ e = 0 ];
	                } else {

	                    // Remove leading elements which are zero and adjust exponent accordingly.
	                    for ( e = -1 ; c[0] === 0; c.shift(), e -= LOG_BASE);

	                    // Count the digits of the first element of c to determine leading zeros, and...
	                    for ( i = 1, v = c[0]; v >= 10; v /= 10, i++);

	                    // adjust the exponent accordingly.
	                    if ( i < LOG_BASE ) e -= LOG_BASE - i;
	                }

	                rand.e = e;
	                rand.c = c;
	                return rand;
	            };
	        })();


	        // PRIVATE FUNCTIONS


	        // Convert a numeric string of baseIn to a numeric string of baseOut.
	        function convertBase( str, baseOut, baseIn, sign ) {
	            var d, e, k, r, x, xc, y,
	                i = str.indexOf( '.' ),
	                dp = DECIMAL_PLACES,
	                rm = ROUNDING_MODE;

	            if ( baseIn < 37 ) str = str.toLowerCase();

	            // Non-integer.
	            if ( i >= 0 ) {
	                k = POW_PRECISION;

	                // Unlimited precision.
	                POW_PRECISION = 0;
	                str = str.replace( '.', '' );
	                y = new BigNumber(baseIn);
	                x = y.pow( str.length - i );
	                POW_PRECISION = k;

	                // Convert str as if an integer, then restore the fraction part by dividing the
	                // result by its base raised to a power.
	                y.c = toBaseOut( toFixedPoint( coeffToString( x.c ), x.e ), 10, baseOut );
	                y.e = y.c.length;
	            }

	            // Convert the number as integer.
	            xc = toBaseOut( str, baseIn, baseOut );
	            e = k = xc.length;

	            // Remove trailing zeros.
	            for ( ; xc[--k] == 0; xc.pop() );
	            if ( !xc[0] ) return '0';

	            if ( i < 0 ) {
	                --e;
	            } else {
	                x.c = xc;
	                x.e = e;

	                // sign is needed for correct rounding.
	                x.s = sign;
	                x = div( x, y, dp, rm, baseOut );
	                xc = x.c;
	                r = x.r;
	                e = x.e;
	            }

	            d = e + dp + 1;

	            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.
	            i = xc[d];
	            k = baseOut / 2;
	            r = r || d < 0 || xc[d + 1] != null;

	            r = rm < 4 ? ( i != null || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )
	                       : i > k || i == k &&( rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||
	                         rm == ( x.s < 0 ? 8 : 7 ) );

	            if ( d < 1 || !xc[0] ) {

	                // 1^-dp or 0.
	                str = r ? toFixedPoint( '1', -dp ) : '0';
	            } else {
	                xc.length = d;

	                if (r) {

	                    // Rounding up may mean the previous digit has to be rounded up and so on.
	                    for ( --baseOut; ++xc[--d] > baseOut; ) {
	                        xc[d] = 0;

	                        if ( !d ) {
	                            ++e;
	                            xc.unshift(1);
	                        }
	                    }
	                }

	                // Determine trailing zeros.
	                for ( k = xc.length; !xc[--k]; );

	                // E.g. [4, 11, 15] becomes 4bf.
	                for ( i = 0, str = ''; i <= k; str += ALPHABET.charAt( xc[i++] ) );
	                str = toFixedPoint( str, e );
	            }

	            // The caller will add the sign.
	            return str;
	        }


	        // Perform division in the specified base. Called by div and convertBase.
	        div = (function () {

	            // Assume non-zero x and k.
	            function multiply( x, k, base ) {
	                var m, temp, xlo, xhi,
	                    carry = 0,
	                    i = x.length,
	                    klo = k % SQRT_BASE,
	                    khi = k / SQRT_BASE | 0;

	                for ( x = x.slice(); i--; ) {
	                    xlo = x[i] % SQRT_BASE;
	                    xhi = x[i] / SQRT_BASE | 0;
	                    m = khi * xlo + xhi * klo;
	                    temp = klo * xlo + ( ( m % SQRT_BASE ) * SQRT_BASE ) + carry;
	                    carry = ( temp / base | 0 ) + ( m / SQRT_BASE | 0 ) + khi * xhi;
	                    x[i] = temp % base;
	                }

	                if (carry) x.unshift(carry);

	                return x;
	            }

	            function compare( a, b, aL, bL ) {
	                var i, cmp;

	                if ( aL != bL ) {
	                    cmp = aL > bL ? 1 : -1;
	                } else {

	                    for ( i = cmp = 0; i < aL; i++ ) {

	                        if ( a[i] != b[i] ) {
	                            cmp = a[i] > b[i] ? 1 : -1;
	                            break;
	                        }
	                    }
	                }
	                return cmp;
	            }

	            function subtract( a, b, aL, base ) {
	                var i = 0;

	                // Subtract b from a.
	                for ( ; aL--; ) {
	                    a[aL] -= i;
	                    i = a[aL] < b[aL] ? 1 : 0;
	                    a[aL] = i * base + a[aL] - b[aL];
	                }

	                // Remove leading zeros.
	                for ( ; !a[0] && a.length > 1; a.shift() );
	            }

	            // x: dividend, y: divisor.
	            return function ( x, y, dp, rm, base ) {
	                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,
	                    yL, yz,
	                    s = x.s == y.s ? 1 : -1,
	                    xc = x.c,
	                    yc = y.c;

	                // Either NaN, Infinity or 0?
	                if ( !xc || !xc[0] || !yc || !yc[0] ) {

	                    return new BigNumber(

	                      // Return NaN if either NaN, or both Infinity or 0.
	                      !x.s || !y.s || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :

	                        // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
	                        xc && xc[0] == 0 || !yc ? s * 0 : s / 0
	                    );
	                }

	                q = new BigNumber(s);
	                qc = q.c = [];
	                e = x.e - y.e;
	                s = dp + e + 1;

	                if ( !base ) {
	                    base = BASE;
	                    e = bitFloor( x.e / LOG_BASE ) - bitFloor( y.e / LOG_BASE );
	                    s = s / LOG_BASE | 0;
	                }

	                // Result exponent may be one less then the current value of e.
	                // The coefficients of the BigNumbers from convertBase may have trailing zeros.
	                for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ );
	                if ( yc[i] > ( xc[i] || 0 ) ) e--;

	                if ( s < 0 ) {
	                    qc.push(1);
	                    more = true;
	                } else {
	                    xL = xc.length;
	                    yL = yc.length;
	                    i = 0;
	                    s += 2;

	                    // Normalise xc and yc so highest order digit of yc is >= base / 2.

	                    n = mathfloor( base / ( yc[0] + 1 ) );

	                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.
	                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {
	                    if ( n > 1 ) {
	                        yc = multiply( yc, n, base );
	                        xc = multiply( xc, n, base );
	                        yL = yc.length;
	                        xL = xc.length;
	                    }

	                    xi = yL;
	                    rem = xc.slice( 0, yL );
	                    remL = rem.length;

	                    // Add zeros to make remainder as long as divisor.
	                    for ( ; remL < yL; rem[remL++] = 0 );
	                    yz = yc.slice();
	                    yz.unshift(0);
	                    yc0 = yc[0];
	                    if ( yc[1] >= base / 2 ) yc0++;
	                    // Not necessary, but to prevent trial digit n > base, when using base 3.
	                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;

	                    do {
	                        n = 0;

	                        // Compare divisor and remainder.
	                        cmp = compare( yc, rem, yL, remL );

	                        // If divisor < remainder.
	                        if ( cmp < 0 ) {

	                            // Calculate trial digit, n.

	                            rem0 = rem[0];
	                            if ( yL != remL ) rem0 = rem0 * base + ( rem[1] || 0 );

	                            // n is how many times the divisor goes into the current remainder.
	                            n = mathfloor( rem0 / yc0 );

	                            //  Algorithm:
	                            //  1. product = divisor * trial digit (n)
	                            //  2. if product > remainder: product -= divisor, n--
	                            //  3. remainder -= product
	                            //  4. if product was < remainder at 2:
	                            //    5. compare new remainder and divisor
	                            //    6. If remainder > divisor: remainder -= divisor, n++

	                            if ( n > 1 ) {

	                                // n may be > base only when base is 3.
	                                if (n >= base) n = base - 1;

	                                // product = divisor * trial digit.
	                                prod = multiply( yc, n, base );
	                                prodL = prod.length;
	                                remL = rem.length;

	                                // Compare product and remainder.
	                                // If product > remainder.
	                                // Trial digit n too high.
	                                // n is 1 too high about 5% of the time, and is not known to have
	                                // ever been more than 1 too high.
	                                while ( compare( prod, rem, prodL, remL ) == 1 ) {
	                                    n--;

	                                    // Subtract divisor from product.
	                                    subtract( prod, yL < prodL ? yz : yc, prodL, base );
	                                    prodL = prod.length;
	                                    cmp = 1;
	                                }
	                            } else {

	                                // n is 0 or 1, cmp is -1.
	                                // If n is 0, there is no need to compare yc and rem again below,
	                                // so change cmp to 1 to avoid it.
	                                // If n is 1, leave cmp as -1, so yc and rem are compared again.
	                                if ( n == 0 ) {

	                                    // divisor < remainder, so n must be at least 1.
	                                    cmp = n = 1;
	                                }

	                                // product = divisor
	                                prod = yc.slice();
	                                prodL = prod.length;
	                            }

	                            if ( prodL < remL ) prod.unshift(0);

	                            // Subtract product from remainder.
	                            subtract( rem, prod, remL, base );
	                            remL = rem.length;

	                             // If product was < remainder.
	                            if ( cmp == -1 ) {

	                                // Compare divisor and new remainder.
	                                // If divisor < new remainder, subtract divisor from remainder.
	                                // Trial digit n too low.
	                                // n is 1 too low about 5% of the time, and very rarely 2 too low.
	                                while ( compare( yc, rem, yL, remL ) < 1 ) {
	                                    n++;

	                                    // Subtract divisor from remainder.
	                                    subtract( rem, yL < remL ? yz : yc, remL, base );
	                                    remL = rem.length;
	                                }
	                            }
	                        } else if ( cmp === 0 ) {
	                            n++;
	                            rem = [0];
	                        } // else cmp === 1 and n will be 0

	                        // Add the next digit, n, to the result array.
	                        qc[i++] = n;

	                        // Update the remainder.
	                        if ( rem[0] ) {
	                            rem[remL++] = xc[xi] || 0;
	                        } else {
	                            rem = [ xc[xi] ];
	                            remL = 1;
	                        }
	                    } while ( ( xi++ < xL || rem[0] != null ) && s-- );

	                    more = rem[0] != null;

	                    // Leading zero?
	                    if ( !qc[0] ) qc.shift();
	                }

	                if ( base == BASE ) {

	                    // To calculate q.e, first get the number of digits of qc[0].
	                    for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ );
	                    round( q, dp + ( q.e = i + e * LOG_BASE - 1 ) + 1, rm, more );

	                // Caller is convertBase.
	                } else {
	                    q.e = e;
	                    q.r = +more;
	                }

	                return q;
	            };
	        })();


	        /*
	         * Return a string representing the value of BigNumber n in fixed-point or exponential
	         * notation rounded to the specified decimal places or significant digits.
	         *
	         * n is a BigNumber.
	         * i is the index of the last digit required (i.e. the digit that may be rounded up).
	         * rm is the rounding mode.
	         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.
	         */
	        function format( n, i, rm, caller ) {
	            var c0, e, ne, len, str;

	            rm = rm != null && isValidInt( rm, 0, 8, caller, roundingMode )
	              ? rm | 0 : ROUNDING_MODE;

	            if ( !n.c ) return n.toString();
	            c0 = n.c[0];
	            ne = n.e;

	            if ( i == null ) {
	                str = coeffToString( n.c );
	                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG
	                  ? toExponential( str, ne )
	                  : toFixedPoint( str, ne );
	            } else {
	                n = round( new BigNumber(n), i, rm );

	                // n.e may have changed if the value was rounded up.
	                e = n.e;

	                str = coeffToString( n.c );
	                len = str.length;

	                // toPrecision returns exponential notation if the number of significant digits
	                // specified is less than the number of digits necessary to represent the integer
	                // part of the value in fixed-point notation.

	                // Exponential notation.
	                if ( caller == 19 || caller == 24 && ( i <= e || e <= TO_EXP_NEG ) ) {

	                    // Append zeros?
	                    for ( ; len < i; str += '0', len++ );
	                    str = toExponential( str, e );

	                // Fixed-point notation.
	                } else {
	                    i -= ne;
	                    str = toFixedPoint( str, e );

	                    // Append zeros?
	                    if ( e + 1 > len ) {
	                        if ( --i > 0 ) for ( str += '.'; i--; str += '0' );
	                    } else {
	                        i += e - len;
	                        if ( i > 0 ) {
	                            if ( e + 1 == len ) str += '.';
	                            for ( ; i--; str += '0' );
	                        }
	                    }
	                }
	            }

	            return n.s < 0 && c0 ? '-' + str : str;
	        }


	        // Handle BigNumber.max and BigNumber.min.
	        function maxOrMin( args, method ) {
	            var m, n,
	                i = 0;

	            if ( isArray( args[0] ) ) args = args[0];
	            m = new BigNumber( args[0] );

	            for ( ; ++i < args.length; ) {
	                n = new BigNumber( args[i] );

	                // If any number is NaN, return NaN.
	                if ( !n.s ) {
	                    m = n;
	                    break;
	                } else if ( method.call( m, n ) ) {
	                    m = n;
	                }
	            }

	            return m;
	        }


	        /*
	         * Return true if n is an integer in range, otherwise throw.
	         * Use for argument validation when ERRORS is true.
	         */
	        function intValidatorWithErrors( n, min, max, caller, name ) {
	            if ( n < min || n > max || n != truncate(n) ) {
	                raise( caller, ( name || 'decimal places' ) +
	                  ( n < min || n > max ? ' out of range' : ' not an integer' ), n );
	            }

	            return true;
	        }


	        /*
	         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
	         * Called by minus, plus and times.
	         */
	        function normalise( n, c, e ) {
	            var i = 1,
	                j = c.length;

	             // Remove trailing zeros.
	            for ( ; !c[--j]; c.pop() );

	            // Calculate the base 10 exponent. First get the number of digits of c[0].
	            for ( j = c[0]; j >= 10; j /= 10, i++ );

	            // Overflow?
	            if ( ( e = i + e * LOG_BASE - 1 ) > MAX_EXP ) {

	                // Infinity.
	                n.c = n.e = null;

	            // Underflow?
	            } else if ( e < MIN_EXP ) {

	                // Zero.
	                n.c = [ n.e = 0 ];
	            } else {
	                n.e = e;
	                n.c = c;
	            }

	            return n;
	        }


	        // Handle values that fail the validity test in BigNumber.
	        parseNumeric = (function () {
	            var basePrefix = /^(-?)0([xbo])/i,
	                dotAfter = /^([^.]+)\.$/,
	                dotBefore = /^\.([^.]+)$/,
	                isInfinityOrNaN = /^-?(Infinity|NaN)$/,
	                whitespaceOrPlus = /^\s*\+|^\s+|\s+$/g;

	            return function ( x, str, num, b ) {
	                var base,
	                    s = num ? str : str.replace( whitespaceOrPlus, '' );

	                // No exception on ±Infinity or NaN.
	                if ( isInfinityOrNaN.test(s) ) {
	                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
	                } else {
	                    if ( !num ) {

	                        // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
	                        s = s.replace( basePrefix, function ( m, p1, p2 ) {
	                            base = ( p2 = p2.toLowerCase() ) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
	                            return !b || b == base ? p1 : m;
	                        });

	                        if (b) {
	                            base = b;

	                            // E.g. '1.' to '1', '.1' to '0.1'
	                            s = s.replace( dotAfter, '$1' ).replace( dotBefore, '0.$1' );
	                        }

	                        if ( str != s ) return new BigNumber( s, base );
	                    }

	                    // 'new BigNumber() not a number: {n}'
	                    // 'new BigNumber() not a base {b} number: {n}'
	                    if (ERRORS) raise( id, 'not a' + ( b ? ' base ' + b : '' ) + ' number', str );
	                    x.s = null;
	                }

	                x.c = x.e = null;
	                id = 0;
	            }
	        })();


	        // Throw a BigNumber Error.
	        function raise( caller, msg, val ) {
	            var error = new Error( [
	                'new BigNumber',     // 0
	                'cmp',               // 1
	                'config',            // 2
	                'div',               // 3
	                'divToInt',          // 4
	                'eq',                // 5
	                'gt',                // 6
	                'gte',               // 7
	                'lt',                // 8
	                'lte',               // 9
	                'minus',             // 10
	                'mod',               // 11
	                'plus',              // 12
	                'precision',         // 13
	                'random',            // 14
	                'round',             // 15
	                'shift',             // 16
	                'times',             // 17
	                'toDigits',          // 18
	                'toExponential',     // 19
	                'toFixed',           // 20
	                'toFormat',          // 21
	                'toFraction',        // 22
	                'pow',               // 23
	                'toPrecision',       // 24
	                'toString',          // 25
	                'BigNumber'          // 26
	            ][caller] + '() ' + msg + ': ' + val );

	            error.name = 'BigNumber Error';
	            id = 0;
	            throw error;
	        }


	        /*
	         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
	         * If r is truthy, it is known that there are more digits after the rounding digit.
	         */
	        function round( x, sd, rm, r ) {
	            var d, i, j, k, n, ni, rd,
	                xc = x.c,
	                pows10 = POWS_TEN;

	            // if x is not Infinity or NaN...
	            if (xc) {

	                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
	                // n is a base 1e14 number, the value of the element of array x.c containing rd.
	                // ni is the index of n within x.c.
	                // d is the number of digits of n.
	                // i is the index of rd within n including leading zeros.
	                // j is the actual index of rd within n (if < 0, rd is a leading zero).
	                out: {

	                    // Get the number of digits of the first element of xc.
	                    for ( d = 1, k = xc[0]; k >= 10; k /= 10, d++ );
	                    i = sd - d;

	                    // If the rounding digit is in the first element of xc...
	                    if ( i < 0 ) {
	                        i += LOG_BASE;
	                        j = sd;
	                        n = xc[ ni = 0 ];

	                        // Get the rounding digit at index j of n.
	                        rd = n / pows10[ d - j - 1 ] % 10 | 0;
	                    } else {
	                        ni = mathceil( ( i + 1 ) / LOG_BASE );

	                        if ( ni >= xc.length ) {

	                            if (r) {

	                                // Needed by sqrt.
	                                for ( ; xc.length <= ni; xc.push(0) );
	                                n = rd = 0;
	                                d = 1;
	                                i %= LOG_BASE;
	                                j = i - LOG_BASE + 1;
	                            } else {
	                                break out;
	                            }
	                        } else {
	                            n = k = xc[ni];

	                            // Get the number of digits of n.
	                            for ( d = 1; k >= 10; k /= 10, d++ );

	                            // Get the index of rd within n.
	                            i %= LOG_BASE;

	                            // Get the index of rd within n, adjusted for leading zeros.
	                            // The number of leading zeros of n is given by LOG_BASE - d.
	                            j = i - LOG_BASE + d;

	                            // Get the rounding digit at index j of n.
	                            rd = j < 0 ? 0 : n / pows10[ d - j - 1 ] % 10 | 0;
	                        }
	                    }

	                    r = r || sd < 0 ||

	                    // Are there any non-zero digits after the rounding digit?
	                    // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right
	                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
	                      xc[ni + 1] != null || ( j < 0 ? n : n % pows10[ d - j - 1 ] );

	                    r = rm < 4
	                      ? ( rd || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )
	                      : rd > 5 || rd == 5 && ( rm == 4 || r || rm == 6 &&

	                        // Check whether the digit to the left of the rounding digit is odd.
	                        ( ( i > 0 ? j > 0 ? n / pows10[ d - j ] : 0 : xc[ni - 1] ) % 10 ) & 1 ||
	                          rm == ( x.s < 0 ? 8 : 7 ) );

	                    if ( sd < 1 || !xc[0] ) {
	                        xc.length = 0;

	                        if (r) {

	                            // Convert sd to decimal places.
	                            sd -= x.e + 1;

	                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.
	                            xc[0] = pows10[ sd % LOG_BASE ];
	                            x.e = -sd || 0;
	                        } else {

	                            // Zero.
	                            xc[0] = x.e = 0;
	                        }

	                        return x;
	                    }

	                    // Remove excess digits.
	                    if ( i == 0 ) {
	                        xc.length = ni;
	                        k = 1;
	                        ni--;
	                    } else {
	                        xc.length = ni + 1;
	                        k = pows10[ LOG_BASE - i ];

	                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.
	                        // j > 0 means i > number of leading zeros of n.
	                        xc[ni] = j > 0 ? mathfloor( n / pows10[ d - j ] % pows10[j] ) * k : 0;
	                    }

	                    // Round up?
	                    if (r) {

	                        for ( ; ; ) {

	                            // If the digit to be rounded up is in the first element of xc...
	                            if ( ni == 0 ) {

	                                // i will be the length of xc[0] before k is added.
	                                for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ );
	                                j = xc[0] += k;
	                                for ( k = 1; j >= 10; j /= 10, k++ );

	                                // if i != k the length has increased.
	                                if ( i != k ) {
	                                    x.e++;
	                                    if ( xc[0] == BASE ) xc[0] = 1;
	                                }

	                                break;
	                            } else {
	                                xc[ni] += k;
	                                if ( xc[ni] != BASE ) break;
	                                xc[ni--] = 0;
	                                k = 1;
	                            }
	                        }
	                    }

	                    // Remove trailing zeros.
	                    for ( i = xc.length; xc[--i] === 0; xc.pop() );
	                }

	                // Overflow? Infinity.
	                if ( x.e > MAX_EXP ) {
	                    x.c = x.e = null;

	                // Underflow? Zero.
	                } else if ( x.e < MIN_EXP ) {
	                    x.c = [ x.e = 0 ];
	                }
	            }

	            return x;
	        }


	        // PROTOTYPE/INSTANCE METHODS


	        /*
	         * Return a new BigNumber whose value is the absolute value of this BigNumber.
	         */
	        P.absoluteValue = P.abs = function () {
	            var x = new BigNumber(this);
	            if ( x.s < 0 ) x.s = 1;
	            return x;
	        };


	        /*
	         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole
	         * number in the direction of Infinity.
	         */
	        P.ceil = function () {
	            return round( new BigNumber(this), this.e + 1, 2 );
	        };


	        /*
	         * Return
	         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
	         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
	         * 0 if they have the same value,
	         * or null if the value of either is NaN.
	         */
	        P.comparedTo = P.cmp = function ( y, b ) {
	            id = 1;
	            return compare( this, new BigNumber( y, b ) );
	        };


	        /*
	         * Return the number of decimal places of the value of this BigNumber, or null if the value
	         * of this BigNumber is ±Infinity or NaN.
	         */
	        P.decimalPlaces = P.dp = function () {
	            var n, v,
	                c = this.c;

	            if ( !c ) return null;
	            n = ( ( v = c.length - 1 ) - bitFloor( this.e / LOG_BASE ) ) * LOG_BASE;

	            // Subtract the number of trailing zeros of the last number.
	            if ( v = c[v] ) for ( ; v % 10 == 0; v /= 10, n-- );
	            if ( n < 0 ) n = 0;

	            return n;
	        };


	        /*
	         *  n / 0 = I
	         *  n / N = N
	         *  n / I = 0
	         *  0 / n = 0
	         *  0 / 0 = N
	         *  0 / N = N
	         *  0 / I = 0
	         *  N / n = N
	         *  N / 0 = N
	         *  N / N = N
	         *  N / I = N
	         *  I / n = I
	         *  I / 0 = I
	         *  I / N = N
	         *  I / I = N
	         *
	         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
	         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
	         */
	        P.dividedBy = P.div = function ( y, b ) {
	            id = 3;
	            return div( this, new BigNumber( y, b ), DECIMAL_PLACES, ROUNDING_MODE );
	        };


	        /*
	         * Return a new BigNumber whose value is the integer part of dividing the value of this
	         * BigNumber by the value of BigNumber(y, b).
	         */
	        P.dividedToIntegerBy = P.divToInt = function ( y, b ) {
	            id = 4;
	            return div( this, new BigNumber( y, b ), 0, 1 );
	        };


	        /*
	         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
	         * otherwise returns false.
	         */
	        P.equals = P.eq = function ( y, b ) {
	            id = 5;
	            return compare( this, new BigNumber( y, b ) ) === 0;
	        };


	        /*
	         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole
	         * number in the direction of -Infinity.
	         */
	        P.floor = function () {
	            return round( new BigNumber(this), this.e + 1, 3 );
	        };


	        /*
	         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
	         * otherwise returns false.
	         */
	        P.greaterThan = P.gt = function ( y, b ) {
	            id = 6;
	            return compare( this, new BigNumber( y, b ) ) > 0;
	        };


	        /*
	         * Return true if the value of this BigNumber is greater than or equal to the value of
	         * BigNumber(y, b), otherwise returns false.
	         */
	        P.greaterThanOrEqualTo = P.gte = function ( y, b ) {
	            id = 7;
	            return ( b = compare( this, new BigNumber( y, b ) ) ) === 1 || b === 0;

	        };


	        /*
	         * Return true if the value of this BigNumber is a finite number, otherwise returns false.
	         */
	        P.isFinite = function () {
	            return !!this.c;
	        };


	        /*
	         * Return true if the value of this BigNumber is an integer, otherwise return false.
	         */
	        P.isInteger = P.isInt = function () {
	            return !!this.c && bitFloor( this.e / LOG_BASE ) > this.c.length - 2;
	        };


	        /*
	         * Return true if the value of this BigNumber is NaN, otherwise returns false.
	         */
	        P.isNaN = function () {
	            return !this.s;
	        };


	        /*
	         * Return true if the value of this BigNumber is negative, otherwise returns false.
	         */
	        P.isNegative = P.isNeg = function () {
	            return this.s < 0;
	        };


	        /*
	         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.
	         */
	        P.isZero = function () {
	            return !!this.c && this.c[0] == 0;
	        };


	        /*
	         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
	         * otherwise returns false.
	         */
	        P.lessThan = P.lt = function ( y, b ) {
	            id = 8;
	            return compare( this, new BigNumber( y, b ) ) < 0;
	        };


	        /*
	         * Return true if the value of this BigNumber is less than or equal to the value of
	         * BigNumber(y, b), otherwise returns false.
	         */
	        P.lessThanOrEqualTo = P.lte = function ( y, b ) {
	            id = 9;
	            return ( b = compare( this, new BigNumber( y, b ) ) ) === -1 || b === 0;
	        };


	        /*
	         *  n - 0 = n
	         *  n - N = N
	         *  n - I = -I
	         *  0 - n = -n
	         *  0 - 0 = 0
	         *  0 - N = N
	         *  0 - I = -I
	         *  N - n = N
	         *  N - 0 = N
	         *  N - N = N
	         *  N - I = N
	         *  I - n = I
	         *  I - 0 = I
	         *  I - N = N
	         *  I - I = N
	         *
	         * Return a new BigNumber whose value is the value of this BigNumber minus the value of
	         * BigNumber(y, b).
	         */
	        P.minus = P.sub = function ( y, b ) {
	            var i, j, t, xLTy,
	                x = this,
	                a = x.s;

	            id = 10;
	            y = new BigNumber( y, b );
	            b = y.s;

	            // Either NaN?
	            if ( !a || !b ) return new BigNumber(NaN);

	            // Signs differ?
	            if ( a != b ) {
	                y.s = -b;
	                return x.plus(y);
	            }

	            var xe = x.e / LOG_BASE,
	                ye = y.e / LOG_BASE,
	                xc = x.c,
	                yc = y.c;

	            if ( !xe || !ye ) {

	                // Either Infinity?
	                if ( !xc || !yc ) return xc ? ( y.s = -b, y ) : new BigNumber( yc ? x : NaN );

	                // Either zero?
	                if ( !xc[0] || !yc[0] ) {

	                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
	                    return yc[0] ? ( y.s = -b, y ) : new BigNumber( xc[0] ? x :

	                      // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
	                      ROUNDING_MODE == 3 ? -0 : 0 );
	                }
	            }

	            xe = bitFloor(xe);
	            ye = bitFloor(ye);
	            xc = xc.slice();

	            // Determine which is the bigger number.
	            if ( a = xe - ye ) {

	                if ( xLTy = a < 0 ) {
	                    a = -a;
	                    t = xc;
	                } else {
	                    ye = xe;
	                    t = yc;
	                }

	                t.reverse();

	                // Prepend zeros to equalise exponents.
	                for ( b = a; b--; t.push(0) );
	                t.reverse();
	            } else {

	                // Exponents equal. Check digit by digit.
	                j = ( xLTy = ( a = xc.length ) < ( b = yc.length ) ) ? a : b;

	                for ( a = b = 0; b < j; b++ ) {

	                    if ( xc[b] != yc[b] ) {
	                        xLTy = xc[b] < yc[b];
	                        break;
	                    }
	                }
	            }

	            // x < y? Point xc to the array of the bigger number.
	            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;

	            b = ( j = yc.length ) - ( i = xc.length );

	            // Append zeros to xc if shorter.
	            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
	            if ( b > 0 ) for ( ; b--; xc[i++] = 0 );
	            b = BASE - 1;

	            // Subtract yc from xc.
	            for ( ; j > a; ) {

	                if ( xc[--j] < yc[j] ) {
	                    for ( i = j; i && !xc[--i]; xc[i] = b );
	                    --xc[i];
	                    xc[j] += BASE;
	                }

	                xc[j] -= yc[j];
	            }

	            // Remove leading zeros and adjust exponent accordingly.
	            for ( ; xc[0] == 0; xc.shift(), --ye );

	            // Zero?
	            if ( !xc[0] ) {

	                // Following IEEE 754 (2008) 6.3,
	                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
	                y.s = ROUNDING_MODE == 3 ? -1 : 1;
	                y.c = [ y.e = 0 ];
	                return y;
	            }

	            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
	            // for finite x and y.
	            return normalise( y, xc, ye );
	        };


	        /*
	         *   n % 0 =  N
	         *   n % N =  N
	         *   n % I =  n
	         *   0 % n =  0
	         *  -0 % n = -0
	         *   0 % 0 =  N
	         *   0 % N =  N
	         *   0 % I =  0
	         *   N % n =  N
	         *   N % 0 =  N
	         *   N % N =  N
	         *   N % I =  N
	         *   I % n =  N
	         *   I % 0 =  N
	         *   I % N =  N
	         *   I % I =  N
	         *
	         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
	         * BigNumber(y, b). The result depends on the value of MODULO_MODE.
	         */
	        P.modulo = P.mod = function ( y, b ) {
	            var q, s,
	                x = this;

	            id = 11;
	            y = new BigNumber( y, b );

	            // Return NaN if x is Infinity or NaN, or y is NaN or zero.
	            if ( !x.c || !y.s || y.c && !y.c[0] ) {
	                return new BigNumber(NaN);

	            // Return x if y is Infinity or x is zero.
	            } else if ( !y.c || x.c && !x.c[0] ) {
	                return new BigNumber(x);
	            }

	            if ( MODULO_MODE == 9 ) {

	                // Euclidian division: q = sign(y) * floor(x / abs(y))
	                // r = x - qy    where  0 <= r < abs(y)
	                s = y.s;
	                y.s = 1;
	                q = div( x, y, 0, 3 );
	                y.s = s;
	                q.s *= s;
	            } else {
	                q = div( x, y, 0, MODULO_MODE );
	            }

	            return x.minus( q.times(y) );
	        };


	        /*
	         * Return a new BigNumber whose value is the value of this BigNumber negated,
	         * i.e. multiplied by -1.
	         */
	        P.negated = P.neg = function () {
	            var x = new BigNumber(this);
	            x.s = -x.s || null;
	            return x;
	        };


	        /*
	         *  n + 0 = n
	         *  n + N = N
	         *  n + I = I
	         *  0 + n = n
	         *  0 + 0 = 0
	         *  0 + N = N
	         *  0 + I = I
	         *  N + n = N
	         *  N + 0 = N
	         *  N + N = N
	         *  N + I = N
	         *  I + n = I
	         *  I + 0 = I
	         *  I + N = N
	         *  I + I = I
	         *
	         * Return a new BigNumber whose value is the value of this BigNumber plus the value of
	         * BigNumber(y, b).
	         */
	        P.plus = P.add = function ( y, b ) {
	            var t,
	                x = this,
	                a = x.s;

	            id = 12;
	            y = new BigNumber( y, b );
	            b = y.s;

	            // Either NaN?
	            if ( !a || !b ) return new BigNumber(NaN);

	            // Signs differ?
	             if ( a != b ) {
	                y.s = -b;
	                return x.minus(y);
	            }

	            var xe = x.e / LOG_BASE,
	                ye = y.e / LOG_BASE,
	                xc = x.c,
	                yc = y.c;

	            if ( !xe || !ye ) {

	                // Return ±Infinity if either ±Infinity.
	                if ( !xc || !yc ) return new BigNumber( a / 0 );

	                // Either zero?
	                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
	                if ( !xc[0] || !yc[0] ) return yc[0] ? y : new BigNumber( xc[0] ? x : a * 0 );
	            }

	            xe = bitFloor(xe);
	            ye = bitFloor(ye);
	            xc = xc.slice();

	            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
	            if ( a = xe - ye ) {
	                if ( a > 0 ) {
	                    ye = xe;
	                    t = yc;
	                } else {
	                    a = -a;
	                    t = xc;
	                }

	                t.reverse();
	                for ( ; a--; t.push(0) );
	                t.reverse();
	            }

	            a = xc.length;
	            b = yc.length;

	            // Point xc to the longer array, and b to the shorter length.
	            if ( a - b < 0 ) t = yc, yc = xc, xc = t, b = a;

	            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
	            for ( a = 0; b; ) {
	                a = ( xc[--b] = xc[b] + yc[b] + a ) / BASE | 0;
	                xc[b] %= BASE;
	            }

	            if (a) {
	                xc.unshift(a);
	                ++ye;
	            }

	            // No need to check for zero, as +x + +y != 0 && -x + -y != 0
	            // ye = MAX_EXP + 1 possible
	            return normalise( y, xc, ye );
	        };


	        /*
	         * Return the number of significant digits of the value of this BigNumber.
	         *
	         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
	         */
	        P.precision = P.sd = function (z) {
	            var n, v,
	                x = this,
	                c = x.c;

	            // 'precision() argument not a boolean or binary digit: {z}'
	            if ( z != null && z !== !!z && z !== 1 && z !== 0 ) {
	                if (ERRORS) raise( 13, 'argument' + notBool, z );
	                if ( z != !!z ) z = null;
	            }

	            if ( !c ) return null;
	            v = c.length - 1;
	            n = v * LOG_BASE + 1;

	            if ( v = c[v] ) {

	                // Subtract the number of trailing zeros of the last element.
	                for ( ; v % 10 == 0; v /= 10, n-- );

	                // Add the number of digits of the first element.
	                for ( v = c[0]; v >= 10; v /= 10, n++ );
	            }

	            if ( z && x.e + 1 > n ) n = x.e + 1;

	            return n;
	        };


	        /*
	         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of
	         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if
	         * omitted.
	         *
	         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	         *
	         * 'round() decimal places out of range: {dp}'
	         * 'round() decimal places not an integer: {dp}'
	         * 'round() rounding mode not an integer: {rm}'
	         * 'round() rounding mode out of range: {rm}'
	         */
	        P.round = function ( dp, rm ) {
	            var n = new BigNumber(this);

	            if ( dp == null || isValidInt( dp, 0, MAX, 15 ) ) {
	                round( n, ~~dp + this.e + 1, rm == null ||
	                  !isValidInt( rm, 0, 8, 15, roundingMode ) ? ROUNDING_MODE : rm | 0 );
	            }

	            return n;
	        };


	        /*
	         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
	         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
	         *
	         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
	         *
	         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity
	         * otherwise.
	         *
	         * 'shift() argument not an integer: {k}'
	         * 'shift() argument out of range: {k}'
	         */
	        P.shift = function (k) {
	            var n = this;
	            return isValidInt( k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument' )

	              // k < 1e+21, or truncate(k) will produce exponential notation.
	              ? n.times( '1e' + truncate(k) )
	              : new BigNumber( n.c && n.c[0] && ( k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER )
	                ? n.s * ( k < 0 ? 0 : 1 / 0 )
	                : n );
	        };


	        /*
	         *  sqrt(-n) =  N
	         *  sqrt( N) =  N
	         *  sqrt(-I) =  N
	         *  sqrt( I) =  I
	         *  sqrt( 0) =  0
	         *  sqrt(-0) = -0
	         *
	         * Return a new BigNumber whose value is the square root of the value of this BigNumber,
	         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
	         */
	        P.squareRoot = P.sqrt = function () {
	            var m, n, r, rep, t,
	                x = this,
	                c = x.c,
	                s = x.s,
	                e = x.e,
	                dp = DECIMAL_PLACES + 4,
	                half = new BigNumber('0.5');

	            // Negative/NaN/Infinity/zero?
	            if ( s !== 1 || !c || !c[0] ) {
	                return new BigNumber( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );
	            }

	            // Initial estimate.
	            s = Math.sqrt( +x );

	            // Math.sqrt underflow/overflow?
	            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
	            if ( s == 0 || s == 1 / 0 ) {
	                n = coeffToString(c);
	                if ( ( n.length + e ) % 2 == 0 ) n += '0';
	                s = Math.sqrt(n);
	                e = bitFloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );

	                if ( s == 1 / 0 ) {
	                    n = '1e' + e;
	                } else {
	                    n = s.toExponential();
	                    n = n.slice( 0, n.indexOf('e') + 1 ) + e;
	                }

	                r = new BigNumber(n);
	            } else {
	                r = new BigNumber( s + '' );
	            }

	            // Check for zero.
	            // r could be zero if MIN_EXP is changed after the this value was created.
	            // This would cause a division by zero (x/t) and hence Infinity below, which would cause
	            // coeffToString to throw.
	            if ( r.c[0] ) {
	                e = r.e;
	                s = e + dp;
	                if ( s < 3 ) s = 0;

	                // Newton-Raphson iteration.
	                for ( ; ; ) {
	                    t = r;
	                    r = half.times( t.plus( div( x, t, dp, 1 ) ) );

	                    if ( coeffToString( t.c   ).slice( 0, s ) === ( n =
	                         coeffToString( r.c ) ).slice( 0, s ) ) {

	                        // The exponent of r may here be one less than the final result exponent,
	                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
	                        // are indexed correctly.
	                        if ( r.e < e ) --s;
	                        n = n.slice( s - 3, s + 1 );

	                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
	                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
	                        // iteration.
	                        if ( n == '9999' || !rep && n == '4999' ) {

	                            // On the first iteration only, check to see if rounding up gives the
	                            // exact result as the nines may infinitely repeat.
	                            if ( !rep ) {
	                                round( t, t.e + DECIMAL_PLACES + 2, 0 );

	                                if ( t.times(t).eq(x) ) {
	                                    r = t;
	                                    break;
	                                }
	                            }

	                            dp += 4;
	                            s += 4;
	                            rep = 1;
	                        } else {

	                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
	                            // result. If not, then there are further digits and m will be truthy.
	                            if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {

	                                // Truncate to the first rounding digit.
	                                round( r, r.e + DECIMAL_PLACES + 2, 1 );
	                                m = !r.times(r).eq(x);
	                            }

	                            break;
	                        }
	                    }
	                }
	            }

	            return round( r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m );
	        };


	        /*
	         *  n * 0 = 0
	         *  n * N = N
	         *  n * I = I
	         *  0 * n = 0
	         *  0 * 0 = 0
	         *  0 * N = N
	         *  0 * I = N
	         *  N * n = N
	         *  N * 0 = N
	         *  N * N = N
	         *  N * I = N
	         *  I * n = I
	         *  I * 0 = N
	         *  I * N = N
	         *  I * I = I
	         *
	         * Return a new BigNumber whose value is the value of this BigNumber times the value of
	         * BigNumber(y, b).
	         */
	        P.times = P.mul = function ( y, b ) {
	            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,
	                base, sqrtBase,
	                x = this,
	                xc = x.c,
	                yc = ( id = 17, y = new BigNumber( y, b ) ).c;

	            // Either NaN, ±Infinity or ±0?
	            if ( !xc || !yc || !xc[0] || !yc[0] ) {

	                // Return NaN if either is NaN, or one is 0 and the other is Infinity.
	                if ( !x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc ) {
	                    y.c = y.e = y.s = null;
	                } else {
	                    y.s *= x.s;

	                    // Return ±Infinity if either is ±Infinity.
	                    if ( !xc || !yc ) {
	                        y.c = y.e = null;

	                    // Return ±0 if either is ±0.
	                    } else {
	                        y.c = [0];
	                        y.e = 0;
	                    }
	                }

	                return y;
	            }

	            e = bitFloor( x.e / LOG_BASE ) + bitFloor( y.e / LOG_BASE );
	            y.s *= x.s;
	            xcL = xc.length;
	            ycL = yc.length;

	            // Ensure xc points to longer array and xcL to its length.
	            if ( xcL < ycL ) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;

	            // Initialise the result array with zeros.
	            for ( i = xcL + ycL, zc = []; i--; zc.push(0) );

	            base = BASE;
	            sqrtBase = SQRT_BASE;

	            for ( i = ycL; --i >= 0; ) {
	                c = 0;
	                ylo = yc[i] % sqrtBase;
	                yhi = yc[i] / sqrtBase | 0;

	                for ( k = xcL, j = i + k; j > i; ) {
	                    xlo = xc[--k] % sqrtBase;
	                    xhi = xc[k] / sqrtBase | 0;
	                    m = yhi * xlo + xhi * ylo;
	                    xlo = ylo * xlo + ( ( m % sqrtBase ) * sqrtBase ) + zc[j] + c;
	                    c = ( xlo / base | 0 ) + ( m / sqrtBase | 0 ) + yhi * xhi;
	                    zc[j--] = xlo % base;
	                }

	                zc[j] = c;
	            }

	            if (c) {
	                ++e;
	            } else {
	                zc.shift();
	            }

	            return normalise( y, zc, e );
	        };


	        /*
	         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of
	         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.
	         *
	         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
	         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	         *
	         * 'toDigits() precision out of range: {sd}'
	         * 'toDigits() precision not an integer: {sd}'
	         * 'toDigits() rounding mode not an integer: {rm}'
	         * 'toDigits() rounding mode out of range: {rm}'
	         */
	        P.toDigits = function ( sd, rm ) {
	            var n = new BigNumber(this);
	            sd = sd == null || !isValidInt( sd, 1, MAX, 18, 'precision' ) ? null : sd | 0;
	            rm = rm == null || !isValidInt( rm, 0, 8, 18, roundingMode ) ? ROUNDING_MODE : rm | 0;
	            return sd ? round( n, sd, rm ) : n;
	        };


	        /*
	         * Return a string representing the value of this BigNumber in exponential notation and
	         * rounded using ROUNDING_MODE to dp fixed decimal places.
	         *
	         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	         *
	         * 'toExponential() decimal places not an integer: {dp}'
	         * 'toExponential() decimal places out of range: {dp}'
	         * 'toExponential() rounding mode not an integer: {rm}'
	         * 'toExponential() rounding mode out of range: {rm}'
	         */
	        P.toExponential = function ( dp, rm ) {
	            return format( this,
	              dp != null && isValidInt( dp, 0, MAX, 19 ) ? ~~dp + 1 : null, rm, 19 );
	        };


	        /*
	         * Return a string representing the value of this BigNumber in fixed-point notation rounding
	         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
	         *
	         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
	         * but e.g. (-0.00001).toFixed(0) is '-0'.
	         *
	         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	         *
	         * 'toFixed() decimal places not an integer: {dp}'
	         * 'toFixed() decimal places out of range: {dp}'
	         * 'toFixed() rounding mode not an integer: {rm}'
	         * 'toFixed() rounding mode out of range: {rm}'
	         */
	        P.toFixed = function ( dp, rm ) {
	            return format( this, dp != null && isValidInt( dp, 0, MAX, 20 )
	              ? ~~dp + this.e + 1 : null, rm, 20 );
	        };


	        /*
	         * Return a string representing the value of this BigNumber in fixed-point notation rounded
	         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
	         * of the FORMAT object (see BigNumber.config).
	         *
	         * FORMAT = {
	         *      decimalSeparator : '.',
	         *      groupSeparator : ',',
	         *      groupSize : 3,
	         *      secondaryGroupSize : 0,
	         *      fractionGroupSeparator : '\xA0',    // non-breaking space
	         *      fractionGroupSize : 0
	         * };
	         *
	         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	         *
	         * 'toFormat() decimal places not an integer: {dp}'
	         * 'toFormat() decimal places out of range: {dp}'
	         * 'toFormat() rounding mode not an integer: {rm}'
	         * 'toFormat() rounding mode out of range: {rm}'
	         */
	        P.toFormat = function ( dp, rm ) {
	            var str = format( this, dp != null && isValidInt( dp, 0, MAX, 21 )
	              ? ~~dp + this.e + 1 : null, rm, 21 );

	            if ( this.c ) {
	                var i,
	                    arr = str.split('.'),
	                    g1 = +FORMAT.groupSize,
	                    g2 = +FORMAT.secondaryGroupSize,
	                    groupSeparator = FORMAT.groupSeparator,
	                    intPart = arr[0],
	                    fractionPart = arr[1],
	                    isNeg = this.s < 0,
	                    intDigits = isNeg ? intPart.slice(1) : intPart,
	                    len = intDigits.length;

	                if (g2) i = g1, g1 = g2, g2 = i, len -= i;

	                if ( g1 > 0 && len > 0 ) {
	                    i = len % g1 || g1;
	                    intPart = intDigits.substr( 0, i );

	                    for ( ; i < len; i += g1 ) {
	                        intPart += groupSeparator + intDigits.substr( i, g1 );
	                    }

	                    if ( g2 > 0 ) intPart += groupSeparator + intDigits.slice(i);
	                    if (isNeg) intPart = '-' + intPart;
	                }

	                str = fractionPart
	                  ? intPart + FORMAT.decimalSeparator + ( ( g2 = +FORMAT.fractionGroupSize )
	                    ? fractionPart.replace( new RegExp( '\\d{' + g2 + '}\\B', 'g' ),
	                      '$&' + FORMAT.fractionGroupSeparator )
	                    : fractionPart )
	                  : intPart;
	            }

	            return str;
	        };


	        /*
	         * Return a string array representing the value of this BigNumber as a simple fraction with
	         * an integer numerator and an integer denominator. The denominator will be a positive
	         * non-zero value less than or equal to the specified maximum denominator. If a maximum
	         * denominator is not specified, the denominator will be the lowest value necessary to
	         * represent the number exactly.
	         *
	         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.
	         *
	         * 'toFraction() max denominator not an integer: {md}'
	         * 'toFraction() max denominator out of range: {md}'
	         */
	        P.toFraction = function (md) {
	            var arr, d0, d2, e, exp, n, n0, q, s,
	                k = ERRORS,
	                x = this,
	                xc = x.c,
	                d = new BigNumber(ONE),
	                n1 = d0 = new BigNumber(ONE),
	                d1 = n0 = new BigNumber(ONE);

	            if ( md != null ) {
	                ERRORS = false;
	                n = new BigNumber(md);
	                ERRORS = k;

	                if ( !( k = n.isInt() ) || n.lt(ONE) ) {

	                    if (ERRORS) {
	                        raise( 22,
	                          'max denominator ' + ( k ? 'out of range' : 'not an integer' ), md );
	                    }

	                    // ERRORS is false:
	                    // If md is a finite non-integer >= 1, round it to an integer and use it.
	                    md = !k && n.c && round( n, n.e + 1, 1 ).gte(ONE) ? n : null;
	                }
	            }

	            if ( !xc ) return x.toString();
	            s = coeffToString(xc);

	            // Determine initial denominator.
	            // d is a power of 10 and the minimum max denominator that specifies the value exactly.
	            e = d.e = s.length - x.e - 1;
	            d.c[0] = POWS_TEN[ ( exp = e % LOG_BASE ) < 0 ? LOG_BASE + exp : exp ];
	            md = !md || n.cmp(d) > 0 ? ( e > 0 ? d : n1 ) : n;

	            exp = MAX_EXP;
	            MAX_EXP = 1 / 0;
	            n = new BigNumber(s);

	            // n0 = d1 = 0
	            n0.c[0] = 0;

	            for ( ; ; )  {
	                q = div( n, d, 0, 1 );
	                d2 = d0.plus( q.times(d1) );
	                if ( d2.cmp(md) == 1 ) break;
	                d0 = d1;
	                d1 = d2;
	                n1 = n0.plus( q.times( d2 = n1 ) );
	                n0 = d2;
	                d = n.minus( q.times( d2 = d ) );
	                n = d2;
	            }

	            d2 = div( md.minus(d0), d1, 0, 1 );
	            n0 = n0.plus( d2.times(n1) );
	            d0 = d0.plus( d2.times(d1) );
	            n0.s = n1.s = x.s;
	            e *= 2;

	            // Determine which fraction is closer to x, n0/d0 or n1/d1
	            arr = div( n1, d1, e, ROUNDING_MODE ).minus(x).abs().cmp(
	                  div( n0, d0, e, ROUNDING_MODE ).minus(x).abs() ) < 1
	                    ? [ n1.toString(), d1.toString() ]
	                    : [ n0.toString(), d0.toString() ];

	            MAX_EXP = exp;
	            return arr;
	        };


	        /*
	         * Return the value of this BigNumber converted to a number primitive.
	         */
	        P.toNumber = function () {
	            var x = this;

	            // Ensure zero has correct sign.
	            return +x || ( x.s ? x.s * 0 : NaN );
	        };


	        /*
	         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.
	         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
	         * If POW_PRECISION is not 0, round to POW_PRECISION using ROUNDING_MODE.
	         *
	         * n {number} Integer, -9007199254740992 to 9007199254740992 inclusive.
	         * (Performs 54 loop iterations for n of 9007199254740992.)
	         *
	         * 'pow() exponent not an integer: {n}'
	         * 'pow() exponent out of range: {n}'
	         */
	        P.toPower = P.pow = function (n) {
	            var k, y,
	                i = mathfloor( n < 0 ? -n : +n ),
	                x = this;

	            // Pass ±Infinity to Math.pow if exponent is out of range.
	            if ( !isValidInt( n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent' ) &&
	              ( !isFinite(n) || i > MAX_SAFE_INTEGER && ( n /= 0 ) ||
	                parseFloat(n) != n && !( n = NaN ) ) ) {
	                return new BigNumber( Math.pow( +x, n ) );
	            }

	            // Truncating each coefficient array to a length of k after each multiplication equates
	            // to truncating significant digits to POW_PRECISION + [28, 41], i.e. there will be a
	            // minimum of 28 guard digits retained. (Using + 1.5 would give [9, 21] guard digits.)
	            k = POW_PRECISION ? mathceil( POW_PRECISION / LOG_BASE + 2 ) : 0;
	            y = new BigNumber(ONE);

	            for ( ; ; ) {

	                if ( i % 2 ) {
	                    y = y.times(x);
	                    if ( !y.c ) break;
	                    if ( k && y.c.length > k ) y.c.length = k;
	                }

	                i = mathfloor( i / 2 );
	                if ( !i ) break;

	                x = x.times(x);
	                if ( k && x.c && x.c.length > k ) x.c.length = k;
	            }

	            if ( n < 0 ) y = ONE.div(y);
	            return k ? round( y, POW_PRECISION, ROUNDING_MODE ) : y;
	        };


	        /*
	         * Return a string representing the value of this BigNumber rounded to sd significant digits
	         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
	         * necessary to represent the integer part of the value in fixed-point notation, then use
	         * exponential notation.
	         *
	         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
	         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	         *
	         * 'toPrecision() precision not an integer: {sd}'
	         * 'toPrecision() precision out of range: {sd}'
	         * 'toPrecision() rounding mode not an integer: {rm}'
	         * 'toPrecision() rounding mode out of range: {rm}'
	         */
	        P.toPrecision = function ( sd, rm ) {
	            return format( this, sd != null && isValidInt( sd, 1, MAX, 24, 'precision' )
	              ? sd | 0 : null, rm, 24 );
	        };


	        /*
	         * Return a string representing the value of this BigNumber in base b, or base 10 if b is
	         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
	         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
	         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
	         * TO_EXP_NEG, return exponential notation.
	         *
	         * [b] {number} Integer, 2 to 64 inclusive.
	         *
	         * 'toString() base not an integer: {b}'
	         * 'toString() base out of range: {b}'
	         */
	        P.toString = function (b) {
	            var str,
	                n = this,
	                s = n.s,
	                e = n.e;

	            // Infinity or NaN?
	            if ( e === null ) {

	                if (s) {
	                    str = 'Infinity';
	                    if ( s < 0 ) str = '-' + str;
	                } else {
	                    str = 'NaN';
	                }
	            } else {
	                str = coeffToString( n.c );

	                if ( b == null || !isValidInt( b, 2, 64, 25, 'base' ) ) {
	                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS
	                      ? toExponential( str, e )
	                      : toFixedPoint( str, e );
	                } else {
	                    str = convertBase( toFixedPoint( str, e ), b | 0, 10, s );
	                }

	                if ( s < 0 && n.c[0] ) str = '-' + str;
	            }

	            return str;
	        };


	        /*
	         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole
	         * number.
	         */
	        P.truncated = P.trunc = function () {
	            return round( new BigNumber(this), this.e + 1, 1 );
	        };



	        /*
	         * Return as toString, but do not accept a base argument.
	         */
	        P.valueOf = P.toJSON = function () {
	            return this.toString();
	        };


	        // Aliases for BigDecimal methods.
	        //P.add = P.plus;         // P.add included above
	        //P.subtract = P.minus;   // P.sub included above
	        //P.multiply = P.times;   // P.mul included above
	        //P.divide = P.div;
	        //P.remainder = P.mod;
	        //P.compareTo = P.cmp;
	        //P.negate = P.neg;


	        if ( configObj != null ) BigNumber.config(configObj);

	        return BigNumber;
	    }


	    // PRIVATE HELPER FUNCTIONS


	    function bitFloor(n) {
	        var i = n | 0;
	        return n > 0 || n === i ? i : i - 1;
	    }


	    // Return a coefficient array as a string of base 10 digits.
	    function coeffToString(a) {
	        var s, z,
	            i = 1,
	            j = a.length,
	            r = a[0] + '';

	        for ( ; i < j; ) {
	            s = a[i++] + '';
	            z = LOG_BASE - s.length;
	            for ( ; z--; s = '0' + s );
	            r += s;
	        }

	        // Determine trailing zeros.
	        for ( j = r.length; r.charCodeAt(--j) === 48; );
	        return r.slice( 0, j + 1 || 1 );
	    }


	    // Compare the value of BigNumbers x and y.
	    function compare( x, y ) {
	        var a, b,
	            xc = x.c,
	            yc = y.c,
	            i = x.s,
	            j = y.s,
	            k = x.e,
	            l = y.e;

	        // Either NaN?
	        if ( !i || !j ) return null;

	        a = xc && !xc[0];
	        b = yc && !yc[0];

	        // Either zero?
	        if ( a || b ) return a ? b ? 0 : -j : i;

	        // Signs differ?
	        if ( i != j ) return i;

	        a = i < 0;
	        b = k == l;

	        // Either Infinity?
	        if ( !xc || !yc ) return b ? 0 : !xc ^ a ? 1 : -1;

	        // Compare exponents.
	        if ( !b ) return k > l ^ a ? 1 : -1;

	        j = ( k = xc.length ) < ( l = yc.length ) ? k : l;

	        // Compare digit by digit.
	        for ( i = 0; i < j; i++ ) if ( xc[i] != yc[i] ) return xc[i] > yc[i] ^ a ? 1 : -1;

	        // Compare lengths.
	        return k == l ? 0 : k > l ^ a ? 1 : -1;
	    }


	    /*
	     * Return true if n is a valid number in range, otherwise false.
	     * Use for argument validation when ERRORS is false.
	     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.
	     */
	    function intValidatorNoErrors( n, min, max ) {
	        return ( n = truncate(n) ) >= min && n <= max;
	    }


	    function isArray(obj) {
	        return Object.prototype.toString.call(obj) == '[object Array]';
	    }


	    /*
	     * Convert string of baseIn to an array of numbers of baseOut.
	     * Eg. convertBase('255', 10, 16) returns [15, 15].
	     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
	     */
	    function toBaseOut( str, baseIn, baseOut ) {
	        var j,
	            arr = [0],
	            arrL,
	            i = 0,
	            len = str.length;

	        for ( ; i < len; ) {
	            for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn );
	            arr[ j = 0 ] += ALPHABET.indexOf( str.charAt( i++ ) );

	            for ( ; j < arr.length; j++ ) {

	                if ( arr[j] > baseOut - 1 ) {
	                    if ( arr[j + 1] == null ) arr[j + 1] = 0;
	                    arr[j + 1] += arr[j] / baseOut | 0;
	                    arr[j] %= baseOut;
	                }
	            }
	        }

	        return arr.reverse();
	    }


	    function toExponential( str, e ) {
	        return ( str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str ) +
	          ( e < 0 ? 'e' : 'e+' ) + e;
	    }


	    function toFixedPoint( str, e ) {
	        var len, z;

	        // Negative exponent?
	        if ( e < 0 ) {

	            // Prepend zeros.
	            for ( z = '0.'; ++e; z += '0' );
	            str = z + str;

	        // Positive exponent
	        } else {
	            len = str.length;

	            // Append zeros.
	            if ( ++e > len ) {
	                for ( z = '0', e -= len; --e; z += '0' );
	                str += z;
	            } else if ( e < len ) {
	                str = str.slice( 0, e ) + '.' + str.slice(e);
	            }
	        }

	        return str;
	    }


	    function truncate(n) {
	        n = parseFloat(n);
	        return n < 0 ? mathceil(n) : mathfloor(n);
	    }


	    // EXPORT


	    BigNumber = another();

	    // AMD.
	    if ( true ) {
	        !(__WEBPACK_AMD_DEFINE_RESULT__ = function () { return BigNumber; }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	    // Node and other environments that support module.exports.
	    } else if ( typeof module != 'undefined' && module.exports ) {
	        module.exports = BigNumber;
	        if ( !crypto ) try { crypto = require('crypto'); } catch (e) {}

	    // Browser.
	    } else {
	        global.BigNumber = BigNumber;
	    }
	})(this);


/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var crypto = __webpack_require__(23)
	var ecdsa = __webpack_require__(57)
	var typeForce = __webpack_require__(14)
	var networks = __webpack_require__(24)

	var Address = __webpack_require__(56)

	var ecurve = __webpack_require__(46)
	var secp256k1 = ecurve.getCurveByName('secp256k1')

	function ECPubKey (Q, compressed) {
	  if (compressed === undefined) {
	    compressed = true
	  }

	  typeForce('Point', Q)
	  typeForce('Boolean', compressed)

	  this.compressed = compressed
	  this.Q = Q
	}

	// Constants
	ECPubKey.curve = secp256k1

	// Static constructors
	ECPubKey.fromBuffer = function (buffer) {
	  var Q = ecurve.Point.decodeFrom(ECPubKey.curve, buffer)
	  return new ECPubKey(Q, Q.compressed)
	}

	ECPubKey.fromHex = function (hex) {
	  return ECPubKey.fromBuffer(new Buffer(hex, 'hex'))
	}

	// Operations
	ECPubKey.prototype.getAddress = function (network) {
	  network = network || networks.bitcoin

	  return new Address(crypto.hash160(this.toBuffer()), network.pubKeyHash)
	}

	ECPubKey.prototype.verify = function (hash, signature) {
	  return ecdsa.verify(ECPubKey.curve, hash, signature, this.Q)
	}

	// Export functions
	ECPubKey.prototype.toBuffer = function () {
	  return this.Q.getEncoded(this.compressed)
	}

	ECPubKey.prototype.toHex = function () {
	  return this.toBuffer().toString('hex')
	}

	module.exports = ECPubKey

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var assert = __webpack_require__(5)
	var bufferutils = __webpack_require__(30)
	var crypto = __webpack_require__(23)
	var typeForce = __webpack_require__(14)
	var opcodes = __webpack_require__(32)

	function Script (buffer, chunks) {
	  typeForce('Buffer', buffer)
	  typeForce('Array', chunks)

	  this.buffer = buffer
	  this.chunks = chunks
	}

	Script.fromASM = function (asm) {
	  var strChunks = asm.split(' ')
	  var chunks = strChunks.map(function (strChunk) {
	    // opcode
	    if (strChunk in opcodes) {
	      return opcodes[strChunk]

	    // data chunk
	    } else {
	      return new Buffer(strChunk, 'hex')
	    }
	  })

	  return Script.fromChunks(chunks)
	}

	Script.fromBuffer = function (buffer) {
	  var chunks = []
	  var i = 0

	  while (i < buffer.length) {
	    var opcode = buffer.readUInt8(i)

	    // data chunk
	    if ((opcode > opcodes.OP_0) && (opcode <= opcodes.OP_PUSHDATA4)) {
	      var d = bufferutils.readPushDataInt(buffer, i)

	      // did reading a pushDataInt fail? return non-chunked script
	      if (d === null) return new Script(buffer, [])
	      i += d.size

	      // attempt to read too much data?
	      if (i + d.number > buffer.length) return new Script(buffer, [])

	      var data = buffer.slice(i, i + d.number)
	      i += d.number

	      chunks.push(data)

	    // opcode
	    } else {
	      chunks.push(opcode)

	      i += 1
	    }
	  }

	  return new Script(buffer, chunks)
	}

	Script.fromChunks = function (chunks) {
	  typeForce('Array', chunks)

	  var bufferSize = chunks.reduce(function (accum, chunk) {
	    // data chunk
	    if (Buffer.isBuffer(chunk)) {
	      return accum + bufferutils.pushDataSize(chunk.length) + chunk.length
	    }

	    // opcode
	    return accum + 1
	  }, 0.0)

	  var buffer = new Buffer(bufferSize)
	  var offset = 0

	  chunks.forEach(function (chunk) {
	    // data chunk
	    if (Buffer.isBuffer(chunk)) {
	      offset += bufferutils.writePushDataInt(buffer, chunk.length, offset)

	      chunk.copy(buffer, offset)
	      offset += chunk.length

	    // opcode
	    } else {
	      buffer.writeUInt8(chunk, offset)
	      offset += 1
	    }
	  })

	  assert.equal(offset, buffer.length, 'Could not decode chunks')
	  return new Script(buffer, chunks)
	}

	Script.fromHex = function (hex) {
	  return Script.fromBuffer(new Buffer(hex, 'hex'))
	}

	Script.EMPTY = Script.fromChunks([])

	Script.prototype.getHash = function () {
	  return crypto.hash160(this.buffer)
	}

	// FIXME: doesn't work for data chunks, maybe time to use buffertools.compare...
	Script.prototype.without = function (needle) {
	  return Script.fromChunks(this.chunks.filter(function (op) {
	    return op !== needle
	  }))
	}

	var reverseOps = []
	for (var op in opcodes) {
	  var code = opcodes[op]
	  reverseOps[code] = op
	}

	Script.prototype.toASM = function () {
	  return this.chunks.map(function (chunk) {
	    // data chunk
	    if (Buffer.isBuffer(chunk)) {
	      return chunk.toString('hex')

	    // opcode
	    } else {
	      return reverseOps[chunk]
	    }
	  }).join(' ')
	}

	Script.prototype.toBuffer = function () {
	  return this.buffer
	}

	Script.prototype.toHex = function () {
	  return this.toBuffer().toString('hex')
	}

	module.exports = Script

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.

	function isArray(arg) {
	  if (Array.isArray) {
	    return Array.isArray(arg);
	  }
	  return objectToString(arg) === '[object Array]';
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = Buffer.isBuffer;

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	var Point = __webpack_require__(120)
	var Curve = __webpack_require__(119)

	var getCurveByName = __webpack_require__(261)

	module.exports = {
	  Curve: Curve,
	  Point: Point,
	  getCurveByName: getCurveByName
	}


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.baToJSON = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.stripZeros = exports.unpad = exports.setLengthRight = exports.setLength = exports.setLengthLeft = exports.zeros = void 0;
	var ethjsUtil = __webpack_require__(18);
	var BN = __webpack_require__(4);
	/**
	 * Returns a buffer filled with 0s.
	 * @param bytes the number of bytes the buffer should be
	 */
	exports.zeros = function (bytes) {
	    return Buffer.allocUnsafe(bytes).fill(0);
	};
	/**
	 * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
	 * Or it truncates the beginning if it exceeds.
	 * @param msg the value to pad (Buffer|Array)
	 * @param length the number of bytes the output should be
	 * @param right whether to start padding form the left or right
	 * @return (Buffer|Array)
	 */
	exports.setLengthLeft = function (msg, length, right) {
	    if (right === void 0) { right = false; }
	    var buf = exports.zeros(length);
	    msg = exports.toBuffer(msg);
	    if (right) {
	        if (msg.length < length) {
	            msg.copy(buf);
	            return buf;
	        }
	        return msg.slice(0, length);
	    }
	    else {
	        if (msg.length < length) {
	            msg.copy(buf, length - msg.length);
	            return buf;
	        }
	        return msg.slice(-length);
	    }
	};
	exports.setLength = exports.setLengthLeft;
	/**
	 * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
	 * Or it truncates the beginning if it exceeds.
	 * @param msg the value to pad (Buffer|Array)
	 * @param length the number of bytes the output should be
	 * @return (Buffer|Array)
	 */
	exports.setLengthRight = function (msg, length) {
	    return exports.setLength(msg, length, true);
	};
	/**
	 * Trims leading zeros from a `Buffer` or an `Array`.
	 * @param a (Buffer|Array|String)
	 * @return (Buffer|Array|String)
	 */
	exports.unpad = function (a) {
	    a = ethjsUtil.stripHexPrefix(a);
	    var first = a[0];
	    while (a.length > 0 && first.toString() === '0') {
	        a = a.slice(1);
	        first = a[0];
	    }
	    return a;
	};
	exports.stripZeros = exports.unpad;
	/**
	 * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.
	 * @param v the value
	 */
	exports.toBuffer = function (v) {
	    if (!Buffer.isBuffer(v)) {
	        if (Array.isArray(v)) {
	            v = Buffer.from(v);
	        }
	        else if (typeof v === 'string') {
	            if (ethjsUtil.isHexString(v)) {
	                v = Buffer.from(ethjsUtil.padToEven(ethjsUtil.stripHexPrefix(v)), 'hex');
	            }
	            else {
	                throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: " + v);
	            }
	        }
	        else if (typeof v === 'number') {
	            v = ethjsUtil.intToBuffer(v);
	        }
	        else if (v === null || v === undefined) {
	            v = Buffer.allocUnsafe(0);
	        }
	        else if (BN.isBN(v)) {
	            v = v.toArrayLike(Buffer);
	        }
	        else if (v.toArray) {
	            // converts a BN to a Buffer
	            v = Buffer.from(v.toArray());
	        }
	        else {
	            throw new Error('invalid type');
	        }
	    }
	    return v;
	};
	/**
	 * Converts a `Buffer` to a `Number`.
	 * @param buf `Buffer` object to convert
	 * @throws If the input number exceeds 53 bits.
	 */
	exports.bufferToInt = function (buf) {
	    return new BN(exports.toBuffer(buf)).toNumber();
	};
	/**
	 * Converts a `Buffer` into a `0x`-prefixed hex `String`.
	 * @param buf `Buffer` object to convert
	 */
	exports.bufferToHex = function (buf) {
	    buf = exports.toBuffer(buf);
	    return '0x' + buf.toString('hex');
	};
	/**
	 * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.
	 * @param num Signed integer value
	 */
	exports.fromSigned = function (num) {
	    return new BN(num).fromTwos(256);
	};
	/**
	 * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.
	 * @param num
	 */
	exports.toUnsigned = function (num) {
	    return Buffer.from(num.toTwos(256).toArray());
	};
	/**
	 * Adds "0x" to a given `String` if it does not already start with "0x".
	 */
	exports.addHexPrefix = function (str) {
	    if (typeof str !== 'string') {
	        return str;
	    }
	    return ethjsUtil.isHexPrefixed(str) ? str : '0x' + str;
	};
	/**
	 * Converts a `Buffer` or `Array` to JSON.
	 * @param ba (Buffer|Array)
	 * @return (Array|String|null)
	 */
	exports.baToJSON = function (ba) {
	    if (Buffer.isBuffer(ba)) {
	        return "0x" + ba.toString('hex');
	    }
	    else if (ba instanceof Array) {
	        var array = [];
	        for (var i = 0; i < ba.length; i++) {
	            array.push(exports.baToJSON(ba[i]));
	        }
	        return array;
	    }
	};
	//# sourceMappingURL=bytes.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(13);
	var assert = __webpack_require__(27);

	function BlockHash() {
	  this.pending = null;
	  this.pendingTotal = 0;
	  this.blockSize = this.constructor.blockSize;
	  this.outSize = this.constructor.outSize;
	  this.hmacStrength = this.constructor.hmacStrength;
	  this.padLength = this.constructor.padLength / 8;
	  this.endian = 'big';

	  this._delta8 = this.blockSize / 8;
	  this._delta32 = this.blockSize / 32;
	}
	exports.BlockHash = BlockHash;

	BlockHash.prototype.update = function update(msg, enc) {
	  // Convert message to array, pad it, and join into 32bit blocks
	  msg = utils.toArray(msg, enc);
	  if (!this.pending)
	    this.pending = msg;
	  else
	    this.pending = this.pending.concat(msg);
	  this.pendingTotal += msg.length;

	  // Enough data, try updating
	  if (this.pending.length >= this._delta8) {
	    msg = this.pending;

	    // Process pending data in blocks
	    var r = msg.length % this._delta8;
	    this.pending = msg.slice(msg.length - r, msg.length);
	    if (this.pending.length === 0)
	      this.pending = null;

	    msg = utils.join32(msg, 0, msg.length - r, this.endian);
	    for (var i = 0; i < msg.length; i += this._delta32)
	      this._update(msg, i, i + this._delta32);
	  }

	  return this;
	};

	BlockHash.prototype.digest = function digest(enc) {
	  this.update(this._pad());
	  assert(this.pending === null);

	  return this._digest(enc);
	};

	BlockHash.prototype._pad = function pad() {
	  var len = this.pendingTotal;
	  var bytes = this._delta8;
	  var k = bytes - ((len + this.padLength) % bytes);
	  var res = new Array(k + this.padLength);
	  res[0] = 0x80;
	  for (var i = 1; i < k; i++)
	    res[i] = 0;

	  // Append length
	  len <<= 3;
	  if (this.endian === 'big') {
	    for (var t = 8; t < this.padLength; t++)
	      res[i++] = 0;

	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = (len >>> 24) & 0xff;
	    res[i++] = (len >>> 16) & 0xff;
	    res[i++] = (len >>> 8) & 0xff;
	    res[i++] = len & 0xff;
	  } else {
	    res[i++] = len & 0xff;
	    res[i++] = (len >>> 8) & 0xff;
	    res[i++] = (len >>> 16) & 0xff;
	    res[i++] = (len >>> 24) & 0xff;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;

	    for (t = 8; t < this.padLength; t++)
	      res[i++] = 0;
	  }

	  return res;
	};


/***/ },
/* 49 */
/***/ function(module, exports) {

	/**
	 * This method returns `undefined`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.3.0
	 * @category Util
	 * @example
	 *
	 * _.times(2, _.noop);
	 * // => [undefined, undefined]
	 */
	function noop() {
	  // No operation performed.
	}

	module.exports = noop;


/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/*
	    This file is part of web3.js.

	    web3.js is free software: you can redistribute it and/or modify
	    it under the terms of the GNU Lesser General Public License as published by
	    the Free Software Foundation, either version 3 of the License, or
	    (at your option) any later version.

	    web3.js is distributed in the hope that it will be useful,
	    but WITHOUT ANY WARRANTY; without even the implied warranty of
	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	    GNU Lesser General Public License for more details.

	    You should have received a copy of the GNU Lesser General Public License
	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	*/
	/** 
	 * @file sha3.js
	 * @author Marek Kotewicz <marek@ethdev.com>
	 * @date 2015
	 */

	var CryptoJS = __webpack_require__(241);
	var sha3 = __webpack_require__(117);

	module.exports = function (value, options) {
	    if (options && options.encoding === 'hex') {
	        if (value.length > 2 && value.substr(0, 2) === '0x') {
	            value = value.substr(2);
	        }
	        value = CryptoJS.enc.Hex.parse(value);
	    }

	    return sha3(value, {
	        outputLength: 256
	    }).toString();
	};



/***/ },
/* 51 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = slice;
	function slice(arrayLike, start) {
	    start = start | 0;
	    var newLen = Math.max(arrayLike.length - start, 0);
	    var newArr = Array(newLen);
	    for (var idx = 0; idx < newLen; idx++) {
	        newArr[idx] = arrayLike[start + idx];
	    }
	    return newArr;
	}
	module.exports = exports["default"];

/***/ },
/* 52 */
/***/ function(module, exports) {

	module.exports = {
	  minBlockRef,
	  maxBlockRef,
	  sortBlockRefs,
	  bnToHex,
	  blockRefIsNumber,
	  hexToInt,
	  incrementHexInt,
	  intToHex,
	  unsafeRandomBytes
	};

	function minBlockRef(...refs) {
	  const sortedRefs = sortBlockRefs(refs);
	  return sortedRefs[0];
	}

	function maxBlockRef(...refs) {
	  const sortedRefs = sortBlockRefs(refs);
	  return sortedRefs[sortedRefs.length - 1];
	}

	function sortBlockRefs(refs) {
	  return refs.sort((refA, refB) => {
	    if (refA === 'latest' || refB === 'earliest') return 1;
	    if (refB === 'latest' || refA === 'earliest') return -1;
	    return hexToInt(refA) - hexToInt(refB);
	  });
	}

	function bnToHex(bn) {
	  return '0x' + bn.toString(16);
	}

	function blockRefIsNumber(blockRef) {
	  return blockRef && !['earliest', 'latest', 'pending'].includes(blockRef);
	}

	function hexToInt(hexString) {
	  if (hexString === undefined || hexString === null) return hexString;
	  return Number.parseInt(hexString, 16);
	}

	function incrementHexInt(hexString) {
	  if (hexString === undefined || hexString === null) return hexString;
	  const value = hexToInt(hexString);
	  return intToHex(value + 1);
	}

	function intToHex(int) {
	  if (int === undefined || int === null) return int;
	  let hexString = int.toString(16);
	  const needsLeftPad = hexString.length % 2;
	  if (needsLeftPad) hexString = '0' + hexString;
	  return '0x' + hexString;
	}

	function unsafeRandomBytes(byteCount) {
	  let result = '0x';

	  for (let i = 0; i < byteCount; i++) {
	    result += unsafeRandomNibble();
	    result += unsafeRandomNibble();
	  }

	  return result;
	}

	function unsafeRandomNibble() {
	  return Math.floor(Math.random() * 16).toString(16);
	}

/***/ },
/* 53 */
[429, 204],
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	const createPayload = __webpack_require__(55);

	module.exports = SubProvider; // this is the base class for a subprovider -- mostly helpers

	function SubProvider() {}

	SubProvider.prototype.setEngine = function (engine) {
	  const self = this;
	  if (self.engine) return;
	  self.engine = engine;
	  engine.on('block', function (block) {
	    self.currentBlock = block;
	  });
	  engine.on('start', function () {
	    self.start();
	  });
	  engine.on('stop', function () {
	    self.stop();
	  });
	};

	SubProvider.prototype.handleRequest = function (payload, next, end) {
	  throw new Error('Subproviders should override `handleRequest`.');
	};

	SubProvider.prototype.emitPayload = function (payload, cb) {
	  const self = this;
	  self.engine.sendAsync(createPayload(payload), cb);
	}; // dummies for overriding


	SubProvider.prototype.stop = function () {};

	SubProvider.prototype.start = function () {};

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	const getRandomId = __webpack_require__(212);

	const extend = __webpack_require__(71);

	module.exports = createPayload;

	function createPayload(data) {
	  return extend({
	    // defaults
	    id: getRandomId(),
	    jsonrpc: '2.0',
	    params: [] // user-specified

	  }, data);
	}

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var assert = __webpack_require__(5)
	var base58check = __webpack_require__(59)
	var typeForce = __webpack_require__(14)
	var networks = __webpack_require__(24)
	var scripts = __webpack_require__(58)

	function findScriptTypeByVersion (version) {
	  for (var networkName in networks) {
	    var network = networks[networkName]

	    if (version === network.pubKeyHash) return 'pubkeyhash'
	    if (version === network.scriptHash) return 'scripthash'
	  }
	}

	function Address (hash, version) {
	  typeForce('Buffer', hash)

	  assert.strictEqual(hash.length, 20, 'Invalid hash length')
	  assert.strictEqual(version & 0xff, version, 'Invalid version byte')

	  this.hash = hash
	  this.version = version
	}

	Address.fromBase58Check = function (string) {
	  var payload = base58check.decode(string)
	  var version = payload.readUInt8(0)
	  var hash = payload.slice(1)

	  return new Address(hash, version)
	}

	Address.fromOutputScript = function (script, network) {
	  network = network || networks.bitcoin

	  if (scripts.isPubKeyHashOutput(script)) return new Address(script.chunks[2], network.pubKeyHash)
	  if (scripts.isScriptHashOutput(script)) return new Address(script.chunks[1], network.scriptHash)

	  assert(false, script.toASM() + ' has no matching Address')
	}

	Address.prototype.toBase58Check = function () {
	  var payload = new Buffer(21)
	  payload.writeUInt8(this.version, 0)
	  this.hash.copy(payload, 1)

	  return base58check.encode(payload)
	}

	Address.prototype.toOutputScript = function () {
	  var scriptType = findScriptTypeByVersion(this.version)

	  if (scriptType === 'pubkeyhash') return scripts.pubKeyHashOutput(this.hash)
	  if (scriptType === 'scripthash') return scripts.scriptHashOutput(this.hash)

	  assert(false, this.toString() + ' has no matching Script')
	}

	Address.prototype.toString = Address.prototype.toBase58Check

	module.exports = Address

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var assert = __webpack_require__(5)
	var createHmac = __webpack_require__(79)
	var typeForce = __webpack_require__(14)

	var BigInteger = __webpack_require__(15)
	var ECSignature = __webpack_require__(31)

	var ZERO = new Buffer([0])
	var ONE = new Buffer([1])

	// https://tools.ietf.org/html/rfc6979#section-3.2
	function deterministicGenerateK (curve, hash, d, checkSig) {
	  typeForce('Buffer', hash)
	  typeForce('BigInteger', d)

	  // FIXME: remove/uncomment for 2.0.0
	  //  typeForce('Function', checkSig)

	  if (typeof checkSig !== 'function') {
	    console.warn('deterministicGenerateK requires a checkSig callback in 2.0.0, see #337 for more information')

	    checkSig = function (k) {
	      var G = curve.G
	      var n = curve.n
	      var e = BigInteger.fromBuffer(hash)

	      var Q = G.multiply(k)

	      if (curve.isInfinity(Q))
	        return false

	      var r = Q.affineX.mod(n)
	      if (r.signum() === 0)
	        return false

	      var s = k.modInverse(n).multiply(e.add(d.multiply(r))).mod(n)
	      if (s.signum() === 0)
	        return false

	      return true
	    }
	  }

	  // sanity check
	  assert.equal(hash.length, 32, 'Hash must be 256 bit')

	  var x = d.toBuffer(32)
	  var k = new Buffer(32)
	  var v = new Buffer(32)

	  // Step A, ignored as hash already provided
	  // Step B
	  v.fill(1)

	  // Step C
	  k.fill(0)

	  // Step D
	  k = createHmac('sha256', k)
	    .update(v)
	    .update(ZERO)
	    .update(x)
	    .update(hash)
	    .digest()

	  // Step E
	  v = createHmac('sha256', k).update(v).digest()

	  // Step F
	  k = createHmac('sha256', k)
	    .update(v)
	    .update(ONE)
	    .update(x)
	    .update(hash)
	    .digest()

	  // Step G
	  v = createHmac('sha256', k).update(v).digest()

	  // Step H1/H2a, ignored as tlen === qlen (256 bit)
	  // Step H2b
	  v = createHmac('sha256', k).update(v).digest()

	  var T = BigInteger.fromBuffer(v)

	  // Step H3, repeat until T is within the interval [1, n - 1] and is suitable for ECDSA
	  while ((T.signum() <= 0) || (T.compareTo(curve.n) >= 0) || !checkSig(T)) {
	    k = createHmac('sha256', k)
	      .update(v)
	      .update(ZERO)
	      .digest()

	    v = createHmac('sha256', k).update(v).digest()

	    // Step H1/H2a, again, ignored as tlen === qlen (256 bit)
	    // Step H2b again
	    v = createHmac('sha256', k).update(v).digest()
	    T = BigInteger.fromBuffer(v)
	  }

	  return T
	}

	function sign (curve, hash, d) {
	  var r, s

	  var e = BigInteger.fromBuffer(hash)
	  var n = curve.n
	  var G = curve.G

	  deterministicGenerateK(curve, hash, d, function (k) {
	    var Q = G.multiply(k)

	    if (curve.isInfinity(Q))
	      return false

	    r = Q.affineX.mod(n)
	    if (r.signum() === 0)
	      return false

	    s = k.modInverse(n).multiply(e.add(d.multiply(r))).mod(n)
	    if (s.signum() === 0)
	      return false

	    return true
	  })

	  var N_OVER_TWO = n.shiftRight(1)

	  // enforce low S values, see bip62: 'low s values in signatures'
	  if (s.compareTo(N_OVER_TWO) > 0) {
	    s = n.subtract(s)
	  }

	  return new ECSignature(r, s)
	}

	function verifyRaw (curve, e, signature, Q) {
	  var n = curve.n
	  var G = curve.G

	  var r = signature.r
	  var s = signature.s

	  // 1.4.1 Enforce r and s are both integers in the interval [1, n − 1]
	  if (r.signum() <= 0 || r.compareTo(n) >= 0) return false
	  if (s.signum() <= 0 || s.compareTo(n) >= 0) return false

	  // c = s^-1 mod n
	  var c = s.modInverse(n)

	  // 1.4.4 Compute u1 = es^−1 mod n
	  //               u2 = rs^−1 mod n
	  var u1 = e.multiply(c).mod(n)
	  var u2 = r.multiply(c).mod(n)

	  // 1.4.5 Compute R = (xR, yR) = u1G + u2Q
	  var R = G.multiplyTwo(u1, Q, u2)
	  var v = R.affineX.mod(n)

	  // 1.4.5 (cont.) Enforce R is not at infinity
	  if (curve.isInfinity(R)) return false

	  // 1.4.8 If v = r, output "valid", and if v != r, output "invalid"
	  return v.equals(r)
	}

	function verify (curve, hash, signature, Q) {
	  // 1.4.2 H = Hash(M), already done by the user
	  // 1.4.3 e = H
	  var e = BigInteger.fromBuffer(hash)

	  return verifyRaw(curve, e, signature, Q)
	}

	/**
	  * Recover a public key from a signature.
	  *
	  * See SEC 1: Elliptic Curve Cryptography, section 4.1.6, "Public
	  * Key Recovery Operation".
	  *
	  * http://www.secg.org/download/aid-780/sec1-v2.pdf
	  */
	function recoverPubKey (curve, e, signature, i) {
	  assert.strictEqual(i & 3, i, 'Recovery param is more than two bits')

	  var n = curve.n
	  var G = curve.G

	  var r = signature.r
	  var s = signature.s

	  assert(r.signum() > 0 && r.compareTo(n) < 0, 'Invalid r value')
	  assert(s.signum() > 0 && s.compareTo(n) < 0, 'Invalid s value')

	  // A set LSB signifies that the y-coordinate is odd
	  var isYOdd = i & 1

	  // The more significant bit specifies whether we should use the
	  // first or second candidate key.
	  var isSecondKey = i >> 1

	  // 1.1 Let x = r + jn
	  var x = isSecondKey ? r.add(n) : r
	  var R = curve.pointFromX(isYOdd, x)

	  // 1.4 Check that nR is at infinity
	  var nR = R.multiply(n)
	  assert(curve.isInfinity(nR), 'nR is not a valid curve point')

	  // Compute -e from e
	  var eNeg = e.negate().mod(n)

	  // 1.6.1 Compute Q = r^-1 (sR -  eG)
	  //               Q = r^-1 (sR + -eG)
	  var rInv = r.modInverse(n)

	  var Q = R.multiplyTwo(s, G, eNeg).multiply(rInv)
	  curve.validate(Q)

	  return Q
	}

	/**
	  * Calculate pubkey extraction parameter.
	  *
	  * When extracting a pubkey from a signature, we have to
	  * distinguish four different cases. Rather than putting this
	  * burden on the verifier, Bitcoin includes a 2-bit value with the
	  * signature.
	  *
	  * This function simply tries all four cases and returns the value
	  * that resulted in a successful pubkey recovery.
	  */
	function calcPubKeyRecoveryParam (curve, e, signature, Q) {
	  for (var i = 0; i < 4; i++) {
	    var Qprime = recoverPubKey(curve, e, signature, i)

	    // 1.6.2 Verify Q
	    if (Qprime.equals(Q)) {
	      return i
	    }
	  }

	  throw new Error('Unable to find valid recovery factor')
	}

	module.exports = {
	  calcPubKeyRecoveryParam: calcPubKeyRecoveryParam,
	  deterministicGenerateK: deterministicGenerateK,
	  recoverPubKey: recoverPubKey,
	  sign: sign,
	  verify: verify,
	  verifyRaw: verifyRaw
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var assert = __webpack_require__(5)
	var ops = __webpack_require__(32)
	var typeForce = __webpack_require__(14)

	var ecurve = __webpack_require__(46)
	var curve = ecurve.getCurveByName('secp256k1')

	var ECSignature = __webpack_require__(31)
	var Script = __webpack_require__(44)

	function isCanonicalPubKey (buffer) {
	  if (!Buffer.isBuffer(buffer)) return false

	  try {
	    ecurve.Point.decodeFrom(curve, buffer)
	  } catch (e) {
	    if (!(e.message.match(/Invalid sequence (length|tag)/)))
	      throw e

	    return false
	  }

	  return true
	}

	function isCanonicalSignature (buffer) {
	  if (!Buffer.isBuffer(buffer)) return false

	  try {
	    ECSignature.parseScriptSignature(buffer)
	  } catch (e) {
	    if (!(e.message.match(/Not a DER sequence|Invalid sequence length|Expected a DER integer|R length is zero|S length is zero|R value excessively padded|S value excessively padded|R value is negative|S value is negative|Invalid hashType/))) {
	      throw e
	    }

	    return false
	  }

	  return true
	}

	function isPubKeyHashInput (script) {
	  return script.chunks.length === 2 &&
	    isCanonicalSignature(script.chunks[0]) &&
	    isCanonicalPubKey(script.chunks[1])
	}

	function isPubKeyHashOutput (script) {
	  return script.chunks.length === 5 &&
	    script.chunks[0] === ops.OP_DUP &&
	    script.chunks[1] === ops.OP_HASH160 &&
	    Buffer.isBuffer(script.chunks[2]) &&
	    script.chunks[2].length === 20 &&
	    script.chunks[3] === ops.OP_EQUALVERIFY &&
	    script.chunks[4] === ops.OP_CHECKSIG
	}

	function isPubKeyInput (script) {
	  return script.chunks.length === 1 &&
	    isCanonicalSignature(script.chunks[0])
	}

	function isPubKeyOutput (script) {
	  return script.chunks.length === 2 &&
	    isCanonicalPubKey(script.chunks[0]) &&
	    script.chunks[1] === ops.OP_CHECKSIG
	}

	function isScriptHashInput (script, allowIncomplete) {
	  if (script.chunks.length < 2) return false

	  var lastChunk = script.chunks[script.chunks.length - 1]
	  if (!Buffer.isBuffer(lastChunk)) return false

	  var scriptSig = Script.fromChunks(script.chunks.slice(0, -1))
	  var redeemScript = Script.fromBuffer(lastChunk)

	  // is redeemScript a valid script?
	  if (redeemScript.chunks.length === 0) return false

	  return classifyInput(scriptSig, allowIncomplete) === classifyOutput(redeemScript)
	}

	function isScriptHashOutput (script) {
	  return script.chunks.length === 3 &&
	    script.chunks[0] === ops.OP_HASH160 &&
	    Buffer.isBuffer(script.chunks[1]) &&
	    script.chunks[1].length === 20 &&
	    script.chunks[2] === ops.OP_EQUAL
	}

	// allowIncomplete is to account for combining signatures
	// See https://github.com/bitcoin/bitcoin/blob/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/script/sign.cpp#L195-L197
	function isMultisigInput (script, allowIncomplete) {
	  if (script.chunks.length < 2) return false
	  if (script.chunks[0] !== ops.OP_0) return false

	  if (allowIncomplete) {
	    return script.chunks.slice(1).every(function (chunk) {
	      return chunk === ops.OP_0 || isCanonicalSignature(chunk)
	    })
	  }

	  return script.chunks.slice(1).every(isCanonicalSignature)
	}

	function isMultisigOutput (script) {
	  if (script.chunks.length < 4) return false
	  if (script.chunks[script.chunks.length - 1] !== ops.OP_CHECKMULTISIG) return false

	  var mOp = script.chunks[0]
	  if (mOp === ops.OP_0) return false
	  if (mOp < ops.OP_1) return false
	  if (mOp > ops.OP_16) return false

	  var nOp = script.chunks[script.chunks.length - 2]
	  if (nOp === ops.OP_0) return false
	  if (nOp < ops.OP_1) return false
	  if (nOp > ops.OP_16) return false

	  var m = mOp - (ops.OP_1 - 1)
	  var n = nOp - (ops.OP_1 - 1)
	  if (n < m) return false

	  var pubKeys = script.chunks.slice(1, -2)
	  if (n < pubKeys.length) return false

	  return pubKeys.every(isCanonicalPubKey)
	}

	function isNullDataOutput (script) {
	  return script.chunks[0] === ops.OP_RETURN
	}

	function classifyOutput (script) {
	  typeForce('Script', script)

	  if (isPubKeyHashOutput(script)) {
	    return 'pubkeyhash'
	  } else if (isScriptHashOutput(script)) {
	    return 'scripthash'
	  } else if (isMultisigOutput(script)) {
	    return 'multisig'
	  } else if (isPubKeyOutput(script)) {
	    return 'pubkey'
	  } else if (isNullDataOutput(script)) {
	    return 'nulldata'
	  }

	  return 'nonstandard'
	}

	function classifyInput (script, allowIncomplete) {
	  typeForce('Script', script)

	  if (isPubKeyHashInput(script)) {
	    return 'pubkeyhash'
	  } else if (isMultisigInput(script, allowIncomplete)) {
	    return 'multisig'
	  } else if (isScriptHashInput(script, allowIncomplete)) {
	    return 'scripthash'
	  } else if (isPubKeyInput(script)) {
	    return 'pubkey'
	  }

	  return 'nonstandard'
	}

	// Standard Script Templates
	// {pubKey} OP_CHECKSIG
	function pubKeyOutput (pubKey) {
	  return Script.fromChunks([
	    pubKey.toBuffer(),
	    ops.OP_CHECKSIG
	  ])
	}

	// OP_DUP OP_HASH160 {pubKeyHash} OP_EQUALVERIFY OP_CHECKSIG
	function pubKeyHashOutput (hash) {
	  typeForce('Buffer', hash)

	  return Script.fromChunks([
	    ops.OP_DUP,
	    ops.OP_HASH160,
	    hash,
	    ops.OP_EQUALVERIFY,
	    ops.OP_CHECKSIG
	  ])
	}

	// OP_HASH160 {scriptHash} OP_EQUAL
	function scriptHashOutput (hash) {
	  typeForce('Buffer', hash)

	  return Script.fromChunks([
	    ops.OP_HASH160,
	    hash,
	    ops.OP_EQUAL
	  ])
	}

	// m [pubKeys ...] n OP_CHECKMULTISIG
	function multisigOutput (m, pubKeys) {
	  typeForce(['ECPubKey'], pubKeys)

	  assert(pubKeys.length >= m, 'Not enough pubKeys provided')

	  var pubKeyBuffers = pubKeys.map(function (pubKey) {
	    return pubKey.toBuffer()
	  })
	  var n = pubKeys.length

	  return Script.fromChunks([].concat(
	    (ops.OP_1 - 1) + m,
	    pubKeyBuffers,
	    (ops.OP_1 - 1) + n,
	    ops.OP_CHECKMULTISIG
	  ))
	}

	// {signature}
	function pubKeyInput (signature) {
	  typeForce('Buffer', signature)

	  return Script.fromChunks([signature])
	}

	// {signature} {pubKey}
	function pubKeyHashInput (signature, pubKey) {
	  typeForce('Buffer', signature)

	  return Script.fromChunks([signature, pubKey.toBuffer()])
	}

	// <scriptSig> {serialized scriptPubKey script}
	function scriptHashInput (scriptSig, scriptPubKey) {
	  return Script.fromChunks([].concat(
	    scriptSig.chunks,
	    scriptPubKey.toBuffer()
	  ))
	}

	// OP_0 [signatures ...]
	function multisigInput (signatures, scriptPubKey) {
	  if (scriptPubKey) {
	    assert(isMultisigOutput(scriptPubKey))

	    var mOp = scriptPubKey.chunks[0]
	    var nOp = scriptPubKey.chunks[scriptPubKey.chunks.length - 2]
	    var m = mOp - (ops.OP_1 - 1)
	    var n = nOp - (ops.OP_1 - 1)

	    assert(signatures.length >= m, 'Not enough signatures provided')
	    assert(signatures.length <= n, 'Too many signatures provided')
	  }

	  return Script.fromChunks([].concat(ops.OP_0, signatures))
	}

	function nullDataOutput (data) {
	  return Script.fromChunks([ops.OP_RETURN, data])
	}

	module.exports = {
	  isCanonicalPubKey: isCanonicalPubKey,
	  isCanonicalSignature: isCanonicalSignature,
	  isPubKeyHashInput: isPubKeyHashInput,
	  isPubKeyHashOutput: isPubKeyHashOutput,
	  isPubKeyInput: isPubKeyInput,
	  isPubKeyOutput: isPubKeyOutput,
	  isScriptHashInput: isScriptHashInput,
	  isScriptHashOutput: isScriptHashOutput,
	  isMultisigInput: isMultisigInput,
	  isMultisigOutput: isMultisigOutput,
	  isNullDataOutput: isNullDataOutput,
	  classifyOutput: classifyOutput,
	  classifyInput: classifyInput,
	  pubKeyOutput: pubKeyOutput,
	  pubKeyHashOutput: pubKeyHashOutput,
	  scriptHashOutput: scriptHashOutput,
	  multisigOutput: multisigOutput,
	  pubKeyInput: pubKeyInput,
	  pubKeyHashInput: pubKeyHashInput,
	  scriptHashInput: scriptHashInput,
	  multisigInput: multisigInput,
	  dataOutput: function (data) {
	    console.warn('dataOutput is deprecated, use nullDataOutput by 2.0.0')
	    return nullDataOutput(data)
	  },
	  nullDataOutput: nullDataOutput
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict'

	var base58 = __webpack_require__(222)
	var createHash = __webpack_require__(25)

	// SHA256(SHA256(buffer))
	function sha256x2 (buffer) {
	  var tmp = createHash('sha256').update(buffer).digest()
	  return createHash('sha256').update(tmp).digest()
	}

	// Encode a buffer as a base58-check encoded string
	function encode (payload) {
	  var checksum = sha256x2(payload)

	  return base58.encode(Buffer.concat([
	    payload,
	    checksum
	  ], payload.length + 4))
	}

	function decodeRaw (buffer) {
	  var payload = buffer.slice(0, -4)
	  var checksum = buffer.slice(-4)
	  var newChecksum = sha256x2(payload)

	  if (checksum[0] ^ newChecksum[0] |
	      checksum[1] ^ newChecksum[1] |
	      checksum[2] ^ newChecksum[2] |
	      checksum[3] ^ newChecksum[3]) return

	  return payload
	}

	// Decode a base58-check encoded string to a buffer, no result if checksum is wrong
	function decodeUnsafe (string) {
	  var array = base58.decodeUnsafe(string)
	  if (!array) return

	  var buffer = new Buffer(array)
	  return decodeRaw(buffer)
	}

	function decode (string) {
	  var array = base58.decode(string)
	  var buffer = new Buffer(array)
	  var payload = decodeRaw(buffer)
	  if (!payload) throw new Error('Invalid checksum')
	  return payload
	}

	module.exports = {
	  encode: encode,
	  decode: decode,
	  decodeUnsafe: decodeUnsafe,

	  // FIXME: remove in 2.0.0
	  decodeRaw: decodeUnsafe
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var rng = __webpack_require__(237)

	function error () {
	  var m = [].slice.call(arguments).join(' ')
	  throw new Error([
	    m,
	    'we accept pull requests',
	    'http://github.com/dominictarr/crypto-browserify'
	    ].join('\n'))
	}

	exports.createHash = __webpack_require__(115)

	exports.createHmac = __webpack_require__(227)

	exports.randomBytes = function(size, callback) {
	  if (callback && callback.call) {
	    try {
	      callback.call(this, undefined, new Buffer(rng(size)))
	    } catch (err) { callback(err) }
	  } else {
	    return new Buffer(rng(size))
	  }
	}

	function each(a, f) {
	  for(var i in a)
	    f(a[i], i)
	}

	exports.getHashes = function () {
	  return ['sha1', 'sha256', 'sha512', 'md5', 'rmd160']
	}

	var p = __webpack_require__(236)(exports)
	exports.pbkdf2 = p.pbkdf2
	exports.pbkdf2Sync = p.pbkdf2Sync


	// the least I can do is make error messages for the rest of the node.js/crypto api.
	each(['createCredentials'
	, 'createCipher'
	, 'createCipheriv'
	, 'createDecipher'
	, 'createDecipheriv'
	, 'createSign'
	, 'createVerify'
	, 'createDiffieHellman'
	], function (name) {
	  exports[name] = function () {
	    error('sorry,', name, 'is not implemented yet')
	  }
	})

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function (undefined) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var Base = C_lib.Base;
		    var X32WordArray = C_lib.WordArray;

		    /**
		     * x64 namespace.
		     */
		    var C_x64 = C.x64 = {};

		    /**
		     * A 64-bit word.
		     */
		    var X64Word = C_x64.Word = Base.extend({
		        /**
		         * Initializes a newly created 64-bit word.
		         *
		         * @param {number} high The high 32 bits.
		         * @param {number} low The low 32 bits.
		         *
		         * @example
		         *
		         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
		         */
		        init: function (high, low) {
		            this.high = high;
		            this.low = low;
		        }

		        /**
		         * Bitwise NOTs this word.
		         *
		         * @return {X64Word} A new x64-Word object after negating.
		         *
		         * @example
		         *
		         *     var negated = x64Word.not();
		         */
		        // not: function () {
		            // var high = ~this.high;
		            // var low = ~this.low;

		            // return X64Word.create(high, low);
		        // },

		        /**
		         * Bitwise ANDs this word with the passed word.
		         *
		         * @param {X64Word} word The x64-Word to AND with this word.
		         *
		         * @return {X64Word} A new x64-Word object after ANDing.
		         *
		         * @example
		         *
		         *     var anded = x64Word.and(anotherX64Word);
		         */
		        // and: function (word) {
		            // var high = this.high & word.high;
		            // var low = this.low & word.low;

		            // return X64Word.create(high, low);
		        // },

		        /**
		         * Bitwise ORs this word with the passed word.
		         *
		         * @param {X64Word} word The x64-Word to OR with this word.
		         *
		         * @return {X64Word} A new x64-Word object after ORing.
		         *
		         * @example
		         *
		         *     var ored = x64Word.or(anotherX64Word);
		         */
		        // or: function (word) {
		            // var high = this.high | word.high;
		            // var low = this.low | word.low;

		            // return X64Word.create(high, low);
		        // },

		        /**
		         * Bitwise XORs this word with the passed word.
		         *
		         * @param {X64Word} word The x64-Word to XOR with this word.
		         *
		         * @return {X64Word} A new x64-Word object after XORing.
		         *
		         * @example
		         *
		         *     var xored = x64Word.xor(anotherX64Word);
		         */
		        // xor: function (word) {
		            // var high = this.high ^ word.high;
		            // var low = this.low ^ word.low;

		            // return X64Word.create(high, low);
		        // },

		        /**
		         * Shifts this word n bits to the left.
		         *
		         * @param {number} n The number of bits to shift.
		         *
		         * @return {X64Word} A new x64-Word object after shifting.
		         *
		         * @example
		         *
		         *     var shifted = x64Word.shiftL(25);
		         */
		        // shiftL: function (n) {
		            // if (n < 32) {
		                // var high = (this.high << n) | (this.low >>> (32 - n));
		                // var low = this.low << n;
		            // } else {
		                // var high = this.low << (n - 32);
		                // var low = 0;
		            // }

		            // return X64Word.create(high, low);
		        // },

		        /**
		         * Shifts this word n bits to the right.
		         *
		         * @param {number} n The number of bits to shift.
		         *
		         * @return {X64Word} A new x64-Word object after shifting.
		         *
		         * @example
		         *
		         *     var shifted = x64Word.shiftR(7);
		         */
		        // shiftR: function (n) {
		            // if (n < 32) {
		                // var low = (this.low >>> n) | (this.high << (32 - n));
		                // var high = this.high >>> n;
		            // } else {
		                // var low = this.high >>> (n - 32);
		                // var high = 0;
		            // }

		            // return X64Word.create(high, low);
		        // },

		        /**
		         * Rotates this word n bits to the left.
		         *
		         * @param {number} n The number of bits to rotate.
		         *
		         * @return {X64Word} A new x64-Word object after rotating.
		         *
		         * @example
		         *
		         *     var rotated = x64Word.rotL(25);
		         */
		        // rotL: function (n) {
		            // return this.shiftL(n).or(this.shiftR(64 - n));
		        // },

		        /**
		         * Rotates this word n bits to the right.
		         *
		         * @param {number} n The number of bits to rotate.
		         *
		         * @return {X64Word} A new x64-Word object after rotating.
		         *
		         * @example
		         *
		         *     var rotated = x64Word.rotR(7);
		         */
		        // rotR: function (n) {
		            // return this.shiftR(n).or(this.shiftL(64 - n));
		        // },

		        /**
		         * Adds this word with the passed word.
		         *
		         * @param {X64Word} word The x64-Word to add with this word.
		         *
		         * @return {X64Word} A new x64-Word object after adding.
		         *
		         * @example
		         *
		         *     var added = x64Word.add(anotherX64Word);
		         */
		        // add: function (word) {
		            // var low = (this.low + word.low) | 0;
		            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
		            // var high = (this.high + word.high + carry) | 0;

		            // return X64Word.create(high, low);
		        // }
		    });

		    /**
		     * An array of 64-bit words.
		     *
		     * @property {Array} words The array of CryptoJS.x64.Word objects.
		     * @property {number} sigBytes The number of significant bytes in this word array.
		     */
		    var X64WordArray = C_x64.WordArray = Base.extend({
		        /**
		         * Initializes a newly created word array.
		         *
		         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
		         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.x64.WordArray.create();
		         *
		         *     var wordArray = CryptoJS.x64.WordArray.create([
		         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
		         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
		         *     ]);
		         *
		         *     var wordArray = CryptoJS.x64.WordArray.create([
		         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
		         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
		         *     ], 10);
		         */
		        init: function (words, sigBytes) {
		            words = this.words = words || [];

		            if (sigBytes != undefined) {
		                this.sigBytes = sigBytes;
		            } else {
		                this.sigBytes = words.length * 8;
		            }
		        },

		        /**
		         * Converts this 64-bit word array to a 32-bit word array.
		         *
		         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
		         *
		         * @example
		         *
		         *     var x32WordArray = x64WordArray.toX32();
		         */
		        toX32: function () {
		            // Shortcuts
		            var x64Words = this.words;
		            var x64WordsLength = x64Words.length;

		            // Convert
		            var x32Words = [];
		            for (var i = 0; i < x64WordsLength; i++) {
		                var x64Word = x64Words[i];
		                x32Words.push(x64Word.high);
		                x32Words.push(x64Word.low);
		            }

		            return X32WordArray.create(x32Words, this.sigBytes);
		        },

		        /**
		         * Creates a copy of this word array.
		         *
		         * @return {X64WordArray} The clone.
		         *
		         * @example
		         *
		         *     var clone = x64WordArray.clone();
		         */
		        clone: function () {
		            var clone = Base.clone.call(this);

		            // Clone "words" array
		            var words = clone.words = this.words.slice(0);

		            // Clone each X64Word object
		            var wordsLength = words.length;
		            for (var i = 0; i < wordsLength; i++) {
		                words[i] = words[i].clone();
		            }

		            return clone;
		        }
		    });
		}());


		return CryptoJS;

	}));

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var BN = __webpack_require__(4);
	var utils = __webpack_require__(10);
	var getNAF = utils.getNAF;
	var getJSF = utils.getJSF;
	var assert = utils.assert;

	function BaseCurve(type, conf) {
	  this.type = type;
	  this.p = new BN(conf.p, 16);

	  // Use Montgomery, when there is no fast reduction for the prime
	  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

	  // Useful for many curves
	  this.zero = new BN(0).toRed(this.red);
	  this.one = new BN(1).toRed(this.red);
	  this.two = new BN(2).toRed(this.red);

	  // Curve configuration, optional
	  this.n = conf.n && new BN(conf.n, 16);
	  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

	  // Temporary arrays
	  this._wnafT1 = new Array(4);
	  this._wnafT2 = new Array(4);
	  this._wnafT3 = new Array(4);
	  this._wnafT4 = new Array(4);

	  this._bitLength = this.n ? this.n.bitLength() : 0;

	  // Generalized Greg Maxwell's trick
	  var adjustCount = this.n && this.p.div(this.n);
	  if (!adjustCount || adjustCount.cmpn(100) > 0) {
	    this.redN = null;
	  } else {
	    this._maxwellTrick = true;
	    this.redN = this.n.toRed(this.red);
	  }
	}
	module.exports = BaseCurve;

	BaseCurve.prototype.point = function point() {
	  throw new Error('Not implemented');
	};

	BaseCurve.prototype.validate = function validate() {
	  throw new Error('Not implemented');
	};

	BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
	  assert(p.precomputed);
	  var doubles = p._getDoubles();

	  var naf = getNAF(k, 1, this._bitLength);
	  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
	  I /= 3;

	  // Translate into more windowed form
	  var repr = [];
	  for (var j = 0; j < naf.length; j += doubles.step) {
	    var nafW = 0;
	    for (var k = j + doubles.step - 1; k >= j; k--)
	      nafW = (nafW << 1) + naf[k];
	    repr.push(nafW);
	  }

	  var a = this.jpoint(null, null, null);
	  var b = this.jpoint(null, null, null);
	  for (var i = I; i > 0; i--) {
	    for (var j = 0; j < repr.length; j++) {
	      var nafW = repr[j];
	      if (nafW === i)
	        b = b.mixedAdd(doubles.points[j]);
	      else if (nafW === -i)
	        b = b.mixedAdd(doubles.points[j].neg());
	    }
	    a = a.add(b);
	  }
	  return a.toP();
	};

	BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
	  var w = 4;

	  // Precompute window
	  var nafPoints = p._getNAFPoints(w);
	  w = nafPoints.wnd;
	  var wnd = nafPoints.points;

	  // Get NAF form
	  var naf = getNAF(k, w, this._bitLength);

	  // Add `this`*(N+1) for every w-NAF index
	  var acc = this.jpoint(null, null, null);
	  for (var i = naf.length - 1; i >= 0; i--) {
	    // Count zeroes
	    for (var k = 0; i >= 0 && naf[i] === 0; i--)
	      k++;
	    if (i >= 0)
	      k++;
	    acc = acc.dblp(k);

	    if (i < 0)
	      break;
	    var z = naf[i];
	    assert(z !== 0);
	    if (p.type === 'affine') {
	      // J +- P
	      if (z > 0)
	        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
	      else
	        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
	    } else {
	      // J +- J
	      if (z > 0)
	        acc = acc.add(wnd[(z - 1) >> 1]);
	      else
	        acc = acc.add(wnd[(-z - 1) >> 1].neg());
	    }
	  }
	  return p.type === 'affine' ? acc.toP() : acc;
	};

	BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
	                                                       points,
	                                                       coeffs,
	                                                       len,
	                                                       jacobianResult) {
	  var wndWidth = this._wnafT1;
	  var wnd = this._wnafT2;
	  var naf = this._wnafT3;

	  // Fill all arrays
	  var max = 0;
	  for (var i = 0; i < len; i++) {
	    var p = points[i];
	    var nafPoints = p._getNAFPoints(defW);
	    wndWidth[i] = nafPoints.wnd;
	    wnd[i] = nafPoints.points;
	  }

	  // Comb small window NAFs
	  for (var i = len - 1; i >= 1; i -= 2) {
	    var a = i - 1;
	    var b = i;
	    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
	      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
	      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
	      max = Math.max(naf[a].length, max);
	      max = Math.max(naf[b].length, max);
	      continue;
	    }

	    var comb = [
	      points[a], /* 1 */
	      null, /* 3 */
	      null, /* 5 */
	      points[b] /* 7 */
	    ];

	    // Try to avoid Projective points, if possible
	    if (points[a].y.cmp(points[b].y) === 0) {
	      comb[1] = points[a].add(points[b]);
	      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
	    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
	      comb[1] = points[a].toJ().mixedAdd(points[b]);
	      comb[2] = points[a].add(points[b].neg());
	    } else {
	      comb[1] = points[a].toJ().mixedAdd(points[b]);
	      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
	    }

	    var index = [
	      -3, /* -1 -1 */
	      -1, /* -1 0 */
	      -5, /* -1 1 */
	      -7, /* 0 -1 */
	      0, /* 0 0 */
	      7, /* 0 1 */
	      5, /* 1 -1 */
	      1, /* 1 0 */
	      3  /* 1 1 */
	    ];

	    var jsf = getJSF(coeffs[a], coeffs[b]);
	    max = Math.max(jsf[0].length, max);
	    naf[a] = new Array(max);
	    naf[b] = new Array(max);
	    for (var j = 0; j < max; j++) {
	      var ja = jsf[0][j] | 0;
	      var jb = jsf[1][j] | 0;

	      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
	      naf[b][j] = 0;
	      wnd[a] = comb;
	    }
	  }

	  var acc = this.jpoint(null, null, null);
	  var tmp = this._wnafT4;
	  for (var i = max; i >= 0; i--) {
	    var k = 0;

	    while (i >= 0) {
	      var zero = true;
	      for (var j = 0; j < len; j++) {
	        tmp[j] = naf[j][i] | 0;
	        if (tmp[j] !== 0)
	          zero = false;
	      }
	      if (!zero)
	        break;
	      k++;
	      i--;
	    }
	    if (i >= 0)
	      k++;
	    acc = acc.dblp(k);
	    if (i < 0)
	      break;

	    for (var j = 0; j < len; j++) {
	      var z = tmp[j];
	      var p;
	      if (z === 0)
	        continue;
	      else if (z > 0)
	        p = wnd[j][(z - 1) >> 1];
	      else if (z < 0)
	        p = wnd[j][(-z - 1) >> 1].neg();

	      if (p.type === 'affine')
	        acc = acc.mixedAdd(p);
	      else
	        acc = acc.add(p);
	    }
	  }
	  // Zeroify references
	  for (var i = 0; i < len; i++)
	    wnd[i] = null;

	  if (jacobianResult)
	    return acc;
	  else
	    return acc.toP();
	};

	function BasePoint(curve, type) {
	  this.curve = curve;
	  this.type = type;
	  this.precomputed = null;
	}
	BaseCurve.BasePoint = BasePoint;

	BasePoint.prototype.eq = function eq(/*other*/) {
	  throw new Error('Not implemented');
	};

	BasePoint.prototype.validate = function validate() {
	  return this.curve.validate(this);
	};

	BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
	  bytes = utils.toArray(bytes, enc);

	  var len = this.p.byteLength();

	  // uncompressed, hybrid-odd, hybrid-even
	  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
	      bytes.length - 1 === 2 * len) {
	    if (bytes[0] === 0x06)
	      assert(bytes[bytes.length - 1] % 2 === 0);
	    else if (bytes[0] === 0x07)
	      assert(bytes[bytes.length - 1] % 2 === 1);

	    var res =  this.point(bytes.slice(1, 1 + len),
	                          bytes.slice(1 + len, 1 + 2 * len));

	    return res;
	  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
	              bytes.length - 1 === len) {
	    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
	  }
	  throw new Error('Unknown point format');
	};

	BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
	  return this.encode(enc, true);
	};

	BasePoint.prototype._encode = function _encode(compact) {
	  var len = this.curve.p.byteLength();
	  var x = this.getX().toArray('be', len);

	  if (compact)
	    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

	  return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;
	};

	BasePoint.prototype.encode = function encode(enc, compact) {
	  return utils.encode(this._encode(compact), enc);
	};

	BasePoint.prototype.precompute = function precompute(power) {
	  if (this.precomputed)
	    return this;

	  var precomputed = {
	    doubles: null,
	    naf: null,
	    beta: null
	  };
	  precomputed.naf = this._getNAFPoints(8);
	  precomputed.doubles = this._getDoubles(4, power);
	  precomputed.beta = this._getBeta();
	  this.precomputed = precomputed;

	  return this;
	};

	BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
	  if (!this.precomputed)
	    return false;

	  var doubles = this.precomputed.doubles;
	  if (!doubles)
	    return false;

	  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
	};

	BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
	  if (this.precomputed && this.precomputed.doubles)
	    return this.precomputed.doubles;

	  var doubles = [ this ];
	  var acc = this;
	  for (var i = 0; i < power; i += step) {
	    for (var j = 0; j < step; j++)
	      acc = acc.dbl();
	    doubles.push(acc);
	  }
	  return {
	    step: step,
	    points: doubles
	  };
	};

	BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
	  if (this.precomputed && this.precomputed.naf)
	    return this.precomputed.naf;

	  var res = [ this ];
	  var max = (1 << wnd) - 1;
	  var dbl = max === 1 ? null : this.dbl();
	  for (var i = 1; i < max; i++)
	    res[i] = res[i - 1].add(dbl);
	  return {
	    wnd: wnd,
	    points: res
	  };
	};

	BasePoint.prototype._getBeta = function _getBeta() {
	  return null;
	};

	BasePoint.prototype.dblp = function dblp(k) {
	  var r = this;
	  for (var i = 0; i < k; i++)
	    r = r.dbl();
	  return r;
	};


/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var hash_utils_1 = __webpack_require__(279);
	var createKeccakHash = __webpack_require__(325);
	exports.keccak224 = hash_utils_1.createHashFunction(function () {
	    return createKeccakHash("keccak224");
	});
	exports.keccak256 = hash_utils_1.createHashFunction(function () {
	    return createKeccakHash("keccak256");
	});
	exports.keccak384 = hash_utils_1.createHashFunction(function () {
	    return createKeccakHash("keccak384");
	});
	exports.keccak512 = hash_utils_1.createHashFunction(function () {
	    return createKeccakHash("keccak512");
	});
	//# sourceMappingURL=keccak.js.map

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator = (this && this.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	var secp256k1_1 = __webpack_require__(148);
	var random_1 = __webpack_require__(280);
	var SECP256K1_PRIVATE_KEY_SIZE = 32;
	function createPrivateKey() {
	    return __awaiter(this, void 0, void 0, function () {
	        var pk;
	        return __generator(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    if (false) return [3 /*break*/, 2];
	                    return [4 /*yield*/, random_1.getRandomBytes(SECP256K1_PRIVATE_KEY_SIZE)];
	                case 1:
	                    pk = _a.sent();
	                    if (secp256k1_1.privateKeyVerify(pk)) {
	                        return [2 /*return*/, pk];
	                    }
	                    return [3 /*break*/, 0];
	                case 2: return [2 /*return*/];
	            }
	        });
	    });
	}
	exports.createPrivateKey = createPrivateKey;
	function createPrivateKeySync() {
	    while (true) {
	        var pk = random_1.getRandomBytesSync(SECP256K1_PRIVATE_KEY_SIZE);
	        if (secp256k1_1.privateKeyVerify(pk)) {
	            return pk;
	        }
	    }
	}
	exports.createPrivateKeySync = createPrivateKeySync;
	__export(__webpack_require__(148));
	//# sourceMappingURL=secp256k1.js.map

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(348),
	    isLength = __webpack_require__(136);

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}

	module.exports = isArrayLike;


/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(378).nextTick;
	var apply = Function.prototype.apply;
	var slice = Array.prototype.slice;
	var immediateIds = {};
	var nextImmediateId = 0;

	// DOM APIs, for completeness

	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) { timeout.close(); };

	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};

	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};

	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};

	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);

	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};

	// That's not how node.js implements it but the exposed api is the same.
	exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
	  var id = nextImmediateId++;
	  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

	  immediateIds[id] = true;

	  nextTick(function onNextTick() {
	    if (immediateIds[id]) {
	      // fn.call() is faster so we optimize for the common use-case
	      // @see http://jsperf.com/call-apply-segu
	      if (args) {
	        fn.apply(null, args);
	      } else {
	        fn.call(null);
	      }
	      // Prevent ids from leaking
	      exports.clearImmediate(id);
	    }
	  });

	  return id;
	};

	exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
	  delete immediateIds[id];
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(66).setImmediate, __webpack_require__(66).clearImmediate))

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	/*
	    This file is part of web3.js.

	    web3.js is free software: you can redistribute it and/or modify
	    it under the terms of the GNU Lesser General Public License as published by
	    the Free Software Foundation, either version 3 of the License, or
	    (at your option) any later version.

	    web3.js is distributed in the hope that it will be useful,
	    but WITHOUT ANY WARRANTY; without even the implied warranty of
	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	    GNU Lesser General Public License for more details.

	    You should have received a copy of the GNU Lesser General Public License
	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	*/
	/** @file config.js
	 * @authors:
	 *   Marek Kotewicz <marek@ethdev.com>
	 * @date 2015
	 */

	/**
	 * Utils
	 * 
	 * @module utils
	 */

	/**
	 * Utility functions
	 * 
	 * @class [utils] config
	 * @constructor
	 */


	/// required to define ETH_BIGNUMBER_ROUNDING_MODE
	var BigNumber = __webpack_require__(42);

	var ETH_UNITS = [
	    'wei',
	    'kwei',
	    'Mwei',
	    'Gwei',
	    'szabo',
	    'finney',
	    'femtoether',
	    'picoether',
	    'nanoether',
	    'microether',
	    'milliether',
	    'nano',
	    'micro',
	    'milli',
	    'ether',
	    'grand',
	    'Mether',
	    'Gether',
	    'Tether',
	    'Pether',
	    'Eether',
	    'Zether',
	    'Yether',
	    'Nether',
	    'Dether',
	    'Vether',
	    'Uether'
	];

	module.exports = {
	    ETH_PADDING: 32,
	    ETH_SIGNATURE_LENGTH: 4,
	    ETH_UNITS: ETH_UNITS,
	    ETH_BIGNUMBER_ROUNDING_MODE: { ROUNDING_MODE: BigNumber.ROUND_DOWN },
	    ETH_POLLING_TIMEOUT: 1000/2,
	    defaultBlock: 'latest',
	    defaultAccount: undefined
	};



/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/*
	    This file is part of web3.js.

	    web3.js is free software: you can redistribute it and/or modify
	    it under the terms of the GNU Lesser General Public License as published by
	    the Free Software Foundation, either version 3 of the License, or
	    (at your option) any later version.

	    web3.js is distributed in the hope that it will be useful,
	    but WITHOUT ANY WARRANTY; without even the implied warranty of
	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	    GNU Lesser General Public License for more details.

	    You should have received a copy of the GNU Lesser General Public License
	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	*/
	/** @file filter.js
	 * @authors:
	 *   Jeffrey Wilcke <jeff@ethdev.com>
	 *   Marek Kotewicz <marek@ethdev.com>
	 *   Marian Oancea <marian@ethdev.com>
	 *   Fabian Vogelsteller <fabian@ethdev.com>
	 *   Gav Wood <g@ethdev.com>
	 * @date 2014
	 */

	var formatters = __webpack_require__(20);
	var utils = __webpack_require__(9);

	/**
	* Converts a given topic to a hex string, but also allows null values.
	*
	* @param {Mixed} value
	* @return {String}
	*/
	var toTopic = function(value){

	    if(value === null || typeof value === 'undefined')
	        return null;

	    value = String(value);

	    if(value.indexOf('0x') === 0)
	        return value;
	    else
	        return utils.fromUtf8(value);
	};

	/// This method should be called on options object, to verify deprecated properties && lazy load dynamic ones
	/// @param should be string or object
	/// @returns options string or object
	var getOptions = function (options, type) {
	    /*jshint maxcomplexity: 6 */

	    if (utils.isString(options)) {
	        return options;
	    }

	    options = options || {};


	    switch(type) {
	        case 'eth':

	            // make sure topics, get converted to hex
	            options.topics = options.topics || [];
	            options.topics = options.topics.map(function(topic){
	                return (utils.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);
	            });

	            return {
	                topics: options.topics,
	                from: options.from,
	                to: options.to,
	                address: options.address,
	                fromBlock: formatters.inputBlockNumberFormatter(options.fromBlock),
	                toBlock: formatters.inputBlockNumberFormatter(options.toBlock)
	            };
	        case 'shh':
	            return options;
	    }
	};

	/**
	Adds the callback and sets up the methods, to iterate over the results.

	@method getLogsAtStart
	@param {Object} self
	@param {function} callback
	*/
	var getLogsAtStart = function(self, callback){
	    // call getFilterLogs for the first watch callback start
	    if (!utils.isString(self.options)) {
	        self.get(function (err, messages) {
	            // don't send all the responses to all the watches again... just to self one
	            if (err) {
	                callback(err);
	            }

	            if(utils.isArray(messages)) {
	                messages.forEach(function (message) {
	                    callback(null, message);
	                });
	            }
	        });
	    }
	};

	/**
	Adds the callback and sets up the methods, to iterate over the results.

	@method pollFilter
	@param {Object} self
	*/
	var pollFilter = function(self) {

	    var onMessage = function (error, messages) {
	        if (error) {
	            return self.callbacks.forEach(function (callback) {
	                callback(error);
	            });
	        }

	        if(utils.isArray(messages)) {
	            messages.forEach(function (message) {
	                message = self.formatter ? self.formatter(message) : message;
	                self.callbacks.forEach(function (callback) {
	                    callback(null, message);
	                });
	            });
	        }
	    };

	    self.requestManager.startPolling({
	        method: self.implementation.poll.call,
	        params: [self.filterId],
	    }, self.filterId, onMessage, self.stopWatching.bind(self));

	};

	var Filter = function (options, type, requestManager, methods, formatter, callback, filterCreationErrorCallback) {
	    var self = this;
	    var implementation = {};
	    methods.forEach(function (method) {
	        method.setRequestManager(requestManager);
	        method.attachToObject(implementation);
	    });
	    this.requestManager = requestManager;
	    this.options = getOptions(options, type);
	    this.implementation = implementation;
	    this.filterId = null;
	    this.callbacks = [];
	    this.getLogsCallbacks = [];
	    this.pollFilters = [];
	    this.formatter = formatter;
	    this.implementation.newFilter(this.options, function(error, id){
	        if(error) {
	            self.callbacks.forEach(function(cb){
	                cb(error);
	            });
	            if (typeof filterCreationErrorCallback === 'function') {
	              filterCreationErrorCallback(error);
	            }
	        } else {
	            self.filterId = id;

	            // check if there are get pending callbacks as a consequence
	            // of calling get() with filterId unassigned.
	            self.getLogsCallbacks.forEach(function (cb){
	                self.get(cb);
	            });
	            self.getLogsCallbacks = [];

	            // get filter logs for the already existing watch calls
	            self.callbacks.forEach(function(cb){
	                getLogsAtStart(self, cb);
	            });
	            if(self.callbacks.length > 0)
	                pollFilter(self);

	            // start to watch immediately
	            if(typeof callback === 'function') {
	                return self.watch(callback);
	            }
	        }
	    });

	    return this;
	};

	Filter.prototype.watch = function (callback) {
	    this.callbacks.push(callback);

	    if(this.filterId) {
	        getLogsAtStart(this, callback);
	        pollFilter(this);
	    }

	    return this;
	};

	Filter.prototype.stopWatching = function (callback) {
	    this.requestManager.stopPolling(this.filterId);
	    this.callbacks = [];
	    // remove filter async
	    if (callback) {
	        this.implementation.uninstallFilter(this.filterId, callback);
	    } else {
	        return this.implementation.uninstallFilter(this.filterId);
	    }
	};

	Filter.prototype.get = function (callback) {
	    var self = this;
	    if (utils.isFunction(callback)) {
	        if (this.filterId === null) {
	            // If filterId is not set yet, call it back
	            // when newFilter() assigns it.
	            this.getLogsCallbacks.push(callback);
	        } else {
	            this.implementation.getLogs(this.filterId, function(err, res){
	                if (err) {
	                    callback(err);
	                } else {
	                    callback(null, res.map(function (log) {
	                        return self.formatter ? self.formatter(log) : log;
	                    }));
	                }
	            });
	        }
	    } else {
	        if (this.filterId === null) {
	            throw new Error('Filter ID Error: filter().get() can\'t be chained synchronous, please provide a callback for the get() method.');
	        }
	        var logs = this.implementation.getLogs(this.filterId);
	        return logs.map(function (log) {
	            return self.formatter ? self.formatter(log) : log;
	        });
	    }

	    return this;
	};

	module.exports = Filter;



/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	/*
	    This file is part of web3.js.

	    web3.js is free software: you can redistribute it and/or modify
	    it under the terms of the GNU Lesser General Public License as published by
	    the Free Software Foundation, either version 3 of the License, or
	    (at your option) any later version.

	    web3.js is distributed in the hope that it will be useful,
	    but WITHOUT ANY WARRANTY; without even the implied warranty of
	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	    GNU Lesser General Public License for more details.

	    You should have received a copy of the GNU Lesser General Public License
	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	*/
	/** 
	 * @file iban.js
	 * @author Marek Kotewicz <marek@ethdev.com>
	 * @date 2015
	 */

	var BigNumber = __webpack_require__(42);

	var padLeft = function (string, bytes) {
	    var result = string;
	    while (result.length < bytes * 2) {
	        result = '0' + result;
	    }
	    return result;
	};

	/**
	 * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to
	 * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.
	 *
	 * @method iso13616Prepare
	 * @param {String} iban the IBAN
	 * @returns {String} the prepared IBAN
	 */
	var iso13616Prepare = function (iban) {
	    var A = 'A'.charCodeAt(0);
	    var Z = 'Z'.charCodeAt(0);

	    iban = iban.toUpperCase();
	    iban = iban.substr(4) + iban.substr(0,4);

	    return iban.split('').map(function(n){
	        var code = n.charCodeAt(0);
	        if (code >= A && code <= Z){
	            // A = 10, B = 11, ... Z = 35
	            return code - A + 10;
	        } else {
	            return n;
	        }
	    }).join('');
	};

	/**
	 * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.
	 *
	 * @method mod9710
	 * @param {String} iban
	 * @returns {Number}
	 */
	var mod9710 = function (iban) {
	    var remainder = iban,
	        block;

	    while (remainder.length > 2){
	        block = remainder.slice(0, 9);
	        remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);
	    }

	    return parseInt(remainder, 10) % 97;
	};

	/**
	 * This prototype should be used to create iban object from iban correct string
	 *
	 * @param {String} iban
	 */
	var Iban = function (iban) {
	    this._iban = iban;
	};

	/**
	 * This method should be used to create iban object from ethereum address
	 *
	 * @method fromAddress
	 * @param {String} address
	 * @return {Iban} the IBAN object
	 */
	Iban.fromAddress = function (address) {
	    var asBn = new BigNumber(address, 16);
	    var base36 = asBn.toString(36);
	    var padded = padLeft(base36, 15);
	    return Iban.fromBban(padded.toUpperCase());
	};

	/**
	 * Convert the passed BBAN to an IBAN for this country specification.
	 * Please note that <i>"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account"</i>.
	 * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits
	 *
	 * @method fromBban
	 * @param {String} bban the BBAN to convert to IBAN
	 * @returns {Iban} the IBAN object
	 */
	Iban.fromBban = function (bban) {
	    var countryCode = 'XE';

	    var remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));
	    var checkDigit = ('0' + (98 - remainder)).slice(-2);

	    return new Iban(countryCode + checkDigit + bban);
	};

	/**
	 * Should be used to create IBAN object for given institution and identifier
	 *
	 * @method createIndirect
	 * @param {Object} options, required options are "institution" and "identifier"
	 * @return {Iban} the IBAN object
	 */
	Iban.createIndirect = function (options) {
	    return Iban.fromBban('ETH' + options.institution + options.identifier);
	};

	/**
	 * Thos method should be used to check if given string is valid iban object
	 *
	 * @method isValid
	 * @param {String} iban string
	 * @return {Boolean} true if it is valid IBAN
	 */
	Iban.isValid = function (iban) {
	    var i = new Iban(iban);
	    return i.isValid();
	};

	/**
	 * Should be called to check if iban is correct
	 *
	 * @method isValid
	 * @returns {Boolean} true if it is, otherwise false
	 */
	Iban.prototype.isValid = function () {
	    return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) &&
	        mod9710(iso13616Prepare(this._iban)) === 1;
	};

	/**
	 * Should be called to check if iban number is direct
	 *
	 * @method isDirect
	 * @returns {Boolean} true if it is, otherwise false
	 */
	Iban.prototype.isDirect = function () {
	    return this._iban.length === 34 || this._iban.length === 35;
	};

	/**
	 * Should be called to check if iban number if indirect
	 *
	 * @method isIndirect
	 * @returns {Boolean} true if it is, otherwise false
	 */
	Iban.prototype.isIndirect = function () {
	    return this._iban.length === 20;
	};

	/**
	 * Should be called to get iban checksum
	 * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)
	 *
	 * @method checksum
	 * @returns {String} checksum
	 */
	Iban.prototype.checksum = function () {
	    return this._iban.substr(2, 2);
	};

	/**
	 * Should be called to get institution identifier
	 * eg. XREG
	 *
	 * @method institution
	 * @returns {String} institution identifier
	 */
	Iban.prototype.institution = function () {
	    return this.isIndirect() ? this._iban.substr(7, 4) : '';
	};

	/**
	 * Should be called to get client identifier within institution
	 * eg. GAVOFYORK
	 *
	 * @method client
	 * @returns {String} client identifier
	 */
	Iban.prototype.client = function () {
	    return this.isIndirect() ? this._iban.substr(11) : '';
	};

	/**
	 * Should be called to get client direct address
	 *
	 * @method address
	 * @returns {String} client direct address
	 */
	Iban.prototype.address = function () {
	    if (this.isDirect()) {
	        var base36 = this._iban.substr(4);
	        var asBn = new BigNumber(base36, 36);
	        return padLeft(asBn.toString(16), 20);
	    } 

	    return '';
	};

	Iban.prototype.toString = function () {
	    return this._iban;
	};

	module.exports = Iban;



/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/*
	    This file is part of web3.js.

	    web3.js is free software: you can redistribute it and/or modify
	    it under the terms of the GNU Lesser General Public License as published by
	    the Free Software Foundation, either version 3 of the License, or
	    (at your option) any later version.

	    web3.js is distributed in the hope that it will be useful,
	    but WITHOUT ANY WARRANTY; without even the implied warranty of
	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	    GNU Lesser General Public License for more details.

	    You should have received a copy of the GNU Lesser General Public License
	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	*/
	/** @file watches.js
	 * @authors:
	 *   Marek Kotewicz <marek@ethdev.com>
	 * @date 2015
	 */

	var Method = __webpack_require__(29);

	/// @returns an array of objects describing web3.eth.filter api methods
	var eth = function () {
	    var newFilterCall = function (args) {
	        var type = args[0];

	        switch(type) {
	            case 'latest':
	                args.shift();
	                this.params = 0;
	                return 'eth_newBlockFilter';
	            case 'pending':
	                args.shift();
	                this.params = 0;
	                return 'eth_newPendingTransactionFilter';
	            default:
	                return 'eth_newFilter';
	        }
	    };

	    var newFilter = new Method({
	        name: 'newFilter',
	        call: newFilterCall,
	        params: 1
	    });

	    var uninstallFilter = new Method({
	        name: 'uninstallFilter',
	        call: 'eth_uninstallFilter',
	        params: 1
	    });

	    var getLogs = new Method({
	        name: 'getLogs',
	        call: 'eth_getFilterLogs',
	        params: 1
	    });

	    var poll = new Method({
	        name: 'poll',
	        call: 'eth_getFilterChanges',
	        params: 1
	    });

	    return [
	        newFilter,
	        uninstallFilter,
	        getLogs,
	        poll
	    ];
	};

	/// @returns an array of objects describing web3.shh.watch api methods
	var shh = function () {

	    return [
	        new Method({
	            name: 'newFilter',
	            call: 'shh_newMessageFilter',
	            params: 1
	        }),
	        new Method({
	            name: 'uninstallFilter',
	            call: 'shh_deleteMessageFilter',
	            params: 1
	        }),
	        new Method({
	            name: 'getLogs',
	            call: 'shh_getFilterMessages',
	            params: 1
	        }),
	        new Method({
	            name: 'poll',
	            call: 'shh_getFilterMessages',
	            params: 1
	        })
	    ];
	};

	module.exports = {
	    eth: eth,
	    shh: shh
	};



/***/ },
/* 71 */
/***/ function(module, exports) {

	module.exports = extend

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	function extend() {
	    var target = {}

	    for (var i = 0; i < arguments.length; i++) {
	        var source = arguments[i]

	        for (var key in source) {
	            if (hasOwnProperty.call(source, key)) {
	                target[key] = source[key]
	            }
	        }
	    }

	    return target
	}


/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/**
	 * Copyright (c) 2015 Ambisafe Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including the rights to use, copy, modify,
	 * merge, publish, distribute, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @file ambisafe.js
	 * Ambisafe class used to define the functions of the library
	 * @author Charlie Fontana <charlie@ambisafe.co>
	 * @date 07/13/2015
	 */
	'use strict';
	/**
	 * This section defines the required libraries
	 */
	var bitcoin = __webpack_require__(112),
	    crypto = __webpack_require__(60),
	    BigInteger = __webpack_require__(15),
	    uuid4 = __webpack_require__(385),
	    utils = __webpack_require__(166);

	/**
	 * Defines the Ambisafe constructor.
	 */
	var Ambisafe = function () {};

	/**
	 * Defines the static constants
	 */
	Ambisafe.currency = {};
	Ambisafe.currency.BITCOIN = 'BTC';


	/**
	 * Static method that creates an account and save it.
	 * This supposed to happen after user have filled registration form and clicked submit.
	 *
	 * @param {string} currency as string
	 * @param {string} password as string
	 * @param {string} salt as string
	 * @return {Ambisafe.Account} return the generated account object
	 */
	Ambisafe.generateAccount = function (currency, password, salt) {
	    var account,
	        key,
	        keyPair,
	        iv;

	    salt = salt || uuid4();

	    if (!password) {
	        throw Error('ERR: password are required');
	    }

	    key = Ambisafe.deriveKey(password, salt);

	    account = new Ambisafe.Account();
	    account.set('key', key);
	    account.set('salt', salt);

	    keyPair = Ambisafe.generateKeyPair();
	    account.set('private_key', keyPair.private_key);
	    account.set('public_key', keyPair.public_key);
	    iv = Ambisafe.generateRandomValue(16);
	    account.set('iv', iv);

	    account.set('data', Ambisafe.encrypt(
	        new Buffer(account.get('private_key'), 'hex'),
	        iv,
	        key
	    ));

	    return account;
	};

	Ambisafe.fromPrivateKey = function (privateKey, password, salt) {
	    var iv,
	        key,
	        account;
	    salt = salt || uuid4();
	    key = Ambisafe.deriveKey(password, salt);
	    account = new Ambisafe.Account();
	    account.set('private_key', privateKey);
	    account.set('public_key', (new bitcoin.ECKey(BigInteger.fromBuffer(new Buffer(privateKey, 'hex')))).pub.toHex());
	    iv = Ambisafe.generateRandomValue(16);
	    account.set('iv', iv);
	    account.set('salt', salt);
	    account.set('data', Ambisafe.encrypt(
	        new Buffer(account.get('private_key'), 'hex'),
	        iv,
	        key
	    ));
	    return account;
	};

	Ambisafe.generateKeyPair = function () {
	    var eckey = bitcoin.ECKey.makeRandom(),
	        privateKey = utils.zpad(eckey.d.toHex(), 64),
	        publicKey = utils.zpad(eckey.pub.toHex(), 64);
	    return {
	        private_key: privateKey,
	        public_key: publicKey
	    };
	};


	/**
	 * Static method that signs a transaction.
	 *
	 * @param {object} tx unsigned transaction: {hex:'...', fee:'...', sighashes:['...', '...']}.
	 * @param {string} private_key.
	 * @return {object} signed transaction.
	 */
	Ambisafe.signTransaction = function (tx, private_key) {
	    var keyPair, sign, buffer, d;

	    if (!(tx.sighashes) || !(tx.sighashes instanceof Array)) {
	        console.log('ERR: The "sighashes" attribute is required.');
	        return;
	    }

	    tx.user_signatures = [];
	    buffer = new Buffer(private_key, 'hex');
	    d = BigInteger.fromBuffer(buffer);
	    keyPair = new bitcoin.ECKey(d, true);

	    tx.sighashes.forEach(function (sighash) {
	        sign = keyPair.sign(new Buffer(sighash, 'hex')).toDER().toString('hex');
	        tx.user_signatures.push(sign);
	    });

	    return tx;
	};


	/**
	 * Static method that generates random values
	 *
	 * @param {number} length An integer
	 * @return {string} return random value
	 */
	Ambisafe.generateRandomValue = function (length) {
	    var randomBytes;

	    if (!length) {
	        length = 256 / 16;
	    }

	    randomBytes = crypto.randomBytes(Math.ceil(length));
	    return randomBytes.toString('hex');
	};

	/**
	 * Static method that derives a key from a password
	 *
	 * @param {string} password
	 * @param {string} salt
	 * @param {number} depth
	 * @return {string} key
	 */
	Ambisafe.deriveKey = function (password, salt, depth) {
	    var key;

	    if (!depth) {
	        depth = 1000;
	    }

	    key = crypto.pbkdf2Sync(password, salt, depth, 32, 'sha512');

	    return key.toString('hex');
	};

	/**
	 * Static method that encrypts an input based on the Advanced Encryption Standard (AES)
	 *
	 * @param {string} cleardata
	 * @param {string} iv
	 * @param {string} cryptkey
	 * @return {string} encrypted data
	 */
	Ambisafe.encrypt = function (cleardata, iv, cryptkey) {
	    var encipher, encryptData, encodeEncryptData, bufferCryptKey;

	    bufferCryptKey = new Buffer(cryptkey, 'hex');

	    encipher = crypto.createCipheriv('aes-256-cbc', bufferCryptKey, new Buffer(iv, 'hex'));
	    encryptData  = encipher.update(cleardata, 'utf8', 'binary');

	    encryptData += encipher.final('binary');
	    encodeEncryptData = new Buffer(encryptData, 'binary').toString('hex');

	    return encodeEncryptData;
	};

	/**
	 * Static method that decrypts an input based on the Advanced Encryption Standard (AES)
	 *
	 * @param {string} encryptdata
	 * @param {string} iv
	 * @param {string} cryptkey
	 * @return {string} decrypted text
	 */
	Ambisafe.decrypt = function (encryptdata, iv, cryptkey) {
	    var decipher, decoded, bufferCryptKey;

	    bufferCryptKey = new Buffer(cryptkey, 'hex');

	    decipher = crypto.createDecipheriv('aes-256-cbc', bufferCryptKey, new Buffer(iv, 'hex'));
	    decoded  = Buffer.concat([decipher.update(new Buffer(encryptdata, 'hex')), decipher.final()]);
	    return decoded;
	};

	/**
	 * Static method that gets the SHA1 hash of a string
	 *
	 * @param {string} input
	 * @return {string} SHA1 hash
	 */
	Ambisafe.SHA1 = function (input) {
	    var shasum = crypto.createHash('sha1');

	    shasum.update(input);

	    return shasum.digest('hex');
	};

	/**
	 * exports the created Ambisafe object.
	 */
	var exports = module.exports = Ambisafe;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 73 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = once;
	function once(fn) {
	    return function () {
	        if (fn === null) return;
	        var callFn = fn;
	        fn = null;
	        callFn.apply(this, arguments);
	    };
	}
	module.exports = exports["default"];

/***/ },
/* 74 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = onlyOnce;
	function onlyOnce(fn) {
	    return function () {
	        if (fn === null) throw new Error("Callback was already called.");
	        var callFn = fn;
	        fn = null;
	        callFn.apply(this, arguments);
	    };
	}
	module.exports = exports["default"];

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

	function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

	const SafeEventEmitter = __webpack_require__(147);

	class BaseFilter extends SafeEventEmitter {
	  constructor() {
	    super();
	    this.updates = [];
	  }

	  initialize() {
	    return _asyncToGenerator(function* () {})();
	  }

	  update() {
	    return _asyncToGenerator(function* () {
	      throw new Error('BaseFilter - no update method specified');
	    })();
	  }

	  addResults(newResults) {
	    this.updates = this.updates.concat(newResults);
	    newResults.forEach(result => this.emit('update', result));
	  }

	  addInitialResults(newResults) {}

	  getChangesAndClear() {
	    const updates = this.updates;
	    this.updates = [];
	    return updates;
	  }

	}

	module.exports = BaseFilter;

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

	function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	var ethUtil = __webpack_require__(198);

	var fees = __webpack_require__(315);

	var BN = ethUtil.BN; // secp256k1n/2

	var N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
	/**
	 * Creates a new transaction object.
	 *
	 * @example
	 * var rawTx = {
	 *   nonce: '00',
	 *   gasPrice: '09184e72a000',
	 *   gasLimit: '2710',
	 *   to: '0000000000000000000000000000000000000000',
	 *   value: '00',
	 *   data: '7f7465737432000000000000000000000000000000000000000000000000000000600057',
	 *   v: '1c',
	 *   r: '5e1d3a76fbf824220eafc8c79ad578ad2b67d01b0c2425eb1f1347e8f50882ab',
	 *   s: '5bd428537f05f9830e93792f90ea6a3e2d1ee84952dd96edbae9f658f831ab13'
	 * };
	 * var tx = new Transaction(rawTx);
	 *
	 * @class
	 * @param {Buffer | Array | Object} data a transaction can be initiailized with either a buffer containing the RLP serialized transaction or an array of buffers relating to each of the tx Properties, listed in order below in the exmple.
	 *
	 * Or lastly an Object containing the Properties of the transaction like in the Usage example.
	 *
	 * For Object and Arrays each of the elements can either be a Buffer, a hex-prefixed (0x) String , Number, or an object with a toBuffer method such as Bignum
	 *
	 * @property {Buffer} raw The raw rlp encoded transaction
	 * @param {Buffer} data.nonce nonce number
	 * @param {Buffer} data.gasLimit transaction gas limit
	 * @param {Buffer} data.gasPrice transaction gas price
	 * @param {Buffer} data.to to the to address
	 * @param {Buffer} data.value the amount of ether sent
	 * @param {Buffer} data.data this will contain the data of the message or the init of a contract
	 * @param {Buffer} data.v EC signature parameter
	 * @param {Buffer} data.r EC signature parameter
	 * @param {Buffer} data.s EC recovery ID
	 * @param {Number} data.chainId EIP 155 chainId - mainnet: 1, ropsten: 3
	 * */

	var Transaction = function () {
	  function Transaction(data) {
	    _classCallCheck(this, Transaction);

	    data = data || {}; // Define Properties

	    var fields = [{
	      name: 'nonce',
	      length: 32,
	      allowLess: true,
	      default: new Buffer([])
	    }, {
	      name: 'gasPrice',
	      length: 32,
	      allowLess: true,
	      default: new Buffer([])
	    }, {
	      name: 'gasLimit',
	      alias: 'gas',
	      length: 32,
	      allowLess: true,
	      default: new Buffer([])
	    }, {
	      name: 'to',
	      allowZero: true,
	      length: 20,
	      default: new Buffer([])
	    }, {
	      name: 'value',
	      length: 32,
	      allowLess: true,
	      default: new Buffer([])
	    }, {
	      name: 'data',
	      alias: 'input',
	      allowZero: true,
	      default: new Buffer([])
	    }, {
	      name: 'v',
	      allowZero: true,
	      default: new Buffer([0x1c])
	    }, {
	      name: 'r',
	      length: 32,
	      allowZero: true,
	      allowLess: true,
	      default: new Buffer([])
	    }, {
	      name: 's',
	      length: 32,
	      allowZero: true,
	      allowLess: true,
	      default: new Buffer([])
	    }];
	    /**
	     * Returns the rlp encoding of the transaction
	     * @method serialize
	     * @return {Buffer}
	     * @memberof Transaction
	     * @name serialize
	     */
	    // attached serialize

	    ethUtil.defineProperties(this, fields, data);
	    /**
	     * @property {Buffer} from (read only) sender address of this transaction, mathematically derived from other parameters.
	     * @name from
	     * @memberof Transaction
	     */

	    Object.defineProperty(this, 'from', {
	      enumerable: true,
	      configurable: true,
	      get: this.getSenderAddress.bind(this)
	    }); // calculate chainId from signature

	    var sigV = ethUtil.bufferToInt(this.v);
	    var chainId = Math.floor((sigV - 35) / 2);
	    if (chainId < 0) chainId = 0; // set chainId

	    this._chainId = chainId || data.chainId || 0;
	    this._homestead = true;
	  }
	  /**
	   * If the tx's `to` is to the creation address
	   * @return {Boolean}
	   */


	  Transaction.prototype.toCreationAddress = function toCreationAddress() {
	    return this.to.toString('hex') === '';
	  };
	  /**
	   * Computes a sha3-256 hash of the serialized tx
	   * @param {Boolean} [includeSignature=true] whether or not to inculde the signature
	   * @return {Buffer}
	   */


	  Transaction.prototype.hash = function hash(includeSignature) {
	    if (includeSignature === undefined) includeSignature = true; // EIP155 spec:
	    // when computing the hash of a transaction for purposes of signing or recovering,
	    // instead of hashing only the first six elements (ie. nonce, gasprice, startgas, to, value, data),
	    // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0

	    var items = void 0;

	    if (includeSignature) {
	      items = this.raw;
	    } else {
	      if (this._chainId > 0) {
	        var raw = this.raw.slice();
	        this.v = this._chainId;
	        this.r = 0;
	        this.s = 0;
	        items = this.raw;
	        this.raw = raw;
	      } else {
	        items = this.raw.slice(0, 6);
	      }
	    } // create hash


	    return ethUtil.rlphash(items);
	  };
	  /**
	   * returns the public key of the sender
	   * @return {Buffer}
	   */


	  Transaction.prototype.getChainId = function getChainId() {
	    return this._chainId;
	  };
	  /**
	   * returns the sender's address
	   * @return {Buffer}
	   */


	  Transaction.prototype.getSenderAddress = function getSenderAddress() {
	    if (this._from) {
	      return this._from;
	    }

	    var pubkey = this.getSenderPublicKey();
	    this._from = ethUtil.publicToAddress(pubkey);
	    return this._from;
	  };
	  /**
	   * returns the public key of the sender
	   * @return {Buffer}
	   */


	  Transaction.prototype.getSenderPublicKey = function getSenderPublicKey() {
	    if (!this._senderPubKey || !this._senderPubKey.length) {
	      if (!this.verifySignature()) throw new Error('Invalid Signature');
	    }

	    return this._senderPubKey;
	  };
	  /**
	   * Determines if the signature is valid
	   * @return {Boolean}
	   */


	  Transaction.prototype.verifySignature = function verifySignature() {
	    var msgHash = this.hash(false); // All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.

	    if (this._homestead && new BN(this.s).cmp(N_DIV_2) === 1) {
	      return false;
	    }

	    try {
	      var v = ethUtil.bufferToInt(this.v);

	      if (this._chainId > 0) {
	        v -= this._chainId * 2 + 8;
	      }

	      this._senderPubKey = ethUtil.ecrecover(msgHash, v, this.r, this.s);
	    } catch (e) {
	      return false;
	    }

	    return !!this._senderPubKey;
	  };
	  /**
	   * sign a transaction with a given a private key
	   * @param {Buffer} privateKey
	   */


	  Transaction.prototype.sign = function sign(privateKey) {
	    var msgHash = this.hash(false);
	    var sig = ethUtil.ecsign(msgHash, privateKey);

	    if (this._chainId > 0) {
	      sig.v += this._chainId * 2 + 8;
	    }

	    _extends(this, sig);
	  };
	  /**
	   * The amount of gas paid for the data in this tx
	   * @return {BN}
	   */


	  Transaction.prototype.getDataFee = function getDataFee() {
	    var data = this.raw[5];
	    var cost = new BN(0);

	    for (var i = 0; i < data.length; i++) {
	      data[i] === 0 ? cost.iaddn(fees.txDataZeroGas.v) : cost.iaddn(fees.txDataNonZeroGas.v);
	    }

	    return cost;
	  };
	  /**
	   * the minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)
	   * @return {BN}
	   */


	  Transaction.prototype.getBaseFee = function getBaseFee() {
	    var fee = this.getDataFee().iaddn(fees.txGas.v);

	    if (this._homestead && this.toCreationAddress()) {
	      fee.iaddn(fees.txCreation.v);
	    }

	    return fee;
	  };
	  /**
	   * the up front amount that an account must have for this transaction to be valid
	   * @return {BN}
	   */


	  Transaction.prototype.getUpfrontCost = function getUpfrontCost() {
	    return new BN(this.gasLimit).imul(new BN(this.gasPrice)).iadd(new BN(this.value));
	  };
	  /**
	   * validates the signature and checks to see if it has enough gas
	   * @param {Boolean} [stringError=false] whether to return a string with a dscription of why the validation failed or return a Bloolean
	   * @return {Boolean|String}
	   */


	  Transaction.prototype.validate = function validate(stringError) {
	    var errors = [];

	    if (!this.verifySignature()) {
	      errors.push('Invalid Signature');
	    }

	    if (this.getBaseFee().cmp(new BN(this.gasLimit)) > 0) {
	      errors.push(['gas limit is too low. Need at least ' + this.getBaseFee()]);
	    }

	    if (stringError === undefined || stringError === false) {
	      return errors.length === 0;
	    } else {
	      return errors.join(' ');
	    }
	  };

	  return Transaction;
	}();

	module.exports = Transaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var assert = __webpack_require__(5)
	var bufferutils = __webpack_require__(30)
	var crypto = __webpack_require__(23)
	var typeForce = __webpack_require__(14)
	var opcodes = __webpack_require__(32)
	var scripts = __webpack_require__(58)

	var Address = __webpack_require__(56)
	var ECSignature = __webpack_require__(31)
	var Script = __webpack_require__(44)

	function Transaction () {
	  this.version = 1
	  this.locktime = 0
	  this.ins = []
	  this.outs = []
	}

	Transaction.DEFAULT_SEQUENCE = 0xffffffff
	Transaction.SIGHASH_ALL = 0x01
	Transaction.SIGHASH_NONE = 0x02
	Transaction.SIGHASH_SINGLE = 0x03
	Transaction.SIGHASH_ANYONECANPAY = 0x80

	Transaction.fromBuffer = function (buffer, __disableAssert) {
	  var offset = 0
	  function readSlice (n) {
	    offset += n
	    return buffer.slice(offset - n, offset)
	  }

	  function readUInt32 () {
	    var i = buffer.readUInt32LE(offset)
	    offset += 4
	    return i
	  }

	  function readUInt64 () {
	    var i = bufferutils.readUInt64LE(buffer, offset)
	    offset += 8
	    return i
	  }

	  function readVarInt () {
	    var vi = bufferutils.readVarInt(buffer, offset)
	    offset += vi.size
	    return vi.number
	  }

	  function readScript () {
	    return Script.fromBuffer(readSlice(readVarInt()))
	  }

	  function readGenerationScript () {
	    return new Script(readSlice(readVarInt()), [])
	  }

	  var tx = new Transaction()
	  tx.version = readUInt32()

	  var vinLen = readVarInt()
	  for (var i = 0; i < vinLen; ++i) {
	    var hash = readSlice(32)

	    if (Transaction.isCoinbaseHash(hash)) {
	      tx.ins.push({
	        hash: hash,
	        index: readUInt32(),
	        script: readGenerationScript(),
	        sequence: readUInt32()
	      })
	    } else {
	      tx.ins.push({
	        hash: hash,
	        index: readUInt32(),
	        script: readScript(),
	        sequence: readUInt32()
	      })
	    }
	  }

	  var voutLen = readVarInt()
	  for (i = 0; i < voutLen; ++i) {
	    tx.outs.push({
	      value: readUInt64(),
	      script: readScript()
	    })
	  }

	  tx.locktime = readUInt32()

	  if (!__disableAssert) {
	    assert.equal(offset, buffer.length, 'Transaction has unexpected data')
	  }

	  return tx
	}

	Transaction.fromHex = function (hex) {
	  return Transaction.fromBuffer(new Buffer(hex, 'hex'))
	}

	Transaction.isCoinbaseHash = function (buffer) {
	  return Array.prototype.every.call(buffer, function (x) {
	    return x === 0
	  })
	}

	/**
	 * Create a new txIn.
	 *
	 * Can be called with any of:
	 *
	 * - A transaction and an index
	 * - A transaction hash and an index
	 *
	 * Note that this method does not sign the created input.
	 */
	Transaction.prototype.addInput = function (hash, index, sequence, script) {
	  if (sequence === undefined || sequence === null) {
	    sequence = Transaction.DEFAULT_SEQUENCE
	  }

	  script = script || Script.EMPTY

	  if (typeof hash === 'string') {
	    // TxId hex is big-endian, we need little-endian
	    hash = bufferutils.reverse(new Buffer(hash, 'hex'))
	  } else if (hash instanceof Transaction) {
	    hash = hash.getHash()
	  }

	  typeForce('Buffer', hash)
	  typeForce('Number', index)
	  typeForce('Number', sequence)
	  typeForce('Script', script)

	  assert.equal(hash.length, 32, 'Expected hash length of 32, got ' + hash.length)

	  // Add the input and return the input's index
	  return (this.ins.push({
	    hash: hash,
	    index: index,
	    script: script,
	    sequence: sequence
	  }) - 1)
	}

	/**
	 * Create a new txOut.
	 *
	 * Can be called with:
	 *
	 * - A base58 address string and a value
	 * - An Address object and a value
	 * - A scriptPubKey Script and a value
	 */
	Transaction.prototype.addOutput = function (scriptPubKey, value) {
	  // Attempt to get a valid address if it's a base58 address string
	  if (typeof scriptPubKey === 'string') {
	    scriptPubKey = Address.fromBase58Check(scriptPubKey)
	  }

	  // Attempt to get a valid script if it's an Address object
	  if (scriptPubKey instanceof Address) {
	    scriptPubKey = scriptPubKey.toOutputScript()
	  }

	  typeForce('Script', scriptPubKey)
	  typeForce('Number', value)

	  // Add the output and return the output's index
	  return (this.outs.push({
	    script: scriptPubKey,
	    value: value
	  }) - 1)
	}

	Transaction.prototype.clone = function () {
	  var newTx = new Transaction()
	  newTx.version = this.version
	  newTx.locktime = this.locktime

	  newTx.ins = this.ins.map(function (txIn) {
	    return {
	      hash: txIn.hash,
	      index: txIn.index,
	      script: txIn.script,
	      sequence: txIn.sequence
	    }
	  })

	  newTx.outs = this.outs.map(function (txOut) {
	    return {
	      script: txOut.script,
	      value: txOut.value
	    }
	  })

	  return newTx
	}

	/**
	 * Hash transaction for signing a specific input.
	 *
	 * Bitcoin uses a different hash for each signed transaction input. This
	 * method copies the transaction, makes the necessary changes based on the
	 * hashType, serializes and finally hashes the result. This hash can then be
	 * used to sign the transaction input in question.
	 */
	Transaction.prototype.hashForSignature = function (inIndex, prevOutScript, hashType) {
	  // FIXME: remove in 2.x.y
	  if (arguments[0] instanceof Script) {
	    console.warn('hashForSignature(prevOutScript, inIndex, ...) has been deprecated. Use hashForSignature(inIndex, prevOutScript, ...)')

	    // swap the arguments (must be stored in tmp, arguments is special)
	    var tmp = arguments[0]
	    inIndex = arguments[1]
	    prevOutScript = tmp
	  }

	  typeForce('Number', inIndex)
	  typeForce('Script', prevOutScript)
	  typeForce('Number', hashType)

	  assert(inIndex >= 0, 'Invalid vin index')
	  assert(inIndex < this.ins.length, 'Invalid vin index')

	  var txTmp = this.clone()
	  var hashScript = prevOutScript.without(opcodes.OP_CODESEPARATOR)

	  // Blank out other inputs' signatures
	  txTmp.ins.forEach(function (txIn) {
	    txIn.script = Script.EMPTY
	  })
	  txTmp.ins[inIndex].script = hashScript

	  var hashTypeModifier = hashType & 0x1f

	  if (hashTypeModifier === Transaction.SIGHASH_NONE) {
	    assert(false, 'SIGHASH_NONE not yet supported')
	  } else if (hashTypeModifier === Transaction.SIGHASH_SINGLE) {
	    assert(false, 'SIGHASH_SINGLE not yet supported')
	  }

	  if (hashType & Transaction.SIGHASH_ANYONECANPAY) {
	    assert(false, 'SIGHASH_ANYONECANPAY not yet supported')
	  }

	  var hashTypeBuffer = new Buffer(4)
	  hashTypeBuffer.writeInt32LE(hashType, 0)

	  var buffer = Buffer.concat([txTmp.toBuffer(), hashTypeBuffer])
	  return crypto.hash256(buffer)
	}

	Transaction.prototype.getHash = function () {
	  return crypto.hash256(this.toBuffer())
	}

	Transaction.prototype.getId = function () {
	  // TxHash is little-endian, we need big-endian
	  return bufferutils.reverse(this.getHash()).toString('hex')
	}

	Transaction.prototype.toBuffer = function () {
	  function scriptSize (script) {
	    var length = script.buffer.length

	    return bufferutils.varIntSize(length) + length
	  }

	  var buffer = new Buffer(
	    8 +
	    bufferutils.varIntSize(this.ins.length) +
	    bufferutils.varIntSize(this.outs.length) +
	    this.ins.reduce(function (sum, input) { return sum + 40 + scriptSize(input.script) }, 0) +
	    this.outs.reduce(function (sum, output) { return sum + 8 + scriptSize(output.script) }, 0)
	  )

	  var offset = 0
	  function writeSlice (slice) {
	    slice.copy(buffer, offset)
	    offset += slice.length
	  }

	  function writeUInt32 (i) {
	    buffer.writeUInt32LE(i, offset)
	    offset += 4
	  }

	  function writeUInt64 (i) {
	    bufferutils.writeUInt64LE(buffer, i, offset)
	    offset += 8
	  }

	  function writeVarInt (i) {
	    var n = bufferutils.writeVarInt(buffer, i, offset)
	    offset += n
	  }

	  writeUInt32(this.version)
	  writeVarInt(this.ins.length)

	  this.ins.forEach(function (txIn) {
	    writeSlice(txIn.hash)
	    writeUInt32(txIn.index)
	    writeVarInt(txIn.script.buffer.length)
	    writeSlice(txIn.script.buffer)
	    writeUInt32(txIn.sequence)
	  })

	  writeVarInt(this.outs.length)
	  this.outs.forEach(function (txOut) {
	    writeUInt64(txOut.value)
	    writeVarInt(txOut.script.buffer.length)
	    writeSlice(txOut.script.buffer)
	  })

	  writeUInt32(this.locktime)

	  return buffer
	}

	Transaction.prototype.toHex = function () {
	  return this.toBuffer().toString('hex')
	}

	Transaction.prototype.setInputScript = function (index, script) {
	  typeForce('Number', index)
	  typeForce('Script', script)

	  this.ins[index].script = script
	}

	// FIXME: remove in 2.x.y
	Transaction.prototype.sign = function (index, privKey, hashType) {
	  console.warn('Transaction.prototype.sign is deprecated.  Use TransactionBuilder instead.')

	  var prevOutScript = privKey.pub.getAddress().toOutputScript()
	  var signature = this.signInput(index, prevOutScript, privKey, hashType)

	  var scriptSig = scripts.pubKeyHashInput(signature, privKey.pub)
	  this.setInputScript(index, scriptSig)
	}

	// FIXME: remove in 2.x.y
	Transaction.prototype.signInput = function (index, prevOutScript, privKey, hashType) {
	  console.warn('Transaction.prototype.signInput is deprecated.  Use TransactionBuilder instead.')

	  hashType = hashType || Transaction.SIGHASH_ALL

	  var hash = this.hashForSignature(index, prevOutScript, hashType)
	  var signature = privKey.sign(hash)

	  return signature.toScriptSignature(hashType)
	}

	// FIXME: remove in 2.x.y
	Transaction.prototype.validateInput = function (index, prevOutScript, pubKey, buffer) {
	  console.warn('Transaction.prototype.validateInput is deprecated.  Use TransactionBuilder instead.')

	  var parsed = ECSignature.parseScriptSignature(buffer)
	  var hash = this.hashForSignature(index, prevOutScript, parsed.hashType)

	  return pubKey.verify(hash, parsed.signature)
	}

	module.exports = Transaction

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	var Buffer = __webpack_require__(6).Buffer
	var Transform = __webpack_require__(16).Transform
	var StringDecoder = __webpack_require__(95).StringDecoder
	var inherits = __webpack_require__(3)

	function CipherBase (hashMode) {
	  Transform.call(this)
	  this.hashMode = typeof hashMode === 'string'
	  if (this.hashMode) {
	    this[hashMode] = this._finalOrDigest
	  } else {
	    this.final = this._finalOrDigest
	  }
	  if (this._final) {
	    this.__final = this._final
	    this._final = null
	  }
	  this._decoder = null
	  this._encoding = null
	}
	inherits(CipherBase, Transform)

	CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
	  if (typeof data === 'string') {
	    data = Buffer.from(data, inputEnc)
	  }

	  var outData = this._update(data)
	  if (this.hashMode) return this

	  if (outputEnc) {
	    outData = this._toString(outData, outputEnc)
	  }

	  return outData
	}

	CipherBase.prototype.setAutoPadding = function () {}
	CipherBase.prototype.getAuthTag = function () {
	  throw new Error('trying to get auth tag in unsupported state')
	}

	CipherBase.prototype.setAuthTag = function () {
	  throw new Error('trying to set auth tag in unsupported state')
	}

	CipherBase.prototype.setAAD = function () {
	  throw new Error('trying to set aad in unsupported state')
	}

	CipherBase.prototype._transform = function (data, _, next) {
	  var err
	  try {
	    if (this.hashMode) {
	      this._update(data)
	    } else {
	      this.push(this._update(data))
	    }
	  } catch (e) {
	    err = e
	  } finally {
	    next(err)
	  }
	}
	CipherBase.prototype._flush = function (done) {
	  var err
	  try {
	    this.push(this.__final())
	  } catch (e) {
	    err = e
	  }

	  done(err)
	}
	CipherBase.prototype._finalOrDigest = function (outputEnc) {
	  var outData = this.__final() || Buffer.alloc(0)
	  if (outputEnc) {
	    outData = this._toString(outData, outputEnc, true)
	  }
	  return outData
	}

	CipherBase.prototype._toString = function (value, enc, fin) {
	  if (!this._decoder) {
	    this._decoder = new StringDecoder(enc)
	    this._encoding = enc
	  }

	  if (this._encoding !== enc) throw new Error('can\'t switch encodings')

	  var out = this._decoder.write(value)
	  if (fin) {
	    out += this._decoder.end()
	  }

	  return out
	}

	module.exports = CipherBase


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	var inherits = __webpack_require__(3)
	var Legacy = __webpack_require__(226)
	var Base = __webpack_require__(78)
	var Buffer = __webpack_require__(6).Buffer
	var md5 = __webpack_require__(225)
	var RIPEMD160 = __webpack_require__(146)

	var sha = __webpack_require__(149)

	var ZEROS = Buffer.alloc(128)

	function Hmac (alg, key) {
	  Base.call(this, 'digest')
	  if (typeof key === 'string') {
	    key = Buffer.from(key)
	  }

	  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

	  this._alg = alg
	  this._key = key
	  if (key.length > blocksize) {
	    var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
	    key = hash.update(key).digest()
	  } else if (key.length < blocksize) {
	    key = Buffer.concat([key, ZEROS], blocksize)
	  }

	  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
	  var opad = this._opad = Buffer.allocUnsafe(blocksize)

	  for (var i = 0; i < blocksize; i++) {
	    ipad[i] = key[i] ^ 0x36
	    opad[i] = key[i] ^ 0x5C
	  }
	  this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
	  this._hash.update(ipad)
	}

	inherits(Hmac, Base)

	Hmac.prototype._update = function (data) {
	  this._hash.update(data)
	}

	Hmac.prototype._final = function () {
	  var h = this._hash.digest()
	  var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)
	  return hash.update(this._opad).update(h).digest()
	}

	module.exports = function createHmac (alg, key) {
	  alg = alg.toLowerCase()
	  if (alg === 'rmd160' || alg === 'ripemd160') {
	    return new Hmac('rmd160', key)
	  }
	  if (alg === 'md5') {
	    return new Legacy(md5, key)
	  }
	  return new Hmac(alg, key)
	}


/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var Base = C_lib.Base;
		    var C_enc = C.enc;
		    var Utf8 = C_enc.Utf8;
		    var C_algo = C.algo;

		    /**
		     * HMAC algorithm.
		     */
		    var HMAC = C_algo.HMAC = Base.extend({
		        /**
		         * Initializes a newly created HMAC.
		         *
		         * @param {Hasher} hasher The hash algorithm to use.
		         * @param {WordArray|string} key The secret key.
		         *
		         * @example
		         *
		         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
		         */
		        init: function (hasher, key) {
		            // Init hasher
		            hasher = this._hasher = new hasher.init();

		            // Convert string to WordArray, else assume WordArray already
		            if (typeof key == 'string') {
		                key = Utf8.parse(key);
		            }

		            // Shortcuts
		            var hasherBlockSize = hasher.blockSize;
		            var hasherBlockSizeBytes = hasherBlockSize * 4;

		            // Allow arbitrary length keys
		            if (key.sigBytes > hasherBlockSizeBytes) {
		                key = hasher.finalize(key);
		            }

		            // Clamp excess bits
		            key.clamp();

		            // Clone key for inner and outer pads
		            var oKey = this._oKey = key.clone();
		            var iKey = this._iKey = key.clone();

		            // Shortcuts
		            var oKeyWords = oKey.words;
		            var iKeyWords = iKey.words;

		            // XOR keys with pad constants
		            for (var i = 0; i < hasherBlockSize; i++) {
		                oKeyWords[i] ^= 0x5c5c5c5c;
		                iKeyWords[i] ^= 0x36363636;
		            }
		            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;

		            // Set initial values
		            this.reset();
		        },

		        /**
		         * Resets this HMAC to its initial state.
		         *
		         * @example
		         *
		         *     hmacHasher.reset();
		         */
		        reset: function () {
		            // Shortcut
		            var hasher = this._hasher;

		            // Reset
		            hasher.reset();
		            hasher.update(this._iKey);
		        },

		        /**
		         * Updates this HMAC with a message.
		         *
		         * @param {WordArray|string} messageUpdate The message to append.
		         *
		         * @return {HMAC} This HMAC instance.
		         *
		         * @example
		         *
		         *     hmacHasher.update('message');
		         *     hmacHasher.update(wordArray);
		         */
		        update: function (messageUpdate) {
		            this._hasher.update(messageUpdate);

		            // Chainable
		            return this;
		        },

		        /**
		         * Finalizes the HMAC computation.
		         * Note that the finalize operation is effectively a destructive, read-once operation.
		         *
		         * @param {WordArray|string} messageUpdate (Optional) A final message update.
		         *
		         * @return {WordArray} The HMAC.
		         *
		         * @example
		         *
		         *     var hmac = hmacHasher.finalize();
		         *     var hmac = hmacHasher.finalize('message');
		         *     var hmac = hmacHasher.finalize(wordArray);
		         */
		        finalize: function (messageUpdate) {
		            // Shortcut
		            var hasher = this._hasher;

		            // Compute HMAC
		            var innerHash = hasher.finalize(messageUpdate);
		            hasher.reset();
		            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));

		            return hmac;
		        }
		    });
		}());


	}));

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var Hasher = C_lib.Hasher;
		    var C_algo = C.algo;

		    // Reusable object
		    var W = [];

		    /**
		     * SHA-1 hash algorithm.
		     */
		    var SHA1 = C_algo.SHA1 = Hasher.extend({
		        _doReset: function () {
		            this._hash = new WordArray.init([
		                0x67452301, 0xefcdab89,
		                0x98badcfe, 0x10325476,
		                0xc3d2e1f0
		            ]);
		        },

		        _doProcessBlock: function (M, offset) {
		            // Shortcut
		            var H = this._hash.words;

		            // Working variables
		            var a = H[0];
		            var b = H[1];
		            var c = H[2];
		            var d = H[3];
		            var e = H[4];

		            // Computation
		            for (var i = 0; i < 80; i++) {
		                if (i < 16) {
		                    W[i] = M[offset + i] | 0;
		                } else {
		                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
		                    W[i] = (n << 1) | (n >>> 31);
		                }

		                var t = ((a << 5) | (a >>> 27)) + e + W[i];
		                if (i < 20) {
		                    t += ((b & c) | (~b & d)) + 0x5a827999;
		                } else if (i < 40) {
		                    t += (b ^ c ^ d) + 0x6ed9eba1;
		                } else if (i < 60) {
		                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;
		                } else /* if (i < 80) */ {
		                    t += (b ^ c ^ d) - 0x359d3e2a;
		                }

		                e = d;
		                d = c;
		                c = (b << 30) | (b >>> 2);
		                b = a;
		                a = t;
		            }

		            // Intermediate hash value
		            H[0] = (H[0] + a) | 0;
		            H[1] = (H[1] + b) | 0;
		            H[2] = (H[2] + c) | 0;
		            H[3] = (H[3] + d) | 0;
		            H[4] = (H[4] + e) | 0;
		        },

		        _doFinalize: function () {
		            // Shortcuts
		            var data = this._data;
		            var dataWords = data.words;

		            var nBitsTotal = this._nDataBytes * 8;
		            var nBitsLeft = data.sigBytes * 8;

		            // Add padding
		            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
		            data.sigBytes = dataWords.length * 4;

		            // Hash final blocks
		            this._process();

		            // Return final computed hash
		            return this._hash;
		        },

		        clone: function () {
		            var clone = Hasher.clone.call(this);
		            clone._hash = this._hash.clone();

		            return clone;
		        }
		    });

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.SHA1('message');
		     *     var hash = CryptoJS.SHA1(wordArray);
		     */
		    C.SHA1 = Hasher._createHelper(SHA1);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacSHA1(message, key);
		     */
		    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
		}());


		return CryptoJS.SHA1;

	}));

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var curves = exports;

	var hash = __webpack_require__(86);
	var curve = __webpack_require__(121);
	var utils = __webpack_require__(10);

	var assert = utils.assert;

	function PresetCurve(options) {
	  if (options.type === 'short')
	    this.curve = new curve.short(options);
	  else if (options.type === 'edwards')
	    this.curve = new curve.edwards(options);
	  else
	    this.curve = new curve.mont(options);
	  this.g = this.curve.g;
	  this.n = this.curve.n;
	  this.hash = options.hash;

	  assert(this.g.validate(), 'Invalid curve');
	  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
	}
	curves.PresetCurve = PresetCurve;

	function defineCurve(name, options) {
	  Object.defineProperty(curves, name, {
	    configurable: true,
	    enumerable: true,
	    get: function() {
	      var curve = new PresetCurve(options);
	      Object.defineProperty(curves, name, {
	        configurable: true,
	        enumerable: true,
	        value: curve
	      });
	      return curve;
	    }
	  });
	}

	defineCurve('p192', {
	  type: 'short',
	  prime: 'p192',
	  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
	  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
	  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
	  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
	  hash: hash.sha256,
	  gRed: false,
	  g: [
	    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
	    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
	  ]
	});

	defineCurve('p224', {
	  type: 'short',
	  prime: 'p224',
	  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
	  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
	  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
	  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
	  hash: hash.sha256,
	  gRed: false,
	  g: [
	    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
	    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
	  ]
	});

	defineCurve('p256', {
	  type: 'short',
	  prime: null,
	  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
	  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
	  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
	  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
	  hash: hash.sha256,
	  gRed: false,
	  g: [
	    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
	    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
	  ]
	});

	defineCurve('p384', {
	  type: 'short',
	  prime: null,
	  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'fffffffe ffffffff 00000000 00000000 ffffffff',
	  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'fffffffe ffffffff 00000000 00000000 fffffffc',
	  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
	     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
	  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
	     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
	  hash: hash.sha384,
	  gRed: false,
	  g: [
	    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
	    '5502f25d bf55296c 3a545e38 72760ab7',
	    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
	    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
	  ]
	});

	defineCurve('p521', {
	  type: 'short',
	  prime: null,
	  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff ffffffff ffffffff ffffffff',
	  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff ffffffff ffffffff fffffffc',
	  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
	     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
	     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
	  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
	     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
	  hash: hash.sha512,
	  gRed: false,
	  g: [
	    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
	    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
	    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
	    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
	    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
	    '3fad0761 353c7086 a272c240 88be9476 9fd16650'
	  ]
	});

	defineCurve('curve25519', {
	  type: 'mont',
	  prime: 'p25519',
	  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
	  a: '76d06',
	  b: '1',
	  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
	  hash: hash.sha256,
	  gRed: false,
	  g: [
	    '9'
	  ]
	});

	defineCurve('ed25519', {
	  type: 'edwards',
	  prime: 'p25519',
	  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
	  a: '-1',
	  c: '1',
	  // -121665 * (121666^(-1)) (mod P)
	  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
	  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
	  hash: hash.sha256,
	  gRed: false,
	  g: [
	    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

	    // 4/5
	    '6666666666666666666666666666666666666666666666666666666666666658'
	  ]
	});

	var pre;
	try {
	  pre = __webpack_require__(271);
	} catch (e) {
	  pre = undefined;
	}

	defineCurve('secp256k1', {
	  type: 'short',
	  prime: 'k256',
	  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
	  a: '0',
	  b: '7',
	  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
	  h: '1',
	  hash: hash.sha256,

	  // Precomputed endomorphism
	  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
	  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
	  basis: [
	    {
	      a: '3086d221a7d46bcde86c90e49284eb15',
	      b: '-e4437ed6010e88286f547fa90abfe4c3'
	    },
	    {
	      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
	      b: '3086d221a7d46bcde86c90e49284eb15'
	    }
	  ],

	  gRed: false,
	  g: [
	    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
	    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
	    pre
	  ]
	});


/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	
	const safeStringify = __webpack_require__(295)

	/**
	 * @class JsonRpcError
	 * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors
	 * per EIP 1474.
	 * Permits any integer error code.
	 */
	class EthereumRpcError extends Error {

	  /**
	   * Create an Ethereum JSON RPC error.
	   * 
	   * @param {number} code - The integer error code.
	   * @param {string} message - The string message.
	   * @param {any} [data] - The error data.
	   */
	  constructor (code, message, data) {

	    if (!Number.isInteger(code)) throw new Error(
	      '"code" must be an integer.'
	    )
	    if (!message || typeof message !== 'string') throw new Error(
	      '"message" must be a nonempty string.'
	    )

	    super(message)
	    this.code = code
	    if (data !== undefined) this.data = data
	  }

	  /**
	   * Returns a plain object with all public class properties.
	   * 
	   * @returns {object} The serialized error. 
	   */
	  serialize() {
	    const serialized = {
	      code: this.code,
	      message: this.message,
	    }
	    if (this.data !== undefined) serialized.data = this.data
	    if (this.stack) serialized.stack = this.stack
	    return serialized
	  }

	  /**
	   * Return a string representation of the serialized error, omitting
	   * any circular references.
	   * 
	   * @returns {string} The serialized error as a string.
	   */
	  toString() {
	    return safeStringify(
	      this.serialize(),
	      stringifyReplacer,
	      2
	    )
	  }
	}

	/**
	 * @class EthereumRpcError
	 * Error subclass implementing Ethereum Provider errors per EIP 1193.
	 * Permits integer error codes in the [ 1000 <= 4999 ] range.
	 */
	class EthereumProviderError extends EthereumRpcError {

	  /**
	   * Create an Ethereum JSON RPC error.
	   * 
	   * @param {number} code - The integer error code, in the [ 1000 <= 4999 ] range.
	   * @param {string} message - The string message.
	   * @param {any} [data] - The error data.
	   */
	  constructor(code, message, data) {

	    if (!isValidEthProviderCode(code)) {
	      throw new Error(
	        '"code" must be an integer such that: 1000 <= code <= 4999'
	      )
	    }

	    super(code, message, data)
	  }
	}

	// Internal

	function isValidEthProviderCode(code) {
	  return Number.isInteger(code) && code >= 1000 && code <= 4999
	}

	function stringifyReplacer(_, value) {
	  if (value === '[Circular]') {
	    return
	  }
	  return value
	}

	// Exports

	module.exports =  {
	  EthereumRpcError,
	  EthereumProviderError
	}


/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.rlphash = exports.ripemd160 = exports.sha256 = exports.keccak256 = exports.keccak = void 0;
	var _a = __webpack_require__(63), keccak224 = _a.keccak224, keccak384 = _a.keccak384, k256 = _a.keccak256, keccak512 = _a.keccak512;
	var createHash = __webpack_require__(25);
	var ethjsUtil = __webpack_require__(18);
	var rlp = __webpack_require__(22);
	var bytes_1 = __webpack_require__(47);
	/**
	 * Creates Keccak hash of the input
	 * @param a The input data (Buffer|Array|String|Number) If the string is a 0x-prefixed hex value
	 * it's interpreted as hexadecimal, otherwise as utf8.
	 * @param bits The Keccak width
	 */
	exports.keccak = function (a, bits) {
	    if (bits === void 0) { bits = 256; }
	    if (typeof a === 'string' && !ethjsUtil.isHexString(a)) {
	        a = Buffer.from(a, 'utf8');
	    }
	    else {
	        a = bytes_1.toBuffer(a);
	    }
	    if (!bits)
	        bits = 256;
	    switch (bits) {
	        case 224: {
	            return keccak224(a);
	        }
	        case 256: {
	            return k256(a);
	        }
	        case 384: {
	            return keccak384(a);
	        }
	        case 512: {
	            return keccak512(a);
	        }
	        default: {
	            throw new Error("Invald algorithm: keccak" + bits);
	        }
	    }
	};
	/**
	 * Creates Keccak-256 hash of the input, alias for keccak(a, 256).
	 * @param a The input data (Buffer|Array|String|Number)
	 */
	exports.keccak256 = function (a) {
	    return exports.keccak(a);
	};
	/**
	 * Creates SHA256 hash of the input.
	 * @param a The input data (Buffer|Array|String|Number)
	 */
	exports.sha256 = function (a) {
	    a = bytes_1.toBuffer(a);
	    return createHash('sha256')
	        .update(a)
	        .digest();
	};
	/**
	 * Creates RIPEMD160 hash of the input.
	 * @param a The input data (Buffer|Array|String|Number)
	 * @param padded Whether it should be padded to 256 bits or not
	 */
	exports.ripemd160 = function (a, padded) {
	    a = bytes_1.toBuffer(a);
	    var hash = createHash('rmd160')
	        .update(a)
	        .digest();
	    if (padded === true) {
	        return bytes_1.setLength(hash, 32);
	    }
	    else {
	        return hash;
	    }
	};
	/**
	 * Creates SHA-3 hash of the RLP encoded version of the input.
	 * @param a The input data
	 */
	exports.rlphash = function (a) {
	    return exports.keccak(rlp.encode(a));
	};
	//# sourceMappingURL=hash.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.ecdhUnsafe = exports.ecdh = exports.recover = exports.verify = exports.sign = exports.signatureImportLax = exports.signatureImport = exports.signatureExport = exports.signatureNormalize = exports.publicKeyCombine = exports.publicKeyTweakMul = exports.publicKeyTweakAdd = exports.publicKeyVerify = exports.publicKeyConvert = exports.publicKeyCreate = exports.privateKeyTweakMul = exports.privateKeyTweakAdd = exports.privateKeyModInverse = exports.privateKeyNegate = exports.privateKeyImport = exports.privateKeyExport = exports.privateKeyVerify = void 0;
	var secp256k1 = __webpack_require__(64);
	var secp256k1v3 = __webpack_require__(288);
	var der = __webpack_require__(287);
	/**
	 * Verify an ECDSA privateKey
	 * @method privateKeyVerify
	 * @param {Buffer} privateKey
	 * @return {boolean}
	 */
	exports.privateKeyVerify = function (privateKey) {
	    // secp256k1 v4 version throws when privateKey length is not 32
	    if (privateKey.length !== 32) {
	        return false;
	    }
	    return secp256k1.privateKeyVerify(Uint8Array.from(privateKey));
	};
	/**
	 * Export a privateKey in DER format
	 * @method privateKeyExport
	 * @param {Buffer} privateKey
	 * @param {boolean} compressed
	 * @return {boolean}
	 */
	exports.privateKeyExport = function (privateKey, compressed) {
	    // secp256k1 v4 version throws when privateKey length is not 32
	    if (privateKey.length !== 32) {
	        throw new RangeError('private key length is invalid');
	    }
	    var publicKey = secp256k1v3.privateKeyExport(privateKey, compressed);
	    return der.privateKeyExport(privateKey, publicKey, compressed);
	};
	/**
	 * Import a privateKey in DER format
	 * @method privateKeyImport
	 * @param {Buffer} privateKey
	 * @return {Buffer}
	 */
	exports.privateKeyImport = function (privateKey) {
	    // privateKeyImport method is not part of secp256k1 v4 package
	    // this implementation is based on v3
	    privateKey = der.privateKeyImport(privateKey);
	    if (privateKey !== null && privateKey.length === 32 && exports.privateKeyVerify(privateKey)) {
	        return privateKey;
	    }
	    throw new Error("couldn't import from DER format");
	};
	/**
	 * Negate a privateKey by subtracting it from the order of the curve's base point
	 * @method privateKeyNegate
	 * @param {Buffer} privateKey
	 * @return {Buffer}
	 */
	exports.privateKeyNegate = function (privateKey) {
	    return Buffer.from(secp256k1.privateKeyNegate(Uint8Array.from(privateKey)));
	};
	/**
	 * Compute the inverse of a privateKey (modulo the order of the curve's base point).
	 * @method privateKeyModInverse
	 * @param {Buffer} privateKey
	 * @return {Buffer}
	 */
	exports.privateKeyModInverse = function (privateKey) {
	    if (privateKey.length !== 32) {
	        throw new Error('private key length is invalid');
	    }
	    return Buffer.from(secp256k1v3.privateKeyModInverse(Uint8Array.from(privateKey)));
	};
	/**
	 * Tweak a privateKey by adding tweak to it.
	 * @method privateKeyTweakAdd
	 * @param {Buffer} privateKey
	 * @param {Buffer} tweak
	 * @return {Buffer}
	 */
	exports.privateKeyTweakAdd = function (privateKey, tweak) {
	    return Buffer.from(secp256k1.privateKeyTweakAdd(Uint8Array.from(privateKey), tweak));
	};
	/**
	 * Tweak a privateKey by multiplying it by a tweak.
	 * @method privateKeyTweakMul
	 * @param {Buffer} privateKey
	 * @param {Buffer} tweak
	 * @return {Buffer}
	 */
	exports.privateKeyTweakMul = function (privateKey, tweak) {
	    return Buffer.from(secp256k1.privateKeyTweakMul(Uint8Array.from(privateKey), Uint8Array.from(tweak)));
	};
	/**
	 * Compute the public key for a privateKey.
	 * @method publicKeyCreate
	 * @param {Buffer} privateKey
	 * @param {boolean} compressed
	 * @return {Buffer}
	 */
	exports.publicKeyCreate = function (privateKey, compressed) {
	    return Buffer.from(secp256k1.publicKeyCreate(Uint8Array.from(privateKey), compressed));
	};
	/**
	 * Convert a publicKey to compressed or uncompressed form.
	 * @method publicKeyConvert
	 * @param {Buffer} publicKey
	 * @param {boolean} compressed
	 * @return {Buffer}
	 */
	exports.publicKeyConvert = function (publicKey, compressed) {
	    return Buffer.from(secp256k1.publicKeyConvert(Uint8Array.from(publicKey), compressed));
	};
	/**
	 * Verify an ECDSA publicKey.
	 * @method publicKeyVerify
	 * @param {Buffer} publicKey
	 * @return {boolean}
	 */
	exports.publicKeyVerify = function (publicKey) {
	    // secp256k1 v4 version throws when publicKey length is not 33 or 65
	    if (publicKey.length !== 33 && publicKey.length !== 65) {
	        return false;
	    }
	    return secp256k1.publicKeyVerify(Uint8Array.from(publicKey));
	};
	/**
	 * Tweak a publicKey by adding tweak times the generator to it.
	 * @method publicKeyTweakAdd
	 * @param {Buffer} publicKey
	 * @param {Buffer} tweak
	 * @param {boolean} compressed
	 * @return {Buffer}
	 */
	exports.publicKeyTweakAdd = function (publicKey, tweak, compressed) {
	    return Buffer.from(secp256k1.publicKeyTweakAdd(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
	};
	/**
	 * Tweak a publicKey by multiplying it by a tweak value
	 * @method publicKeyTweakMul
	 * @param {Buffer} publicKey
	 * @param {Buffer} tweak
	 * @param {boolean} compressed
	 * @return {Buffer}
	 */
	exports.publicKeyTweakMul = function (publicKey, tweak, compressed) {
	    return Buffer.from(secp256k1.publicKeyTweakMul(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
	};
	/**
	 * Add a given publicKeys together.
	 * @method publicKeyCombine
	 * @param {Array<Buffer>} publicKeys
	 * @param {boolean} compressed
	 * @return {Buffer}
	 */
	exports.publicKeyCombine = function (publicKeys, compressed) {
	    var keys = [];
	    publicKeys.forEach(function (publicKey) {
	        keys.push(Uint8Array.from(publicKey));
	    });
	    return Buffer.from(secp256k1.publicKeyCombine(keys, compressed));
	};
	/**
	 * Convert a signature to a normalized lower-S form.
	 * @method signatureNormalize
	 * @param {Buffer} signature
	 * @return {Buffer}
	 */
	exports.signatureNormalize = function (signature) {
	    return Buffer.from(secp256k1.signatureNormalize(Uint8Array.from(signature)));
	};
	/**
	 * Serialize an ECDSA signature in DER format.
	 * @method signatureExport
	 * @param {Buffer} signature
	 * @return {Buffer}
	 */
	exports.signatureExport = function (signature) {
	    return Buffer.from(secp256k1.signatureExport(Uint8Array.from(signature)));
	};
	/**
	 * Parse a DER ECDSA signature (follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
	 * @method signatureImport
	 * @param {Buffer} signature
	 * @return {Buffer}
	 */
	exports.signatureImport = function (signature) {
	    return Buffer.from(secp256k1.signatureImport(Uint8Array.from(signature)));
	};
	/**
	 * Parse a DER ECDSA signature (not follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
	 * @method signatureImportLax
	 * @param {Buffer} signature
	 * @return {Buffer}
	 */
	exports.signatureImportLax = function (signature) {
	    // signatureImportLax method is not part of secp256k1 v4 package
	    // this implementation is based on v3
	    // ensure that signature is greater than 0
	    if (signature.length === 0) {
	        throw new RangeError('signature length is invalid');
	    }
	    var sigObj = der.signatureImportLax(signature);
	    if (sigObj === null) {
	        throw new Error("couldn't parse DER signature");
	    }
	    return secp256k1v3.signatureImport(sigObj);
	};
	/**
	 * Create an ECDSA signature. Always return low-S signature.
	 * @method sign
	 * @param {Buffer} message
	 * @param {Buffer} privateKey
	 * @param {Object} options
	 * @return {Buffer}
	 */
	exports.sign = function (message, privateKey, options) {
	    if (options === null) {
	        throw new TypeError('options should be an Object');
	    }
	    var signOptions = undefined;
	    if (options) {
	        signOptions = {};
	        if (options.data === null) {
	            // validate option.data length
	            throw new TypeError('options.data should be a Buffer');
	        }
	        if (options.data) {
	            if (options.data.length != 32) {
	                throw new RangeError('options.data length is invalid');
	            }
	            signOptions.data = new Uint8Array(options.data);
	        }
	        if (options.noncefn === null) {
	            throw new TypeError('options.noncefn should be a Function');
	        }
	        if (options.noncefn) {
	            // convert option.noncefn function signature
	            signOptions.noncefn = function (message, privateKey, algo, data, attempt) {
	                var bufferAlgo = algo != null ? Buffer.from(algo) : null;
	                var bufferData = data != null ? Buffer.from(data) : null;
	                var buffer = Buffer.from('');
	                if (options.noncefn) {
	                    buffer = options.noncefn(Buffer.from(message), Buffer.from(privateKey), bufferAlgo, bufferData, attempt);
	                }
	                return new Uint8Array(buffer);
	            };
	        }
	    }
	    var sig = secp256k1.ecdsaSign(Uint8Array.from(message), Uint8Array.from(privateKey), signOptions);
	    return {
	        signature: Buffer.from(sig.signature),
	        recovery: sig.recid,
	    };
	};
	/**
	 * Verify an ECDSA signature.
	 * @method verify
	 * @param {Buffer} message
	 * @param {Buffer} signature
	 * @param {Buffer} publicKey
	 * @return {boolean}
	 */
	exports.verify = function (message, signature, publicKey) {
	    return secp256k1.ecdsaVerify(Uint8Array.from(signature), Uint8Array.from(message), publicKey);
	};
	/**
	 * Recover an ECDSA public key from a signature.
	 * @method recover
	 * @param {Buffer} message
	 * @param {Buffer} signature
	 * @param {Number} recid
	 * @param {boolean} compressed
	 * @return {Buffer}
	 */
	exports.recover = function (message, signature, recid, compressed) {
	    return Buffer.from(secp256k1.ecdsaRecover(Uint8Array.from(signature), recid, Uint8Array.from(message), compressed));
	};
	/**
	 * Compute an EC Diffie-Hellman secret and applied sha256 to compressed public key.
	 * @method ecdh
	 * @param {Buffer} publicKey
	 * @param {Buffer} privateKey
	 * @return {Buffer}
	 */
	exports.ecdh = function (publicKey, privateKey) {
	    // note: secp256k1 v3 doesn't allow optional parameter
	    return Buffer.from(secp256k1.ecdh(Uint8Array.from(publicKey), Uint8Array.from(privateKey), {}));
	};
	exports.ecdhUnsafe = function (publicKey, privateKey, compressed) {
	    // ecdhUnsafe method is not part of secp256k1 v4 package
	    // this implementation is based on v3
	    // ensure valid publicKey length
	    if (publicKey.length !== 33 && publicKey.length !== 65) {
	        throw new RangeError('public key length is invalid');
	    }
	    // ensure valid privateKey length
	    if (privateKey.length !== 32) {
	        throw new RangeError('private key length is invalid');
	    }
	    return Buffer.from(secp256k1v3.ecdhUnsafe(Uint8Array.from(publicKey), Uint8Array.from(privateKey), compressed));
	};
	//# sourceMappingURL=secp256k1v3-adapter.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	var hash = exports;

	hash.utils = __webpack_require__(13);
	hash.common = __webpack_require__(48);
	hash.sha = __webpack_require__(299);
	hash.ripemd = __webpack_require__(298);
	hash.hmac = __webpack_require__(297);

	// Proxy hash functions to the main object
	hash.sha1 = hash.sha.sha1;
	hash.sha256 = hash.sha.sha256;
	hash.sha224 = hash.sha.sha224;
	hash.sha384 = hash.sha.sha384;
	hash.sha512 = hash.sha.sha512;
	hash.ripemd160 = hash.ripemd.ripemd160;


/***/ },
/* 87 */
/***/ function(module, exports) {

	module.exports = {
		"rpc": {
			"invalidInput": -32000,
			"resourceNotFound": -32001,
			"resourceUnavailable": -32002,
			"transactionRejected": -32003,
			"methodNotSupported": -32004,
			"parse": -32700,
			"invalidRequest": -32600,
			"methodNotFound": -32601,
			"invalidParams": -32602,
			"internal": -32603
		},
		"provider": {
			"userRejectedRequest": 4001,
			"unauthorized": 4100,
			"unsupportedMethod": 4200
		}
	};

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(132),
	    getRawTag = __webpack_require__(339),
	    objectToString = __webpack_require__(344);

	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';

	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  return (symToStringTag && symToStringTag in Object(value))
	    ? getRawTag(value)
	    : objectToString(value);
	}

	module.exports = baseGetTag;


/***/ },
/* 89 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}

	module.exports = isObjectLike;


/***/ },
/* 90 */
/***/ function(module, exports) {

	'use strict';

	const processFn = (fn, opts) => function () {
		const P = opts.promiseModule;
		const args = new Array(arguments.length);

		for (let i = 0; i < arguments.length; i++) {
			args[i] = arguments[i];
		}

		return new P((resolve, reject) => {
			if (opts.errorFirst) {
				args.push(function (err, result) {
					if (opts.multiArgs) {
						const results = new Array(arguments.length - 1);

						for (let i = 1; i < arguments.length; i++) {
							results[i - 1] = arguments[i];
						}

						if (err) {
							results.unshift(err);
							reject(results);
						} else {
							resolve(results);
						}
					} else if (err) {
						reject(err);
					} else {
						resolve(result);
					}
				});
			} else {
				args.push(function (result) {
					if (opts.multiArgs) {
						const results = new Array(arguments.length - 1);

						for (let i = 0; i < arguments.length; i++) {
							results[i] = arguments[i];
						}

						resolve(results);
					} else {
						resolve(result);
					}
				});
			}

			fn.apply(this, args);
		});
	};

	module.exports = (obj, opts) => {
		opts = Object.assign({
			exclude: [/.+(Sync|Stream)$/],
			errorFirst: true,
			promiseModule: Promise
		}, opts);

		const filter = key => {
			const match = pattern => typeof pattern === 'string' ? key === pattern : pattern.test(key);
			return opts.include ? opts.include.some(match) : !opts.exclude.some(match);
		};

		let ret;
		if (typeof obj === 'function') {
			ret = function () {
				if (opts.excludeMain) {
					return obj.apply(this, arguments);
				}

				return processFn(obj, opts).apply(this, arguments);
			};
		} else {
			ret = Object.create(Object.getPrototypeOf(obj));
		}

		for (const key in obj) { // eslint-disable-line guard-for-in
			const x = obj[key];
			ret[key] = typeof x === 'function' && filter(key) ? processFn(x, opts) : x;
		}

		return ret;
	};


/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {'use strict'

	// limit of Crypto.getRandomValues()
	// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
	var MAX_BYTES = 65536

	// Node supports requesting up to this number of bytes
	// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
	var MAX_UINT32 = 4294967295

	function oldBrowser () {
	  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
	}

	var Buffer = __webpack_require__(6).Buffer
	var crypto = global.crypto || global.msCrypto

	if (crypto && crypto.getRandomValues) {
	  module.exports = randomBytes
	} else {
	  module.exports = oldBrowser
	}

	function randomBytes (size, cb) {
	  // phantomjs needs to throw
	  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')

	  var bytes = Buffer.allocUnsafe(size)

	  if (size > 0) {  // getRandomValues fails on IE if size == 0
	    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
	      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
	      for (var generated = 0; generated < size; generated += MAX_BYTES) {
	        // buffer.slice automatically checks if the end is past the end of
	        // the buffer so we don't have to here
	        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))
	      }
	    } else {
	      crypto.getRandomValues(bytes)
	    }
	  }

	  if (typeof cb === 'function') {
	    return process.nextTick(function () {
	      cb(null, bytes)
	    })
	  }

	  return bytes
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(8)))

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	// Ported from https://github.com/mafintosh/end-of-stream with
	// permission from the author, Mathias Buus (@mafintosh).
	'use strict';

	var ERR_STREAM_PREMATURE_CLOSE = __webpack_require__(36).codes.ERR_STREAM_PREMATURE_CLOSE;

	function once(callback) {
	  var called = false;
	  return function () {
	    if (called) return;
	    called = true;

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    callback.apply(this, args);
	  };
	}

	function noop() {}

	function isRequest(stream) {
	  return stream.setHeader && typeof stream.abort === 'function';
	}

	function eos(stream, opts, callback) {
	  if (typeof opts === 'function') return eos(stream, null, opts);
	  if (!opts) opts = {};
	  callback = once(callback || noop);
	  var readable = opts.readable || opts.readable !== false && stream.readable;
	  var writable = opts.writable || opts.writable !== false && stream.writable;

	  var onlegacyfinish = function onlegacyfinish() {
	    if (!stream.writable) onfinish();
	  };

	  var writableEnded = stream._writableState && stream._writableState.finished;

	  var onfinish = function onfinish() {
	    writable = false;
	    writableEnded = true;
	    if (!readable) callback.call(stream);
	  };

	  var readableEnded = stream._readableState && stream._readableState.endEmitted;

	  var onend = function onend() {
	    readable = false;
	    readableEnded = true;
	    if (!writable) callback.call(stream);
	  };

	  var onerror = function onerror(err) {
	    callback.call(stream, err);
	  };

	  var onclose = function onclose() {
	    var err;

	    if (readable && !readableEnded) {
	      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
	      return callback.call(stream, err);
	    }

	    if (writable && !writableEnded) {
	      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
	      return callback.call(stream, err);
	    }
	  };

	  var onrequest = function onrequest() {
	    stream.req.on('finish', onfinish);
	  };

	  if (isRequest(stream)) {
	    stream.on('complete', onfinish);
	    stream.on('abort', onclose);
	    if (stream.req) onrequest();else stream.on('request', onrequest);
	  } else if (writable && !stream._writableState) {
	    // legacy streams
	    stream.on('end', onlegacyfinish);
	    stream.on('close', onlegacyfinish);
	  }

	  stream.on('end', onend);
	  stream.on('finish', onfinish);
	  if (opts.error !== false) stream.on('error', onerror);
	  stream.on('close', onclose);
	  return function () {
	    stream.removeListener('complete', onfinish);
	    stream.removeListener('abort', onclose);
	    stream.removeListener('request', onrequest);
	    if (stream.req) stream.req.removeListener('finish', onfinish);
	    stream.removeListener('end', onlegacyfinish);
	    stream.removeListener('close', onlegacyfinish);
	    stream.removeListener('finish', onfinish);
	    stream.removeListener('end', onend);
	    stream.removeListener('error', onerror);
	    stream.removeListener('close', onclose);
	  };
	}

	module.exports = eos;

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.


	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.

	module.exports = Transform;

	var Duplex = __webpack_require__(28);

	/*<replacement>*/
	var util = __webpack_require__(45);
	util.inherits = __webpack_require__(3);
	/*</replacement>*/

	util.inherits(Transform, Duplex);


	function TransformState(options, stream) {
	  this.afterTransform = function(er, data) {
	    return afterTransform(stream, er, data);
	  };

	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	}

	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;

	  var cb = ts.writecb;

	  if (!cb)
	    return stream.emit('error', new Error('no writecb in Transform class'));

	  ts.writechunk = null;
	  ts.writecb = null;

	  if (!util.isNullOrUndefined(data))
	    stream.push(data);

	  if (cb)
	    cb(er);

	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}


	function Transform(options) {
	  if (!(this instanceof Transform))
	    return new Transform(options);

	  Duplex.call(this, options);

	  this._transformState = new TransformState(options, this);

	  // when the writable side finishes, then flush out anything remaining.
	  var stream = this;

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;

	  this.once('prefinish', function() {
	    if (util.isFunction(this._flush))
	      this._flush(function(er) {
	        done(stream, er);
	      });
	    else
	      done(stream);
	  });
	}

	Transform.prototype.push = function(chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function(chunk, encoding, cb) {
	  throw new Error('not implemented');
	};

	Transform.prototype._write = function(chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform ||
	        rs.needReadable ||
	        rs.length < rs.highWaterMark)
	      this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function(n) {
	  var ts = this._transformState;

	  if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};


	function done(stream, er) {
	  if (er)
	    return stream.emit('error', er);

	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;

	  if (ws.length)
	    throw new Error('calling transform done when ws.length != 0');

	  if (ts.transforming)
	    throw new Error('calling transform done when still transforming');

	  return stream.push(null);
	}


/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// A bit simpler than readable streams.
	// Implement an async ._write(chunk, cb), and it'll handle all
	// the drain event emission and buffering.

	module.exports = Writable;

	/*<replacement>*/
	var Buffer = __webpack_require__(1).Buffer;
	/*</replacement>*/

	Writable.WritableState = WritableState;


	/*<replacement>*/
	var util = __webpack_require__(45);
	util.inherits = __webpack_require__(3);
	/*</replacement>*/

	var Stream = __webpack_require__(16);

	util.inherits(Writable, Stream);

	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	}

	function WritableState(options, stream) {
	  var Duplex = __webpack_require__(28);

	  options = options || {};

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function(er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.buffer = [];

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;
	}

	function Writable(options) {
	  var Duplex = __webpack_require__(28);

	  // Writable ctor is applied to Duplexes, though they're not
	  // instanceof Writable, they're instanceof Readable.
	  if (!(this instanceof Writable) && !(this instanceof Duplex))
	    return new Writable(options);

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  Stream.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function() {
	  this.emit('error', new Error('Cannot pipe. Not readable.'));
	};


	function writeAfterEnd(stream, state, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  process.nextTick(function() {
	    cb(er);
	  });
	}

	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  if (!util.isBuffer(chunk) &&
	      !util.isString(chunk) &&
	      !util.isNullOrUndefined(chunk) &&
	      !state.objectMode) {
	    var er = new TypeError('Invalid non-string/buffer chunk');
	    stream.emit('error', er);
	    process.nextTick(function() {
	      cb(er);
	    });
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function(chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;

	  if (util.isFunction(encoding)) {
	    cb = encoding;
	    encoding = null;
	  }

	  if (util.isBuffer(chunk))
	    encoding = 'buffer';
	  else if (!encoding)
	    encoding = state.defaultEncoding;

	  if (!util.isFunction(cb))
	    cb = function() {};

	  if (state.ended)
	    writeAfterEnd(this, state, cb);
	  else if (validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  }

	  return ret;
	};

	Writable.prototype.cork = function() {
	  var state = this._writableState;

	  state.corked++;
	};

	Writable.prototype.uncork = function() {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;

	    if (!state.writing &&
	        !state.corked &&
	        !state.finished &&
	        !state.bufferProcessing &&
	        state.buffer.length)
	      clearBuffer(this, state);
	  }
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode &&
	      state.decodeStrings !== false &&
	      util.isString(chunk)) {
	    chunk = new Buffer(chunk, encoding);
	  }
	  return chunk;
	}

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);
	  if (util.isBuffer(chunk))
	    encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret)
	    state.needDrain = true;

	  if (state.writing || state.corked)
	    state.buffer.push(new WriteReq(chunk, encoding, cb));
	  else
	    doWrite(stream, state, false, len, chunk, encoding, cb);

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev)
	    stream._writev(chunk, state.onwrite);
	  else
	    stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  if (sync)
	    process.nextTick(function() {
	      state.pendingcb--;
	      cb(er);
	    });
	  else {
	    state.pendingcb--;
	    cb(er);
	  }

	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er)
	    onwriteError(stream, state, sync, er, cb);
	  else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(stream, state);

	    if (!finished &&
	        !state.corked &&
	        !state.bufferProcessing &&
	        state.buffer.length) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      process.nextTick(function() {
	        afterWrite(stream, state, finished, cb);
	      });
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished)
	    onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}


	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;

	  if (stream._writev && state.buffer.length > 1) {
	    // Fast case, write everything using _writev()
	    var cbs = [];
	    for (var c = 0; c < state.buffer.length; c++)
	      cbs.push(state.buffer[c].callback);

	    // count the one we are adding, as well.
	    // TODO(isaacs) clean this up
	    state.pendingcb++;
	    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {
	      for (var i = 0; i < cbs.length; i++) {
	        state.pendingcb--;
	        cbs[i](err);
	      }
	    });

	    // Clear buffer
	    state.buffer = [];
	  } else {
	    // Slow case, write chunks one-by-one
	    for (var c = 0; c < state.buffer.length; c++) {
	      var entry = state.buffer[c];
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;

	      doWrite(stream, state, false, len, chunk, encoding, cb);

	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        c++;
	        break;
	      }
	    }

	    if (c < state.buffer.length)
	      state.buffer = state.buffer.slice(c);
	    else
	      state.buffer.length = 0;
	  }

	  state.bufferProcessing = false;
	}

	Writable.prototype._write = function(chunk, encoding, cb) {
	  cb(new Error('not implemented'));

	};

	Writable.prototype._writev = null;

	Writable.prototype.end = function(chunk, encoding, cb) {
	  var state = this._writableState;

	  if (util.isFunction(chunk)) {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (util.isFunction(encoding)) {
	    cb = encoding;
	    encoding = null;
	  }

	  if (!util.isNullOrUndefined(chunk))
	    this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished)
	    endWritable(this, state, cb);
	};


	function needFinish(stream, state) {
	  return (state.ending &&
	          state.length === 0 &&
	          !state.finished &&
	          !state.writing);
	}

	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(stream, state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else
	      prefinish(stream, state);
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished)
	      process.nextTick(cb);
	    else
	      stream.once('finish', cb);
	  }
	  state.ended = true;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	/*<replacement>*/

	var Buffer = __webpack_require__(6).Buffer;
	/*</replacement>*/

	var isEncoding = Buffer.isEncoding || function (encoding) {
	  encoding = '' + encoding;
	  switch (encoding && encoding.toLowerCase()) {
	    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
	      return true;
	    default:
	      return false;
	  }
	};

	function _normalizeEncoding(enc) {
	  if (!enc) return 'utf8';
	  var retried;
	  while (true) {
	    switch (enc) {
	      case 'utf8':
	      case 'utf-8':
	        return 'utf8';
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return 'utf16le';
	      case 'latin1':
	      case 'binary':
	        return 'latin1';
	      case 'base64':
	      case 'ascii':
	      case 'hex':
	        return enc;
	      default:
	        if (retried) return; // undefined
	        enc = ('' + enc).toLowerCase();
	        retried = true;
	    }
	  }
	};

	// Do not cache `Buffer.isEncoding` when checking encoding names as some
	// modules monkey-patch it to support additional encodings
	function normalizeEncoding(enc) {
	  var nenc = _normalizeEncoding(enc);
	  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
	  return nenc || enc;
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters.
	exports.StringDecoder = StringDecoder;
	function StringDecoder(encoding) {
	  this.encoding = normalizeEncoding(encoding);
	  var nb;
	  switch (this.encoding) {
	    case 'utf16le':
	      this.text = utf16Text;
	      this.end = utf16End;
	      nb = 4;
	      break;
	    case 'utf8':
	      this.fillLast = utf8FillLast;
	      nb = 4;
	      break;
	    case 'base64':
	      this.text = base64Text;
	      this.end = base64End;
	      nb = 3;
	      break;
	    default:
	      this.write = simpleWrite;
	      this.end = simpleEnd;
	      return;
	  }
	  this.lastNeed = 0;
	  this.lastTotal = 0;
	  this.lastChar = Buffer.allocUnsafe(nb);
	}

	StringDecoder.prototype.write = function (buf) {
	  if (buf.length === 0) return '';
	  var r;
	  var i;
	  if (this.lastNeed) {
	    r = this.fillLast(buf);
	    if (r === undefined) return '';
	    i = this.lastNeed;
	    this.lastNeed = 0;
	  } else {
	    i = 0;
	  }
	  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
	  return r || '';
	};

	StringDecoder.prototype.end = utf8End;

	// Returns only complete characters in a Buffer
	StringDecoder.prototype.text = utf8Text;

	// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
	StringDecoder.prototype.fillLast = function (buf) {
	  if (this.lastNeed <= buf.length) {
	    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
	    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
	  }
	  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
	  this.lastNeed -= buf.length;
	};

	// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
	// continuation byte. If an invalid byte is detected, -2 is returned.
	function utf8CheckByte(byte) {
	  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
	  return byte >> 6 === 0x02 ? -1 : -2;
	}

	// Checks at most 3 bytes at the end of a Buffer in order to detect an
	// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
	// needed to complete the UTF-8 character (if applicable) are returned.
	function utf8CheckIncomplete(self, buf, i) {
	  var j = buf.length - 1;
	  if (j < i) return 0;
	  var nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) self.lastNeed = nb - 1;
	    return nb;
	  }
	  if (--j < i || nb === -2) return 0;
	  nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) self.lastNeed = nb - 2;
	    return nb;
	  }
	  if (--j < i || nb === -2) return 0;
	  nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) {
	      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
	    }
	    return nb;
	  }
	  return 0;
	}

	// Validates as many continuation bytes for a multi-byte UTF-8 character as
	// needed or are available. If we see a non-continuation byte where we expect
	// one, we "replace" the validated continuation bytes we've seen so far with
	// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
	// behavior. The continuation byte check is included three times in the case
	// where all of the continuation bytes for a character exist in the same buffer.
	// It is also done this way as a slight performance increase instead of using a
	// loop.
	function utf8CheckExtraBytes(self, buf, p) {
	  if ((buf[0] & 0xC0) !== 0x80) {
	    self.lastNeed = 0;
	    return '\ufffd';
	  }
	  if (self.lastNeed > 1 && buf.length > 1) {
	    if ((buf[1] & 0xC0) !== 0x80) {
	      self.lastNeed = 1;
	      return '\ufffd';
	    }
	    if (self.lastNeed > 2 && buf.length > 2) {
	      if ((buf[2] & 0xC0) !== 0x80) {
	        self.lastNeed = 2;
	        return '\ufffd';
	      }
	    }
	  }
	}

	// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
	function utf8FillLast(buf) {
	  var p = this.lastTotal - this.lastNeed;
	  var r = utf8CheckExtraBytes(this, buf, p);
	  if (r !== undefined) return r;
	  if (this.lastNeed <= buf.length) {
	    buf.copy(this.lastChar, p, 0, this.lastNeed);
	    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
	  }
	  buf.copy(this.lastChar, p, 0, buf.length);
	  this.lastNeed -= buf.length;
	}

	// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
	// partial character, the character's bytes are buffered until the required
	// number of bytes are available.
	function utf8Text(buf, i) {
	  var total = utf8CheckIncomplete(this, buf, i);
	  if (!this.lastNeed) return buf.toString('utf8', i);
	  this.lastTotal = total;
	  var end = buf.length - (total - this.lastNeed);
	  buf.copy(this.lastChar, 0, end);
	  return buf.toString('utf8', i, end);
	}

	// For UTF-8, a replacement character is added when ending on a partial
	// character.
	function utf8End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) return r + '\ufffd';
	  return r;
	}

	// UTF-16LE typically needs two bytes per character, but even if we have an even
	// number of bytes available, we need to check if we end on a leading/high
	// surrogate. In that case, we need to wait for the next two bytes in order to
	// decode the last character properly.
	function utf16Text(buf, i) {
	  if ((buf.length - i) % 2 === 0) {
	    var r = buf.toString('utf16le', i);
	    if (r) {
	      var c = r.charCodeAt(r.length - 1);
	      if (c >= 0xD800 && c <= 0xDBFF) {
	        this.lastNeed = 2;
	        this.lastTotal = 4;
	        this.lastChar[0] = buf[buf.length - 2];
	        this.lastChar[1] = buf[buf.length - 1];
	        return r.slice(0, -1);
	      }
	    }
	    return r;
	  }
	  this.lastNeed = 1;
	  this.lastTotal = 2;
	  this.lastChar[0] = buf[buf.length - 1];
	  return buf.toString('utf16le', i, buf.length - 1);
	}

	// For UTF-16LE we do not explicitly append special replacement characters if we
	// end on a partial character, we simply let v8 handle that.
	function utf16End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) {
	    var end = this.lastTotal - this.lastNeed;
	    return r + this.lastChar.toString('utf16le', 0, end);
	  }
	  return r;
	}

	function base64Text(buf, i) {
	  var n = (buf.length - i) % 3;
	  if (n === 0) return buf.toString('base64', i);
	  this.lastNeed = 3 - n;
	  this.lastTotal = 3;
	  if (n === 1) {
	    this.lastChar[0] = buf[buf.length - 1];
	  } else {
	    this.lastChar[0] = buf[buf.length - 2];
	    this.lastChar[1] = buf[buf.length - 1];
	  }
	  return buf.toString('base64', i, buf.length - n);
	}

	function base64End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
	  return r;
	}

	// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
	function simpleWrite(buf) {
	  return buf.toString(this.encoding);
	}

	function simpleEnd(buf) {
	  return buf && buf.length ? this.write(buf) : '';
	}

/***/ },
/* 96 */
/***/ function(module, exports) {

	var types = {
	  Array: function (value) { return value !== null && value !== undefined && value.constructor === Array },
	  Boolean: function (value) { return typeof value === 'boolean' },
	  Function: function (value) { return typeof value === 'function' },
	  Nil: function (value) { return value === undefined || value === null },
	  Number: function (value) { return typeof value === 'number' },
	  Object: function (value) { return typeof value === 'object' },
	  String: function (value) { return typeof value === 'string' },
	  '': function () { return true }
	}

	// TODO: deprecate
	types.Null = types.Nil

	for (var typeName in types) {
	  types[typeName].toJSON = function (t) {
	    return t
	  }.bind(null, typeName)
	}

	module.exports = types


/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/*
	    This file is part of web3.js.

	    web3.js is free software: you can redistribute it and/or modify
	    it under the terms of the GNU Lesser General Public License as published by
	    the Free Software Foundation, either version 3 of the License, or
	    (at your option) any later version.

	    web3.js is distributed in the hope that it will be useful,
	    but WITHOUT ANY WARRANTY; without even the implied warranty of
	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	    GNU Lesser General Public License for more details.

	    You should have received a copy of the GNU Lesser General Public License
	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	*/
	/**
	 * @file coder.js
	 * @author Marek Kotewicz <marek@ethdev.com>
	 * @date 2015
	 */

	var f = __webpack_require__(12);

	var SolidityTypeAddress = __webpack_require__(386);
	var SolidityTypeBool = __webpack_require__(387);
	var SolidityTypeInt = __webpack_require__(390);
	var SolidityTypeUInt = __webpack_require__(393);
	var SolidityTypeDynamicBytes = __webpack_require__(389);
	var SolidityTypeString = __webpack_require__(392);
	var SolidityTypeReal = __webpack_require__(391);
	var SolidityTypeUReal = __webpack_require__(394);
	var SolidityTypeBytes = __webpack_require__(388);

	var isDynamic = function (solidityType, type) {
	   return solidityType.isDynamicType(type) ||
	          solidityType.isDynamicArray(type);
	};

	/**
	 * SolidityCoder prototype should be used to encode/decode solidity params of any type
	 */
	var SolidityCoder = function (types) {
	    this._types = types;
	};

	/**
	 * This method should be used to transform type to SolidityType
	 *
	 * @method _requireType
	 * @param {String} type
	 * @returns {SolidityType}
	 * @throws {Error} throws if no matching type is found
	 */
	SolidityCoder.prototype._requireType = function (type) {
	    var solidityType = this._types.filter(function (t) {
	        return t.isType(type);
	    })[0];

	    if (!solidityType) {
	        throw Error('invalid solidity type!: ' + type);
	    }

	    return solidityType;
	};

	/**
	 * Should be used to encode plain param
	 *
	 * @method encodeParam
	 * @param {String} type
	 * @param {Object} plain param
	 * @return {String} encoded plain param
	 */
	SolidityCoder.prototype.encodeParam = function (type, param) {
	    return this.encodeParams([type], [param]);
	};

	/**
	 * Should be used to encode list of params
	 *
	 * @method encodeParams
	 * @param {Array} types
	 * @param {Array} params
	 * @return {String} encoded list of params
	 */
	SolidityCoder.prototype.encodeParams = function (types, params) {
	    var solidityTypes = this.getSolidityTypes(types);

	    var encodeds = solidityTypes.map(function (solidityType, index) {
	        return solidityType.encode(params[index], types[index]);
	    });

	    var dynamicOffset = solidityTypes.reduce(function (acc, solidityType, index) {
	        var staticPartLength = solidityType.staticPartLength(types[index]);
	        var roundedStaticPartLength = Math.floor((staticPartLength + 31) / 32) * 32;

	        return acc + (isDynamic(solidityTypes[index], types[index]) ?
	            32 :
	            roundedStaticPartLength);
	    }, 0);

	    var result = this.encodeMultiWithOffset(types, solidityTypes, encodeds, dynamicOffset);

	    return result;
	};

	SolidityCoder.prototype.encodeMultiWithOffset = function (types, solidityTypes, encodeds, dynamicOffset) {
	    var result = "";
	    var self = this;

	    types.forEach(function (type, i) {
	        if (isDynamic(solidityTypes[i], types[i])) {
	            result += f.formatInputInt(dynamicOffset).encode();
	            var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);
	            dynamicOffset += e.length / 2;
	        } else {
	            // don't add length to dynamicOffset. it's already counted
	            result += self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);
	        }

	        // TODO: figure out nested arrays
	    });

	    types.forEach(function (type, i) {
	        if (isDynamic(solidityTypes[i], types[i])) {
	            var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);
	            dynamicOffset += e.length / 2;
	            result += e;
	        }
	    });
	    return result;
	};

	SolidityCoder.prototype.encodeWithOffset = function (type, solidityType, encoded, offset) {
	    /* jshint maxcomplexity: 17 */
	    /* jshint maxdepth: 5 */

	    var self = this;
	    var encodingMode={dynamic:1,static:2,other:3};

	    var mode=(solidityType.isDynamicArray(type)?encodingMode.dynamic:(solidityType.isStaticArray(type)?encodingMode.static:encodingMode.other));

	    if(mode !== encodingMode.other){
	        var nestedName = solidityType.nestedName(type);
	        var nestedStaticPartLength = solidityType.staticPartLength(nestedName);
	        var result = (mode === encodingMode.dynamic ? encoded[0] : '');

	        if (solidityType.isDynamicArray(nestedName)) {
	            var previousLength = (mode === encodingMode.dynamic ? 2 : 0);

	            for (var i = 0; i < encoded.length; i++) {
	                // calculate length of previous item
	                if(mode === encodingMode.dynamic){
	                    previousLength += +(encoded[i - 1])[0] || 0;
	                }
	                else if(mode === encodingMode.static){
	                    previousLength += +(encoded[i - 1] || [])[0] || 0;
	                }
	                result += f.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();
	            }
	        }

	        var len= (mode === encodingMode.dynamic ? encoded.length-1 : encoded.length);
	        for (var c = 0; c < len; c++) {
	            var additionalOffset = result / 2;
	            if(mode === encodingMode.dynamic){
	                result += self.encodeWithOffset(nestedName, solidityType, encoded[c + 1], offset +  additionalOffset);
	            }
	            else if(mode === encodingMode.static){
	                result += self.encodeWithOffset(nestedName, solidityType, encoded[c], offset + additionalOffset);
	            }
	        }

	        return result;
	    }

	    return encoded;
	};


	/**
	 * Should be used to decode bytes to plain param
	 *
	 * @method decodeParam
	 * @param {String} type
	 * @param {String} bytes
	 * @return {Object} plain param
	 */
	SolidityCoder.prototype.decodeParam = function (type, bytes) {
	    return this.decodeParams([type], bytes)[0];
	};

	/**
	 * Should be used to decode list of params
	 *
	 * @method decodeParam
	 * @param {Array} types
	 * @param {String} bytes
	 * @return {Array} array of plain params
	 */
	SolidityCoder.prototype.decodeParams = function (types, bytes) {
	    var solidityTypes = this.getSolidityTypes(types);
	    var offsets = this.getOffsets(types, solidityTypes);

	    return solidityTypes.map(function (solidityType, index) {
	        return solidityType.decode(bytes, offsets[index],  types[index], index);
	    });
	};

	SolidityCoder.prototype.getOffsets = function (types, solidityTypes) {
	    var lengths =  solidityTypes.map(function (solidityType, index) {
	        return solidityType.staticPartLength(types[index]);
	    });

	    for (var i = 1; i < lengths.length; i++) {
	         // sum with length of previous element
	        lengths[i] += lengths[i - 1];
	    }

	    return lengths.map(function (length, index) {
	        // remove the current length, so the length is sum of previous elements
	        var staticPartLength = solidityTypes[index].staticPartLength(types[index]);
	        return length - staticPartLength;
	    });
	};

	SolidityCoder.prototype.getSolidityTypes = function (types) {
	    var self = this;
	    return types.map(function (type) {
	        return self._requireType(type);
	    });
	};

	var coder = new SolidityCoder([
	    new SolidityTypeAddress(),
	    new SolidityTypeBool(),
	    new SolidityTypeInt(),
	    new SolidityTypeUInt(),
	    new SolidityTypeDynamicBytes(),
	    new SolidityTypeBytes(),
	    new SolidityTypeString(),
	    new SolidityTypeReal(),
	    new SolidityTypeUReal()
	]);

	module.exports = coder;


/***/ },
/* 98 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var XMLHttpRequestEventTarget = /** @class */ (function () {
	    function XMLHttpRequestEventTarget() {
	        this.listeners = {};
	    }
	    XMLHttpRequestEventTarget.prototype.addEventListener = function (eventType, listener) {
	        eventType = eventType.toLowerCase();
	        this.listeners[eventType] = this.listeners[eventType] || [];
	        this.listeners[eventType].push(listener.handleEvent || listener);
	    };
	    XMLHttpRequestEventTarget.prototype.removeEventListener = function (eventType, listener) {
	        eventType = eventType.toLowerCase();
	        if (!this.listeners[eventType]) {
	            return;
	        }
	        var index = this.listeners[eventType].indexOf(listener.handleEvent || listener);
	        if (index < 0) {
	            return;
	        }
	        this.listeners[eventType].splice(index, 1);
	    };
	    XMLHttpRequestEventTarget.prototype.dispatchEvent = function (event) {
	        var eventType = event.type.toLowerCase();
	        event.target = this; // TODO: set event.currentTarget?
	        if (this.listeners[eventType]) {
	            for (var _i = 0, _a = this.listeners[eventType]; _i < _a.length; _i++) {
	                var listener_1 = _a[_i];
	                listener_1.call(this, event);
	            }
	        }
	        var listener = this["on" + eventType];
	        if (listener) {
	            listener.call(this, event);
	        }
	        return true;
	    };
	    return XMLHttpRequestEventTarget;
	}());
	exports.XMLHttpRequestEventTarget = XMLHttpRequestEventTarget;
	//# sourceMappingURL=xml-http-request-event-target.js.map

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	exports.default = function (coll, iteratee, callback) {
	    var eachOfImplementation = (0, _isArrayLike2.default)(coll) ? eachOfArrayLike : eachOfGeneric;
	    eachOfImplementation(coll, (0, _wrapAsync2.default)(iteratee), callback);
	};

	var _isArrayLike = __webpack_require__(65);

	var _isArrayLike2 = _interopRequireDefault(_isArrayLike);

	var _breakLoop = __webpack_require__(100);

	var _breakLoop2 = _interopRequireDefault(_breakLoop);

	var _eachOfLimit = __webpack_require__(172);

	var _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);

	var _doLimit = __webpack_require__(101);

	var _doLimit2 = _interopRequireDefault(_doLimit);

	var _noop = __webpack_require__(49);

	var _noop2 = _interopRequireDefault(_noop);

	var _once = __webpack_require__(73);

	var _once2 = _interopRequireDefault(_once);

	var _onlyOnce = __webpack_require__(74);

	var _onlyOnce2 = _interopRequireDefault(_onlyOnce);

	var _wrapAsync = __webpack_require__(21);

	var _wrapAsync2 = _interopRequireDefault(_wrapAsync);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// eachOf implementation optimized for array-likes
	function eachOfArrayLike(coll, iteratee, callback) {
	    callback = (0, _once2.default)(callback || _noop2.default);
	    var index = 0,
	        completed = 0,
	        length = coll.length;
	    if (length === 0) {
	        callback(null);
	    }

	    function iteratorCallback(err, value) {
	        if (err) {
	            callback(err);
	        } else if (++completed === length || value === _breakLoop2.default) {
	            callback(null);
	        }
	    }

	    for (; index < length; index++) {
	        iteratee(coll[index], index, (0, _onlyOnce2.default)(iteratorCallback));
	    }
	}

	// a generic version of eachOf which can handle array, object, and iterator cases.
	var eachOfGeneric = (0, _doLimit2.default)(_eachOfLimit2.default, Infinity);

	/**
	 * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument
	 * to the iteratee.
	 *
	 * @name eachOf
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @alias forEachOf
	 * @category Collection
	 * @see [async.each]{@link module:Collections.each}
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {AsyncFunction} iteratee - A function to apply to each
	 * item in `coll`.
	 * The `key` is the item's key, or index in the case of an array.
	 * Invoked with (item, key, callback).
	 * @param {Function} [callback] - A callback which is called when all
	 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
	 * @example
	 *
	 * var obj = {dev: "/dev.json", test: "/test.json", prod: "/prod.json"};
	 * var configs = {};
	 *
	 * async.forEachOf(obj, function (value, key, callback) {
	 *     fs.readFile(__dirname + value, "utf8", function (err, data) {
	 *         if (err) return callback(err);
	 *         try {
	 *             configs[key] = JSON.parse(data);
	 *         } catch (e) {
	 *             return callback(e);
	 *         }
	 *         callback();
	 *     });
	 * }, function (err) {
	 *     if (err) console.error(err.message);
	 *     // configs is now a map of JSON data
	 *     doSomethingWith(configs);
	 * });
	 */
	module.exports = exports['default'];

/***/ },
/* 100 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	// A temporary value used to identify if the loop should be broken.
	// See #1064, #1293
	exports.default = {};
	module.exports = exports["default"];

/***/ },
/* 101 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = doLimit;
	function doLimit(fn, limit) {
	    return function (iterable, iteratee, callback) {
	        return fn(iterable, limit, iteratee, callback);
	    };
	}
	module.exports = exports["default"];

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = _eachOfLimit;

	var _noop = __webpack_require__(49);

	var _noop2 = _interopRequireDefault(_noop);

	var _once = __webpack_require__(73);

	var _once2 = _interopRequireDefault(_once);

	var _iterator = __webpack_require__(177);

	var _iterator2 = _interopRequireDefault(_iterator);

	var _onlyOnce = __webpack_require__(74);

	var _onlyOnce2 = _interopRequireDefault(_onlyOnce);

	var _breakLoop = __webpack_require__(100);

	var _breakLoop2 = _interopRequireDefault(_breakLoop);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _eachOfLimit(limit) {
	    return function (obj, iteratee, callback) {
	        callback = (0, _once2.default)(callback || _noop2.default);
	        if (limit <= 0 || !obj) {
	            return callback(null);
	        }
	        var nextElem = (0, _iterator2.default)(obj);
	        var done = false;
	        var running = 0;
	        var looping = false;

	        function iterateeCallback(err, value) {
	            running -= 1;
	            if (err) {
	                done = true;
	                callback(err);
	            } else if (value === _breakLoop2.default || done && running <= 0) {
	                done = true;
	                return callback(null);
	            } else if (!looping) {
	                replenish();
	            }
	        }

	        function replenish() {
	            looping = true;
	            while (running < limit && !done) {
	                var elem = nextElem();
	                if (elem === null) {
	                    done = true;
	                    if (running <= 0) {
	                        callback(null);
	                    }
	                    return;
	                }
	                running += 1;
	                iteratee(elem.value, elem.key, (0, _onlyOnce2.default)(iterateeCallback));
	            }
	            looping = false;
	        }

	        replenish();
	    };
	}
	module.exports = exports['default'];

/***/ },
/* 103 */
/***/ function(module, exports) {

	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

	function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

	module.exports = getBlocksForRange;

	function getBlocksForRange(_x) {
	  return _getBlocksForRange.apply(this, arguments);
	}

	function _getBlocksForRange() {
	  _getBlocksForRange = _asyncToGenerator(function* ({
	    provider,
	    fromBlock,
	    toBlock
	  }) {
	    if (!fromBlock) fromBlock = toBlock;
	    const fromBlockNumber = hexToInt(fromBlock);
	    const toBlockNumber = hexToInt(toBlock);
	    const blockCountToQuery = toBlockNumber - fromBlockNumber + 1; // load all blocks from old to new (inclusive)

	    const missingBlockNumbers = Array(blockCountToQuery).fill().map((_, index) => fromBlockNumber + index).map(intToHex);
	    const blockBodies = yield Promise.all(missingBlockNumbers.map(blockNum => query(provider, 'eth_getBlockByNumber', [blockNum, false])));
	    return blockBodies;
	  });
	  return _getBlocksForRange.apply(this, arguments);
	}

	function hexToInt(hexString) {
	  if (hexString === undefined || hexString === null) return hexString;
	  return Number.parseInt(hexString, 16);
	}

	function incrementHexInt(hexString) {
	  if (hexString === undefined || hexString === null) return hexString;
	  const value = hexToInt(hexString);
	  return intToHex(value + 1);
	}

	function intToHex(int) {
	  if (int === undefined || int === null) return int;
	  const hexString = int.toString(16);
	  return '0x' + hexString;
	}

	function query(provider, method, params) {
	  return new Promise((resolve, reject) => {
	    provider.sendAsync({
	      id: 1,
	      jsonrpc: '2.0',
	      method,
	      params
	    }, (err, res) => {
	      if (err) return reject(err);
	      resolve(res.result);
	    });
	  });
	}

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {const SHA3 = __webpack_require__(331);

	const secp256k1 = __webpack_require__(290);

	const assert = __webpack_require__(5);

	const rlp = __webpack_require__(22);

	const BN = __webpack_require__(4);

	const crypto = __webpack_require__(60);
	/**
	 * the max integer that this VM can handle (a ```BN```)
	 * @var {BN} MAX_INTEGER
	 */


	exports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);
	/**
	 * 2^256 (a ```BN```)
	 * @var {BN} TWO_POW256
	 */

	exports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16);
	/**
	 * SHA3-256 hash of null (a ```String```)
	 * @var {String} SHA3_NULL_S
	 */

	exports.SHA3_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
	/**
	 * SHA3-256 hash of null (a ```Buffer```)
	 * @var {Buffer} SHA3_NULL
	 */

	exports.SHA3_NULL = new Buffer(exports.SHA3_NULL_S, 'hex');
	/**
	 * SHA3-256 of an RLP of an empty array (a ```String```)
	 * @var {String} SHA3_RLP_ARRAY_S
	 */

	exports.SHA3_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';
	/**
	 * SHA3-256 of an RLP of an empty array (a ```Buffer```)
	 * @var {Buffer} SHA3_RLP_ARRAY
	 */

	exports.SHA3_RLP_ARRAY = new Buffer(exports.SHA3_RLP_ARRAY_S, 'hex');
	/**
	 * SHA3-256 hash of the RLP of null  (a ```String```)
	 * @var {String} SHA3_RLP_S
	 */

	exports.SHA3_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';
	/**
	 * SHA3-256 hash of the RLP of null (a ```Buffer```)
	 * @var {Buffer} SHA3_RLP
	 */

	exports.SHA3_RLP = new Buffer(exports.SHA3_RLP_S, 'hex');
	/**
	 * [`BN`](https://github.com/indutny/bn.js)
	 * @var {Function}
	 */

	exports.BN = BN;
	/**
	 * [`rlp`](https://github.com/ethereumjs/rlp)
	 * @var {Function}
	 */

	exports.rlp = rlp;
	/**
	 * [`secp256k1`](https://github.com/cryptocoinjs/secp256k1-node/)
	 * @var {Object}
	 */

	exports.secp256k1 = secp256k1;
	/**
	 * Returns a buffer filled with 0s
	 * @method zeros
	 * @param {Number} bytes  the number of bytes the buffer should be
	 * @return {Buffer}
	 */

	exports.zeros = function (bytes) {
	  var buf = new Buffer(bytes);
	  buf.fill(0);
	  return buf;
	};
	/**
	 * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
	 * Or it truncates the beginning if it exceeds.
	 * @method lsetLength
	 * @param {Buffer|Array} msg the value to pad
	 * @param {Number} length the number of bytes the output should be
	 * @param {Boolean} [right=false] whether to start padding form the left or right
	 * @return {Buffer|Array}
	 */


	exports.setLengthLeft = exports.setLength = function (msg, length, right) {
	  var buf = exports.zeros(length);
	  msg = exports.toBuffer(msg);

	  if (right) {
	    if (msg.length < length) {
	      msg.copy(buf);
	      return buf;
	    }

	    return msg.slice(0, length);
	  } else {
	    if (msg.length < length) {
	      msg.copy(buf, length - msg.length);
	      return buf;
	    }

	    return msg.slice(-length);
	  }
	};
	/**
	 * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
	 * Or it truncates the beginning if it exceeds.
	 * @method lsetLength
	 * @param {Buffer|Array} msg the value to pad
	 * @param {Number} length the number of bytes the output should be
	 * @return {Buffer|Array}
	 */


	exports.setLengthRight = function (msg, length) {
	  return exports.setLength(msg, length, true);
	};
	/**
	 * Trims leading zeros from a `Buffer` or an `Array`
	 * @method unpad
	 * @param {Buffer|Array|String} a
	 * @return {Buffer|Array|String}
	 */


	exports.unpad = exports.stripZeros = function (a) {
	  a = exports.stripHexPrefix(a);
	  var first = a[0];

	  while (a.length > 0 && first.toString() === '0') {
	    a = a.slice(1);
	    first = a[0];
	  }

	  return a;
	};
	/**
	 * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.
	 * @method toBuffer
	 * @param {*} v the value
	 */


	exports.toBuffer = function (v) {
	  if (!Buffer.isBuffer(v)) {
	    if (Array.isArray(v)) {
	      v = new Buffer(v);
	    } else if (typeof v === 'string') {
	      if (exports.isHexPrefixed(v)) {
	        v = new Buffer(exports.padToEven(exports.stripHexPrefix(v)), 'hex');
	      } else {
	        v = new Buffer(v);
	      }
	    } else if (typeof v === 'number') {
	      v = exports.intToBuffer(v);
	    } else if (v === null || v === undefined) {
	      v = new Buffer([]);
	    } else if (v.toArray) {
	      // converts a BN to a Buffer
	      v = new Buffer(v.toArray());
	    } else {
	      throw new Error('invalid type');
	    }
	  }

	  return v;
	};
	/**
	 * Converts a `Number` into a hex `String`
	 * @method intToHex
	 * @param {Number} i
	 * @return {String}
	 */


	exports.intToHex = function (i) {
	  assert(i % 1 === 0, 'number is not a integer');
	  assert(i >= 0, 'number must be positive');
	  var hex = i.toString(16);

	  if (hex.length % 2) {
	    hex = '0' + hex;
	  }

	  return '0x' + hex;
	};
	/**
	 * Converts an `Number` to a `Buffer`
	 * @method intToBuffer
	 * @param {Number} i
	 * @return {Buffer}
	 */


	exports.intToBuffer = function (i) {
	  var hex = exports.intToHex(i);
	  return new Buffer(hex.slice(2), 'hex');
	};
	/**
	 * Converts a `Buffer` to a `Number`
	 * @method bufferToInt
	 * @param {Buffer} buf
	 * @return {Number}
	 */


	exports.bufferToInt = function (buf) {
	  return parseInt(exports.bufferToHex(buf), 16);
	};
	/**
	 * Converts a `Buffer` into a hex `String`
	 * @method bufferToHex
	 * @param {Buffer} buf
	 * @return {String}
	 */


	exports.bufferToHex = function (buf) {
	  buf = exports.toBuffer(buf);

	  if (buf.length === 0) {
	    return 0;
	  }

	  return '0x' + buf.toString('hex');
	};
	/**
	 * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.
	 * @method fromSigned
	 * @param {Buffer} num
	 * @return {BN}
	 */


	exports.fromSigned = function (num) {
	  return new BN(num).fromTwos(256);
	};
	/**
	 * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.
	 * @method toUnsigned
	 * @param {BN} num
	 * @return {Buffer}
	 */


	exports.toUnsigned = function (num) {
	  return new Buffer(num.toTwos(256).toArray());
	};
	/**
	 * Creates SHA-3 hash of the input
	 * @method sha3
	 * @param {Buffer|Array|String|Number} a the input data
	 * @param {Number} [bytes=256] the SHA width
	 * @return {Buffer}
	 */


	exports.sha3 = function (a, bytes) {
	  a = exports.toBuffer(a);
	  if (!bytes) bytes = 256;
	  var h = new SHA3(bytes);

	  if (a) {
	    h.update(a);
	  }

	  return new Buffer(h.digest('hex'), 'hex');
	};
	/**
	 * Creates SHA256 hash of the input
	 * @method sha256
	 * @param {Buffer|Array|String|Number} a the input data
	 * @return {Buffer}
	 */


	exports.sha256 = function (a) {
	  a = exports.toBuffer(a);
	  return crypto.createHash('SHA256').update(a).digest();
	};
	/**
	 * Creates RIPEMD160 hash of the input
	 * @method ripemd160
	 * @param {Buffer|Array|String|Number} a the input data
	 * @param {Boolean} padded whether it should be padded to 256 bits or not
	 * @return {Buffer}
	 */


	exports.ripemd160 = function (a, padded) {
	  a = exports.toBuffer(a);
	  var hash = crypto.createHash('rmd160').update(a).digest();

	  if (padded === true) {
	    return exports.setLength(hash, 32);
	  } else {
	    return hash;
	  }
	};
	/**
	 * Creates SHA-3 hash of the RLP encoded version of the input
	 * @method rlphash
	 * @param {Buffer|Array|String|Number} a the input data
	 * @return {Buffer}
	 */


	exports.rlphash = function (a) {
	  return exports.sha3(rlp.encode(a));
	};
	/**
	 * Checks if the private key satisfies the rules of the curve secp256k1.
	 * @method isValidPrivate
	 * @param {Buffer} privateKey
	 * @return {Boolean}
	 */


	exports.isValidPrivate = function (privateKey) {
	  return secp256k1.privateKeyVerify(privateKey);
	};
	/**
	 * Returns the ethereum address of a given public key.
	 * Accepts "Ethereum public keys" and SEC1 encoded keys.
	 * @method publicToAddress
	 * @param {Buffer} pubKey The two points of an uncompressed key, unless sanitize is enabled
	 * @param {Boolean} sanitize Accept public keys in other formats
	 * @return {Buffer}
	 */


	exports.pubToAddress = exports.publicToAddress = function (pubKey, sanitize) {
	  pubKey = exports.toBuffer(pubKey);

	  if (sanitize && pubKey.length !== 64) {
	    pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);
	  }

	  assert(pubKey.length === 64); // Only take the lower 160bits of the hash

	  return exports.sha3(pubKey).slice(-20);
	};
	/**
	 * Returns the ethereum public key of a given private key
	 * @method privateToPublic
	 * @param {Buffer} privateKey A private key must be 256 bits wide
	 * @return {Buffer}
	 */


	var privateToPublic = exports.privateToPublic = function (privateKey) {
	  privateKey = exports.toBuffer(privateKey); // skip the type flag and use the X, Y points

	  return secp256k1.publicKeyConvert(secp256k1.publicKeyCreate(privateKey), false).slice(1);
	};
	/**
	 * Returns the ethereum address of a given private key
	 * @method privateToAddress
	 * @param {Buffer} privateKey A private key must be 256 bits wide
	 * @return {Buffer}
	 */


	exports.privateToAddress = function (privateKey) {
	  return exports.publicToAddress(privateToPublic(privateKey));
	};
	/**
	 * Checks if the address is a valid. Accepts checksummed addresses too
	 * @method isValidAddress
	 * @param {String} address
	 * @return {Boolean}
	 */


	exports.isValidAddress = function (address) {
	  return /^0x[0-9a-fA-F]{40}$/i.test(address);
	};
	/**
	 * Returns a checksummed address
	 * @method toChecksumAddress
	 * @param {String} address
	 * @return {String}
	 */


	exports.toChecksumAddress = function (address) {
	  address = exports.stripHexPrefix(address).toLowerCase();
	  var hash = exports.sha3(address).toString('hex');
	  var ret = '0x';

	  for (var i = 0; i < address.length; i++) {
	    if (parseInt(hash[i], 16) >= 8) {
	      ret += address[i].toUpperCase();
	    } else {
	      ret += address[i];
	    }
	  }

	  return ret;
	};
	/**
	 * Checks if the address is a valid checksummed address
	 * @method isValidChecksumAddress
	 * @param {Buffer} address
	 * @return {Boolean}
	 */


	exports.isValidChecksumAddress = function (address) {
	  return exports.isValidAddress(address) && exports.toChecksumAddress(address) === address;
	};
	/**
	 * Generates an address of a newly created contract
	 * @method generateAddress
	 * @param {Buffer} from the address which is creating this new address
	 * @param {Buffer} nonce the nonce of the from account
	 * @return {Buffer}
	 */


	exports.generateAddress = function (from, nonce) {
	  from = exports.toBuffer(from);
	  nonce = new BN(nonce);

	  if (nonce.isZero()) {
	    // in RLP we want to encode null in the case of zero nonce
	    // read the RLP documentation for an answer if you dare
	    nonce = null;
	  } else {
	    nonce = new Buffer(nonce.toArray());
	  } // Only take the lower 160bits of the hash


	  return exports.rlphash([from, nonce]).slice(-20);
	};
	/**
	 * Returns true if the supplied address belongs to a precompiled account
	 * @method isPrecompiled
	 * @param {Buffer|String} address
	 * @return {Boolean}
	 */


	exports.isPrecompiled = function (address) {
	  var a = exports.unpad(address);
	  return a.length === 1 && a[0] > 0 && a[0] < 5;
	};
	/**
	 * Returns a `Boolean` on whether or not the a `String` starts with "0x"
	 * @method isHexPrefixed
	 * @param {String} str
	 * @return {Boolean}
	 */


	exports.isHexPrefixed = function (str) {
	  return str.slice(0, 2) === '0x';
	};
	/**
	 * Removes "0x" from a given `String`
	 * @method stripHexPrefix
	 * @param {String} str
	 * @return {String}
	 */


	exports.stripHexPrefix = function (str) {
	  if (typeof str !== 'string') {
	    return str;
	  }

	  return exports.isHexPrefixed(str) ? str.slice(2) : str;
	};
	/**
	 * Adds "0x" to a given `String` if it does not already start with "0x"
	 * @method addHexPrefix
	 * @param {String} str
	 * @return {String}
	 */


	exports.addHexPrefix = function (str) {
	  if (typeof str !== 'string') {
	    return str;
	  }

	  return exports.isHexPrefixed(str) ? str : '0x' + str;
	};
	/**
	 * Pads a `String` to have an even length
	 * @method padToEven
	 * @param {String} a
	 * @return {String}
	 */


	exports.padToEven = function (a) {
	  if (a.length % 2) a = '0' + a;
	  return a;
	};
	/**
	 * ECDSA sign
	 * @method ecsign
	 * @param {Buffer} msgHash
	 * @param {Buffer} privateKey
	 * @return {Object}
	 */


	exports.ecsign = function (msgHash, privateKey) {
	  var sig = secp256k1.sign(msgHash, privateKey);
	  var ret = {};
	  ret.r = sig.signature.slice(0, 32);
	  ret.s = sig.signature.slice(32, 64);
	  ret.v = sig.recovery + 27;
	  return ret;
	};
	/**
	 * ECDSA public key recovery from signature
	 * @method ecrecover
	 * @param {Buffer} msgHash
	 * @param {Buffer} v
	 * @param {Buffer} r
	 * @param {Buffer} s
	 * @return {Buffer} publicKey
	 */


	exports.ecrecover = function (msgHash, v, r, s) {
	  var signature = Buffer.concat([exports.setLength(r, 32), exports.setLength(s, 32)], 64);
	  var recovery = exports.bufferToInt(v) - 27;

	  if (recovery !== 0 && recovery !== 1) {
	    throw new Error('Invalid signature v value');
	  }

	  var senderPubKey = secp256k1.recover(msgHash, signature, recovery);
	  return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);
	};
	/**
	 * Converts a `Buffer` or `Array` to JSON
	 * @method BAToJSON
	 * @param {Buffer|Array} ba
	 * @return {Array|String|null}
	 */


	exports.baToJSON = function (ba) {
	  if (Buffer.isBuffer(ba)) {
	    return '0x' + ba.toString('hex');
	  } else if (ba instanceof Array) {
	    var array = [];

	    for (var i = 0; i < ba.length; i++) {
	      array.push(exports.baToJSON(ba[i]));
	    }

	    return array;
	  }
	};
	/**
	 * Defines properties on a `Object`. It make the assumption that underlying data is binary.
	 * @method defineProperties
	 * @param {Object} self the `Object` to define properties on
	 * @param {Array} fields an array fields to define. Fields can contain:
	 * * `name` - the name of the properties
	 * * `length` - the number of bytes the field can have
	 * * `allowLess` - if the field can be less than the length
	 * * `allowEmpty`
	 * @param {*} data data to be validated against the definitions
	 */


	exports.defineProperties = function (self, fields, data) {
	  self.raw = [];
	  self._fields = []; // attach the `toJSON`

	  self.toJSON = function (label) {
	    if (label) {
	      var obj = {};

	      self._fields.forEach(function (field) {
	        obj[field] = '0x' + self[field].toString('hex');
	      });

	      return obj;
	    }

	    return exports.baToJSON(this.raw);
	  };

	  self.serialize = function serialize() {
	    return rlp.encode(self.raw);
	  };

	  fields.forEach(function (field, i) {
	    self._fields.push(field.name);

	    function getter() {
	      return self.raw[i];
	    }

	    function setter(v) {
	      v = exports.toBuffer(v);

	      if (v.toString('hex') === '00' && !field.allowZero) {
	        v = new Buffer([]);
	      }

	      if (field.allowLess && field.length) {
	        v = exports.stripZeros(v);
	        assert(field.length >= v.length, 'The field ' + field.name + ' must not have more ' + field.length + ' bytes');
	      } else if (!(field.allowZero && v.length === 0) && field.length) {
	        assert(field.length === v.length, 'The field ' + field.name + ' must have byte length of ' + field.length);
	      }

	      self.raw[i] = v;
	    }

	    Object.defineProperty(self, field.name, {
	      enumerable: true,
	      configurable: true,
	      get: getter,
	      set: setter
	    });

	    if (field.default) {
	      self[field.name] = field.default;
	    } // attach alias


	    if (field.alias) {
	      Object.defineProperty(self, field.alias, {
	        enumerable: false,
	        configurable: true,
	        set: setter,
	        get: getter
	      });
	    }
	  }); // if the constuctor is passed data

	  if (data) {
	    if (typeof data === 'string') {
	      data = new Buffer(exports.stripHexPrefix(data), 'hex');
	    }

	    if (Buffer.isBuffer(data)) {
	      data = rlp.decode(data);
	    }

	    if (Array.isArray(data)) {
	      if (data.length > self._fields.length) {
	        throw new Error('wrong number of fields in data');
	      } // make sure all the items are buffers


	      data.forEach(function (d, i) {
	        self[self._fields[i]] = exports.toBuffer(d);
	      });
	    } else if (typeof data === 'object') {
	      for (var prop in data) {
	        if (self._fields.indexOf(prop) !== -1) {
	          self[prop] = data[prop];
	        }
	      }
	    } else {
	      throw new Error('invalid data');
	    }
	  }
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	const EventEmitter = __webpack_require__(19).EventEmitter;

	const inherits = __webpack_require__(11).inherits;

	const ethUtil = __webpack_require__(53);

	const EthBlockTracker = __webpack_require__(192);

	const map = __webpack_require__(182);

	const eachSeries = __webpack_require__(173);

	const Stoplight = __webpack_require__(213);

	const cacheUtils = __webpack_require__(108);

	const createPayload = __webpack_require__(55);

	const noop = function () {};

	module.exports = Web3ProviderEngine;
	inherits(Web3ProviderEngine, EventEmitter);

	function Web3ProviderEngine(opts) {
	  const self = this;
	  EventEmitter.call(self);
	  self.setMaxListeners(30); // parse options

	  opts = opts || {}; // block polling

	  const directProvider = {
	    sendAsync: self._handleAsync.bind(self)
	  };
	  const blockTrackerProvider = opts.blockTrackerProvider || directProvider;
	  self._blockTracker = opts.blockTracker || new EthBlockTracker({
	    provider: blockTrackerProvider,
	    pollingInterval: opts.pollingInterval || 4000,
	    setSkipCacheFlag: true
	  }); // set initialization blocker

	  self._ready = new Stoplight(); // local state

	  self.currentBlock = null;
	  self._providers = [];
	} // public


	Web3ProviderEngine.prototype.start = function (cb = noop) {
	  const self = this; // trigger start

	  self._ready.go(); // on new block, request block body and emit as events


	  self._blockTracker.on('latest', blockNumber => {
	    // get block body
	    self._getBlockByNumberWithRetry(blockNumber, (err, block) => {
	      if (err) {
	        this.emit('error', err);
	        return;
	      }

	      if (!block) {
	        console.log(block);
	        this.emit('error', new Error("Could not find block"));
	        return;
	      }

	      const bufferBlock = toBufferBlock(block); // set current + emit "block" event

	      self._setCurrentBlock(bufferBlock); // emit other events


	      self.emit('rawBlock', block);
	      self.emit('latest', block);
	    });
	  }); // forward other events


	  self._blockTracker.on('sync', self.emit.bind(self, 'sync'));

	  self._blockTracker.on('error', self.emit.bind(self, 'error')); // update state


	  self._running = true; // signal that we started

	  self.emit('start');
	};

	Web3ProviderEngine.prototype.stop = function () {
	  const self = this; // stop block polling by removing event listeners

	  self._blockTracker.removeAllListeners(); // update state


	  self._running = false; // signal that we stopped

	  self.emit('stop');
	};

	Web3ProviderEngine.prototype.isRunning = function () {
	  const self = this;
	  return self._running;
	};

	Web3ProviderEngine.prototype.addProvider = function (source, index) {
	  const self = this;

	  if (typeof index === 'number') {
	    self._providers.splice(index, 0, source);
	  } else {
	    self._providers.push(source);
	  }

	  source.setEngine(this);
	};

	Web3ProviderEngine.prototype.removeProvider = function (source) {
	  const self = this;

	  const index = self._providers.indexOf(source);

	  if (index < 0) throw new Error('Provider not found.');

	  self._providers.splice(index, 1);
	};

	Web3ProviderEngine.prototype.send = function (payload) {
	  throw new Error('Web3ProviderEngine does not support synchronous requests.');
	};

	Web3ProviderEngine.prototype.sendAsync = function (payload, cb) {
	  const self = this;

	  self._ready.await(function () {
	    if (Array.isArray(payload)) {
	      // handle batch
	      map(payload, self._handleAsync.bind(self), cb);
	    } else {
	      // handle single
	      self._handleAsync(payload, cb);
	    }
	  });
	}; // private


	Web3ProviderEngine.prototype._getBlockByNumberWithRetry = function (blockNumber, cb) {
	  const self = this;
	  let retriesRemaining = 5;
	  attemptRequest();
	  return;

	  function attemptRequest() {
	    self._getBlockByNumber(blockNumber, afterRequest);
	  }

	  function afterRequest(err, block) {
	    // anomalous error occurred
	    if (err) return cb(err); // block not ready yet

	    if (!block) {
	      if (retriesRemaining > 0) {
	        // wait 1s then try again
	        retriesRemaining--;
	        setTimeout(function () {
	          attemptRequest();
	        }, 1000);
	        return;
	      } else {
	        // give up, return a null block
	        cb(null, null);
	        return;
	      }
	    } // otherwise return result


	    cb(null, block);
	    return;
	  }
	};

	Web3ProviderEngine.prototype._getBlockByNumber = function (blockNumber, cb) {
	  const req = createPayload({
	    method: 'eth_getBlockByNumber',
	    params: [blockNumber, false],
	    skipCache: true
	  });

	  this._handleAsync(req, (err, res) => {
	    if (err) return cb(err);
	    return cb(null, res.result);
	  });
	};

	Web3ProviderEngine.prototype._handleAsync = function (payload, finished) {
	  var self = this;
	  var currentProvider = -1;
	  var result = null;
	  var error = null;
	  var stack = [];
	  next();

	  function next(after) {
	    currentProvider += 1;
	    stack.unshift(after); // Bubbled down as far as we could go, and the request wasn't
	    // handled. Return an error.

	    if (currentProvider >= self._providers.length) {
	      end(new Error('Request for method "' + payload.method + '" not handled by any subprovider. Please check your subprovider configuration to ensure this method is handled.'));
	    } else {
	      try {
	        var provider = self._providers[currentProvider];
	        provider.handleRequest(payload, next, end);
	      } catch (e) {
	        end(e);
	      }
	    }
	  }

	  function end(_error, _result) {
	    error = _error;
	    result = _result;
	    eachSeries(stack, function (fn, callback) {
	      if (fn) {
	        fn(error, result, callback);
	      } else {
	        callback();
	      }
	    }, function () {
	      var resultObj = {
	        id: payload.id,
	        jsonrpc: payload.jsonrpc,
	        result: result
	      };

	      if (error != null) {
	        resultObj.error = {
	          message: error.stack || error.message || error,
	          code: -32000
	        }; // respond with both error formats

	        finished(error, resultObj);
	      } else {
	        finished(null, resultObj);
	      }
	    });
	  }
	}; //
	// from remote-data
	//


	Web3ProviderEngine.prototype._setCurrentBlock = function (block) {
	  const self = this;
	  self.currentBlock = block;
	  self.emit('block', block);
	}; // util


	function toBufferBlock(jsonBlock) {
	  return {
	    number: ethUtil.toBuffer(jsonBlock.number),
	    hash: ethUtil.toBuffer(jsonBlock.hash),
	    parentHash: ethUtil.toBuffer(jsonBlock.parentHash),
	    nonce: ethUtil.toBuffer(jsonBlock.nonce),
	    mixHash: ethUtil.toBuffer(jsonBlock.mixHash),
	    sha3Uncles: ethUtil.toBuffer(jsonBlock.sha3Uncles),
	    logsBloom: ethUtil.toBuffer(jsonBlock.logsBloom),
	    transactionsRoot: ethUtil.toBuffer(jsonBlock.transactionsRoot),
	    stateRoot: ethUtil.toBuffer(jsonBlock.stateRoot),
	    receiptsRoot: ethUtil.toBuffer(jsonBlock.receiptRoot || jsonBlock.receiptsRoot),
	    miner: ethUtil.toBuffer(jsonBlock.miner),
	    difficulty: ethUtil.toBuffer(jsonBlock.difficulty),
	    totalDifficulty: ethUtil.toBuffer(jsonBlock.totalDifficulty),
	    size: ethUtil.toBuffer(jsonBlock.size),
	    extraData: ethUtil.toBuffer(jsonBlock.extraData),
	    gasLimit: ethUtil.toBuffer(jsonBlock.gasLimit),
	    gasUsed: ethUtil.toBuffer(jsonBlock.gasUsed),
	    timestamp: ethUtil.toBuffer(jsonBlock.timestamp),
	    transactions: jsonBlock.transactions
	  };
	}

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	const ProviderSubprovider = __webpack_require__(209);

	const createFilterMiddleware = __webpack_require__(195);

	class SubscriptionsSubprovider extends ProviderSubprovider {
	  constructor() {
	    super(({
	      blockTracker,
	      provider,
	      engine
	    }) => {
	      return createFilterMiddleware({
	        blockTracker,
	        provider
	      });
	    });
	  }

	}

	module.exports = SubscriptionsSubprovider;

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {const inherits = __webpack_require__(11).inherits;

	const Transaction = __webpack_require__(76);

	const ethUtil = __webpack_require__(53);

	const Subprovider = __webpack_require__(54);

	const blockTagForPayload = __webpack_require__(108).blockTagForPayload;

	module.exports = NonceTrackerSubprovider; // handles the following RPC methods:
	//   eth_getTransactionCount (pending only)
	//
	// observes the following RPC methods:
	//   eth_sendRawTransaction
	//   evm_revert (to clear the nonce cache)

	inherits(NonceTrackerSubprovider, Subprovider);

	function NonceTrackerSubprovider(opts) {
	  const self = this;
	  self.nonceCache = {};
	}

	NonceTrackerSubprovider.prototype.handleRequest = function (payload, next, end) {
	  const self = this;

	  switch (payload.method) {
	    case 'eth_getTransactionCount':
	      var blockTag = blockTagForPayload(payload);
	      var address = payload.params[0].toLowerCase();
	      var cachedResult = self.nonceCache[address]; // only handle requests against the 'pending' blockTag

	      if (blockTag === 'pending') {
	        // has a result
	        if (cachedResult) {
	          end(null, cachedResult); // fallthrough then populate cache
	        } else {
	          next(function (err, result, cb) {
	            if (err) return cb();

	            if (self.nonceCache[address] === undefined) {
	              self.nonceCache[address] = result;
	            }

	            cb();
	          });
	        }
	      } else {
	        next();
	      }

	      return;

	    case 'eth_sendRawTransaction':
	      // allow the request to continue normally
	      next(function (err, result, cb) {
	        // only update local nonce if tx was submitted correctly
	        if (err) return cb(); // parse raw tx

	        var rawTx = payload.params[0];
	        var stripped = ethUtil.stripHexPrefix(rawTx);
	        var rawData = Buffer.from(ethUtil.stripHexPrefix(rawTx), 'hex');
	        var tx = new Transaction(Buffer.from(ethUtil.stripHexPrefix(rawTx), 'hex')); // extract address

	        var address = '0x' + tx.getSenderAddress().toString('hex').toLowerCase(); // extract nonce and increment

	        var nonce = ethUtil.bufferToInt(tx.nonce);
	        nonce++; // hexify and normalize

	        var hexNonce = nonce.toString(16);
	        if (hexNonce.length % 2) hexNonce = '0' + hexNonce;
	        hexNonce = '0x' + hexNonce; // dont update our record on the nonce until the submit was successful
	        // update cache

	        self.nonceCache[address] = hexNonce;
	        cb();
	      });
	      return;
	    // Clear cache on a testrpc revert

	    case 'evm_revert':
	      self.nonceCache = {};
	      next();
	      return;

	    default:
	      next();
	      return;
	  }
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	const stringify = __webpack_require__(321);

	module.exports = {
	  cacheIdentifierForPayload: cacheIdentifierForPayload,
	  canCache: canCache,
	  blockTagForPayload: blockTagForPayload,
	  paramsWithoutBlockTag: paramsWithoutBlockTag,
	  blockTagParamIndex: blockTagParamIndex,
	  cacheTypeForPayload: cacheTypeForPayload
	};

	function cacheIdentifierForPayload(payload, opts = {}) {
	  if (!canCache(payload)) return null;
	  const {
	    includeBlockRef
	  } = opts;
	  const params = includeBlockRef ? payload.params : paramsWithoutBlockTag(payload);
	  return payload.method + ':' + stringify(params);
	}

	function canCache(payload) {
	  return cacheTypeForPayload(payload) !== 'never';
	}

	function blockTagForPayload(payload) {
	  var index = blockTagParamIndex(payload); // Block tag param not passed.

	  if (index >= payload.params.length) {
	    return null;
	  }

	  return payload.params[index];
	}

	function paramsWithoutBlockTag(payload) {
	  var index = blockTagParamIndex(payload); // Block tag param not passed.

	  if (index >= payload.params.length) {
	    return payload.params;
	  } // eth_getBlockByNumber has the block tag first, then the optional includeTx? param


	  if (payload.method === 'eth_getBlockByNumber') {
	    return payload.params.slice(1);
	  }

	  return payload.params.slice(0, index);
	}

	function blockTagParamIndex(payload) {
	  switch (payload.method) {
	    // blockTag is third param
	    case 'eth_getStorageAt':
	      return 2;
	    // blockTag is second param

	    case 'eth_getBalance':
	    case 'eth_getCode':
	    case 'eth_getTransactionCount':
	    case 'eth_call':
	    case 'eth_estimateGas':
	      return 1;
	    // blockTag is first param

	    case 'eth_getBlockByNumber':
	      return 0;
	    // there is no blockTag

	    default:
	      return undefined;
	  }
	}

	function cacheTypeForPayload(payload) {
	  switch (payload.method) {
	    // cache permanently
	    case 'web3_clientVersion':
	    case 'web3_sha3':
	    case 'eth_protocolVersion':
	    case 'eth_getBlockTransactionCountByHash':
	    case 'eth_getUncleCountByBlockHash':
	    case 'eth_getCode':
	    case 'eth_getBlockByHash':
	    case 'eth_getTransactionByHash':
	    case 'eth_getTransactionByBlockHashAndIndex':
	    case 'eth_getTransactionReceipt':
	    case 'eth_getUncleByBlockHashAndIndex':
	    case 'eth_getCompilers':
	    case 'eth_compileLLL':
	    case 'eth_compileSolidity':
	    case 'eth_compileSerpent':
	    case 'shh_version':
	      return 'perma';
	    // cache until fork

	    case 'eth_getBlockByNumber':
	    case 'eth_getBlockTransactionCountByNumber':
	    case 'eth_getUncleCountByBlockNumber':
	    case 'eth_getTransactionByBlockNumberAndIndex':
	    case 'eth_getUncleByBlockNumberAndIndex':
	      return 'fork';
	    // cache for block

	    case 'eth_gasPrice':
	    case 'eth_getBalance':
	    case 'eth_getStorageAt':
	    case 'eth_getTransactionCount':
	    case 'eth_call':
	    case 'eth_estimateGas':
	    case 'eth_getFilterLogs':
	    case 'eth_getLogs':
	    case 'eth_blockNumber':
	      return 'block';
	    // never cache

	    case 'net_version':
	    case 'net_peerCount':
	    case 'net_listening':
	    case 'eth_syncing':
	    case 'eth_sign':
	    case 'eth_coinbase':
	    case 'eth_mining':
	    case 'eth_hashrate':
	    case 'eth_accounts':
	    case 'eth_sendTransaction':
	    case 'eth_sendRawTransaction':
	    case 'eth_newFilter':
	    case 'eth_newBlockFilter':
	    case 'eth_newPendingTransactionFilter':
	    case 'eth_uninstallFilter':
	    case 'eth_getFilterChanges':
	    case 'eth_getWork':
	    case 'eth_submitWork':
	    case 'eth_submitHashrate':
	    case 'db_putString':
	    case 'db_getString':
	    case 'db_putHex':
	    case 'db_getHex':
	    case 'shh_post':
	    case 'shh_newIdentity':
	    case 'shh_hasIdentity':
	    case 'shh_newGroup':
	    case 'shh_addToGroup':
	    case 'shh_newFilter':
	    case 'shh_uninstallFilter':
	    case 'shh_getFilterChanges':
	    case 'shh_getMessages':
	      return 'never';
	  }
	}

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	// (public) Constructor
	function BigInteger(a, b, c) {
	  if (!(this instanceof BigInteger))
	    return new BigInteger(a, b, c)

	  if (a != null) {
	    if ("number" == typeof a) this.fromNumber(a, b, c)
	    else if (b == null && "string" != typeof a) this.fromString(a, 256)
	    else this.fromString(a, b)
	  }
	}

	var proto = BigInteger.prototype

	// duck-typed isBigInteger
	proto.__bigi = __webpack_require__(311).version
	BigInteger.isBigInteger = function (obj, check_ver) {
	  return obj && obj.__bigi && (!check_ver || obj.__bigi === proto.__bigi)
	}

	// Bits per digit
	var dbits

	// am: Compute w_j += (x*this_i), propagate carries,
	// c is initial carry, returns final carry.
	// c < 3*dvalue, x < 2*dvalue, this_i < dvalue
	// We need to select the fastest one that works in this environment.

	// am1: use a single mult and divide to get the high bits,
	// max digit bits should be 26 because
	// max internal value = 2*dvalue^2-2*dvalue (< 2^53)
	function am1(i, x, w, j, c, n) {
	  while (--n >= 0) {
	    var v = x * this[i++] + w[j] + c
	    c = Math.floor(v / 0x4000000)
	    w[j++] = v & 0x3ffffff
	  }
	  return c
	}
	// am2 avoids a big mult-and-extract completely.
	// Max digit bits should be <= 30 because we do bitwise ops
	// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
	function am2(i, x, w, j, c, n) {
	  var xl = x & 0x7fff,
	    xh = x >> 15
	  while (--n >= 0) {
	    var l = this[i] & 0x7fff
	    var h = this[i++] >> 15
	    var m = xh * l + h * xl
	    l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff)
	    c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30)
	    w[j++] = l & 0x3fffffff
	  }
	  return c
	}
	// Alternately, set max digit bits to 28 since some
	// browsers slow down when dealing with 32-bit numbers.
	function am3(i, x, w, j, c, n) {
	  var xl = x & 0x3fff,
	    xh = x >> 14
	  while (--n >= 0) {
	    var l = this[i] & 0x3fff
	    var h = this[i++] >> 14
	    var m = xh * l + h * xl
	    l = xl * l + ((m & 0x3fff) << 14) + w[j] + c
	    c = (l >> 28) + (m >> 14) + xh * h
	    w[j++] = l & 0xfffffff
	  }
	  return c
	}

	// wtf?
	BigInteger.prototype.am = am1
	dbits = 26

	BigInteger.prototype.DB = dbits
	BigInteger.prototype.DM = ((1 << dbits) - 1)
	var DV = BigInteger.prototype.DV = (1 << dbits)

	var BI_FP = 52
	BigInteger.prototype.FV = Math.pow(2, BI_FP)
	BigInteger.prototype.F1 = BI_FP - dbits
	BigInteger.prototype.F2 = 2 * dbits - BI_FP

	// Digit conversions
	var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz"
	var BI_RC = new Array()
	var rr, vv
	rr = "0".charCodeAt(0)
	for (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv
	rr = "a".charCodeAt(0)
	for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv
	rr = "A".charCodeAt(0)
	for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv

	function int2char(n) {
	  return BI_RM.charAt(n)
	}

	function intAt(s, i) {
	  var c = BI_RC[s.charCodeAt(i)]
	  return (c == null) ? -1 : c
	}

	// (protected) copy this to r
	function bnpCopyTo(r) {
	  for (var i = this.t - 1; i >= 0; --i) r[i] = this[i]
	  r.t = this.t
	  r.s = this.s
	}

	// (protected) set from integer value x, -DV <= x < DV
	function bnpFromInt(x) {
	  this.t = 1
	  this.s = (x < 0) ? -1 : 0
	  if (x > 0) this[0] = x
	  else if (x < -1) this[0] = x + DV
	  else this.t = 0
	}

	// return bigint initialized to value
	function nbv(i) {
	  var r = new BigInteger()
	  r.fromInt(i)
	  return r
	}

	// (protected) set from string and radix
	function bnpFromString(s, b) {
	  var self = this

	  var k
	  if (b == 16) k = 4
	  else if (b == 8) k = 3
	  else if (b == 256) k = 8; // byte array
	  else if (b == 2) k = 1
	  else if (b == 32) k = 5
	  else if (b == 4) k = 2
	  else {
	    self.fromRadix(s, b)
	    return
	  }
	  self.t = 0
	  self.s = 0
	  var i = s.length,
	    mi = false,
	    sh = 0
	  while (--i >= 0) {
	    var x = (k == 8) ? s[i] & 0xff : intAt(s, i)
	    if (x < 0) {
	      if (s.charAt(i) == "-") mi = true
	      continue
	    }
	    mi = false
	    if (sh == 0)
	      self[self.t++] = x
	    else if (sh + k > self.DB) {
	      self[self.t - 1] |= (x & ((1 << (self.DB - sh)) - 1)) << sh
	      self[self.t++] = (x >> (self.DB - sh))
	    } else
	      self[self.t - 1] |= x << sh
	    sh += k
	    if (sh >= self.DB) sh -= self.DB
	  }
	  if (k == 8 && (s[0] & 0x80) != 0) {
	    self.s = -1
	    if (sh > 0) self[self.t - 1] |= ((1 << (self.DB - sh)) - 1) << sh
	  }
	  self.clamp()
	  if (mi) BigInteger.ZERO.subTo(self, self)
	}

	// (protected) clamp off excess high words
	function bnpClamp() {
	  var c = this.s & this.DM
	  while (this.t > 0 && this[this.t - 1] == c)--this.t
	}

	// (public) return string representation in given radix
	function bnToString(b) {
	  var self = this
	  if (self.s < 0) return "-" + self.negate()
	    .toString(b)
	  var k
	  if (b == 16) k = 4
	  else if (b == 8) k = 3
	  else if (b == 2) k = 1
	  else if (b == 32) k = 5
	  else if (b == 4) k = 2
	  else return self.toRadix(b)
	  var km = (1 << k) - 1,
	    d, m = false,
	    r = "",
	    i = self.t
	  var p = self.DB - (i * self.DB) % k
	  if (i-- > 0) {
	    if (p < self.DB && (d = self[i] >> p) > 0) {
	      m = true
	      r = int2char(d)
	    }
	    while (i >= 0) {
	      if (p < k) {
	        d = (self[i] & ((1 << p) - 1)) << (k - p)
	        d |= self[--i] >> (p += self.DB - k)
	      } else {
	        d = (self[i] >> (p -= k)) & km
	        if (p <= 0) {
	          p += self.DB
	          --i
	        }
	      }
	      if (d > 0) m = true
	      if (m) r += int2char(d)
	    }
	  }
	  return m ? r : "0"
	}

	// (public) -this
	function bnNegate() {
	  var r = new BigInteger()
	  BigInteger.ZERO.subTo(this, r)
	  return r
	}

	// (public) |this|
	function bnAbs() {
	  return (this.s < 0) ? this.negate() : this
	}

	// (public) return + if this > a, - if this < a, 0 if equal
	function bnCompareTo(a) {
	  var r = this.s - a.s
	  if (r != 0) return r
	  var i = this.t
	  r = i - a.t
	  if (r != 0) return (this.s < 0) ? -r : r
	  while (--i >= 0)
	    if ((r = this[i] - a[i]) != 0) return r
	  return 0
	}

	// returns bit length of the integer x
	function nbits(x) {
	  var r = 1,
	    t
	  if ((t = x >>> 16) != 0) {
	    x = t
	    r += 16
	  }
	  if ((t = x >> 8) != 0) {
	    x = t
	    r += 8
	  }
	  if ((t = x >> 4) != 0) {
	    x = t
	    r += 4
	  }
	  if ((t = x >> 2) != 0) {
	    x = t
	    r += 2
	  }
	  if ((t = x >> 1) != 0) {
	    x = t
	    r += 1
	  }
	  return r
	}

	// (public) return the number of bits in "this"
	function bnBitLength() {
	  if (this.t <= 0) return 0
	  return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM))
	}

	// (public) return the number of bytes in "this"
	function bnByteLength() {
	  return this.bitLength() >> 3
	}

	// (protected) r = this << n*DB
	function bnpDLShiftTo(n, r) {
	  var i
	  for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i]
	  for (i = n - 1; i >= 0; --i) r[i] = 0
	  r.t = this.t + n
	  r.s = this.s
	}

	// (protected) r = this >> n*DB
	function bnpDRShiftTo(n, r) {
	  for (var i = n; i < this.t; ++i) r[i - n] = this[i]
	  r.t = Math.max(this.t - n, 0)
	  r.s = this.s
	}

	// (protected) r = this << n
	function bnpLShiftTo(n, r) {
	  var self = this
	  var bs = n % self.DB
	  var cbs = self.DB - bs
	  var bm = (1 << cbs) - 1
	  var ds = Math.floor(n / self.DB),
	    c = (self.s << bs) & self.DM,
	    i
	  for (i = self.t - 1; i >= 0; --i) {
	    r[i + ds + 1] = (self[i] >> cbs) | c
	    c = (self[i] & bm) << bs
	  }
	  for (i = ds - 1; i >= 0; --i) r[i] = 0
	  r[ds] = c
	  r.t = self.t + ds + 1
	  r.s = self.s
	  r.clamp()
	}

	// (protected) r = this >> n
	function bnpRShiftTo(n, r) {
	  var self = this
	  r.s = self.s
	  var ds = Math.floor(n / self.DB)
	  if (ds >= self.t) {
	    r.t = 0
	    return
	  }
	  var bs = n % self.DB
	  var cbs = self.DB - bs
	  var bm = (1 << bs) - 1
	  r[0] = self[ds] >> bs
	  for (var i = ds + 1; i < self.t; ++i) {
	    r[i - ds - 1] |= (self[i] & bm) << cbs
	    r[i - ds] = self[i] >> bs
	  }
	  if (bs > 0) r[self.t - ds - 1] |= (self.s & bm) << cbs
	  r.t = self.t - ds
	  r.clamp()
	}

	// (protected) r = this - a
	function bnpSubTo(a, r) {
	  var self = this
	  var i = 0,
	    c = 0,
	    m = Math.min(a.t, self.t)
	  while (i < m) {
	    c += self[i] - a[i]
	    r[i++] = c & self.DM
	    c >>= self.DB
	  }
	  if (a.t < self.t) {
	    c -= a.s
	    while (i < self.t) {
	      c += self[i]
	      r[i++] = c & self.DM
	      c >>= self.DB
	    }
	    c += self.s
	  } else {
	    c += self.s
	    while (i < a.t) {
	      c -= a[i]
	      r[i++] = c & self.DM
	      c >>= self.DB
	    }
	    c -= a.s
	  }
	  r.s = (c < 0) ? -1 : 0
	  if (c < -1) r[i++] = self.DV + c
	  else if (c > 0) r[i++] = c
	  r.t = i
	  r.clamp()
	}

	// (protected) r = this * a, r != this,a (HAC 14.12)
	// "this" should be the larger one if appropriate.
	function bnpMultiplyTo(a, r) {
	  var x = this.abs(),
	    y = a.abs()
	  var i = x.t
	  r.t = i + y.t
	  while (--i >= 0) r[i] = 0
	  for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t)
	  r.s = 0
	  r.clamp()
	  if (this.s != a.s) BigInteger.ZERO.subTo(r, r)
	}

	// (protected) r = this^2, r != this (HAC 14.16)
	function bnpSquareTo(r) {
	  var x = this.abs()
	  var i = r.t = 2 * x.t
	  while (--i >= 0) r[i] = 0
	  for (i = 0; i < x.t - 1; ++i) {
	    var c = x.am(i, x[i], r, 2 * i, 0, 1)
	    if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
	      r[i + x.t] -= x.DV
	      r[i + x.t + 1] = 1
	    }
	  }
	  if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1)
	  r.s = 0
	  r.clamp()
	}

	// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
	// r != q, this != m.  q or r may be null.
	function bnpDivRemTo(m, q, r) {
	  var self = this
	  var pm = m.abs()
	  if (pm.t <= 0) return
	  var pt = self.abs()
	  if (pt.t < pm.t) {
	    if (q != null) q.fromInt(0)
	    if (r != null) self.copyTo(r)
	    return
	  }
	  if (r == null) r = new BigInteger()
	  var y = new BigInteger(),
	    ts = self.s,
	    ms = m.s
	  var nsh = self.DB - nbits(pm[pm.t - 1]); // normalize modulus
	  if (nsh > 0) {
	    pm.lShiftTo(nsh, y)
	    pt.lShiftTo(nsh, r)
	  } else {
	    pm.copyTo(y)
	    pt.copyTo(r)
	  }
	  var ys = y.t
	  var y0 = y[ys - 1]
	  if (y0 == 0) return
	  var yt = y0 * (1 << self.F1) + ((ys > 1) ? y[ys - 2] >> self.F2 : 0)
	  var d1 = self.FV / yt,
	    d2 = (1 << self.F1) / yt,
	    e = 1 << self.F2
	  var i = r.t,
	    j = i - ys,
	    t = (q == null) ? new BigInteger() : q
	  y.dlShiftTo(j, t)
	  if (r.compareTo(t) >= 0) {
	    r[r.t++] = 1
	    r.subTo(t, r)
	  }
	  BigInteger.ONE.dlShiftTo(ys, t)
	  t.subTo(y, y); // "negative" y so we can replace sub with am later
	  while (y.t < ys) y[y.t++] = 0
	  while (--j >= 0) {
	    // Estimate quotient digit
	    var qd = (r[--i] == y0) ? self.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2)
	    if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) { // Try it out
	      y.dlShiftTo(j, t)
	      r.subTo(t, r)
	      while (r[i] < --qd) r.subTo(t, r)
	    }
	  }
	  if (q != null) {
	    r.drShiftTo(ys, q)
	    if (ts != ms) BigInteger.ZERO.subTo(q, q)
	  }
	  r.t = ys
	  r.clamp()
	  if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder
	  if (ts < 0) BigInteger.ZERO.subTo(r, r)
	}

	// (public) this mod a
	function bnMod(a) {
	  var r = new BigInteger()
	  this.abs()
	    .divRemTo(a, null, r)
	  if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r)
	  return r
	}

	// Modular reduction using "classic" algorithm
	function Classic(m) {
	  this.m = m
	}

	function cConvert(x) {
	  if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m)
	  else return x
	}

	function cRevert(x) {
	  return x
	}

	function cReduce(x) {
	  x.divRemTo(this.m, null, x)
	}

	function cMulTo(x, y, r) {
	  x.multiplyTo(y, r)
	  this.reduce(r)
	}

	function cSqrTo(x, r) {
	  x.squareTo(r)
	  this.reduce(r)
	}

	Classic.prototype.convert = cConvert
	Classic.prototype.revert = cRevert
	Classic.prototype.reduce = cReduce
	Classic.prototype.mulTo = cMulTo
	Classic.prototype.sqrTo = cSqrTo

	// (protected) return "-1/this % 2^DB"; useful for Mont. reduction
	// justification:
	//         xy == 1 (mod m)
	//         xy =  1+km
	//   xy(2-xy) = (1+km)(1-km)
	// x[y(2-xy)] = 1-k^2m^2
	// x[y(2-xy)] == 1 (mod m^2)
	// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
	// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
	// JS multiply "overflows" differently from C/C++, so care is needed here.
	function bnpInvDigit() {
	  if (this.t < 1) return 0
	  var x = this[0]
	  if ((x & 1) == 0) return 0
	  var y = x & 3; // y == 1/x mod 2^2
	  y = (y * (2 - (x & 0xf) * y)) & 0xf; // y == 1/x mod 2^4
	  y = (y * (2 - (x & 0xff) * y)) & 0xff; // y == 1/x mod 2^8
	  y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff; // y == 1/x mod 2^16
	  // last step - calculate inverse mod DV directly
	  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
	  y = (y * (2 - x * y % this.DV)) % this.DV; // y == 1/x mod 2^dbits
	  // we really want the negative inverse, and -DV < y < DV
	  return (y > 0) ? this.DV - y : -y
	}

	// Montgomery reduction
	function Montgomery(m) {
	  this.m = m
	  this.mp = m.invDigit()
	  this.mpl = this.mp & 0x7fff
	  this.mph = this.mp >> 15
	  this.um = (1 << (m.DB - 15)) - 1
	  this.mt2 = 2 * m.t
	}

	// xR mod m
	function montConvert(x) {
	  var r = new BigInteger()
	  x.abs()
	    .dlShiftTo(this.m.t, r)
	  r.divRemTo(this.m, null, r)
	  if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r)
	  return r
	}

	// x/R mod m
	function montRevert(x) {
	  var r = new BigInteger()
	  x.copyTo(r)
	  this.reduce(r)
	  return r
	}

	// x = x/R mod m (HAC 14.32)
	function montReduce(x) {
	  while (x.t <= this.mt2) // pad x so am has enough room later
	    x[x.t++] = 0
	  for (var i = 0; i < this.m.t; ++i) {
	    // faster way of calculating u0 = x[i]*mp mod DV
	    var j = x[i] & 0x7fff
	    var u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & x.DM
	    // use am to combine the multiply-shift-add into one call
	    j = i + this.m.t
	    x[j] += this.m.am(0, u0, x, i, 0, this.m.t)
	    // propagate carry
	    while (x[j] >= x.DV) {
	      x[j] -= x.DV
	      x[++j]++
	    }
	  }
	  x.clamp()
	  x.drShiftTo(this.m.t, x)
	  if (x.compareTo(this.m) >= 0) x.subTo(this.m, x)
	}

	// r = "x^2/R mod m"; x != r
	function montSqrTo(x, r) {
	  x.squareTo(r)
	  this.reduce(r)
	}

	// r = "xy/R mod m"; x,y != r
	function montMulTo(x, y, r) {
	  x.multiplyTo(y, r)
	  this.reduce(r)
	}

	Montgomery.prototype.convert = montConvert
	Montgomery.prototype.revert = montRevert
	Montgomery.prototype.reduce = montReduce
	Montgomery.prototype.mulTo = montMulTo
	Montgomery.prototype.sqrTo = montSqrTo

	// (protected) true iff this is even
	function bnpIsEven() {
	  return ((this.t > 0) ? (this[0] & 1) : this.s) == 0
	}

	// (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
	function bnpExp(e, z) {
	  if (e > 0xffffffff || e < 1) return BigInteger.ONE
	  var r = new BigInteger(),
	    r2 = new BigInteger(),
	    g = z.convert(this),
	    i = nbits(e) - 1
	  g.copyTo(r)
	  while (--i >= 0) {
	    z.sqrTo(r, r2)
	    if ((e & (1 << i)) > 0) z.mulTo(r2, g, r)
	    else {
	      var t = r
	      r = r2
	      r2 = t
	    }
	  }
	  return z.revert(r)
	}

	// (public) this^e % m, 0 <= e < 2^32
	function bnModPowInt(e, m) {
	  var z
	  if (e < 256 || m.isEven()) z = new Classic(m)
	  else z = new Montgomery(m)
	  return this.exp(e, z)
	}

	// protected
	proto.copyTo = bnpCopyTo
	proto.fromInt = bnpFromInt
	proto.fromString = bnpFromString
	proto.clamp = bnpClamp
	proto.dlShiftTo = bnpDLShiftTo
	proto.drShiftTo = bnpDRShiftTo
	proto.lShiftTo = bnpLShiftTo
	proto.rShiftTo = bnpRShiftTo
	proto.subTo = bnpSubTo
	proto.multiplyTo = bnpMultiplyTo
	proto.squareTo = bnpSquareTo
	proto.divRemTo = bnpDivRemTo
	proto.invDigit = bnpInvDigit
	proto.isEven = bnpIsEven
	proto.exp = bnpExp

	// public
	proto.toString = bnToString
	proto.negate = bnNegate
	proto.abs = bnAbs
	proto.compareTo = bnCompareTo
	proto.bitLength = bnBitLength
	proto.byteLength = bnByteLength
	proto.mod = bnMod
	proto.modPowInt = bnModPowInt

	// (public)
	function bnClone() {
	  var r = new BigInteger()
	  this.copyTo(r)
	  return r
	}

	// (public) return value as integer
	function bnIntValue() {
	  if (this.s < 0) {
	    if (this.t == 1) return this[0] - this.DV
	    else if (this.t == 0) return -1
	  } else if (this.t == 1) return this[0]
	  else if (this.t == 0) return 0
	  // assumes 16 < DB < 32
	  return ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0]
	}

	// (public) return value as byte
	function bnByteValue() {
	  return (this.t == 0) ? this.s : (this[0] << 24) >> 24
	}

	// (public) return value as short (assumes DB>=16)
	function bnShortValue() {
	  return (this.t == 0) ? this.s : (this[0] << 16) >> 16
	}

	// (protected) return x s.t. r^x < DV
	function bnpChunkSize(r) {
	  return Math.floor(Math.LN2 * this.DB / Math.log(r))
	}

	// (public) 0 if this == 0, 1 if this > 0
	function bnSigNum() {
	  if (this.s < 0) return -1
	  else if (this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0
	  else return 1
	}

	// (protected) convert to radix string
	function bnpToRadix(b) {
	  if (b == null) b = 10
	  if (this.signum() == 0 || b < 2 || b > 36) return "0"
	  var cs = this.chunkSize(b)
	  var a = Math.pow(b, cs)
	  var d = nbv(a),
	    y = new BigInteger(),
	    z = new BigInteger(),
	    r = ""
	  this.divRemTo(d, y, z)
	  while (y.signum() > 0) {
	    r = (a + z.intValue())
	      .toString(b)
	      .substr(1) + r
	    y.divRemTo(d, y, z)
	  }
	  return z.intValue()
	    .toString(b) + r
	}

	// (protected) convert from radix string
	function bnpFromRadix(s, b) {
	  var self = this
	  self.fromInt(0)
	  if (b == null) b = 10
	  var cs = self.chunkSize(b)
	  var d = Math.pow(b, cs),
	    mi = false,
	    j = 0,
	    w = 0
	  for (var i = 0; i < s.length; ++i) {
	    var x = intAt(s, i)
	    if (x < 0) {
	      if (s.charAt(i) == "-" && self.signum() == 0) mi = true
	      continue
	    }
	    w = b * w + x
	    if (++j >= cs) {
	      self.dMultiply(d)
	      self.dAddOffset(w, 0)
	      j = 0
	      w = 0
	    }
	  }
	  if (j > 0) {
	    self.dMultiply(Math.pow(b, j))
	    self.dAddOffset(w, 0)
	  }
	  if (mi) BigInteger.ZERO.subTo(self, self)
	}

	// (protected) alternate constructor
	function bnpFromNumber(a, b, c) {
	  var self = this
	  if ("number" == typeof b) {
	    // new BigInteger(int,int,RNG)
	    if (a < 2) self.fromInt(1)
	    else {
	      self.fromNumber(a, c)
	      if (!self.testBit(a - 1)) // force MSB set
	        self.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, self)
	      if (self.isEven()) self.dAddOffset(1, 0); // force odd
	      while (!self.isProbablePrime(b)) {
	        self.dAddOffset(2, 0)
	        if (self.bitLength() > a) self.subTo(BigInteger.ONE.shiftLeft(a - 1), self)
	      }
	    }
	  } else {
	    // new BigInteger(int,RNG)
	    var x = new Array(),
	      t = a & 7
	    x.length = (a >> 3) + 1
	    b.nextBytes(x)
	    if (t > 0) x[0] &= ((1 << t) - 1)
	    else x[0] = 0
	    self.fromString(x, 256)
	  }
	}

	// (public) convert to bigendian byte array
	function bnToByteArray() {
	  var self = this
	  var i = self.t,
	    r = new Array()
	  r[0] = self.s
	  var p = self.DB - (i * self.DB) % 8,
	    d, k = 0
	  if (i-- > 0) {
	    if (p < self.DB && (d = self[i] >> p) != (self.s & self.DM) >> p)
	      r[k++] = d | (self.s << (self.DB - p))
	    while (i >= 0) {
	      if (p < 8) {
	        d = (self[i] & ((1 << p) - 1)) << (8 - p)
	        d |= self[--i] >> (p += self.DB - 8)
	      } else {
	        d = (self[i] >> (p -= 8)) & 0xff
	        if (p <= 0) {
	          p += self.DB
	          --i
	        }
	      }
	      if ((d & 0x80) != 0) d |= -256
	      if (k === 0 && (self.s & 0x80) != (d & 0x80))++k
	      if (k > 0 || d != self.s) r[k++] = d
	    }
	  }
	  return r
	}

	function bnEquals(a) {
	  return (this.compareTo(a) == 0)
	}

	function bnMin(a) {
	  return (this.compareTo(a) < 0) ? this : a
	}

	function bnMax(a) {
	  return (this.compareTo(a) > 0) ? this : a
	}

	// (protected) r = this op a (bitwise)
	function bnpBitwiseTo(a, op, r) {
	  var self = this
	  var i, f, m = Math.min(a.t, self.t)
	  for (i = 0; i < m; ++i) r[i] = op(self[i], a[i])
	  if (a.t < self.t) {
	    f = a.s & self.DM
	    for (i = m; i < self.t; ++i) r[i] = op(self[i], f)
	    r.t = self.t
	  } else {
	    f = self.s & self.DM
	    for (i = m; i < a.t; ++i) r[i] = op(f, a[i])
	    r.t = a.t
	  }
	  r.s = op(self.s, a.s)
	  r.clamp()
	}

	// (public) this & a
	function op_and(x, y) {
	  return x & y
	}

	function bnAnd(a) {
	  var r = new BigInteger()
	  this.bitwiseTo(a, op_and, r)
	  return r
	}

	// (public) this | a
	function op_or(x, y) {
	  return x | y
	}

	function bnOr(a) {
	  var r = new BigInteger()
	  this.bitwiseTo(a, op_or, r)
	  return r
	}

	// (public) this ^ a
	function op_xor(x, y) {
	  return x ^ y
	}

	function bnXor(a) {
	  var r = new BigInteger()
	  this.bitwiseTo(a, op_xor, r)
	  return r
	}

	// (public) this & ~a
	function op_andnot(x, y) {
	  return x & ~y
	}

	function bnAndNot(a) {
	  var r = new BigInteger()
	  this.bitwiseTo(a, op_andnot, r)
	  return r
	}

	// (public) ~this
	function bnNot() {
	  var r = new BigInteger()
	  for (var i = 0; i < this.t; ++i) r[i] = this.DM & ~this[i]
	  r.t = this.t
	  r.s = ~this.s
	  return r
	}

	// (public) this << n
	function bnShiftLeft(n) {
	  var r = new BigInteger()
	  if (n < 0) this.rShiftTo(-n, r)
	  else this.lShiftTo(n, r)
	  return r
	}

	// (public) this >> n
	function bnShiftRight(n) {
	  var r = new BigInteger()
	  if (n < 0) this.lShiftTo(-n, r)
	  else this.rShiftTo(n, r)
	  return r
	}

	// return index of lowest 1-bit in x, x < 2^31
	function lbit(x) {
	  if (x == 0) return -1
	  var r = 0
	  if ((x & 0xffff) == 0) {
	    x >>= 16
	    r += 16
	  }
	  if ((x & 0xff) == 0) {
	    x >>= 8
	    r += 8
	  }
	  if ((x & 0xf) == 0) {
	    x >>= 4
	    r += 4
	  }
	  if ((x & 3) == 0) {
	    x >>= 2
	    r += 2
	  }
	  if ((x & 1) == 0)++r
	  return r
	}

	// (public) returns index of lowest 1-bit (or -1 if none)
	function bnGetLowestSetBit() {
	  for (var i = 0; i < this.t; ++i)
	    if (this[i] != 0) return i * this.DB + lbit(this[i])
	  if (this.s < 0) return this.t * this.DB
	  return -1
	}

	// return number of 1 bits in x
	function cbit(x) {
	  var r = 0
	  while (x != 0) {
	    x &= x - 1
	    ++r
	  }
	  return r
	}

	// (public) return number of set bits
	function bnBitCount() {
	  var r = 0,
	    x = this.s & this.DM
	  for (var i = 0; i < this.t; ++i) r += cbit(this[i] ^ x)
	  return r
	}

	// (public) true iff nth bit is set
	function bnTestBit(n) {
	  var j = Math.floor(n / this.DB)
	  if (j >= this.t) return (this.s != 0)
	  return ((this[j] & (1 << (n % this.DB))) != 0)
	}

	// (protected) this op (1<<n)
	function bnpChangeBit(n, op) {
	  var r = BigInteger.ONE.shiftLeft(n)
	  this.bitwiseTo(r, op, r)
	  return r
	}

	// (public) this | (1<<n)
	function bnSetBit(n) {
	  return this.changeBit(n, op_or)
	}

	// (public) this & ~(1<<n)
	function bnClearBit(n) {
	  return this.changeBit(n, op_andnot)
	}

	// (public) this ^ (1<<n)
	function bnFlipBit(n) {
	  return this.changeBit(n, op_xor)
	}

	// (protected) r = this + a
	function bnpAddTo(a, r) {
	  var self = this

	  var i = 0,
	    c = 0,
	    m = Math.min(a.t, self.t)
	  while (i < m) {
	    c += self[i] + a[i]
	    r[i++] = c & self.DM
	    c >>= self.DB
	  }
	  if (a.t < self.t) {
	    c += a.s
	    while (i < self.t) {
	      c += self[i]
	      r[i++] = c & self.DM
	      c >>= self.DB
	    }
	    c += self.s
	  } else {
	    c += self.s
	    while (i < a.t) {
	      c += a[i]
	      r[i++] = c & self.DM
	      c >>= self.DB
	    }
	    c += a.s
	  }
	  r.s = (c < 0) ? -1 : 0
	  if (c > 0) r[i++] = c
	  else if (c < -1) r[i++] = self.DV + c
	  r.t = i
	  r.clamp()
	}

	// (public) this + a
	function bnAdd(a) {
	  var r = new BigInteger()
	  this.addTo(a, r)
	  return r
	}

	// (public) this - a
	function bnSubtract(a) {
	  var r = new BigInteger()
	  this.subTo(a, r)
	  return r
	}

	// (public) this * a
	function bnMultiply(a) {
	  var r = new BigInteger()
	  this.multiplyTo(a, r)
	  return r
	}

	// (public) this^2
	function bnSquare() {
	  var r = new BigInteger()
	  this.squareTo(r)
	  return r
	}

	// (public) this / a
	function bnDivide(a) {
	  var r = new BigInteger()
	  this.divRemTo(a, r, null)
	  return r
	}

	// (public) this % a
	function bnRemainder(a) {
	  var r = new BigInteger()
	  this.divRemTo(a, null, r)
	  return r
	}

	// (public) [this/a,this%a]
	function bnDivideAndRemainder(a) {
	  var q = new BigInteger(),
	    r = new BigInteger()
	  this.divRemTo(a, q, r)
	  return new Array(q, r)
	}

	// (protected) this *= n, this >= 0, 1 < n < DV
	function bnpDMultiply(n) {
	  this[this.t] = this.am(0, n - 1, this, 0, 0, this.t)
	  ++this.t
	  this.clamp()
	}

	// (protected) this += n << w words, this >= 0
	function bnpDAddOffset(n, w) {
	  if (n == 0) return
	  while (this.t <= w) this[this.t++] = 0
	  this[w] += n
	  while (this[w] >= this.DV) {
	    this[w] -= this.DV
	    if (++w >= this.t) this[this.t++] = 0
	    ++this[w]
	  }
	}

	// A "null" reducer
	function NullExp() {}

	function nNop(x) {
	  return x
	}

	function nMulTo(x, y, r) {
	  x.multiplyTo(y, r)
	}

	function nSqrTo(x, r) {
	  x.squareTo(r)
	}

	NullExp.prototype.convert = nNop
	NullExp.prototype.revert = nNop
	NullExp.prototype.mulTo = nMulTo
	NullExp.prototype.sqrTo = nSqrTo

	// (public) this^e
	function bnPow(e) {
	  return this.exp(e, new NullExp())
	}

	// (protected) r = lower n words of "this * a", a.t <= n
	// "this" should be the larger one if appropriate.
	function bnpMultiplyLowerTo(a, n, r) {
	  var i = Math.min(this.t + a.t, n)
	  r.s = 0; // assumes a,this >= 0
	  r.t = i
	  while (i > 0) r[--i] = 0
	  var j
	  for (j = r.t - this.t; i < j; ++i) r[i + this.t] = this.am(0, a[i], r, i, 0, this.t)
	  for (j = Math.min(a.t, n); i < j; ++i) this.am(0, a[i], r, i, 0, n - i)
	  r.clamp()
	}

	// (protected) r = "this * a" without lower n words, n > 0
	// "this" should be the larger one if appropriate.
	function bnpMultiplyUpperTo(a, n, r) {
	  --n
	  var i = r.t = this.t + a.t - n
	  r.s = 0; // assumes a,this >= 0
	  while (--i >= 0) r[i] = 0
	  for (i = Math.max(n - this.t, 0); i < a.t; ++i)
	    r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n)
	  r.clamp()
	  r.drShiftTo(1, r)
	}

	// Barrett modular reduction
	function Barrett(m) {
	  // setup Barrett
	  this.r2 = new BigInteger()
	  this.q3 = new BigInteger()
	  BigInteger.ONE.dlShiftTo(2 * m.t, this.r2)
	  this.mu = this.r2.divide(m)
	  this.m = m
	}

	function barrettConvert(x) {
	  if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m)
	  else if (x.compareTo(this.m) < 0) return x
	  else {
	    var r = new BigInteger()
	    x.copyTo(r)
	    this.reduce(r)
	    return r
	  }
	}

	function barrettRevert(x) {
	  return x
	}

	// x = x mod m (HAC 14.42)
	function barrettReduce(x) {
	  var self = this
	  x.drShiftTo(self.m.t - 1, self.r2)
	  if (x.t > self.m.t + 1) {
	    x.t = self.m.t + 1
	    x.clamp()
	  }
	  self.mu.multiplyUpperTo(self.r2, self.m.t + 1, self.q3)
	  self.m.multiplyLowerTo(self.q3, self.m.t + 1, self.r2)
	  while (x.compareTo(self.r2) < 0) x.dAddOffset(1, self.m.t + 1)
	  x.subTo(self.r2, x)
	  while (x.compareTo(self.m) >= 0) x.subTo(self.m, x)
	}

	// r = x^2 mod m; x != r
	function barrettSqrTo(x, r) {
	  x.squareTo(r)
	  this.reduce(r)
	}

	// r = x*y mod m; x,y != r
	function barrettMulTo(x, y, r) {
	  x.multiplyTo(y, r)
	  this.reduce(r)
	}

	Barrett.prototype.convert = barrettConvert
	Barrett.prototype.revert = barrettRevert
	Barrett.prototype.reduce = barrettReduce
	Barrett.prototype.mulTo = barrettMulTo
	Barrett.prototype.sqrTo = barrettSqrTo

	// (public) this^e % m (HAC 14.85)
	function bnModPow(e, m) {
	  var i = e.bitLength(),
	    k, r = nbv(1),
	    z
	  if (i <= 0) return r
	  else if (i < 18) k = 1
	  else if (i < 48) k = 3
	  else if (i < 144) k = 4
	  else if (i < 768) k = 5
	  else k = 6
	  if (i < 8)
	    z = new Classic(m)
	  else if (m.isEven())
	    z = new Barrett(m)
	  else
	    z = new Montgomery(m)

	  // precomputation
	  var g = new Array(),
	    n = 3,
	    k1 = k - 1,
	    km = (1 << k) - 1
	  g[1] = z.convert(this)
	  if (k > 1) {
	    var g2 = new BigInteger()
	    z.sqrTo(g[1], g2)
	    while (n <= km) {
	      g[n] = new BigInteger()
	      z.mulTo(g2, g[n - 2], g[n])
	      n += 2
	    }
	  }

	  var j = e.t - 1,
	    w, is1 = true,
	    r2 = new BigInteger(),
	    t
	  i = nbits(e[j]) - 1
	  while (j >= 0) {
	    if (i >= k1) w = (e[j] >> (i - k1)) & km
	    else {
	      w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i)
	      if (j > 0) w |= e[j - 1] >> (this.DB + i - k1)
	    }

	    n = k
	    while ((w & 1) == 0) {
	      w >>= 1
	      --n
	    }
	    if ((i -= n) < 0) {
	      i += this.DB
	      --j
	    }
	    if (is1) { // ret == 1, don't bother squaring or multiplying it
	      g[w].copyTo(r)
	      is1 = false
	    } else {
	      while (n > 1) {
	        z.sqrTo(r, r2)
	        z.sqrTo(r2, r)
	        n -= 2
	      }
	      if (n > 0) z.sqrTo(r, r2)
	      else {
	        t = r
	        r = r2
	        r2 = t
	      }
	      z.mulTo(r2, g[w], r)
	    }

	    while (j >= 0 && (e[j] & (1 << i)) == 0) {
	      z.sqrTo(r, r2)
	      t = r
	      r = r2
	      r2 = t
	      if (--i < 0) {
	        i = this.DB - 1
	        --j
	      }
	    }
	  }
	  return z.revert(r)
	}

	// (public) gcd(this,a) (HAC 14.54)
	function bnGCD(a) {
	  var x = (this.s < 0) ? this.negate() : this.clone()
	  var y = (a.s < 0) ? a.negate() : a.clone()
	  if (x.compareTo(y) < 0) {
	    var t = x
	    x = y
	    y = t
	  }
	  var i = x.getLowestSetBit(),
	    g = y.getLowestSetBit()
	  if (g < 0) return x
	  if (i < g) g = i
	  if (g > 0) {
	    x.rShiftTo(g, x)
	    y.rShiftTo(g, y)
	  }
	  while (x.signum() > 0) {
	    if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x)
	    if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y)
	    if (x.compareTo(y) >= 0) {
	      x.subTo(y, x)
	      x.rShiftTo(1, x)
	    } else {
	      y.subTo(x, y)
	      y.rShiftTo(1, y)
	    }
	  }
	  if (g > 0) y.lShiftTo(g, y)
	  return y
	}

	// (protected) this % n, n < 2^26
	function bnpModInt(n) {
	  if (n <= 0) return 0
	  var d = this.DV % n,
	    r = (this.s < 0) ? n - 1 : 0
	  if (this.t > 0)
	    if (d == 0) r = this[0] % n
	    else
	      for (var i = this.t - 1; i >= 0; --i) r = (d * r + this[i]) % n
	  return r
	}

	// (public) 1/this % m (HAC 14.61)
	function bnModInverse(m) {
	  var ac = m.isEven()
	  if (this.signum() === 0) throw new Error('division by zero')
	  if ((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO
	  var u = m.clone(),
	    v = this.clone()
	  var a = nbv(1),
	    b = nbv(0),
	    c = nbv(0),
	    d = nbv(1)
	  while (u.signum() != 0) {
	    while (u.isEven()) {
	      u.rShiftTo(1, u)
	      if (ac) {
	        if (!a.isEven() || !b.isEven()) {
	          a.addTo(this, a)
	          b.subTo(m, b)
	        }
	        a.rShiftTo(1, a)
	      } else if (!b.isEven()) b.subTo(m, b)
	      b.rShiftTo(1, b)
	    }
	    while (v.isEven()) {
	      v.rShiftTo(1, v)
	      if (ac) {
	        if (!c.isEven() || !d.isEven()) {
	          c.addTo(this, c)
	          d.subTo(m, d)
	        }
	        c.rShiftTo(1, c)
	      } else if (!d.isEven()) d.subTo(m, d)
	      d.rShiftTo(1, d)
	    }
	    if (u.compareTo(v) >= 0) {
	      u.subTo(v, u)
	      if (ac) a.subTo(c, a)
	      b.subTo(d, b)
	    } else {
	      v.subTo(u, v)
	      if (ac) c.subTo(a, c)
	      d.subTo(b, d)
	    }
	  }
	  if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO
	  if (d.compareTo(m) >= 0) return d.subtract(m)
	  if (d.signum() < 0) d.addTo(m, d)
	  else return d
	  if (d.signum() < 0) return d.add(m)
	  else return d
	}

	var lowprimes = [
	  2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,
	  73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151,
	  157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233,
	  239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317,
	  331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419,
	  421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503,
	  509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,
	  613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,
	  709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811,
	  821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911,
	  919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997
	]

	var lplim = (1 << 26) / lowprimes[lowprimes.length - 1]

	// (public) test primality with certainty >= 1-.5^t
	function bnIsProbablePrime(t) {
	  var i, x = this.abs()
	  if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {
	    for (i = 0; i < lowprimes.length; ++i)
	      if (x[0] == lowprimes[i]) return true
	    return false
	  }
	  if (x.isEven()) return false
	  i = 1
	  while (i < lowprimes.length) {
	    var m = lowprimes[i],
	      j = i + 1
	    while (j < lowprimes.length && m < lplim) m *= lowprimes[j++]
	    m = x.modInt(m)
	    while (i < j) if (m % lowprimes[i++] == 0) return false
	  }
	  return x.millerRabin(t)
	}

	// (protected) true if probably prime (HAC 4.24, Miller-Rabin)
	function bnpMillerRabin(t) {
	  var n1 = this.subtract(BigInteger.ONE)
	  var k = n1.getLowestSetBit()
	  if (k <= 0) return false
	  var r = n1.shiftRight(k)
	  t = (t + 1) >> 1
	  if (t > lowprimes.length) t = lowprimes.length
	  var a = new BigInteger(null)
	  var j, bases = []
	  for (var i = 0; i < t; ++i) {
	    for (;;) {
	      j = lowprimes[Math.floor(Math.random() * lowprimes.length)]
	      if (bases.indexOf(j) == -1) break
	    }
	    bases.push(j)
	    a.fromInt(j)
	    var y = a.modPow(r, this)
	    if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
	      var j = 1
	      while (j++ < k && y.compareTo(n1) != 0) {
	        y = y.modPowInt(2, this)
	        if (y.compareTo(BigInteger.ONE) == 0) return false
	      }
	      if (y.compareTo(n1) != 0) return false
	    }
	  }
	  return true
	}

	// protected
	proto.chunkSize = bnpChunkSize
	proto.toRadix = bnpToRadix
	proto.fromRadix = bnpFromRadix
	proto.fromNumber = bnpFromNumber
	proto.bitwiseTo = bnpBitwiseTo
	proto.changeBit = bnpChangeBit
	proto.addTo = bnpAddTo
	proto.dMultiply = bnpDMultiply
	proto.dAddOffset = bnpDAddOffset
	proto.multiplyLowerTo = bnpMultiplyLowerTo
	proto.multiplyUpperTo = bnpMultiplyUpperTo
	proto.modInt = bnpModInt
	proto.millerRabin = bnpMillerRabin

	// public
	proto.clone = bnClone
	proto.intValue = bnIntValue
	proto.byteValue = bnByteValue
	proto.shortValue = bnShortValue
	proto.signum = bnSigNum
	proto.toByteArray = bnToByteArray
	proto.equals = bnEquals
	proto.min = bnMin
	proto.max = bnMax
	proto.and = bnAnd
	proto.or = bnOr
	proto.xor = bnXor
	proto.andNot = bnAndNot
	proto.not = bnNot
	proto.shiftLeft = bnShiftLeft
	proto.shiftRight = bnShiftRight
	proto.getLowestSetBit = bnGetLowestSetBit
	proto.bitCount = bnBitCount
	proto.testBit = bnTestBit
	proto.setBit = bnSetBit
	proto.clearBit = bnClearBit
	proto.flipBit = bnFlipBit
	proto.add = bnAdd
	proto.subtract = bnSubtract
	proto.multiply = bnMultiply
	proto.divide = bnDivide
	proto.remainder = bnRemainder
	proto.divideAndRemainder = bnDivideAndRemainder
	proto.modPow = bnModPow
	proto.modInverse = bnModInverse
	proto.pow = bnPow
	proto.gcd = bnGCD
	proto.isProbablePrime = bnIsProbablePrime

	// JSBN-specific extension
	proto.square = bnSquare

	// constants
	BigInteger.ZERO = nbv(0)
	BigInteger.ONE = nbv(1)
	BigInteger.valueOf = nbv

	module.exports = BigInteger


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var assert = __webpack_require__(5)
	var base58check = __webpack_require__(59)
	var ecdsa = __webpack_require__(57)
	var networks = __webpack_require__(24)
	var randomBytes = __webpack_require__(91)
	var typeForce = __webpack_require__(14)

	var BigInteger = __webpack_require__(15)
	var ECPubKey = __webpack_require__(43)

	var ecurve = __webpack_require__(46)
	var secp256k1 = ecurve.getCurveByName('secp256k1')

	function ECKey (d, compressed) {
	  assert(d.signum() > 0, 'Private key must be greater than 0')
	  assert(d.compareTo(ECKey.curve.n) < 0, 'Private key must be less than the curve order')

	  var Q = ECKey.curve.G.multiply(d)

	  this.d = d
	  this.pub = new ECPubKey(Q, compressed)
	}

	// Constants
	ECKey.curve = secp256k1

	// Static constructors
	ECKey.fromWIF = function (string) {
	  var payload = base58check.decode(string)
	  var compressed = false

	  // Ignore the version byte
	  payload = payload.slice(1)

	  if (payload.length === 33) {
	    assert.strictEqual(payload[32], 0x01, 'Invalid compression flag')

	    // Truncate the compression flag
	    payload = payload.slice(0, -1)
	    compressed = true
	  }

	  assert.equal(payload.length, 32, 'Invalid WIF payload length')

	  var d = BigInteger.fromBuffer(payload)
	  return new ECKey(d, compressed)
	}

	ECKey.makeRandom = function (compressed, rng) {
	  rng = rng || randomBytes

	  var buffer = rng(32)
	  typeForce('Buffer', buffer)
	  assert.equal(buffer.length, 32, 'Expected 256-bit Buffer from RNG')

	  var d = BigInteger.fromBuffer(buffer)
	  d = d.mod(ECKey.curve.n)

	  return new ECKey(d, compressed)
	}

	// Export functions
	ECKey.prototype.toWIF = function (network) {
	  network = network || networks.bitcoin

	  var bufferLen = this.pub.compressed ? 34 : 33
	  var buffer = new Buffer(bufferLen)

	  buffer.writeUInt8(network.wif, 0)
	  this.d.toBuffer(32).copy(buffer, 1)

	  if (this.pub.compressed) {
	    buffer.writeUInt8(0x01, 33)
	  }

	  return base58check.encode(buffer)
	}

	// Operations
	ECKey.prototype.sign = function (hash) {
	  return ecdsa.sign(ECKey.curve, hash, this.d)
	}

	module.exports = ECKey

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var assert = __webpack_require__(5)
	var base58check = __webpack_require__(59)
	var bcrypto = __webpack_require__(23)
	var createHmac = __webpack_require__(79)
	var typeForce = __webpack_require__(14)
	var networks = __webpack_require__(24)

	var BigInteger = __webpack_require__(15)
	var ECKey = __webpack_require__(110)
	var ECPubKey = __webpack_require__(43)

	var ecurve = __webpack_require__(46)
	var curve = ecurve.getCurveByName('secp256k1')

	function findBIP32NetworkByVersion (version) {
	  for (var name in networks) {
	    var network = networks[name]

	    if (version === network.bip32.private || version === network.bip32.public) {
	      return network
	    }
	  }

	  assert(false, 'Could not find network for ' + version.toString(16))
	}

	function HDNode (K, chainCode, network) {
	  network = network || networks.bitcoin

	  typeForce('Buffer', chainCode)

	  assert.equal(chainCode.length, 32, 'Expected chainCode length of 32, got ' + chainCode.length)
	  assert(network.bip32, 'Unknown BIP32 constants for network')

	  this.chainCode = chainCode
	  this.depth = 0
	  this.index = 0
	  this.parentFingerprint = 0x00000000
	  this.network = network

	  if (K instanceof BigInteger) {
	    this.privKey = new ECKey(K, true)
	    this.pubKey = this.privKey.pub
	  } else if (K instanceof ECKey) {
	    assert(K.pub.compressed, 'ECKey must be compressed')
	    this.privKey = K
	    this.pubKey = K.pub
	  } else if (K instanceof ECPubKey) {
	    assert(K.compressed, 'ECPubKey must be compressed')
	    this.pubKey = K
	  } else {
	    this.pubKey = new ECPubKey(K, true)
	  }
	}

	HDNode.MASTER_SECRET = new Buffer('Bitcoin seed')
	HDNode.HIGHEST_BIT = 0x80000000
	HDNode.LENGTH = 78

	HDNode.fromSeedBuffer = function (seed, network) {
	  typeForce('Buffer', seed)

	  assert(seed.length >= 16, 'Seed should be at least 128 bits')
	  assert(seed.length <= 64, 'Seed should be at most 512 bits')

	  var I = createHmac('sha512', HDNode.MASTER_SECRET).update(seed).digest()
	  var IL = I.slice(0, 32)
	  var IR = I.slice(32)

	  // In case IL is 0 or >= n, the master key is invalid
	  // This is handled by `new ECKey` in the HDNode constructor
	  var pIL = BigInteger.fromBuffer(IL)

	  return new HDNode(pIL, IR, network)
	}

	HDNode.fromSeedHex = function (hex, network) {
	  return HDNode.fromSeedBuffer(new Buffer(hex, 'hex'), network)
	}

	HDNode.fromBase58 = function (string, network) {
	  return HDNode.fromBuffer(base58check.decode(string), network, true)
	}

	// FIXME: remove in 2.x.y
	HDNode.fromBuffer = function (buffer, network, __ignoreDeprecation) {
	  if (!__ignoreDeprecation) {
	    console.warn('HDNode.fromBuffer() is deprecated for removal in 2.x.y, use fromBase58 instead')
	  }

	  assert.strictEqual(buffer.length, HDNode.LENGTH, 'Invalid buffer length')

	  // 4 byte: version bytes
	  var version = buffer.readUInt32BE(0)

	  if (network) {
	    assert(version === network.bip32.private || version === network.bip32.public, "Network doesn't match")

	  // auto-detect
	  } else {
	    network = findBIP32NetworkByVersion(version)
	  }

	  // 1 byte: depth: 0x00 for master nodes, 0x01 for level-1 descendants, ...
	  var depth = buffer.readUInt8(4)

	  // 4 bytes: the fingerprint of the parent's key (0x00000000 if master key)
	  var parentFingerprint = buffer.readUInt32BE(5)
	  if (depth === 0) {
	    assert.strictEqual(parentFingerprint, 0x00000000, 'Invalid parent fingerprint')
	  }

	  // 4 bytes: child number. This is the number i in xi = xpar/i, with xi the key being serialized.
	  // This is encoded in MSB order. (0x00000000 if master key)
	  var index = buffer.readUInt32BE(9)
	  assert(depth > 0 || index === 0, 'Invalid index')

	  // 32 bytes: the chain code
	  var chainCode = buffer.slice(13, 45)
	  var data, hd

	  // 33 bytes: private key data (0x00 + k)
	  if (version === network.bip32.private) {
	    assert.strictEqual(buffer.readUInt8(45), 0x00, 'Invalid private key')
	    data = buffer.slice(46, 78)
	    var d = BigInteger.fromBuffer(data)
	    hd = new HDNode(d, chainCode, network)

	  // 33 bytes: public key data (0x02 + X or 0x03 + X)
	  } else {
	    data = buffer.slice(45, 78)
	    var Q = ecurve.Point.decodeFrom(curve, data)
	    assert.equal(Q.compressed, true, 'Invalid public key')

	    // Verify that the X coordinate in the public point corresponds to a point on the curve.
	    // If not, the extended public key is invalid.
	    curve.validate(Q)

	    hd = new HDNode(Q, chainCode, network)
	  }

	  hd.depth = depth
	  hd.index = index
	  hd.parentFingerprint = parentFingerprint

	  return hd
	}

	// FIXME: remove in 2.x.y
	HDNode.fromHex = function (hex, network) {
	  return HDNode.fromBuffer(new Buffer(hex, 'hex'), network)
	}

	HDNode.prototype.getIdentifier = function () {
	  return bcrypto.hash160(this.pubKey.toBuffer())
	}

	HDNode.prototype.getFingerprint = function () {
	  return this.getIdentifier().slice(0, 4)
	}

	HDNode.prototype.getAddress = function () {
	  return this.pubKey.getAddress(this.network)
	}

	HDNode.prototype.neutered = function () {
	  var neutered = new HDNode(this.pubKey.Q, this.chainCode, this.network)
	  neutered.depth = this.depth
	  neutered.index = this.index
	  neutered.parentFingerprint = this.parentFingerprint

	  return neutered
	}

	HDNode.prototype.toBase58 = function (isPrivate) {
	  return base58check.encode(this.toBuffer(isPrivate, true))
	}

	// FIXME: remove in 2.x.y
	HDNode.prototype.toBuffer = function (isPrivate, __ignoreDeprecation) {
	  if (isPrivate === undefined) {
	    isPrivate = !!this.privKey

	  // FIXME: remove in 2.x.y
	  } else {
	    console.warn('isPrivate flag is deprecated, please use the .neutered() method instead')
	  }

	  if (!__ignoreDeprecation) {
	    console.warn('HDNode.toBuffer() is deprecated for removal in 2.x.y, use toBase58 instead')
	  }

	  // Version
	  var version = isPrivate ? this.network.bip32.private : this.network.bip32.public
	  var buffer = new Buffer(HDNode.LENGTH)

	  // 4 bytes: version bytes
	  buffer.writeUInt32BE(version, 0)

	  // Depth
	  // 1 byte: depth: 0x00 for master nodes, 0x01 for level-1 descendants, ....
	  buffer.writeUInt8(this.depth, 4)

	  // 4 bytes: the fingerprint of the parent's key (0x00000000 if master key)
	  buffer.writeUInt32BE(this.parentFingerprint, 5)

	  // 4 bytes: child number. This is the number i in xi = xpar/i, with xi the key being serialized.
	  // This is encoded in Big endian. (0x00000000 if master key)
	  buffer.writeUInt32BE(this.index, 9)

	  // 32 bytes: the chain code
	  this.chainCode.copy(buffer, 13)

	  // 33 bytes: the public key or private key data
	  if (isPrivate) {
	    // FIXME: remove in 2.x.y
	    assert(this.privKey, 'Missing private key')

	    // 0x00 + k for private keys
	    buffer.writeUInt8(0, 45)
	    this.privKey.d.toBuffer(32).copy(buffer, 46)
	  } else {
	    // X9.62 encoding for public keys
	    this.pubKey.toBuffer().copy(buffer, 45)
	  }

	  return buffer
	}

	// FIXME: remove in 2.x.y
	HDNode.prototype.toHex = function (isPrivate) {
	  return this.toBuffer(isPrivate).toString('hex')
	}

	// https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#child-key-derivation-ckd-functions
	HDNode.prototype.derive = function (index) {
	  var isHardened = index >= HDNode.HIGHEST_BIT
	  var indexBuffer = new Buffer(4)
	  indexBuffer.writeUInt32BE(index, 0)

	  var data

	  // Hardened child
	  if (isHardened) {
	    assert(this.privKey, 'Could not derive hardened child key')

	    // data = 0x00 || ser256(kpar) || ser32(index)
	    data = Buffer.concat([
	      this.privKey.d.toBuffer(33),
	      indexBuffer
	    ])

	  // Normal child
	  } else {
	    // data = serP(point(kpar)) || ser32(index)
	    //      = serP(Kpar) || ser32(index)
	    data = Buffer.concat([
	      this.pubKey.toBuffer(),
	      indexBuffer
	    ])
	  }

	  var I = createHmac('sha512', this.chainCode).update(data).digest()
	  var IL = I.slice(0, 32)
	  var IR = I.slice(32)

	  var pIL = BigInteger.fromBuffer(IL)

	  // In case parse256(IL) >= n, proceed with the next value for i
	  if (pIL.compareTo(curve.n) >= 0) {
	    return this.derive(index + 1)
	  }

	  // Private parent key -> private child key
	  var hd
	  if (this.privKey) {
	    // ki = parse256(IL) + kpar (mod n)
	    var ki = pIL.add(this.privKey.d).mod(curve.n)

	    // In case ki == 0, proceed with the next value for i
	    if (ki.signum() === 0) {
	      return this.derive(index + 1)
	    }

	    hd = new HDNode(ki, IR, this.network)

	  // Public parent key -> public child key
	  } else {
	    // Ki = point(parse256(IL)) + Kpar
	    //    = G*IL + Kpar
	    var Ki = curve.G.multiply(pIL).add(this.pubKey.Q)

	    // In case Ki is the point at infinity, proceed with the next value for i
	    if (curve.isInfinity(Ki)) {
	      return this.derive(index + 1)
	    }

	    hd = new HDNode(Ki, IR, this.network)
	  }

	  hd.depth = this.depth + 1
	  hd.index = index
	  hd.parentFingerprint = this.getFingerprint().readUInt32BE(0)

	  return hd
	}

	HDNode.prototype.deriveHardened = function (index) {
	  // Only derives hardened private keys by default
	  return this.derive(index + HDNode.HIGHEST_BIT)
	}

	HDNode.prototype.toString = HDNode.prototype.toBase58

	module.exports = HDNode

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	  Address: __webpack_require__(56),
	  base58check: __webpack_require__(218),
	  Block: __webpack_require__(219),
	  bufferutils: __webpack_require__(30),
	  crypto: __webpack_require__(23),
	  ecdsa: __webpack_require__(57),
	  ECKey: __webpack_require__(110),
	  ECPubKey: __webpack_require__(43),
	  ECSignature: __webpack_require__(31),
	  Message: __webpack_require__(220),
	  opcodes: __webpack_require__(32),
	  HDNode: __webpack_require__(111),
	  Script: __webpack_require__(44),
	  scripts: __webpack_require__(58),
	  Transaction: __webpack_require__(77),
	  TransactionBuilder: __webpack_require__(113),
	  networks: __webpack_require__(24),
	  Wallet: __webpack_require__(221)
	}


/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var assert = __webpack_require__(5)
	var ops = __webpack_require__(32)
	var scripts = __webpack_require__(58)

	var ECPubKey = __webpack_require__(43)
	var ECSignature = __webpack_require__(31)
	var Script = __webpack_require__(44)
	var Transaction = __webpack_require__(77)

	function extractInput (txIn) {
	  var redeemScript
	  var scriptSig = txIn.script
	  var prevOutScript
	  var prevOutType = scripts.classifyInput(scriptSig, true)
	  var scriptType

	  // Re-classify if scriptHash
	  if (prevOutType === 'scripthash') {
	    redeemScript = Script.fromBuffer(scriptSig.chunks.slice(-1)[0])
	    prevOutScript = scripts.scriptHashOutput(redeemScript.getHash())

	    scriptSig = Script.fromChunks(scriptSig.chunks.slice(0, -1))
	    scriptType = scripts.classifyInput(scriptSig, true)
	  } else {
	    scriptType = prevOutType
	  }

	  // Extract hashType, pubKeys and signatures
	  var hashType, parsed, pubKeys, signatures

	  switch (scriptType) {
	    case 'pubkeyhash': {
	      parsed = ECSignature.parseScriptSignature(scriptSig.chunks[0])
	      hashType = parsed.hashType
	      pubKeys = [ECPubKey.fromBuffer(scriptSig.chunks[1])]
	      signatures = [parsed.signature]
	      prevOutScript = pubKeys[0].getAddress().toOutputScript()

	      break
	    }

	    case 'pubkey': {
	      parsed = ECSignature.parseScriptSignature(scriptSig.chunks[0])
	      hashType = parsed.hashType
	      signatures = [parsed.signature]

	      if (redeemScript) {
	        pubKeys = [ECPubKey.fromBuffer(redeemScript.chunks[0])]
	      }

	      break
	    }

	    case 'multisig': {
	      signatures = scriptSig.chunks.slice(1).map(function (chunk) {
	        if (chunk === ops.OP_0) return chunk

	        var parsed = ECSignature.parseScriptSignature(chunk)
	        hashType = parsed.hashType

	        return parsed.signature
	      })

	      if (redeemScript) {
	        pubKeys = redeemScript.chunks.slice(1, -2).map(ECPubKey.fromBuffer)
	      }

	      break
	    }
	  }

	  return {
	    hashType: hashType,
	    prevOutScript: prevOutScript,
	    prevOutType: prevOutType,
	    pubKeys: pubKeys,
	    redeemScript: redeemScript,
	    scriptType: scriptType,
	    signatures: signatures
	  }
	}

	function TransactionBuilder () {
	  this.prevTxMap = {}
	  this.prevOutScripts = {}
	  this.prevOutTypes = {}

	  this.inputs = []
	  this.tx = new Transaction()
	}

	TransactionBuilder.fromTransaction = function (transaction) {
	  var txb = new TransactionBuilder()

	  // Copy other transaction fields
	  txb.tx.version = transaction.version
	  txb.tx.locktime = transaction.locktime

	  // Extract/add inputs
	  transaction.ins.forEach(function (txIn) {
	    txb.addInput(txIn.hash, txIn.index, txIn.sequence)
	  })

	  // Extract/add outputs
	  transaction.outs.forEach(function (txOut) {
	    txb.addOutput(txOut.script, txOut.value)
	  })

	  // Extract/add signatures
	  txb.inputs = transaction.ins.map(function (txIn) {
	    // TODO: remove me after testcase added
	    assert(!Transaction.isCoinbaseHash(txIn.hash), 'coinbase inputs not supported')

	    // Ignore empty scripts
	    if (txIn.script.buffer.length === 0) return {}

	    return extractInput(txIn)
	  })

	  return txb
	}

	TransactionBuilder.prototype.addInput = function (prevTx, index, sequence, prevOutScript) {
	  var prevOutHash

	  // txId
	  if (typeof prevTx === 'string') {
	    prevOutHash = new Buffer(prevTx, 'hex')

	    // TxId hex is big-endian, we want little-endian hash
	    Array.prototype.reverse.call(prevOutHash)

	  // Transaction
	  } else if (prevTx instanceof Transaction) {
	    prevOutHash = prevTx.getHash()
	    prevOutScript = prevTx.outs[index].script

	  // txHash
	  } else {
	    prevOutHash = prevTx
	  }

	  var input = {}
	  if (prevOutScript) {
	    var prevOutType = scripts.classifyOutput(prevOutScript)

	    // if we can, extract pubKey information
	    switch (prevOutType) {
	      case 'multisig': {
	        input.pubKeys = prevOutScript.chunks.slice(1, -2).map(ECPubKey.fromBuffer)
	        break
	      }

	      case 'pubkey': {
	        input.pubKeys = prevOutScript.chunks.slice(0, 1).map(ECPubKey.fromBuffer)
	        break
	      }
	    }

	    if (prevOutType !== 'scripthash') {
	      input.scriptType = prevOutType
	    }

	    input.prevOutScript = prevOutScript
	    input.prevOutType = prevOutType
	  }

	  assert(this.inputs.every(function (input2) {
	    if (input2.hashType === undefined) return true

	    return input2.hashType & Transaction.SIGHASH_ANYONECANPAY
	  }), 'No, this would invalidate signatures')

	  var prevOut = prevOutHash.toString('hex') + ':' + index
	  assert(!(prevOut in this.prevTxMap), 'Transaction is already an input')

	  var vin = this.tx.addInput(prevOutHash, index, sequence)
	  this.inputs[vin] = input
	  this.prevTxMap[prevOut] = vin

	  return vin
	}

	TransactionBuilder.prototype.addOutput = function (scriptPubKey, value) {
	  assert(this.inputs.every(function (input) {
	    if (input.hashType === undefined) return true

	    return (input.hashType & 0x1f) === Transaction.SIGHASH_SINGLE
	  }), 'No, this would invalidate signatures')

	  return this.tx.addOutput(scriptPubKey, value)
	}

	TransactionBuilder.prototype.build = function () {
	  return this.__build(false)
	}
	TransactionBuilder.prototype.buildIncomplete = function () {
	  return this.__build(true)
	}

	var canSignTypes = {
	  'pubkeyhash': true,
	  'multisig': true,
	  'pubkey': true
	}

	TransactionBuilder.prototype.__build = function (allowIncomplete) {
	  if (!allowIncomplete) {
	    assert(this.tx.ins.length > 0, 'Transaction has no inputs')
	    assert(this.tx.outs.length > 0, 'Transaction has no outputs')
	  }

	  var tx = this.tx.clone()

	  // Create script signatures from signature meta-data
	  this.inputs.forEach(function (input, index) {
	    var scriptType = input.scriptType
	    var scriptSig

	    if (!allowIncomplete) {
	      assert(!!scriptType, 'Transaction is not complete')
	      assert(scriptType in canSignTypes, scriptType + ' not supported')
	      assert(input.signatures, 'Transaction is missing signatures')
	    }

	    if (input.signatures) {
	      switch (scriptType) {
	        case 'pubkeyhash': {
	          var pkhSignature = input.signatures[0].toScriptSignature(input.hashType)
	          scriptSig = scripts.pubKeyHashInput(pkhSignature, input.pubKeys[0])
	          break
	        }

	        case 'multisig': {
	          // Array.prototype.map is sparse-compatible
	          var msSignatures = input.signatures.map(function (signature) {
	            return signature && signature.toScriptSignature(input.hashType)
	          })

	          // fill in blanks with OP_0
	          if (allowIncomplete) {
	            for (var i = 0; i < msSignatures.length; ++i) {
	              if (msSignatures[i]) continue

	              msSignatures[i] = ops.OP_0
	            }
	          } else {
	            // Array.prototype.filter returns non-sparse array
	            msSignatures = msSignatures.filter(function (x) { return x })
	          }

	          var redeemScript = allowIncomplete ? undefined : input.redeemScript
	          scriptSig = scripts.multisigInput(msSignatures, redeemScript)
	          break
	        }

	        case 'pubkey': {
	          var pkSignature = input.signatures[0].toScriptSignature(input.hashType)
	          scriptSig = scripts.pubKeyInput(pkSignature)
	          break
	        }
	      }
	    }

	    // did we build a scriptSig?
	    if (scriptSig) {
	      // wrap as scriptHash if necessary
	      if (input.prevOutType === 'scripthash') {
	        scriptSig = scripts.scriptHashInput(scriptSig, input.redeemScript)
	      }

	      tx.setInputScript(index, scriptSig)
	    }
	  })

	  return tx
	}

	TransactionBuilder.prototype.sign = function (index, privKey, redeemScript, hashType) {
	  assert(index in this.inputs, 'No input at index: ' + index)
	  hashType = hashType || Transaction.SIGHASH_ALL

	  var input = this.inputs[index]
	  var canSign = input.hashType &&
	    input.prevOutScript &&
	    input.prevOutType &&
	    input.pubKeys &&
	    input.scriptType &&
	    input.signatures

	  // are we almost ready to sign?
	  if (canSign) {
	    // if redeemScript was provided, enforce consistency
	    if (redeemScript) {
	      assert.deepEqual(input.redeemScript, redeemScript, 'Inconsistent redeemScript')
	    }

	    assert.equal(input.hashType, hashType, 'Inconsistent hashType')

	  // no? prepare
	  } else {
	    // must be pay-to-scriptHash?
	    if (redeemScript) {
	      // if we have a prevOutScript, enforce scriptHash equality to the redeemScript
	      if (input.prevOutScript) {
	        assert.equal(input.prevOutType, 'scripthash', 'PrevOutScript must be P2SH')

	        var scriptHash = input.prevOutScript.chunks[1]
	        assert.deepEqual(scriptHash, redeemScript.getHash(), 'RedeemScript does not match ' + scriptHash.toString('hex'))
	      }

	      var scriptType = scripts.classifyOutput(redeemScript)
	      assert(scriptType in canSignTypes, 'RedeemScript not supported (' + scriptType + ')')

	      var pubKeys = []
	      switch (scriptType) {
	        case 'multisig': {
	          pubKeys = redeemScript.chunks.slice(1, -2).map(ECPubKey.fromBuffer)
	          break
	        }

	        case 'pubkeyhash': {
	          var pkh1 = redeemScript.chunks[2]
	          var pkh2 = privKey.pub.getAddress().hash

	          assert.deepEqual(pkh1, pkh2, 'privateKey cannot sign for this input')
	          pubKeys = [privKey.pub]
	          break
	        }

	        case 'pubkey': {
	          pubKeys = redeemScript.chunks.slice(0, 1).map(ECPubKey.fromBuffer)
	          break
	        }
	      }

	      if (!input.prevOutScript) {
	        input.prevOutScript = scripts.scriptHashOutput(redeemScript.getHash())
	        input.prevOutType = 'scripthash'
	      }

	      input.pubKeys = pubKeys
	      input.redeemScript = redeemScript
	      input.scriptType = scriptType

	    // cannot be pay-to-scriptHash
	    } else {
	      assert.notEqual(input.prevOutType, 'scripthash', 'PrevOutScript is P2SH, missing redeemScript')

	      // can we otherwise sign this?
	      if (input.scriptType) {
	        assert(input.pubKeys, input.scriptType + ' not supported')

	      // we know nothin' Jon Snow, assume pubKeyHash
	      } else {
	        input.prevOutScript = privKey.pub.getAddress().toOutputScript()
	        input.prevOutType = 'pubkeyhash'
	        input.pubKeys = [privKey.pub]
	        input.scriptType = input.prevOutType
	      }
	    }

	    input.hashType = hashType
	    input.signatures = input.signatures || []
	  }

	  var signatureScript = input.redeemScript || input.prevOutScript
	  var signatureHash = this.tx.hashForSignature(index, signatureScript, hashType)

	  // enforce signature order matches public keys
	  if (input.scriptType === 'multisig' && input.redeemScript && input.signatures.length !== input.pubKeys.length) {
	    // maintain a local copy of unmatched signatures
	    var unmatched = input.signatures.slice()

	    input.signatures = input.pubKeys.map(function (pubKey) {
	      var match

	      // check for any matching signatures
	      unmatched.some(function (signature, i) {
	        if (!pubKey.verify(signatureHash, signature)) return false
	        match = signature

	        // remove matched signature from unmatched
	        unmatched.splice(i, 1)

	        return true
	      })

	      return match || undefined
	    })
	  }

	  // enforce in order signing of public keys
	  assert(input.pubKeys.some(function (pubKey, i) {
	    if (!privKey.pub.Q.equals(pubKey.Q)) return false

	    assert(!input.signatures[i], 'Signature already exists')
	    var signature = privKey.sign(signatureHash)
	    input.signatures[i] = signature

	    return true
	  }, this), 'privateKey cannot sign for this input')
	}

	module.exports = TransactionBuilder

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	var r;

	module.exports = function rand(len) {
	  if (!r)
	    r = new Rand(null);

	  return r.generate(len);
	};

	function Rand(rand) {
	  this.rand = rand;
	}
	module.exports.Rand = Rand;

	Rand.prototype.generate = function generate(len) {
	  return this._rand(len);
	};

	// Emulate crypto API using randy
	Rand.prototype._rand = function _rand(n) {
	  if (this.rand.getBytes)
	    return this.rand.getBytes(n);

	  var res = new Uint8Array(n);
	  for (var i = 0; i < res.length; i++)
	    res[i] = this.rand.getByte();
	  return res;
	};

	if (typeof self === 'object') {
	  if (self.crypto && self.crypto.getRandomValues) {
	    // Modern browsers
	    Rand.prototype._rand = function _rand(n) {
	      var arr = new Uint8Array(n);
	      self.crypto.getRandomValues(arr);
	      return arr;
	    };
	  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
	    // IE
	    Rand.prototype._rand = function _rand(n) {
	      var arr = new Uint8Array(n);
	      self.msCrypto.getRandomValues(arr);
	      return arr;
	    };

	  // Safari's WebWorkers do not have `crypto`
	  } else if (typeof window === 'object') {
	    // Old junk
	    Rand.prototype._rand = function() {
	      throw new Error('Not implemented yet');
	    };
	  }
	} else {
	  // Node.js or Web worker with no crypto support
	  try {
	    var crypto = __webpack_require__(422);
	    if (typeof crypto.randomBytes !== 'function')
	      throw new Error('Not supported');

	    Rand.prototype._rand = function _rand(n) {
	      return crypto.randomBytes(n);
	    };
	  } catch (e) {
	  }
	}


/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(232)

	var md5 = toConstructor(__webpack_require__(229))
	var rmd160 = toConstructor(__webpack_require__(230))

	function toConstructor (fn) {
	  return function () {
	    var buffers = []
	    var m= {
	      update: function (data, enc) {
	        if(!Buffer.isBuffer(data)) data = new Buffer(data, enc)
	        buffers.push(data)
	        return this
	      },
	      digest: function (enc) {
	        var buf = Buffer.concat(buffers)
	        var r = fn(buf)
	        buffers = null
	        return enc ? r.toString(enc) : r
	      }
	    }
	    return m
	  }
	}

	module.exports = function (alg) {
	  if('md5' === alg) return new md5()
	  if('rmd160' === alg) return new rmd160()
	  return createHash(alg)
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function (Math) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var Hasher = C_lib.Hasher;
		    var C_algo = C.algo;

		    // Initialization and round constants tables
		    var H = [];
		    var K = [];

		    // Compute constants
		    (function () {
		        function isPrime(n) {
		            var sqrtN = Math.sqrt(n);
		            for (var factor = 2; factor <= sqrtN; factor++) {
		                if (!(n % factor)) {
		                    return false;
		                }
		            }

		            return true;
		        }

		        function getFractionalBits(n) {
		            return ((n - (n | 0)) * 0x100000000) | 0;
		        }

		        var n = 2;
		        var nPrime = 0;
		        while (nPrime < 64) {
		            if (isPrime(n)) {
		                if (nPrime < 8) {
		                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
		                }
		                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));

		                nPrime++;
		            }

		            n++;
		        }
		    }());

		    // Reusable object
		    var W = [];

		    /**
		     * SHA-256 hash algorithm.
		     */
		    var SHA256 = C_algo.SHA256 = Hasher.extend({
		        _doReset: function () {
		            this._hash = new WordArray.init(H.slice(0));
		        },

		        _doProcessBlock: function (M, offset) {
		            // Shortcut
		            var H = this._hash.words;

		            // Working variables
		            var a = H[0];
		            var b = H[1];
		            var c = H[2];
		            var d = H[3];
		            var e = H[4];
		            var f = H[5];
		            var g = H[6];
		            var h = H[7];

		            // Computation
		            for (var i = 0; i < 64; i++) {
		                if (i < 16) {
		                    W[i] = M[offset + i] | 0;
		                } else {
		                    var gamma0x = W[i - 15];
		                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^
		                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^
		                                   (gamma0x >>> 3);

		                    var gamma1x = W[i - 2];
		                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^
		                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^
		                                   (gamma1x >>> 10);

		                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
		                }

		                var ch  = (e & f) ^ (~e & g);
		                var maj = (a & b) ^ (a & c) ^ (b & c);

		                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));
		                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));

		                var t1 = h + sigma1 + ch + K[i] + W[i];
		                var t2 = sigma0 + maj;

		                h = g;
		                g = f;
		                f = e;
		                e = (d + t1) | 0;
		                d = c;
		                c = b;
		                b = a;
		                a = (t1 + t2) | 0;
		            }

		            // Intermediate hash value
		            H[0] = (H[0] + a) | 0;
		            H[1] = (H[1] + b) | 0;
		            H[2] = (H[2] + c) | 0;
		            H[3] = (H[3] + d) | 0;
		            H[4] = (H[4] + e) | 0;
		            H[5] = (H[5] + f) | 0;
		            H[6] = (H[6] + g) | 0;
		            H[7] = (H[7] + h) | 0;
		        },

		        _doFinalize: function () {
		            // Shortcuts
		            var data = this._data;
		            var dataWords = data.words;

		            var nBitsTotal = this._nDataBytes * 8;
		            var nBitsLeft = data.sigBytes * 8;

		            // Add padding
		            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
		            data.sigBytes = dataWords.length * 4;

		            // Hash final blocks
		            this._process();

		            // Return final computed hash
		            return this._hash;
		        },

		        clone: function () {
		            var clone = Hasher.clone.call(this);
		            clone._hash = this._hash.clone();

		            return clone;
		        }
		    });

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.SHA256('message');
		     *     var hash = CryptoJS.SHA256(wordArray);
		     */
		    C.SHA256 = Hasher._createHelper(SHA256);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacSHA256(message, key);
		     */
		    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
		}(Math));


		return CryptoJS.SHA256;

	}));

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(61));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./x64-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function (Math) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var Hasher = C_lib.Hasher;
		    var C_x64 = C.x64;
		    var X64Word = C_x64.Word;
		    var C_algo = C.algo;

		    // Constants tables
		    var RHO_OFFSETS = [];
		    var PI_INDEXES  = [];
		    var ROUND_CONSTANTS = [];

		    // Compute Constants
		    (function () {
		        // Compute rho offset constants
		        var x = 1, y = 0;
		        for (var t = 0; t < 24; t++) {
		            RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;

		            var newX = y % 5;
		            var newY = (2 * x + 3 * y) % 5;
		            x = newX;
		            y = newY;
		        }

		        // Compute pi index constants
		        for (var x = 0; x < 5; x++) {
		            for (var y = 0; y < 5; y++) {
		                PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;
		            }
		        }

		        // Compute round constants
		        var LFSR = 0x01;
		        for (var i = 0; i < 24; i++) {
		            var roundConstantMsw = 0;
		            var roundConstantLsw = 0;

		            for (var j = 0; j < 7; j++) {
		                if (LFSR & 0x01) {
		                    var bitPosition = (1 << j) - 1;
		                    if (bitPosition < 32) {
		                        roundConstantLsw ^= 1 << bitPosition;
		                    } else /* if (bitPosition >= 32) */ {
		                        roundConstantMsw ^= 1 << (bitPosition - 32);
		                    }
		                }

		                // Compute next LFSR
		                if (LFSR & 0x80) {
		                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1
		                    LFSR = (LFSR << 1) ^ 0x71;
		                } else {
		                    LFSR <<= 1;
		                }
		            }

		            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
		        }
		    }());

		    // Reusable objects for temporary values
		    var T = [];
		    (function () {
		        for (var i = 0; i < 25; i++) {
		            T[i] = X64Word.create();
		        }
		    }());

		    /**
		     * SHA-3 hash algorithm.
		     */
		    var SHA3 = C_algo.SHA3 = Hasher.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {number} outputLength
		         *   The desired number of bits in the output hash.
		         *   Only values permitted are: 224, 256, 384, 512.
		         *   Default: 512
		         */
		        cfg: Hasher.cfg.extend({
		            outputLength: 512
		        }),

		        _doReset: function () {
		            var state = this._state = []
		            for (var i = 0; i < 25; i++) {
		                state[i] = new X64Word.init();
		            }

		            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
		        },

		        _doProcessBlock: function (M, offset) {
		            // Shortcuts
		            var state = this._state;
		            var nBlockSizeLanes = this.blockSize / 2;

		            // Absorb
		            for (var i = 0; i < nBlockSizeLanes; i++) {
		                // Shortcuts
		                var M2i  = M[offset + 2 * i];
		                var M2i1 = M[offset + 2 * i + 1];

		                // Swap endian
		                M2i = (
		                    (((M2i << 8)  | (M2i >>> 24)) & 0x00ff00ff) |
		                    (((M2i << 24) | (M2i >>> 8))  & 0xff00ff00)
		                );
		                M2i1 = (
		                    (((M2i1 << 8)  | (M2i1 >>> 24)) & 0x00ff00ff) |
		                    (((M2i1 << 24) | (M2i1 >>> 8))  & 0xff00ff00)
		                );

		                // Absorb message into state
		                var lane = state[i];
		                lane.high ^= M2i1;
		                lane.low  ^= M2i;
		            }

		            // Rounds
		            for (var round = 0; round < 24; round++) {
		                // Theta
		                for (var x = 0; x < 5; x++) {
		                    // Mix column lanes
		                    var tMsw = 0, tLsw = 0;
		                    for (var y = 0; y < 5; y++) {
		                        var lane = state[x + 5 * y];
		                        tMsw ^= lane.high;
		                        tLsw ^= lane.low;
		                    }

		                    // Temporary values
		                    var Tx = T[x];
		                    Tx.high = tMsw;
		                    Tx.low  = tLsw;
		                }
		                for (var x = 0; x < 5; x++) {
		                    // Shortcuts
		                    var Tx4 = T[(x + 4) % 5];
		                    var Tx1 = T[(x + 1) % 5];
		                    var Tx1Msw = Tx1.high;
		                    var Tx1Lsw = Tx1.low;

		                    // Mix surrounding columns
		                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));
		                    var tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));
		                    for (var y = 0; y < 5; y++) {
		                        var lane = state[x + 5 * y];
		                        lane.high ^= tMsw;
		                        lane.low  ^= tLsw;
		                    }
		                }

		                // Rho Pi
		                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
		                    // Shortcuts
		                    var lane = state[laneIndex];
		                    var laneMsw = lane.high;
		                    var laneLsw = lane.low;
		                    var rhoOffset = RHO_OFFSETS[laneIndex];

		                    // Rotate lanes
		                    if (rhoOffset < 32) {
		                        var tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));
		                        var tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));
		                    } else /* if (rhoOffset >= 32) */ {
		                        var tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));
		                        var tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));
		                    }

		                    // Transpose lanes
		                    var TPiLane = T[PI_INDEXES[laneIndex]];
		                    TPiLane.high = tMsw;
		                    TPiLane.low  = tLsw;
		                }

		                // Rho pi at x = y = 0
		                var T0 = T[0];
		                var state0 = state[0];
		                T0.high = state0.high;
		                T0.low  = state0.low;

		                // Chi
		                for (var x = 0; x < 5; x++) {
		                    for (var y = 0; y < 5; y++) {
		                        // Shortcuts
		                        var laneIndex = x + 5 * y;
		                        var lane = state[laneIndex];
		                        var TLane = T[laneIndex];
		                        var Tx1Lane = T[((x + 1) % 5) + 5 * y];
		                        var Tx2Lane = T[((x + 2) % 5) + 5 * y];

		                        // Mix rows
		                        lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);
		                        lane.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);
		                    }
		                }

		                // Iota
		                var lane = state[0];
		                var roundConstant = ROUND_CONSTANTS[round];
		                lane.high ^= roundConstant.high;
		                lane.low  ^= roundConstant.low;;
		            }
		        },

		        _doFinalize: function () {
		            // Shortcuts
		            var data = this._data;
		            var dataWords = data.words;
		            var nBitsTotal = this._nDataBytes * 8;
		            var nBitsLeft = data.sigBytes * 8;
		            var blockSizeBits = this.blockSize * 32;

		            // Add padding
		            dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);
		            dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;
		            data.sigBytes = dataWords.length * 4;

		            // Hash final blocks
		            this._process();

		            // Shortcuts
		            var state = this._state;
		            var outputLengthBytes = this.cfg.outputLength / 8;
		            var outputLengthLanes = outputLengthBytes / 8;

		            // Squeeze
		            var hashWords = [];
		            for (var i = 0; i < outputLengthLanes; i++) {
		                // Shortcuts
		                var lane = state[i];
		                var laneMsw = lane.high;
		                var laneLsw = lane.low;

		                // Swap endian
		                laneMsw = (
		                    (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |
		                    (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)
		                );
		                laneLsw = (
		                    (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |
		                    (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)
		                );

		                // Squeeze state to retrieve hash
		                hashWords.push(laneLsw);
		                hashWords.push(laneMsw);
		            }

		            // Return final computed hash
		            return new WordArray.init(hashWords, outputLengthBytes);
		        },

		        clone: function () {
		            var clone = Hasher.clone.call(this);

		            var state = clone._state = this._state.slice(0);
		            for (var i = 0; i < 25; i++) {
		                state[i] = state[i].clone();
		            }

		            return clone;
		        }
		    });

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.SHA3('message');
		     *     var hash = CryptoJS.SHA3(wordArray);
		     */
		    C.SHA3 = Hasher._createHelper(SHA3);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacSHA3(message, key);
		     */
		    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
		}(Math));


		return CryptoJS.SHA3;

	}));

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(61));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./x64-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var Hasher = C_lib.Hasher;
		    var C_x64 = C.x64;
		    var X64Word = C_x64.Word;
		    var X64WordArray = C_x64.WordArray;
		    var C_algo = C.algo;

		    function X64Word_create() {
		        return X64Word.create.apply(X64Word, arguments);
		    }

		    // Constants
		    var K = [
		        X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),
		        X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),
		        X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),
		        X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),
		        X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),
		        X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),
		        X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),
		        X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),
		        X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),
		        X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),
		        X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),
		        X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),
		        X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),
		        X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),
		        X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),
		        X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),
		        X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),
		        X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),
		        X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),
		        X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),
		        X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),
		        X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),
		        X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),
		        X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),
		        X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),
		        X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),
		        X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),
		        X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),
		        X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),
		        X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),
		        X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),
		        X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),
		        X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),
		        X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),
		        X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),
		        X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),
		        X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),
		        X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),
		        X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),
		        X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)
		    ];

		    // Reusable objects
		    var W = [];
		    (function () {
		        for (var i = 0; i < 80; i++) {
		            W[i] = X64Word_create();
		        }
		    }());

		    /**
		     * SHA-512 hash algorithm.
		     */
		    var SHA512 = C_algo.SHA512 = Hasher.extend({
		        _doReset: function () {
		            this._hash = new X64WordArray.init([
		                new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),
		                new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),
		                new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),
		                new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)
		            ]);
		        },

		        _doProcessBlock: function (M, offset) {
		            // Shortcuts
		            var H = this._hash.words;

		            var H0 = H[0];
		            var H1 = H[1];
		            var H2 = H[2];
		            var H3 = H[3];
		            var H4 = H[4];
		            var H5 = H[5];
		            var H6 = H[6];
		            var H7 = H[7];

		            var H0h = H0.high;
		            var H0l = H0.low;
		            var H1h = H1.high;
		            var H1l = H1.low;
		            var H2h = H2.high;
		            var H2l = H2.low;
		            var H3h = H3.high;
		            var H3l = H3.low;
		            var H4h = H4.high;
		            var H4l = H4.low;
		            var H5h = H5.high;
		            var H5l = H5.low;
		            var H6h = H6.high;
		            var H6l = H6.low;
		            var H7h = H7.high;
		            var H7l = H7.low;

		            // Working variables
		            var ah = H0h;
		            var al = H0l;
		            var bh = H1h;
		            var bl = H1l;
		            var ch = H2h;
		            var cl = H2l;
		            var dh = H3h;
		            var dl = H3l;
		            var eh = H4h;
		            var el = H4l;
		            var fh = H5h;
		            var fl = H5l;
		            var gh = H6h;
		            var gl = H6l;
		            var hh = H7h;
		            var hl = H7l;

		            // Rounds
		            for (var i = 0; i < 80; i++) {
		                // Shortcut
		                var Wi = W[i];

		                // Extend message
		                if (i < 16) {
		                    var Wih = Wi.high = M[offset + i * 2]     | 0;
		                    var Wil = Wi.low  = M[offset + i * 2 + 1] | 0;
		                } else {
		                    // Gamma0
		                    var gamma0x  = W[i - 15];
		                    var gamma0xh = gamma0x.high;
		                    var gamma0xl = gamma0x.low;
		                    var gamma0h  = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);
		                    var gamma0l  = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));

		                    // Gamma1
		                    var gamma1x  = W[i - 2];
		                    var gamma1xh = gamma1x.high;
		                    var gamma1xl = gamma1x.low;
		                    var gamma1h  = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);
		                    var gamma1l  = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));

		                    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
		                    var Wi7  = W[i - 7];
		                    var Wi7h = Wi7.high;
		                    var Wi7l = Wi7.low;

		                    var Wi16  = W[i - 16];
		                    var Wi16h = Wi16.high;
		                    var Wi16l = Wi16.low;

		                    var Wil = gamma0l + Wi7l;
		                    var Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);
		                    var Wil = Wil + gamma1l;
		                    var Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);
		                    var Wil = Wil + Wi16l;
		                    var Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);

		                    Wi.high = Wih;
		                    Wi.low  = Wil;
		                }

		                var chh  = (eh & fh) ^ (~eh & gh);
		                var chl  = (el & fl) ^ (~el & gl);
		                var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);
		                var majl = (al & bl) ^ (al & cl) ^ (bl & cl);

		                var sigma0h = ((ah >>> 28) | (al << 4))  ^ ((ah << 30)  | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));
		                var sigma0l = ((al >>> 28) | (ah << 4))  ^ ((al << 30)  | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));
		                var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));
		                var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));

		                // t1 = h + sigma1 + ch + K[i] + W[i]
		                var Ki  = K[i];
		                var Kih = Ki.high;
		                var Kil = Ki.low;

		                var t1l = hl + sigma1l;
		                var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);
		                var t1l = t1l + chl;
		                var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);
		                var t1l = t1l + Kil;
		                var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);
		                var t1l = t1l + Wil;
		                var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);

		                // t2 = sigma0 + maj
		                var t2l = sigma0l + majl;
		                var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);

		                // Update working variables
		                hh = gh;
		                hl = gl;
		                gh = fh;
		                gl = fl;
		                fh = eh;
		                fl = el;
		                el = (dl + t1l) | 0;
		                eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;
		                dh = ch;
		                dl = cl;
		                ch = bh;
		                cl = bl;
		                bh = ah;
		                bl = al;
		                al = (t1l + t2l) | 0;
		                ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;
		            }

		            // Intermediate hash value
		            H0l = H0.low  = (H0l + al);
		            H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));
		            H1l = H1.low  = (H1l + bl);
		            H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));
		            H2l = H2.low  = (H2l + cl);
		            H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));
		            H3l = H3.low  = (H3l + dl);
		            H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));
		            H4l = H4.low  = (H4l + el);
		            H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));
		            H5l = H5.low  = (H5l + fl);
		            H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));
		            H6l = H6.low  = (H6l + gl);
		            H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));
		            H7l = H7.low  = (H7l + hl);
		            H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));
		        },

		        _doFinalize: function () {
		            // Shortcuts
		            var data = this._data;
		            var dataWords = data.words;

		            var nBitsTotal = this._nDataBytes * 8;
		            var nBitsLeft = data.sigBytes * 8;

		            // Add padding
		            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
		            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);
		            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;
		            data.sigBytes = dataWords.length * 4;

		            // Hash final blocks
		            this._process();

		            // Convert hash to 32-bit word array before returning
		            var hash = this._hash.toX32();

		            // Return final computed hash
		            return hash;
		        },

		        clone: function () {
		            var clone = Hasher.clone.call(this);
		            clone._hash = this._hash.clone();

		            return clone;
		        },

		        blockSize: 1024/32
		    });

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.SHA512('message');
		     *     var hash = CryptoJS.SHA512(wordArray);
		     */
		    C.SHA512 = Hasher._createHelper(SHA512);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacSHA512(message, key);
		     */
		    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
		}());


		return CryptoJS.SHA512;

	}));

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	var assert = __webpack_require__(5)
	var BigInteger = __webpack_require__(15)

	var Point = __webpack_require__(120)

	function Curve (p, a, b, Gx, Gy, n, h) {
	  this.p = p
	  this.a = a
	  this.b = b
	  this.G = Point.fromAffine(this, Gx, Gy)
	  this.n = n
	  this.h = h

	  this.infinity = new Point(this, null, null, BigInteger.ZERO)

	  // result caching
	  this.pOverFour = p.add(BigInteger.ONE).shiftRight(2)

	  // determine size of p in bytes
	  this.pLength = Math.floor((this.p.bitLength() + 7) / 8)
	}

	Curve.prototype.pointFromX = function (isOdd, x) {
	  var alpha = x.pow(3).add(this.a.multiply(x)).add(this.b).mod(this.p)
	  var beta = alpha.modPow(this.pOverFour, this.p) // XXX: not compatible with all curves

	  var y = beta
	  if (beta.isEven() ^ !isOdd) {
	    y = this.p.subtract(y) // -y % p
	  }

	  return Point.fromAffine(this, x, y)
	}

	Curve.prototype.isInfinity = function (Q) {
	  if (Q === this.infinity) return true

	  return Q.z.signum() === 0 && Q.y.signum() !== 0
	}

	Curve.prototype.isOnCurve = function (Q) {
	  if (this.isInfinity(Q)) return true

	  var x = Q.affineX
	  var y = Q.affineY
	  var a = this.a
	  var b = this.b
	  var p = this.p

	  // Check that xQ and yQ are integers in the interval [0, p - 1]
	  if (x.signum() < 0 || x.compareTo(p) >= 0) return false
	  if (y.signum() < 0 || y.compareTo(p) >= 0) return false

	  // and check that y^2 = x^3 + ax + b (mod p)
	  var lhs = y.square().mod(p)
	  var rhs = x.pow(3).add(a.multiply(x)).add(b).mod(p)
	  return lhs.equals(rhs)
	}

	/**
	 * Validate an elliptic curve point.
	 *
	 * See SEC 1, section 3.2.2.1: Elliptic Curve Public Key Validation Primitive
	 */
	Curve.prototype.validate = function (Q) {
	  // Check Q != O
	  assert(!this.isInfinity(Q), 'Point is at infinity')
	  assert(this.isOnCurve(Q), 'Point is not on the curve')

	  // Check nQ = O (where Q is a scalar multiple of G)
	  var nQ = Q.multiply(this.n)
	  assert(this.isInfinity(nQ), 'Point is not a scalar multiple of G')

	  return true
	}

	module.exports = Curve


/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	var assert = __webpack_require__(5)
	var Buffer = __webpack_require__(6).Buffer
	var BigInteger = __webpack_require__(15)

	var THREE = BigInteger.valueOf(3)

	function Point (curve, x, y, z) {
	  assert.notStrictEqual(z, undefined, 'Missing Z coordinate')

	  this.curve = curve
	  this.x = x
	  this.y = y
	  this.z = z
	  this._zInv = null

	  this.compressed = true
	}

	Object.defineProperty(Point.prototype, 'zInv', {
	  get: function () {
	    if (this._zInv === null) {
	      this._zInv = this.z.modInverse(this.curve.p)
	    }

	    return this._zInv
	  }
	})

	Object.defineProperty(Point.prototype, 'affineX', {
	  get: function () {
	    return this.x.multiply(this.zInv).mod(this.curve.p)
	  }
	})

	Object.defineProperty(Point.prototype, 'affineY', {
	  get: function () {
	    return this.y.multiply(this.zInv).mod(this.curve.p)
	  }
	})

	Point.fromAffine = function (curve, x, y) {
	  return new Point(curve, x, y, BigInteger.ONE)
	}

	Point.prototype.equals = function (other) {
	  if (other === this) return true
	  if (this.curve.isInfinity(this)) return this.curve.isInfinity(other)
	  if (this.curve.isInfinity(other)) return this.curve.isInfinity(this)

	  // u = Y2 * Z1 - Y1 * Z2
	  var u = other.y.multiply(this.z).subtract(this.y.multiply(other.z)).mod(this.curve.p)

	  if (u.signum() !== 0) return false

	  // v = X2 * Z1 - X1 * Z2
	  var v = other.x.multiply(this.z).subtract(this.x.multiply(other.z)).mod(this.curve.p)

	  return v.signum() === 0
	}

	Point.prototype.negate = function () {
	  var y = this.curve.p.subtract(this.y)

	  return new Point(this.curve, this.x, y, this.z)
	}

	Point.prototype.add = function (b) {
	  if (this.curve.isInfinity(this)) return b
	  if (this.curve.isInfinity(b)) return this

	  var x1 = this.x
	  var y1 = this.y
	  var x2 = b.x
	  var y2 = b.y

	  // u = Y2 * Z1 - Y1 * Z2
	  var u = y2.multiply(this.z).subtract(y1.multiply(b.z)).mod(this.curve.p)
	  // v = X2 * Z1 - X1 * Z2
	  var v = x2.multiply(this.z).subtract(x1.multiply(b.z)).mod(this.curve.p)

	  if (v.signum() === 0) {
	    if (u.signum() === 0) {
	      return this.twice() // this == b, so double
	    }

	    return this.curve.infinity // this = -b, so infinity
	  }

	  var v2 = v.square()
	  var v3 = v2.multiply(v)
	  var x1v2 = x1.multiply(v2)
	  var zu2 = u.square().multiply(this.z)

	  // x3 = v * (z2 * (z1 * u^2 - 2 * x1 * v^2) - v^3)
	  var x3 = zu2.subtract(x1v2.shiftLeft(1)).multiply(b.z).subtract(v3).multiply(v).mod(this.curve.p)
	  // y3 = z2 * (3 * x1 * u * v^2 - y1 * v^3 - z1 * u^3) + u * v^3
	  var y3 = x1v2.multiply(THREE).multiply(u).subtract(y1.multiply(v3)).subtract(zu2.multiply(u)).multiply(b.z).add(u.multiply(v3)).mod(this.curve.p)
	  // z3 = v^3 * z1 * z2
	  var z3 = v3.multiply(this.z).multiply(b.z).mod(this.curve.p)

	  return new Point(this.curve, x3, y3, z3)
	}

	Point.prototype.twice = function () {
	  if (this.curve.isInfinity(this)) return this
	  if (this.y.signum() === 0) return this.curve.infinity

	  var x1 = this.x
	  var y1 = this.y

	  var y1z1 = y1.multiply(this.z).mod(this.curve.p)
	  var y1sqz1 = y1z1.multiply(y1).mod(this.curve.p)
	  var a = this.curve.a

	  // w = 3 * x1^2 + a * z1^2
	  var w = x1.square().multiply(THREE)

	  if (a.signum() !== 0) {
	    w = w.add(this.z.square().multiply(a))
	  }

	  w = w.mod(this.curve.p)
	  // x3 = 2 * y1 * z1 * (w^2 - 8 * x1 * y1^2 * z1)
	  var x3 = w.square().subtract(x1.shiftLeft(3).multiply(y1sqz1)).shiftLeft(1).multiply(y1z1).mod(this.curve.p)
	  // y3 = 4 * y1^2 * z1 * (3 * w * x1 - 2 * y1^2 * z1) - w^3
	  var y3 = w.multiply(THREE).multiply(x1).subtract(y1sqz1.shiftLeft(1)).shiftLeft(2).multiply(y1sqz1).subtract(w.pow(3)).mod(this.curve.p)
	  // z3 = 8 * (y1 * z1)^3
	  var z3 = y1z1.pow(3).shiftLeft(3).mod(this.curve.p)

	  return new Point(this.curve, x3, y3, z3)
	}

	// Simple NAF (Non-Adjacent Form) multiplication algorithm
	// TODO: modularize the multiplication algorithm
	Point.prototype.multiply = function (k) {
	  if (this.curve.isInfinity(this)) return this
	  if (k.signum() === 0) return this.curve.infinity

	  var e = k
	  var h = e.multiply(THREE)

	  var neg = this.negate()
	  var R = this

	  for (var i = h.bitLength() - 2; i > 0; --i) {
	    var hBit = h.testBit(i)
	    var eBit = e.testBit(i)

	    R = R.twice()

	    if (hBit !== eBit) {
	      R = R.add(hBit ? this : neg)
	    }
	  }

	  return R
	}

	// Compute this*j + x*k (simultaneous multiplication)
	Point.prototype.multiplyTwo = function (j, x, k) {
	  var i = Math.max(j.bitLength(), k.bitLength()) - 1
	  var R = this.curve.infinity
	  var both = this.add(x)

	  while (i >= 0) {
	    var jBit = j.testBit(i)
	    var kBit = k.testBit(i)

	    R = R.twice()

	    if (jBit) {
	      if (kBit) {
	        R = R.add(both)
	      } else {
	        R = R.add(this)
	      }
	    } else if (kBit) {
	      R = R.add(x)
	    }
	    --i
	  }

	  return R
	}

	Point.prototype.getEncoded = function (compressed) {
	  if (compressed == null) compressed = this.compressed
	  if (this.curve.isInfinity(this)) return Buffer.alloc(1, 0) // Infinity point encoded is simply '00'

	  var x = this.affineX
	  var y = this.affineY
	  var byteLength = this.curve.pLength
	  var buffer

	  // 0x02/0x03 | X
	  if (compressed) {
	    buffer = Buffer.allocUnsafe(1 + byteLength)
	    buffer.writeUInt8(y.isEven() ? 0x02 : 0x03, 0)

	  // 0x04 | X | Y
	  } else {
	    buffer = Buffer.allocUnsafe(1 + byteLength + byteLength)
	    buffer.writeUInt8(0x04, 0)

	    y.toBuffer(byteLength).copy(buffer, 1 + byteLength)
	  }

	  x.toBuffer(byteLength).copy(buffer, 1)

	  return buffer
	}

	Point.decodeFrom = function (curve, buffer) {
	  var type = buffer.readUInt8(0)
	  var compressed = (type !== 4)

	  var byteLength = Math.floor((curve.p.bitLength() + 7) / 8)
	  var x = BigInteger.fromBuffer(buffer.slice(1, 1 + byteLength))

	  var Q
	  if (compressed) {
	    assert.equal(buffer.length, byteLength + 1, 'Invalid sequence length')
	    assert(type === 0x02 || type === 0x03, 'Invalid sequence tag')

	    var isOdd = (type === 0x03)
	    Q = curve.pointFromX(isOdd, x)
	  } else {
	    assert.equal(buffer.length, 1 + byteLength + byteLength, 'Invalid sequence length')

	    var y = BigInteger.fromBuffer(buffer.slice(1 + byteLength))
	    Q = Point.fromAffine(curve, x, y)
	  }

	  Q.compressed = compressed
	  return Q
	}

	Point.prototype.toString = function () {
	  if (this.curve.isInfinity(this)) return '(INFINITY)'

	  return '(' + this.affineX.toString() + ',' + this.affineY.toString() + ')'
	}

	module.exports = Point


/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var curve = exports;

	curve.base = __webpack_require__(62);
	curve.short = __webpack_require__(264);
	curve.mont = __webpack_require__(263);
	curve.edwards = __webpack_require__(262);


/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	
	const errorValues = __webpack_require__(314)
	const FALLBACK_ERROR_CODE = __webpack_require__(87).rpc.internal
	const { EthereumRpcError } = __webpack_require__(83)

	const JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.'

	const FALLBACK_MESSAGE = 'Unspecified error message. This is a bug, please report it.'

	const FALLBACK_ERROR = {
	  code: FALLBACK_ERROR_CODE,
	  message: getMessageFromCode(FALLBACK_ERROR_CODE)
	}

	/**
	 * Gets the message for a given code, or a fallback message if the code has
	 * no corresponding message.
	 * 
	 * @param {number} code - The integer error code
	 * @param {string} fallbackMessage - The fallback message
	 * @return {string} The corresponding message or the fallback message
	 */
	function getMessageFromCode(code, fallbackMessage = FALLBACK_MESSAGE) {

	  if (Number.isInteger(code)) {

	    const codeString = code.toString()
	    if (errorValues[codeString]) return errorValues[codeString].message

	    if (isJsonRpcServerError(code)) return JSON_RPC_SERVER_ERROR_MESSAGE

	    // TODO: allow valid codes and messages to be extended
	    // // EIP 1193 Status Codes
	    // if (code >= 4000 && code <= 4999) return Something?
	  }
	  return fallbackMessage
	}

	/**
	 * Returns whether the given code is valid.
	 * A code is only valid if it has a message.
	 * 
	 * @param {number} code - The code to check
	 * @return {boolean} true if the code is valid, false otherwise.
	 */
	function isValidCode(code) {

	  if (!Number.isInteger(code)) return false

	  const codeString = code.toString()
	  if (errorValues[codeString]) return true

	  if (isJsonRpcServerError(code)) return true

	  // TODO: allow valid codes and messages to be extended
	  // // EIP 1193 Status Codes
	  // if (code >= 4000 && code <= 4999) return true

	  return false
	}

	/**
	 * Serializes the given error to an Ethereum JSON RPC-compatible error object.
	 * Merely copies the given error's values if it is already compatible.
	 * If the given error is not fully compatible, it will be preserved on the
	 * returned object's data.originalError property.
	 * Adds a 'stack' property if it exists on the given error.
	 *
	 * @param {any} error - The error to serialize.
	 * @param {object} fallbackError - The custom fallback error values if the
	 * given error is invalid.
	 * @return {object} A standardized error object.
	 */
	function serializeError (error, fallbackError = FALLBACK_ERROR) {

	  if (
	    !fallbackError || 
	    !Number.isInteger(fallbackError.code) ||
	    typeof fallbackError.message !== 'string'
	  ) {
	    throw new Error(
	      'fallbackError must contain integer number code and string message.'
	    )
	  }

	  if (error instanceof EthereumRpcError) {
	    return error.serialize()
	  }

	  const serialized = {}

	  if (error && isValidCode(error.code)) {

	    serialized.code = error.code

	    if (error.message && typeof error.message === 'string') {
	      serialized.message = error.message
	      if (error.hasOwnProperty('data')) serialized.data = error.data
	    } else {
	      serialized.message = getMessageFromCode(serialized.code)
	      serialized.data = { originalError: assignOriginalError(error) }
	    }

	  } else {
	    serialized.code = fallbackError.code
	    serialized.message = (
	      error && error.message
	        ? error.message
	        : fallbackError.message
	    )
	    serialized.data = { originalError: assignOriginalError(error) }
	  }

	  if (error && error.stack) serialized.stack = error.stack
	  return serialized
	}

	// Internal

	function isJsonRpcServerError (code) {
	  return code >= -32099 && code <= -32000
	}

	function assignOriginalError (error) {
	  if (error && typeof error === 'object' && !Array.isArray(error)) {
	    return Object.assign({}, error)
	  }
	  return error
	}

	// Exports

	module.exports = {
	  getMessageFromCode,
	  isValidCode,
	  serializeError,
	  JSON_RPC_SERVER_ERROR_MESSAGE,
	}


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	const extend = __webpack_require__(71)
	const createRandomId = __webpack_require__(320)()

	module.exports = EthQuery


	function EthQuery(provider){
	  const self = this
	  self.currentProvider = provider
	}

	//
	// base queries
	//

	// default block
	EthQuery.prototype.getBalance =                          generateFnWithDefaultBlockFor(2, 'eth_getBalance')
	EthQuery.prototype.getCode =                             generateFnWithDefaultBlockFor(2, 'eth_getCode')
	EthQuery.prototype.getTransactionCount =                 generateFnWithDefaultBlockFor(2, 'eth_getTransactionCount')
	EthQuery.prototype.getStorageAt =                        generateFnWithDefaultBlockFor(3, 'eth_getStorageAt')
	EthQuery.prototype.call =                                generateFnWithDefaultBlockFor(2, 'eth_call')
	// standard
	EthQuery.prototype.protocolVersion =                     generateFnFor('eth_protocolVersion')
	EthQuery.prototype.syncing =                             generateFnFor('eth_syncing')
	EthQuery.prototype.coinbase =                            generateFnFor('eth_coinbase')
	EthQuery.prototype.mining =                              generateFnFor('eth_mining')
	EthQuery.prototype.hashrate =                            generateFnFor('eth_hashrate')
	EthQuery.prototype.gasPrice =                            generateFnFor('eth_gasPrice')
	EthQuery.prototype.accounts =                            generateFnFor('eth_accounts')
	EthQuery.prototype.blockNumber =                         generateFnFor('eth_blockNumber')
	EthQuery.prototype.getBlockTransactionCountByHash =      generateFnFor('eth_getBlockTransactionCountByHash')
	EthQuery.prototype.getBlockTransactionCountByNumber =    generateFnFor('eth_getBlockTransactionCountByNumber')
	EthQuery.prototype.getUncleCountByBlockHash =            generateFnFor('eth_getUncleCountByBlockHash')
	EthQuery.prototype.getUncleCountByBlockNumber =          generateFnFor('eth_getUncleCountByBlockNumber')
	EthQuery.prototype.sign =                                generateFnFor('eth_sign')
	EthQuery.prototype.sendTransaction =                     generateFnFor('eth_sendTransaction')
	EthQuery.prototype.sendRawTransaction =                  generateFnFor('eth_sendRawTransaction')
	EthQuery.prototype.estimateGas =                         generateFnFor('eth_estimateGas')
	EthQuery.prototype.getBlockByHash =                      generateFnFor('eth_getBlockByHash')
	EthQuery.prototype.getBlockByNumber =                    generateFnFor('eth_getBlockByNumber')
	EthQuery.prototype.getTransactionByHash =                generateFnFor('eth_getTransactionByHash')
	EthQuery.prototype.getTransactionByBlockHashAndIndex =   generateFnFor('eth_getTransactionByBlockHashAndIndex')
	EthQuery.prototype.getTransactionByBlockNumberAndIndex = generateFnFor('eth_getTransactionByBlockNumberAndIndex')
	EthQuery.prototype.getTransactionReceipt =               generateFnFor('eth_getTransactionReceipt')
	EthQuery.prototype.getUncleByBlockHashAndIndex =         generateFnFor('eth_getUncleByBlockHashAndIndex')
	EthQuery.prototype.getUncleByBlockNumberAndIndex =       generateFnFor('eth_getUncleByBlockNumberAndIndex')
	EthQuery.prototype.getCompilers =                        generateFnFor('eth_getCompilers')
	EthQuery.prototype.compileLLL =                          generateFnFor('eth_compileLLL')
	EthQuery.prototype.compileSolidity =                     generateFnFor('eth_compileSolidity')
	EthQuery.prototype.compileSerpent =                      generateFnFor('eth_compileSerpent')
	EthQuery.prototype.newFilter =                           generateFnFor('eth_newFilter')
	EthQuery.prototype.newBlockFilter =                      generateFnFor('eth_newBlockFilter')
	EthQuery.prototype.newPendingTransactionFilter =         generateFnFor('eth_newPendingTransactionFilter')
	EthQuery.prototype.uninstallFilter =                     generateFnFor('eth_uninstallFilter')
	EthQuery.prototype.getFilterChanges =                    generateFnFor('eth_getFilterChanges')
	EthQuery.prototype.getFilterLogs =                       generateFnFor('eth_getFilterLogs')
	EthQuery.prototype.getLogs =                             generateFnFor('eth_getLogs')
	EthQuery.prototype.getWork =                             generateFnFor('eth_getWork')
	EthQuery.prototype.submitWork =                          generateFnFor('eth_submitWork')
	EthQuery.prototype.submitHashrate =                      generateFnFor('eth_submitHashrate')

	// network level

	EthQuery.prototype.sendAsync = function(opts, cb){
	  const self = this
	  self.currentProvider.sendAsync(createPayload(opts), function(err, response){
	    if (!err && response.error) err = new Error('EthQuery - RPC Error - '+response.error.message)
	    if (err) return cb(err)
	    cb(null, response.result)
	  })
	}

	// util

	function generateFnFor(methodName){
	  return function(){
	    const self = this
	    var args = [].slice.call(arguments)
	    var cb = args.pop()
	    self.sendAsync({
	      method: methodName,
	      params: args,
	    }, cb)
	  }
	}

	function generateFnWithDefaultBlockFor(argCount, methodName){
	  return function(){
	    const self = this
	    var args = [].slice.call(arguments)
	    var cb = args.pop()
	    // set optional default block param
	    if (args.length < argCount) args.push('latest')
	    self.sendAsync({
	      method: methodName,
	      params: args,
	    }, cb)
	  }
	}

	function createPayload(data){
	  return extend({
	    // defaults
	    id: createRandomId(),
	    jsonrpc: '2.0',
	    params: [],
	    // user-specified
	  }, data)
	}


/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	const ethUtil = __webpack_require__(275)
	const ethAbi = __webpack_require__(281)

	module.exports = {

	  concatSig: function (v, r, s) {
	    const rSig = ethUtil.fromSigned(r)
	    const sSig = ethUtil.fromSigned(s)
	    const vSig = ethUtil.bufferToInt(v)
	    const rStr = padWithZeroes(ethUtil.toUnsigned(rSig).toString('hex'), 64)
	    const sStr = padWithZeroes(ethUtil.toUnsigned(sSig).toString('hex'), 64)
	    const vStr = ethUtil.stripHexPrefix(ethUtil.intToHex(vSig))
	    return ethUtil.addHexPrefix(rStr.concat(sStr, vStr)).toString('hex')
	  },

	  normalize: function (input) {
	    if (!input) return

	    if (typeof input === 'number') {
	      const buffer = ethUtil.toBuffer(input)
	      input = ethUtil.bufferToHex(buffer)
	    }

	    if (typeof input !== 'string') {
	      var msg = 'eth-sig-util.normalize() requires hex string or integer input.'
	      msg += ' received ' + (typeof input) + ': ' + input
	      throw new Error(msg)
	    }

	    return ethUtil.addHexPrefix(input.toLowerCase())
	  },

	  personalSign: function (privateKey, msgParams) {
	    var message = ethUtil.toBuffer(msgParams.data)
	    var msgHash = ethUtil.hashPersonalMessage(message)
	    var sig = ethUtil.ecsign(msgHash, privateKey)
	    var serialized = ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s))
	    return serialized
	  },

	  recoverPersonalSignature: function (msgParams) {
	    const publicKey = getPublicKeyFor(msgParams)
	    const sender = ethUtil.publicToAddress(publicKey)
	    const senderHex = ethUtil.bufferToHex(sender)
	    return senderHex
	  },

	  extractPublicKey: function (msgParams) {
	    const publicKey = getPublicKeyFor(msgParams)
	    return '0x' + publicKey.toString('hex')
	  },

	  typedSignatureHash: function (typedData) {
	    const hashBuffer = typedSignatureHash(typedData)
	    return ethUtil.bufferToHex(hashBuffer)
	  },

	  signTypedData: function (privateKey, msgParams) {
	    const msgHash = typedSignatureHash(msgParams.data)
	    const sig = ethUtil.ecsign(msgHash, privateKey)
	    return ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s))
	  },

	  recoverTypedSignature: function (msgParams) {
	    const msgHash = typedSignatureHash(msgParams.data)
	    const publicKey = recoverPublicKey(msgHash, msgParams.sig)
	    const sender = ethUtil.publicToAddress(publicKey)
	    return ethUtil.bufferToHex(sender)
	  }

	}

	/**
	 * @param typedData - Array of data along with types, as per EIP712.
	 * @returns Buffer
	 */
	function typedSignatureHash(typedData) {
	  const error = new Error('Expect argument to be non-empty array')
	  if (typeof typedData !== 'object' || !typedData.length) throw error

	  const data = typedData.map(function (e) {
	    return e.type === 'bytes' ? ethUtil.toBuffer(e.value) : e.value
	  })
	  const types = typedData.map(function (e) { return e.type })
	  const schema = typedData.map(function (e) {
	    if (!e.name) throw error
	    return e.type + ' ' + e.name
	  })

	  return ethAbi.soliditySHA3(
	    ['bytes32', 'bytes32'],
	    [
	      ethAbi.soliditySHA3(new Array(typedData.length).fill('string'), schema),
	      ethAbi.soliditySHA3(types, data)
	    ]
	  )
	}

	function recoverPublicKey(hash, sig) {
	  const signature = ethUtil.toBuffer(sig)
	  const sigParams = ethUtil.fromRpcSig(signature)
	  return ethUtil.ecrecover(hash, sigParams.v, sigParams.r, sigParams.s)
	}

	function getPublicKeyFor (msgParams) {
	  const message = ethUtil.toBuffer(msgParams.data)
	  const msgHash = ethUtil.hashPersonalMessage(message)
	  return recoverPublicKey(msgHash, msgParams.sig)
	}


	function padWithZeroes (number, length) {
	  var myString = '' + number
	  while (myString.length < length) {
	    myString = '0' + myString
	  }
	  return myString
	}


/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	var Buffer = __webpack_require__(6).Buffer
	var Transform = __webpack_require__(364).Transform
	var inherits = __webpack_require__(3)

	function throwIfNotStringOrBuffer (val, prefix) {
	  if (!Buffer.isBuffer(val) && typeof val !== 'string') {
	    throw new TypeError(prefix + ' must be a string or a buffer')
	  }
	}

	function HashBase (blockSize) {
	  Transform.call(this)

	  this._block = Buffer.allocUnsafe(blockSize)
	  this._blockSize = blockSize
	  this._blockOffset = 0
	  this._length = [0, 0, 0, 0]

	  this._finalized = false
	}

	inherits(HashBase, Transform)

	HashBase.prototype._transform = function (chunk, encoding, callback) {
	  var error = null
	  try {
	    this.update(chunk, encoding)
	  } catch (err) {
	    error = err
	  }

	  callback(error)
	}

	HashBase.prototype._flush = function (callback) {
	  var error = null
	  try {
	    this.push(this.digest())
	  } catch (err) {
	    error = err
	  }

	  callback(error)
	}

	HashBase.prototype.update = function (data, encoding) {
	  throwIfNotStringOrBuffer(data, 'Data')
	  if (this._finalized) throw new Error('Digest already called')
	  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

	  // consume data
	  var block = this._block
	  var offset = 0
	  while (this._blockOffset + data.length - offset >= this._blockSize) {
	    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
	    this._update()
	    this._blockOffset = 0
	  }
	  while (offset < data.length) block[this._blockOffset++] = data[offset++]

	  // update length
	  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
	    this._length[j] += carry
	    carry = (this._length[j] / 0x0100000000) | 0
	    if (carry > 0) this._length[j] -= 0x0100000000 * carry
	  }

	  return this
	}

	HashBase.prototype._update = function () {
	  throw new Error('_update is not implemented')
	}

	HashBase.prototype.digest = function (encoding) {
	  if (this._finalized) throw new Error('Digest already called')
	  this._finalized = true

	  var digest = this._digest()
	  if (encoding !== undefined) digest = digest.toString(encoding)

	  // reset state
	  this._block.fill(0)
	  this._blockOffset = 0
	  for (var i = 0; i < 4; ++i) this._length[i] = 0

	  return digest
	}

	HashBase.prototype._digest = function () {
	  throw new Error('_digest is not implemented')
	}

	module.exports = HashBase


/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(13);
	var common = __webpack_require__(48);
	var shaCommon = __webpack_require__(128);
	var assert = __webpack_require__(27);

	var sum32 = utils.sum32;
	var sum32_4 = utils.sum32_4;
	var sum32_5 = utils.sum32_5;
	var ch32 = shaCommon.ch32;
	var maj32 = shaCommon.maj32;
	var s0_256 = shaCommon.s0_256;
	var s1_256 = shaCommon.s1_256;
	var g0_256 = shaCommon.g0_256;
	var g1_256 = shaCommon.g1_256;

	var BlockHash = common.BlockHash;

	var sha256_K = [
	  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
	  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
	  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
	  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
	  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
	  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
	  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
	  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
	  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
	  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
	  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
	  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
	  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
	  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
	  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
	  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
	];

	function SHA256() {
	  if (!(this instanceof SHA256))
	    return new SHA256();

	  BlockHash.call(this);
	  this.h = [
	    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
	    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
	  ];
	  this.k = sha256_K;
	  this.W = new Array(64);
	}
	utils.inherits(SHA256, BlockHash);
	module.exports = SHA256;

	SHA256.blockSize = 512;
	SHA256.outSize = 256;
	SHA256.hmacStrength = 192;
	SHA256.padLength = 64;

	SHA256.prototype._update = function _update(msg, start) {
	  var W = this.W;

	  for (var i = 0; i < 16; i++)
	    W[i] = msg[start + i];
	  for (; i < W.length; i++)
	    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

	  var a = this.h[0];
	  var b = this.h[1];
	  var c = this.h[2];
	  var d = this.h[3];
	  var e = this.h[4];
	  var f = this.h[5];
	  var g = this.h[6];
	  var h = this.h[7];

	  assert(this.k.length === W.length);
	  for (i = 0; i < W.length; i++) {
	    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
	    var T2 = sum32(s0_256(a), maj32(a, b, c));
	    h = g;
	    g = f;
	    f = e;
	    e = sum32(d, T1);
	    d = c;
	    c = b;
	    b = a;
	    a = sum32(T1, T2);
	  }

	  this.h[0] = sum32(this.h[0], a);
	  this.h[1] = sum32(this.h[1], b);
	  this.h[2] = sum32(this.h[2], c);
	  this.h[3] = sum32(this.h[3], d);
	  this.h[4] = sum32(this.h[4], e);
	  this.h[5] = sum32(this.h[5], f);
	  this.h[6] = sum32(this.h[6], g);
	  this.h[7] = sum32(this.h[7], h);
	};

	SHA256.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils.toHex32(this.h, 'big');
	  else
	    return utils.split32(this.h, 'big');
	};


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(13);
	var common = __webpack_require__(48);
	var assert = __webpack_require__(27);

	var rotr64_hi = utils.rotr64_hi;
	var rotr64_lo = utils.rotr64_lo;
	var shr64_hi = utils.shr64_hi;
	var shr64_lo = utils.shr64_lo;
	var sum64 = utils.sum64;
	var sum64_hi = utils.sum64_hi;
	var sum64_lo = utils.sum64_lo;
	var sum64_4_hi = utils.sum64_4_hi;
	var sum64_4_lo = utils.sum64_4_lo;
	var sum64_5_hi = utils.sum64_5_hi;
	var sum64_5_lo = utils.sum64_5_lo;

	var BlockHash = common.BlockHash;

	var sha512_K = [
	  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	];

	function SHA512() {
	  if (!(this instanceof SHA512))
	    return new SHA512();

	  BlockHash.call(this);
	  this.h = [
	    0x6a09e667, 0xf3bcc908,
	    0xbb67ae85, 0x84caa73b,
	    0x3c6ef372, 0xfe94f82b,
	    0xa54ff53a, 0x5f1d36f1,
	    0x510e527f, 0xade682d1,
	    0x9b05688c, 0x2b3e6c1f,
	    0x1f83d9ab, 0xfb41bd6b,
	    0x5be0cd19, 0x137e2179 ];
	  this.k = sha512_K;
	  this.W = new Array(160);
	}
	utils.inherits(SHA512, BlockHash);
	module.exports = SHA512;

	SHA512.blockSize = 1024;
	SHA512.outSize = 512;
	SHA512.hmacStrength = 192;
	SHA512.padLength = 128;

	SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
	  var W = this.W;

	  // 32 x 32bit words
	  for (var i = 0; i < 32; i++)
	    W[i] = msg[start + i];
	  for (; i < W.length; i += 2) {
	    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
	    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
	    var c1_hi = W[i - 14];  // i - 7
	    var c1_lo = W[i - 13];
	    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
	    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
	    var c3_hi = W[i - 32];  // i - 16
	    var c3_lo = W[i - 31];

	    W[i] = sum64_4_hi(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo);
	    W[i + 1] = sum64_4_lo(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo);
	  }
	};

	SHA512.prototype._update = function _update(msg, start) {
	  this._prepareBlock(msg, start);

	  var W = this.W;

	  var ah = this.h[0];
	  var al = this.h[1];
	  var bh = this.h[2];
	  var bl = this.h[3];
	  var ch = this.h[4];
	  var cl = this.h[5];
	  var dh = this.h[6];
	  var dl = this.h[7];
	  var eh = this.h[8];
	  var el = this.h[9];
	  var fh = this.h[10];
	  var fl = this.h[11];
	  var gh = this.h[12];
	  var gl = this.h[13];
	  var hh = this.h[14];
	  var hl = this.h[15];

	  assert(this.k.length === W.length);
	  for (var i = 0; i < W.length; i += 2) {
	    var c0_hi = hh;
	    var c0_lo = hl;
	    var c1_hi = s1_512_hi(eh, el);
	    var c1_lo = s1_512_lo(eh, el);
	    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
	    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
	    var c3_hi = this.k[i];
	    var c3_lo = this.k[i + 1];
	    var c4_hi = W[i];
	    var c4_lo = W[i + 1];

	    var T1_hi = sum64_5_hi(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo,
	      c4_hi, c4_lo);
	    var T1_lo = sum64_5_lo(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo,
	      c4_hi, c4_lo);

	    c0_hi = s0_512_hi(ah, al);
	    c0_lo = s0_512_lo(ah, al);
	    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
	    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

	    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
	    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

	    hh = gh;
	    hl = gl;

	    gh = fh;
	    gl = fl;

	    fh = eh;
	    fl = el;

	    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
	    el = sum64_lo(dl, dl, T1_hi, T1_lo);

	    dh = ch;
	    dl = cl;

	    ch = bh;
	    cl = bl;

	    bh = ah;
	    bl = al;

	    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
	    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
	  }

	  sum64(this.h, 0, ah, al);
	  sum64(this.h, 2, bh, bl);
	  sum64(this.h, 4, ch, cl);
	  sum64(this.h, 6, dh, dl);
	  sum64(this.h, 8, eh, el);
	  sum64(this.h, 10, fh, fl);
	  sum64(this.h, 12, gh, gl);
	  sum64(this.h, 14, hh, hl);
	};

	SHA512.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils.toHex32(this.h, 'big');
	  else
	    return utils.split32(this.h, 'big');
	};

	function ch64_hi(xh, xl, yh, yl, zh) {
	  var r = (xh & yh) ^ ((~xh) & zh);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function ch64_lo(xh, xl, yh, yl, zh, zl) {
	  var r = (xl & yl) ^ ((~xl) & zl);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function maj64_hi(xh, xl, yh, yl, zh) {
	  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function maj64_lo(xh, xl, yh, yl, zh, zl) {
	  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s0_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 28);
	  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
	  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s0_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 28);
	  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
	  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s1_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 14);
	  var c1_hi = rotr64_hi(xh, xl, 18);
	  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s1_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 14);
	  var c1_lo = rotr64_lo(xh, xl, 18);
	  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g0_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 1);
	  var c1_hi = rotr64_hi(xh, xl, 8);
	  var c2_hi = shr64_hi(xh, xl, 7);

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g0_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 1);
	  var c1_lo = rotr64_lo(xh, xl, 8);
	  var c2_lo = shr64_lo(xh, xl, 7);

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g1_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 19);
	  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
	  var c2_hi = shr64_hi(xh, xl, 6);

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g1_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 19);
	  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
	  var c2_lo = shr64_lo(xh, xl, 6);

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}


/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(13);
	var rotr32 = utils.rotr32;

	function ft_1(s, x, y, z) {
	  if (s === 0)
	    return ch32(x, y, z);
	  if (s === 1 || s === 3)
	    return p32(x, y, z);
	  if (s === 2)
	    return maj32(x, y, z);
	}
	exports.ft_1 = ft_1;

	function ch32(x, y, z) {
	  return (x & y) ^ ((~x) & z);
	}
	exports.ch32 = ch32;

	function maj32(x, y, z) {
	  return (x & y) ^ (x & z) ^ (y & z);
	}
	exports.maj32 = maj32;

	function p32(x, y, z) {
	  return x ^ y ^ z;
	}
	exports.p32 = p32;

	function s0_256(x) {
	  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
	}
	exports.s0_256 = s0_256;

	function s1_256(x) {
	  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
	}
	exports.s1_256 = s1_256;

	function g0_256(x) {
	  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
	}
	exports.g0_256 = g0_256;

	function g1_256(x) {
	  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
	}
	exports.g1_256 = g1_256;


/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	var http = module.exports;
	var EventEmitter = __webpack_require__(19).EventEmitter;
	var Request = __webpack_require__(304);
	var url = __webpack_require__(156)

	http.request = function (params, cb) {
	    if (typeof params === 'string') {
	        params = url.parse(params)
	    }
	    if (!params) params = {};
	    if (!params.host && !params.port) {
	        params.port = parseInt(window.location.port, 10);
	    }
	    if (!params.host && params.hostname) {
	        params.host = params.hostname;
	    }

	    if (!params.protocol) {
	        if (params.scheme) {
	            params.protocol = params.scheme + ':';
	        } else {
	            params.protocol = window.location.protocol;
	        }
	    }

	    if (!params.host) {
	        params.host = window.location.hostname || window.location.host;
	    }
	    if (/:/.test(params.host)) {
	        if (!params.port) {
	            params.port = params.host.split(':')[1];
	        }
	        params.host = params.host.split(':')[0];
	    }
	    if (!params.port) params.port = params.protocol == 'https:' ? 443 : 80;
	    
	    var req = new Request(new xhrHttp, params);
	    if (cb) req.on('response', cb);
	    return req;
	};

	http.get = function (params, cb) {
	    params.method = 'GET';
	    var req = http.request(params, cb);
	    req.end();
	    return req;
	};

	http.Agent = function () {};
	http.Agent.defaultMaxSockets = 4;

	var xhrHttp = (function () {
	    if (typeof window === 'undefined') {
	        throw new Error('no window object present');
	    }
	    else if (window.XMLHttpRequest) {
	        return window.XMLHttpRequest;
	    }
	    else if (window.ActiveXObject) {
	        var axs = [
	            'Msxml2.XMLHTTP.6.0',
	            'Msxml2.XMLHTTP.3.0',
	            'Microsoft.XMLHTTP'
	        ];
	        for (var i = 0; i < axs.length; i++) {
	            try {
	                var ax = new(window.ActiveXObject)(axs[i]);
	                return function () {
	                    if (ax) {
	                        var ax_ = ax;
	                        ax = null;
	                        return ax_;
	                    }
	                    else {
	                        return new(window.ActiveXObject)(axs[i]);
	                    }
	                };
	            }
	            catch (e) {}
	        }
	        throw new Error('ajax not supported in this browser')
	    }
	    else {
	        throw new Error('ajax not supported in this browser');
	    }
	})();

	http.STATUS_CODES = {
	    100 : 'Continue',
	    101 : 'Switching Protocols',
	    102 : 'Processing',                 // RFC 2518, obsoleted by RFC 4918
	    200 : 'OK',
	    201 : 'Created',
	    202 : 'Accepted',
	    203 : 'Non-Authoritative Information',
	    204 : 'No Content',
	    205 : 'Reset Content',
	    206 : 'Partial Content',
	    207 : 'Multi-Status',               // RFC 4918
	    300 : 'Multiple Choices',
	    301 : 'Moved Permanently',
	    302 : 'Moved Temporarily',
	    303 : 'See Other',
	    304 : 'Not Modified',
	    305 : 'Use Proxy',
	    307 : 'Temporary Redirect',
	    400 : 'Bad Request',
	    401 : 'Unauthorized',
	    402 : 'Payment Required',
	    403 : 'Forbidden',
	    404 : 'Not Found',
	    405 : 'Method Not Allowed',
	    406 : 'Not Acceptable',
	    407 : 'Proxy Authentication Required',
	    408 : 'Request Time-out',
	    409 : 'Conflict',
	    410 : 'Gone',
	    411 : 'Length Required',
	    412 : 'Precondition Failed',
	    413 : 'Request Entity Too Large',
	    414 : 'Request-URI Too Large',
	    415 : 'Unsupported Media Type',
	    416 : 'Requested Range Not Satisfiable',
	    417 : 'Expectation Failed',
	    418 : 'I\'m a teapot',              // RFC 2324
	    422 : 'Unprocessable Entity',       // RFC 4918
	    423 : 'Locked',                     // RFC 4918
	    424 : 'Failed Dependency',          // RFC 4918
	    425 : 'Unordered Collection',       // RFC 4918
	    426 : 'Upgrade Required',           // RFC 2817
	    428 : 'Precondition Required',      // RFC 6585
	    429 : 'Too Many Requests',          // RFC 6585
	    431 : 'Request Header Fields Too Large',// RFC 6585
	    500 : 'Internal Server Error',
	    501 : 'Not Implemented',
	    502 : 'Bad Gateway',
	    503 : 'Service Unavailable',
	    504 : 'Gateway Time-out',
	    505 : 'HTTP Version Not Supported',
	    506 : 'Variant Also Negotiates',    // RFC 2295
	    507 : 'Insufficient Storage',       // RFC 4918
	    509 : 'Bandwidth Limit Exceeded',
	    510 : 'Not Extended',               // RFC 2774
	    511 : 'Network Authentication Required' // RFC 6585
	};

/***/ },
/* 130 */
/***/ function(module, exports) {

	/**
	 * Returns a `Boolean` on whether or not the a `String` starts with '0x'
	 * @param {String} str the string input value
	 * @return {Boolean} a boolean if it is or is not hex prefixed
	 * @throws if the str input is not a string
	 */
	module.exports = function isHexPrefixed(str) {
	  if (typeof str !== 'string') {
	    throw new Error("[is-hex-prefixed] value must be type 'string', is currently type " + (typeof str) + ", while checking isHexPrefixed.");
	  }

	  return str.slice(0, 2) === '0x';
	}


/***/ },
/* 131 */
/***/ function(module, exports) {

	module.exports = {
		"COMPRESSED_TYPE_INVALID": "compressed should be a boolean",
		"EC_PRIVATE_KEY_TYPE_INVALID": "private key should be a Buffer",
		"EC_PRIVATE_KEY_LENGTH_INVALID": "private key length is invalid",
		"EC_PRIVATE_KEY_RANGE_INVALID": "private key range is invalid",
		"EC_PRIVATE_KEY_TWEAK_ADD_FAIL": "tweak out of range or resulting private key is invalid",
		"EC_PRIVATE_KEY_TWEAK_MUL_FAIL": "tweak out of range",
		"EC_PRIVATE_KEY_EXPORT_DER_FAIL": "couldn't export to DER format",
		"EC_PRIVATE_KEY_IMPORT_DER_FAIL": "couldn't import from DER format",
		"EC_PUBLIC_KEYS_TYPE_INVALID": "public keys should be an Array",
		"EC_PUBLIC_KEYS_LENGTH_INVALID": "public keys Array should have at least 1 element",
		"EC_PUBLIC_KEY_TYPE_INVALID": "public key should be a Buffer",
		"EC_PUBLIC_KEY_LENGTH_INVALID": "public key length is invalid",
		"EC_PUBLIC_KEY_PARSE_FAIL": "the public key could not be parsed or is invalid",
		"EC_PUBLIC_KEY_CREATE_FAIL": "private was invalid, try again",
		"EC_PUBLIC_KEY_TWEAK_ADD_FAIL": "tweak out of range or resulting public key is invalid",
		"EC_PUBLIC_KEY_TWEAK_MUL_FAIL": "tweak out of range",
		"EC_PUBLIC_KEY_COMBINE_FAIL": "the sum of the public keys is not valid",
		"ECDH_FAIL": "scalar was invalid (zero or overflow)",
		"ECDSA_SIGNATURE_TYPE_INVALID": "signature should be a Buffer",
		"ECDSA_SIGNATURE_LENGTH_INVALID": "signature length is invalid",
		"ECDSA_SIGNATURE_PARSE_FAIL": "couldn't parse signature",
		"ECDSA_SIGNATURE_PARSE_DER_FAIL": "couldn't parse DER signature",
		"ECDSA_SIGNATURE_SERIALIZE_DER_FAIL": "couldn't serialize signature to DER format",
		"ECDSA_SIGN_FAIL": "nonce generation function failed or private key is invalid",
		"ECDSA_RECOVER_FAIL": "couldn't recover public key from signature",
		"MSG32_TYPE_INVALID": "message should be a Buffer",
		"MSG32_LENGTH_INVALID": "message length is invalid",
		"OPTIONS_TYPE_INVALID": "options should be an Object",
		"OPTIONS_DATA_TYPE_INVALID": "options.data should be a Buffer",
		"OPTIONS_DATA_LENGTH_INVALID": "options.data length is invalid",
		"OPTIONS_NONCEFN_TYPE_INVALID": "options.noncefn should be a Function",
		"RECOVERY_ID_TYPE_INVALID": "recovery should be a Number",
		"RECOVERY_ID_VALUE_INVALID": "recovery should have value between -1 and 4",
		"TWEAK_TYPE_INVALID": "tweak should be a Buffer",
		"TWEAK_LENGTH_INVALID": "tweak length is invalid"
	};

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	var root = __webpack_require__(134);

	/** Built-in value references. */
	var Symbol = root.Symbol;

	module.exports = Symbol;


/***/ },
/* 133 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

	module.exports = freeGlobal;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	var freeGlobal = __webpack_require__(133);

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	module.exports = root;


/***/ },
/* 135 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	module.exports = isArray;


/***/ },
/* 136 */
/***/ function(module, exports) {

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	module.exports = isLength;


/***/ },
/* 137 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return value != null && (type == 'object' || type == 'function');
	}

	module.exports = isObject;


/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	var inherits = __webpack_require__(3)
	var HashBase = __webpack_require__(125)
	var Buffer = __webpack_require__(6).Buffer

	var ARRAY16 = new Array(16)

	function MD5 () {
	  HashBase.call(this, 64)

	  // state
	  this._a = 0x67452301
	  this._b = 0xefcdab89
	  this._c = 0x98badcfe
	  this._d = 0x10325476
	}

	inherits(MD5, HashBase)

	MD5.prototype._update = function () {
	  var M = ARRAY16
	  for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)

	  var a = this._a
	  var b = this._b
	  var c = this._c
	  var d = this._d

	  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
	  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
	  c = fnF(c, d, a, b, M[2], 0x242070db, 17)
	  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
	  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
	  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
	  c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
	  b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
	  a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
	  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
	  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
	  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
	  a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
	  d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
	  c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
	  b = fnF(b, c, d, a, M[15], 0x49b40821, 22)

	  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
	  d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
	  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
	  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
	  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
	  d = fnG(d, a, b, c, M[10], 0x02441453, 9)
	  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
	  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
	  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
	  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
	  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
	  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
	  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
	  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
	  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
	  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)

	  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
	  d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
	  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
	  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
	  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
	  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
	  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
	  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
	  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
	  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
	  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
	  b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
	  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
	  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
	  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
	  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)

	  a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
	  d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
	  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
	  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
	  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
	  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
	  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
	  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
	  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
	  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
	  c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
	  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
	  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
	  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
	  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
	  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)

	  this._a = (this._a + a) | 0
	  this._b = (this._b + b) | 0
	  this._c = (this._c + c) | 0
	  this._d = (this._d + d) | 0
	}

	MD5.prototype._digest = function () {
	  // create padding and handle blocks
	  this._block[this._blockOffset++] = 0x80
	  if (this._blockOffset > 56) {
	    this._block.fill(0, this._blockOffset, 64)
	    this._update()
	    this._blockOffset = 0
	  }

	  this._block.fill(0, this._blockOffset, 56)
	  this._block.writeUInt32LE(this._length[0], 56)
	  this._block.writeUInt32LE(this._length[1], 60)
	  this._update()

	  // produce result
	  var buffer = Buffer.allocUnsafe(16)
	  buffer.writeInt32LE(this._a, 0)
	  buffer.writeInt32LE(this._b, 4)
	  buffer.writeInt32LE(this._c, 8)
	  buffer.writeInt32LE(this._d, 12)
	  return buffer
	}

	function rotl (x, n) {
	  return (x << n) | (x >>> (32 - n))
	}

	function fnF (a, b, c, d, m, k, s) {
	  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
	}

	function fnG (a, b, c, d, m, k, s) {
	  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
	}

	function fnH (a, b, c, d, m, k, s) {
	  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
	}

	function fnI (a, b, c, d, m, k, s) {
	  return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
	}

	module.exports = MD5


/***/ },
/* 139 */
/***/ function(module, exports) {

	'use strict';

	var utils = exports;

	function toArray(msg, enc) {
	  if (Array.isArray(msg))
	    return msg.slice();
	  if (!msg)
	    return [];
	  var res = [];
	  if (typeof msg !== 'string') {
	    for (var i = 0; i < msg.length; i++)
	      res[i] = msg[i] | 0;
	    return res;
	  }
	  if (enc === 'hex') {
	    msg = msg.replace(/[^a-z0-9]+/ig, '');
	    if (msg.length % 2 !== 0)
	      msg = '0' + msg;
	    for (var i = 0; i < msg.length; i += 2)
	      res.push(parseInt(msg[i] + msg[i + 1], 16));
	  } else {
	    for (var i = 0; i < msg.length; i++) {
	      var c = msg.charCodeAt(i);
	      var hi = c >> 8;
	      var lo = c & 0xff;
	      if (hi)
	        res.push(hi, lo);
	      else
	        res.push(lo);
	    }
	  }
	  return res;
	}
	utils.toArray = toArray;

	function zero2(word) {
	  if (word.length === 1)
	    return '0' + word;
	  else
	    return word;
	}
	utils.zero2 = zero2;

	function toHex(msg) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++)
	    res += zero2(msg[i].toString(16));
	  return res;
	}
	utils.toHex = toHex;

	utils.encode = function encode(arr, enc) {
	  if (enc === 'hex')
	    return toHex(arr);
	  else
	    return arr;
	};


/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	'use strict';

	module.exports = Readable;
	/*<replacement>*/

	var Duplex;
	/*</replacement>*/

	Readable.ReadableState = ReadableState;
	/*<replacement>*/

	var EE = __webpack_require__(19).EventEmitter;

	var EElistenerCount = function EElistenerCount(emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/

	/*<replacement>*/


	var Stream = __webpack_require__(145);
	/*</replacement>*/


	var Buffer = __webpack_require__(1).Buffer;

	var OurUint8Array = global.Uint8Array || function () {};

	function _uint8ArrayToBuffer(chunk) {
	  return Buffer.from(chunk);
	}

	function _isUint8Array(obj) {
	  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
	}
	/*<replacement>*/


	var debugUtil = __webpack_require__(424);

	var debug;

	if (debugUtil && debugUtil.debuglog) {
	  debug = debugUtil.debuglog('stream');
	} else {
	  debug = function debug() {};
	}
	/*</replacement>*/


	var BufferList = __webpack_require__(361);

	var destroyImpl = __webpack_require__(143);

	var _require = __webpack_require__(144),
	    getHighWaterMark = _require.getHighWaterMark;

	var _require$codes = __webpack_require__(36).codes,
	    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
	    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
	    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
	    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


	var StringDecoder;
	var createReadableStreamAsyncIterator;
	var from;

	__webpack_require__(3)(Readable, Stream);

	var errorOrDestroy = destroyImpl.errorOrDestroy;
	var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

	function prependListener(emitter, event, fn) {
	  // Sadly this is not cacheable as some libraries bundle their own
	  // event emitter implementation with them.
	  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
	  // userland ones.  NEVER DO THIS. This is here only because this code needs
	  // to continue to work with older versions of Node.js that do not include
	  // the prependListener() method. The goal is to eventually remove this hack.

	  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
	}

	function ReadableState(options, stream, isDuplex) {
	  Duplex = Duplex || __webpack_require__(37);
	  options = options || {}; // Duplex streams are both readable and writable, but share
	  // the same options object.
	  // However, some cases require setting options to different
	  // values for the readable and the writable sides of the duplex stream.
	  // These options can be provided separately as readableXXX and writableXXX.

	  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away

	  this.objectMode = !!options.objectMode;
	  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"

	  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
	  // linked list can remove elements from the beginning faster than
	  // array.shift()

	  this.buffer = new BufferList();
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
	  // immediately, or on a later tick.  We set this to true at first, because
	  // any actions that shouldn't happen until "later" should generally also
	  // not happen before the first read call.

	  this.sync = true; // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.

	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.resumeScheduled = false;
	  this.paused = true; // Should close be emitted on destroy. Defaults to true.

	  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

	  this.autoDestroy = !!options.autoDestroy; // has it been destroyed

	  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.

	  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

	  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

	  this.readingMore = false;
	  this.decoder = null;
	  this.encoding = null;

	  if (options.encoding) {
	    if (!StringDecoder) StringDecoder = __webpack_require__(95).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}

	function Readable(options) {
	  Duplex = Duplex || __webpack_require__(37);
	  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
	  // the ReadableState constructor, at least with V8 6.5

	  var isDuplex = this instanceof Duplex;
	  this._readableState = new ReadableState(options, this, isDuplex); // legacy

	  this.readable = true;

	  if (options) {
	    if (typeof options.read === 'function') this._read = options.read;
	    if (typeof options.destroy === 'function') this._destroy = options.destroy;
	  }

	  Stream.call(this);
	}

	Object.defineProperty(Readable.prototype, 'destroyed', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    if (this._readableState === undefined) {
	      return false;
	    }

	    return this._readableState.destroyed;
	  },
	  set: function set(value) {
	    // we ignore the value if the stream
	    // has not been initialized yet
	    if (!this._readableState) {
	      return;
	    } // backward compatibility, the user is explicitly
	    // managing destroyed


	    this._readableState.destroyed = value;
	  }
	});
	Readable.prototype.destroy = destroyImpl.destroy;
	Readable.prototype._undestroy = destroyImpl.undestroy;

	Readable.prototype._destroy = function (err, cb) {
	  cb(err);
	}; // Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.


	Readable.prototype.push = function (chunk, encoding) {
	  var state = this._readableState;
	  var skipChunkCheck;

	  if (!state.objectMode) {
	    if (typeof chunk === 'string') {
	      encoding = encoding || state.defaultEncoding;

	      if (encoding !== state.encoding) {
	        chunk = Buffer.from(chunk, encoding);
	        encoding = '';
	      }

	      skipChunkCheck = true;
	    }
	  } else {
	    skipChunkCheck = true;
	  }

	  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
	}; // Unshift should *always* be something directly out of read()


	Readable.prototype.unshift = function (chunk) {
	  return readableAddChunk(this, chunk, null, true, false);
	};

	function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
	  debug('readableAddChunk', chunk);
	  var state = stream._readableState;

	  if (chunk === null) {
	    state.reading = false;
	    onEofChunk(stream, state);
	  } else {
	    var er;
	    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

	    if (er) {
	      errorOrDestroy(stream, er);
	    } else if (state.objectMode || chunk && chunk.length > 0) {
	      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
	        chunk = _uint8ArrayToBuffer(chunk);
	      }

	      if (addToFront) {
	        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
	      } else if (state.ended) {
	        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
	      } else if (state.destroyed) {
	        return false;
	      } else {
	        state.reading = false;

	        if (state.decoder && !encoding) {
	          chunk = state.decoder.write(chunk);
	          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
	        } else {
	          addChunk(stream, state, chunk, false);
	        }
	      }
	    } else if (!addToFront) {
	      state.reading = false;
	      maybeReadMore(stream, state);
	    }
	  } // We can push more data if we are below the highWaterMark.
	  // Also, if we have no data yet, we can stand some more bytes.
	  // This is to work around cases where hwm=0, such as the repl.


	  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
	}

	function addChunk(stream, state, chunk, addToFront) {
	  if (state.flowing && state.length === 0 && !state.sync) {
	    state.awaitDrain = 0;
	    stream.emit('data', chunk);
	  } else {
	    // update the buffer info.
	    state.length += state.objectMode ? 1 : chunk.length;
	    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
	    if (state.needReadable) emitReadable(stream);
	  }

	  maybeReadMore(stream, state);
	}

	function chunkInvalid(state, chunk) {
	  var er;

	  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
	  }

	  return er;
	}

	Readable.prototype.isPaused = function () {
	  return this._readableState.flowing === false;
	}; // backwards compatibility.


	Readable.prototype.setEncoding = function (enc) {
	  if (!StringDecoder) StringDecoder = __webpack_require__(95).StringDecoder;
	  var decoder = new StringDecoder(enc);
	  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

	  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

	  var p = this._readableState.buffer.head;
	  var content = '';

	  while (p !== null) {
	    content += decoder.write(p.data);
	    p = p.next;
	  }

	  this._readableState.buffer.clear();

	  if (content !== '') this._readableState.buffer.push(content);
	  this._readableState.length = content.length;
	  return this;
	}; // Don't raise the hwm > 1GB


	var MAX_HWM = 0x40000000;

	function computeNewHighWaterMark(n) {
	  if (n >= MAX_HWM) {
	    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2 to prevent increasing hwm excessively in
	    // tiny amounts
	    n--;
	    n |= n >>> 1;
	    n |= n >>> 2;
	    n |= n >>> 4;
	    n |= n >>> 8;
	    n |= n >>> 16;
	    n++;
	  }

	  return n;
	} // This function is designed to be inlinable, so please take care when making
	// changes to the function body.


	function howMuchToRead(n, state) {
	  if (n <= 0 || state.length === 0 && state.ended) return 0;
	  if (state.objectMode) return 1;

	  if (n !== n) {
	    // Only flow one buffer at a time
	    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
	  } // If we're asking for more than the current hwm, then raise the hwm.


	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
	  if (n <= state.length) return n; // Don't have enough

	  if (!state.ended) {
	    state.needReadable = true;
	    return 0;
	  }

	  return state.length;
	} // you can override either this method, or the async _read(n) below.


	Readable.prototype.read = function (n) {
	  debug('read', n);
	  n = parseInt(n, 10);
	  var state = this._readableState;
	  var nOrig = n;
	  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.

	  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

	  if (n === 0 && state.ended) {
	    if (state.length === 0) endReadable(this);
	    return null;
	  } // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.
	  // if we need a readable event, then we need to do some reading.


	  var doRead = state.needReadable;
	  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  } // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.


	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  } else if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true; // if the length is currently zero, then we *need* a readable event.

	    if (state.length === 0) state.needReadable = true; // call internal read method

	    this._read(state.highWaterMark);

	    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
	    // and we need to re-evaluate how much data we can return to the user.

	    if (!state.reading) n = howMuchToRead(nOrig, state);
	  }

	  var ret;
	  if (n > 0) ret = fromList(n, state);else ret = null;

	  if (ret === null) {
	    state.needReadable = state.length <= state.highWaterMark;
	    n = 0;
	  } else {
	    state.length -= n;
	    state.awaitDrain = 0;
	  }

	  if (state.length === 0) {
	    // If we have nothing in the buffer, then we want to know
	    // as soon as we *do* get something into the buffer.
	    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

	    if (nOrig !== n && state.ended) endReadable(this);
	  }

	  if (ret !== null) this.emit('data', ret);
	  return ret;
	};

	function onEofChunk(stream, state) {
	  debug('onEofChunk');
	  if (state.ended) return;

	  if (state.decoder) {
	    var chunk = state.decoder.end();

	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }

	  state.ended = true;

	  if (state.sync) {
	    // if we are sync, wait until next tick to emit the data.
	    // Otherwise we risk emitting data in the flow()
	    // the readable code triggers during a read() call
	    emitReadable(stream);
	  } else {
	    // emit 'readable' now to make sure it gets picked up.
	    state.needReadable = false;

	    if (!state.emittedReadable) {
	      state.emittedReadable = true;
	      emitReadable_(stream);
	    }
	  }
	} // Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.


	function emitReadable(stream) {
	  var state = stream._readableState;
	  debug('emitReadable', state.needReadable, state.emittedReadable);
	  state.needReadable = false;

	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    process.nextTick(emitReadable_, stream);
	  }
	}

	function emitReadable_(stream) {
	  var state = stream._readableState;
	  debug('emitReadable_', state.destroyed, state.length, state.ended);

	  if (!state.destroyed && (state.length || state.ended)) {
	    stream.emit('readable');
	    state.emittedReadable = false;
	  } // The stream needs another readable event if
	  // 1. It is not flowing, as the flow mechanism will take
	  //    care of it.
	  // 2. It is not ended.
	  // 3. It is below the highWaterMark, so we can schedule
	  //    another readable later.


	  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
	  flow(stream);
	} // at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.


	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    process.nextTick(maybeReadMore_, stream, state);
	  }
	}

	function maybeReadMore_(stream, state) {
	  // Attempt to read more data if we should.
	  //
	  // The conditions for reading more data are (one of):
	  // - Not enough data buffered (state.length < state.highWaterMark). The loop
	  //   is responsible for filling the buffer with enough data if such data
	  //   is available. If highWaterMark is 0 and we are not in the flowing mode
	  //   we should _not_ attempt to buffer any extra data. We'll get more data
	  //   when the stream consumer calls read() instead.
	  // - No data in the buffer, and the stream is in flowing mode. In this mode
	  //   the loop below is responsible for ensuring read() is called. Failing to
	  //   call read here would abort the flow and there's no other mechanism for
	  //   continuing the flow if the stream consumer has just subscribed to the
	  //   'data' event.
	  //
	  // In addition to the above conditions to keep reading data, the following
	  // conditions prevent the data from being read:
	  // - The stream has ended (state.ended).
	  // - There is already a pending 'read' operation (state.reading). This is a
	  //   case where the the stream has called the implementation defined _read()
	  //   method, but they are processing the call asynchronously and have _not_
	  //   called push() with new data. In this case we skip performing more
	  //   read()s. The execution ends in this method again after the _read() ends
	  //   up calling push() with more data.
	  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
	    var len = state.length;
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length) // didn't get any data, stop spinning.
	      break;
	  }

	  state.readingMore = false;
	} // abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.


	Readable.prototype._read = function (n) {
	  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
	};

	Readable.prototype.pipe = function (dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;

	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;

	    default:
	      state.pipes.push(dest);
	      break;
	  }

	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
	  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
	  var endFn = doEnd ? onend : unpipe;
	  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
	  dest.on('unpipe', onunpipe);

	  function onunpipe(readable, unpipeInfo) {
	    debug('onunpipe');

	    if (readable === src) {
	      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
	        unpipeInfo.hasUnpiped = true;
	        cleanup();
	      }
	    }
	  }

	  function onend() {
	    debug('onend');
	    dest.end();
	  } // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.


	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);
	  var cleanedUp = false;

	  function cleanup() {
	    debug('cleanup'); // cleanup event handlers once the pipe is broken

	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', unpipe);
	    src.removeListener('data', ondata);
	    cleanedUp = true; // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.

	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	  }

	  src.on('data', ondata);

	  function ondata(chunk) {
	    debug('ondata');
	    var ret = dest.write(chunk);
	    debug('dest.write', ret);

	    if (ret === false) {
	      // If the user unpiped during `dest.write()`, it is possible
	      // to get stuck in a permanently paused state if that write
	      // also returned false.
	      // => Check whether `dest` is still a piping destination.
	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
	        debug('false write response, pause', state.awaitDrain);
	        state.awaitDrain++;
	      }

	      src.pause();
	    }
	  } // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.


	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
	  } // Make sure our error handler is attached before userland ones.


	  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }

	  dest.once('close', onclose);

	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }

	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  } // tell the dest that it's being piped to


	  dest.emit('pipe', src); // start the flow if it hasn't been started already.

	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function pipeOnDrainFunctionResult() {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain) state.awaitDrain--;

	    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}

	Readable.prototype.unpipe = function (dest) {
	  var state = this._readableState;
	  var unpipeInfo = {
	    hasUnpiped: false
	  }; // if we're not piping anywhere, then do nothing.

	  if (state.pipesCount === 0) return this; // just one destination.  most common case.

	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes) return this;
	    if (!dest) dest = state.pipes; // got a match.

	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest) dest.emit('unpipe', this, unpipeInfo);
	    return this;
	  } // slow case. multiple pipe destinations.


	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var i = 0; i < len; i++) {
	      dests[i].emit('unpipe', this, {
	        hasUnpiped: false
	      });
	    }

	    return this;
	  } // try to find the right one.


	  var index = indexOf(state.pipes, dest);
	  if (index === -1) return this;
	  state.pipes.splice(index, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1) state.pipes = state.pipes[0];
	  dest.emit('unpipe', this, unpipeInfo);
	  return this;
	}; // set up data events if they are asked for
	// Ensure readable listeners eventually get something


	Readable.prototype.on = function (ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);
	  var state = this._readableState;

	  if (ev === 'data') {
	    // update readableListening so that resume() may be a no-op
	    // a few lines down. This is needed to support once('readable').
	    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

	    if (state.flowing !== false) this.resume();
	  } else if (ev === 'readable') {
	    if (!state.endEmitted && !state.readableListening) {
	      state.readableListening = state.needReadable = true;
	      state.flowing = false;
	      state.emittedReadable = false;
	      debug('on readable', state.length, state.reading);

	      if (state.length) {
	        emitReadable(this);
	      } else if (!state.reading) {
	        process.nextTick(nReadingNextTick, this);
	      }
	    }
	  }

	  return res;
	};

	Readable.prototype.addListener = Readable.prototype.on;

	Readable.prototype.removeListener = function (ev, fn) {
	  var res = Stream.prototype.removeListener.call(this, ev, fn);

	  if (ev === 'readable') {
	    // We need to check if there is someone still listening to
	    // readable and reset the state. However this needs to happen
	    // after readable has been emitted but before I/O (nextTick) to
	    // support once('readable', fn) cycles. This means that calling
	    // resume within the same tick will have no
	    // effect.
	    process.nextTick(updateReadableListening, this);
	  }

	  return res;
	};

	Readable.prototype.removeAllListeners = function (ev) {
	  var res = Stream.prototype.removeAllListeners.apply(this, arguments);

	  if (ev === 'readable' || ev === undefined) {
	    // We need to check if there is someone still listening to
	    // readable and reset the state. However this needs to happen
	    // after readable has been emitted but before I/O (nextTick) to
	    // support once('readable', fn) cycles. This means that calling
	    // resume within the same tick will have no
	    // effect.
	    process.nextTick(updateReadableListening, this);
	  }

	  return res;
	};

	function updateReadableListening(self) {
	  var state = self._readableState;
	  state.readableListening = self.listenerCount('readable') > 0;

	  if (state.resumeScheduled && !state.paused) {
	    // flowing needs to be set to true now, otherwise
	    // the upcoming resume will not flow.
	    state.flowing = true; // crude way to check if we should resume
	  } else if (self.listenerCount('data') > 0) {
	    self.resume();
	  }
	}

	function nReadingNextTick(self) {
	  debug('readable nexttick read 0');
	  self.read(0);
	} // pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.


	Readable.prototype.resume = function () {
	  var state = this._readableState;

	  if (!state.flowing) {
	    debug('resume'); // we flow only if there is no one listening
	    // for readable, but we still have to call
	    // resume()

	    state.flowing = !state.readableListening;
	    resume(this, state);
	  }

	  state.paused = false;
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    process.nextTick(resume_, stream, state);
	  }
	}

	function resume_(stream, state) {
	  debug('resume', state.reading);

	  if (!state.reading) {
	    stream.read(0);
	  }

	  state.resumeScheduled = false;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading) stream.read(0);
	}

	Readable.prototype.pause = function () {
	  debug('call pause flowing=%j', this._readableState.flowing);

	  if (this._readableState.flowing !== false) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }

	  this._readableState.paused = true;
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);

	  while (state.flowing && stream.read() !== null) {
	    ;
	  }
	} // wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.


	Readable.prototype.wrap = function (stream) {
	  var _this = this;

	  var state = this._readableState;
	  var paused = false;
	  stream.on('end', function () {
	    debug('wrapped end');

	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length) _this.push(chunk);
	    }

	    _this.push(null);
	  });
	  stream.on('data', function (chunk) {
	    debug('wrapped data');
	    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

	    var ret = _this.push(chunk);

	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  }); // proxy all the other methods.
	  // important when wrapping filters and duplexes.

	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function methodWrap(method) {
	        return function methodWrapReturnFunction() {
	          return stream[method].apply(stream, arguments);
	        };
	      }(i);
	    }
	  } // proxy certain important events.


	  for (var n = 0; n < kProxyEvents.length; n++) {
	    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
	  } // when we try to consume some more bytes, simply unpause the
	  // underlying stream.


	  this._read = function (n) {
	    debug('wrapped _read', n);

	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return this;
	};

	if (typeof Symbol === 'function') {
	  Readable.prototype[Symbol.asyncIterator] = function () {
	    if (createReadableStreamAsyncIterator === undefined) {
	      createReadableStreamAsyncIterator = __webpack_require__(360);
	    }

	    return createReadableStreamAsyncIterator(this);
	  };
	}

	Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._readableState.highWaterMark;
	  }
	});
	Object.defineProperty(Readable.prototype, 'readableBuffer', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._readableState && this._readableState.buffer;
	  }
	});
	Object.defineProperty(Readable.prototype, 'readableFlowing', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._readableState.flowing;
	  },
	  set: function set(state) {
	    if (this._readableState) {
	      this._readableState.flowing = state;
	    }
	  }
	}); // exposed for testing purposes only.

	Readable._fromList = fromList;
	Object.defineProperty(Readable.prototype, 'readableLength', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._readableState.length;
	  }
	}); // Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.

	function fromList(n, state) {
	  // nothing buffered
	  if (state.length === 0) return null;
	  var ret;
	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
	    // read it all, truncate the list
	    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
	    state.buffer.clear();
	  } else {
	    // read part of list
	    ret = state.buffer.consume(n, state.decoder);
	  }
	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;
	  debug('endReadable', state.endEmitted);

	  if (!state.endEmitted) {
	    state.ended = true;
	    process.nextTick(endReadableNT, state, stream);
	  }
	}

	function endReadableNT(state, stream) {
	  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');

	    if (state.autoDestroy) {
	      // In case of duplex streams we need a way to detect
	      // if the writable side is ready for autoDestroy as well
	      var wState = stream._writableState;

	      if (!wState || wState.autoDestroy && wState.finished) {
	        stream.destroy();
	      }
	    }
	  }
	}

	if (typeof Symbol === 'function') {
	  Readable.from = function (iterable, opts) {
	    if (from === undefined) {
	      from = __webpack_require__(362);
	    }

	    return from(Readable, iterable, opts);
	  };
	}

	function indexOf(xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }

	  return -1;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(8)))

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.
	'use strict';

	module.exports = Transform;

	var _require$codes = __webpack_require__(36).codes,
	    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
	    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
	    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
	    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

	var Duplex = __webpack_require__(37);

	__webpack_require__(3)(Transform, Duplex);

	function afterTransform(er, data) {
	  var ts = this._transformState;
	  ts.transforming = false;
	  var cb = ts.writecb;

	  if (cb === null) {
	    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
	  }

	  ts.writechunk = null;
	  ts.writecb = null;
	  if (data != null) // single equals check for both `null` and `undefined`
	    this.push(data);
	  cb(er);
	  var rs = this._readableState;
	  rs.reading = false;

	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    this._read(rs.highWaterMark);
	  }
	}

	function Transform(options) {
	  if (!(this instanceof Transform)) return new Transform(options);
	  Duplex.call(this, options);
	  this._transformState = {
	    afterTransform: afterTransform.bind(this),
	    needTransform: false,
	    transforming: false,
	    writecb: null,
	    writechunk: null,
	    writeencoding: null
	  }; // start out asking for a readable event once data is transformed.

	  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.

	  this._readableState.sync = false;

	  if (options) {
	    if (typeof options.transform === 'function') this._transform = options.transform;
	    if (typeof options.flush === 'function') this._flush = options.flush;
	  } // When the writable side finishes, then flush out anything remaining.


	  this.on('prefinish', prefinish);
	}

	function prefinish() {
	  var _this = this;

	  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
	    this._flush(function (er, data) {
	      done(_this, er, data);
	    });
	  } else {
	    done(this, null, null);
	  }
	}

	Transform.prototype.push = function (chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	}; // This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.


	Transform.prototype._transform = function (chunk, encoding, cb) {
	  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
	};

	Transform.prototype._write = function (chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;

	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	  }
	}; // Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.


	Transform.prototype._read = function (n) {
	  var ts = this._transformState;

	  if (ts.writechunk !== null && !ts.transforming) {
	    ts.transforming = true;

	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};

	Transform.prototype._destroy = function (err, cb) {
	  Duplex.prototype._destroy.call(this, err, function (err2) {
	    cb(err2);
	  });
	};

	function done(stream, er, data) {
	  if (er) return stream.emit('error', er);
	  if (data != null) // single equals check for both `null` and `undefined`
	    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided

	  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
	  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
	  return stream.push(null);
	}

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	// A bit simpler than readable streams.
	// Implement an async ._write(chunk, encoding, cb), and it'll handle all
	// the drain event emission and buffering.
	'use strict';

	module.exports = Writable;
	/* <replacement> */

	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	  this.next = null;
	} // It seems a linked list but it is not
	// there will be only 2 of these for each stream


	function CorkedRequest(state) {
	  var _this = this;

	  this.next = null;
	  this.entry = null;

	  this.finish = function () {
	    onCorkedFinish(_this, state);
	  };
	}
	/* </replacement> */

	/*<replacement>*/


	var Duplex;
	/*</replacement>*/

	Writable.WritableState = WritableState;
	/*<replacement>*/

	var internalUtil = {
	  deprecate: __webpack_require__(382)
	};
	/*</replacement>*/

	/*<replacement>*/

	var Stream = __webpack_require__(145);
	/*</replacement>*/


	var Buffer = __webpack_require__(1).Buffer;

	var OurUint8Array = global.Uint8Array || function () {};

	function _uint8ArrayToBuffer(chunk) {
	  return Buffer.from(chunk);
	}

	function _isUint8Array(obj) {
	  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
	}

	var destroyImpl = __webpack_require__(143);

	var _require = __webpack_require__(144),
	    getHighWaterMark = _require.getHighWaterMark;

	var _require$codes = __webpack_require__(36).codes,
	    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
	    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
	    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
	    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
	    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
	    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
	    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
	    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

	var errorOrDestroy = destroyImpl.errorOrDestroy;

	__webpack_require__(3)(Writable, Stream);

	function nop() {}

	function WritableState(options, stream, isDuplex) {
	  Duplex = Duplex || __webpack_require__(37);
	  options = options || {}; // Duplex streams are both readable and writable, but share
	  // the same options object.
	  // However, some cases require setting options to different
	  // values for the readable and the writable sides of the duplex stream,
	  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

	  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.

	  this.objectMode = !!options.objectMode;
	  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()

	  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

	  this.finalCalled = false; // drain event flag.

	  this.needDrain = false; // at the start of calling end()

	  this.ending = false; // when end() has been called, and returned

	  this.ended = false; // when 'finish' is emitted

	  this.finished = false; // has it been destroyed

	  this.destroyed = false; // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.

	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.

	  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.

	  this.length = 0; // a flag to see when we're in the middle of a write.

	  this.writing = false; // when true all writes will be buffered until .uncork() call

	  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.

	  this.sync = true; // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.

	  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

	  this.onwrite = function (er) {
	    onwrite(stream, er);
	  }; // the callback that the user supplies to write(chunk,encoding,cb)


	  this.writecb = null; // the amount that is being written when _write is called.

	  this.writelen = 0;
	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted

	  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams

	  this.prefinished = false; // True if the error was already emitted and should not be thrown again

	  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

	  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

	  this.autoDestroy = !!options.autoDestroy; // count buffered requests

	  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
	  // one allocated and free to use, and we maintain at most two

	  this.corkedRequestsFree = new CorkedRequest(this);
	}

	WritableState.prototype.getBuffer = function getBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];

	  while (current) {
	    out.push(current);
	    current = current.next;
	  }

	  return out;
	};

	(function () {
	  try {
	    Object.defineProperty(WritableState.prototype, 'buffer', {
	      get: internalUtil.deprecate(function writableStateBufferGetter() {
	        return this.getBuffer();
	      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
	    });
	  } catch (_) {}
	})(); // Test _writableState for inheritance to account for Duplex streams,
	// whose prototype chain only points to Readable.


	var realHasInstance;

	if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
	  realHasInstance = Function.prototype[Symbol.hasInstance];
	  Object.defineProperty(Writable, Symbol.hasInstance, {
	    value: function value(object) {
	      if (realHasInstance.call(this, object)) return true;
	      if (this !== Writable) return false;
	      return object && object._writableState instanceof WritableState;
	    }
	  });
	} else {
	  realHasInstance = function realHasInstance(object) {
	    return object instanceof this;
	  };
	}

	function Writable(options) {
	  Duplex = Duplex || __webpack_require__(37); // Writable ctor is applied to Duplexes, too.
	  // `realHasInstance` is necessary because using plain `instanceof`
	  // would return false, as no `_writableState` property is attached.
	  // Trying to use the custom `instanceof` for Writable here will also break the
	  // Node.js LazyTransform implementation, which has a non-trivial getter for
	  // `_writableState` that would lead to infinite recursion.
	  // Checking for a Stream.Duplex instance is faster here instead of inside
	  // the WritableState constructor, at least with V8 6.5

	  var isDuplex = this instanceof Duplex;
	  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
	  this._writableState = new WritableState(options, this, isDuplex); // legacy.

	  this.writable = true;

	  if (options) {
	    if (typeof options.write === 'function') this._write = options.write;
	    if (typeof options.writev === 'function') this._writev = options.writev;
	    if (typeof options.destroy === 'function') this._destroy = options.destroy;
	    if (typeof options.final === 'function') this._final = options.final;
	  }

	  Stream.call(this);
	} // Otherwise people can pipe Writable streams, which is just wrong.


	Writable.prototype.pipe = function () {
	  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
	};

	function writeAfterEnd(stream, cb) {
	  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

	  errorOrDestroy(stream, er);
	  process.nextTick(cb, er);
	} // Checks that a user-supplied chunk is valid, especially for the particular
	// mode the stream is in. Currently this means that `null` is never accepted
	// and undefined/non-string values are only allowed in object mode.


	function validChunk(stream, state, chunk, cb) {
	  var er;

	  if (chunk === null) {
	    er = new ERR_STREAM_NULL_VALUES();
	  } else if (typeof chunk !== 'string' && !state.objectMode) {
	    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
	  }

	  if (er) {
	    errorOrDestroy(stream, er);
	    process.nextTick(cb, er);
	    return false;
	  }

	  return true;
	}

	Writable.prototype.write = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;

	  var isBuf = !state.objectMode && _isUint8Array(chunk);

	  if (isBuf && !Buffer.isBuffer(chunk)) {
	    chunk = _uint8ArrayToBuffer(chunk);
	  }

	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
	  if (typeof cb !== 'function') cb = nop;
	  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
	  }
	  return ret;
	};

	Writable.prototype.cork = function () {
	  this._writableState.corked++;
	};

	Writable.prototype.uncork = function () {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;
	    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
	  }
	};

	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
	  this._writableState.defaultEncoding = encoding;
	  return this;
	};

	Object.defineProperty(Writable.prototype, 'writableBuffer', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState && this._writableState.getBuffer();
	  }
	});

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
	    chunk = Buffer.from(chunk, encoding);
	  }

	  return chunk;
	}

	Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState.highWaterMark;
	  }
	}); // if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.

	function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
	  if (!isBuf) {
	    var newChunk = decodeChunk(state, chunk, encoding);

	    if (chunk !== newChunk) {
	      isBuf = true;
	      encoding = 'buffer';
	      chunk = newChunk;
	    }
	  }

	  var len = state.objectMode ? 1 : chunk.length;
	  state.length += len;
	  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

	  if (!ret) state.needDrain = true;

	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = {
	      chunk: chunk,
	      encoding: encoding,
	      isBuf: isBuf,
	      callback: cb,
	      next: null
	    };

	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }

	    state.bufferedRequestCount += 1;
	  } else {
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	  }

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;

	  if (sync) {
	    // defer the callback if we are being called synchronously
	    // to avoid piling up things on the stack
	    process.nextTick(cb, er); // this can emit finish, and it will always happen
	    // after error

	    process.nextTick(finishMaybe, stream, state);
	    stream._writableState.errorEmitted = true;
	    errorOrDestroy(stream, er);
	  } else {
	    // the caller expect this to happen before if
	    // it is async
	    cb(er);
	    stream._writableState.errorEmitted = true;
	    errorOrDestroy(stream, er); // this can emit finish, but finish must
	    // always follow error

	    finishMaybe(stream, state);
	  }
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;
	  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
	  onwriteStateUpdate(state);
	  if (er) onwriteError(stream, state, sync, er, cb);else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(state) || stream.destroyed;

	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      process.nextTick(afterWrite, stream, state, finished, cb);
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished) onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	} // Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.


	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	} // if there's something in the buffer waiting, then process it


	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;

	  if (stream._writev && entry && entry.next) {
	    // Fast case, write everything using _writev()
	    var l = state.bufferedRequestCount;
	    var buffer = new Array(l);
	    var holder = state.corkedRequestsFree;
	    holder.entry = entry;
	    var count = 0;
	    var allBuffers = true;

	    while (entry) {
	      buffer[count] = entry;
	      if (!entry.isBuf) allBuffers = false;
	      entry = entry.next;
	      count += 1;
	    }

	    buffer.allBuffers = allBuffers;
	    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
	    // as the hot path ends with doWrite

	    state.pendingcb++;
	    state.lastBufferedRequest = null;

	    if (holder.next) {
	      state.corkedRequestsFree = holder.next;
	      holder.next = null;
	    } else {
	      state.corkedRequestsFree = new CorkedRequest(state);
	    }

	    state.bufferedRequestCount = 0;
	  } else {
	    // Slow case, write chunks one-by-one
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;
	      doWrite(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.

	      if (state.writing) {
	        break;
	      }
	    }

	    if (entry === null) state.lastBufferedRequest = null;
	  }

	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}

	Writable.prototype._write = function (chunk, encoding, cb) {
	  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
	};

	Writable.prototype._writev = null;

	Writable.prototype.end = function (chunk, encoding, cb) {
	  var state = this._writableState;

	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  } // ignore unnecessary end() calls.


	  if (!state.ending) endWritable(this, state, cb);
	  return this;
	};

	Object.defineProperty(Writable.prototype, 'writableLength', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState.length;
	  }
	});

	function needFinish(state) {
	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}

	function callFinal(stream, state) {
	  stream._final(function (err) {
	    state.pendingcb--;

	    if (err) {
	      errorOrDestroy(stream, err);
	    }

	    state.prefinished = true;
	    stream.emit('prefinish');
	    finishMaybe(stream, state);
	  });
	}

	function prefinish(stream, state) {
	  if (!state.prefinished && !state.finalCalled) {
	    if (typeof stream._final === 'function' && !state.destroyed) {
	      state.pendingcb++;
	      state.finalCalled = true;
	      process.nextTick(callFinal, stream, state);
	    } else {
	      state.prefinished = true;
	      stream.emit('prefinish');
	    }
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(state);

	  if (need) {
	    prefinish(stream, state);

	    if (state.pendingcb === 0) {
	      state.finished = true;
	      stream.emit('finish');

	      if (state.autoDestroy) {
	        // In case of duplex streams we need a way to detect
	        // if the readable side is ready for autoDestroy as well
	        var rState = stream._readableState;

	        if (!rState || rState.autoDestroy && rState.endEmitted) {
	          stream.destroy();
	        }
	      }
	    }
	  }

	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);

	  if (cb) {
	    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
	  }

	  state.ended = true;
	  stream.writable = false;
	}

	function onCorkedFinish(corkReq, state, err) {
	  var entry = corkReq.entry;
	  corkReq.entry = null;

	  while (entry) {
	    var cb = entry.callback;
	    state.pendingcb--;
	    cb(err);
	    entry = entry.next;
	  } // reuse the free corkReq.


	  state.corkedRequestsFree.next = corkReq;
	}

	Object.defineProperty(Writable.prototype, 'destroyed', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    if (this._writableState === undefined) {
	      return false;
	    }

	    return this._writableState.destroyed;
	  },
	  set: function set(value) {
	    // we ignore the value if the stream
	    // has not been initialized yet
	    if (!this._writableState) {
	      return;
	    } // backward compatibility, the user is explicitly
	    // managing destroyed


	    this._writableState.destroyed = value;
	  }
	});
	Writable.prototype.destroy = destroyImpl.destroy;
	Writable.prototype._undestroy = destroyImpl.undestroy;

	Writable.prototype._destroy = function (err, cb) {
	  cb(err);
	};
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(8)))

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict'; // undocumented cb() API, needed for core, not for public API

	function destroy(err, cb) {
	  var _this = this;

	  var readableDestroyed = this._readableState && this._readableState.destroyed;
	  var writableDestroyed = this._writableState && this._writableState.destroyed;

	  if (readableDestroyed || writableDestroyed) {
	    if (cb) {
	      cb(err);
	    } else if (err) {
	      if (!this._writableState) {
	        process.nextTick(emitErrorNT, this, err);
	      } else if (!this._writableState.errorEmitted) {
	        this._writableState.errorEmitted = true;
	        process.nextTick(emitErrorNT, this, err);
	      }
	    }

	    return this;
	  } // we set destroyed to true before firing error callbacks in order
	  // to make it re-entrance safe in case destroy() is called within callbacks


	  if (this._readableState) {
	    this._readableState.destroyed = true;
	  } // if this is a duplex stream mark the writable part as destroyed as well


	  if (this._writableState) {
	    this._writableState.destroyed = true;
	  }

	  this._destroy(err || null, function (err) {
	    if (!cb && err) {
	      if (!_this._writableState) {
	        process.nextTick(emitErrorAndCloseNT, _this, err);
	      } else if (!_this._writableState.errorEmitted) {
	        _this._writableState.errorEmitted = true;
	        process.nextTick(emitErrorAndCloseNT, _this, err);
	      } else {
	        process.nextTick(emitCloseNT, _this);
	      }
	    } else if (cb) {
	      process.nextTick(emitCloseNT, _this);
	      cb(err);
	    } else {
	      process.nextTick(emitCloseNT, _this);
	    }
	  });

	  return this;
	}

	function emitErrorAndCloseNT(self, err) {
	  emitErrorNT(self, err);
	  emitCloseNT(self);
	}

	function emitCloseNT(self) {
	  if (self._writableState && !self._writableState.emitClose) return;
	  if (self._readableState && !self._readableState.emitClose) return;
	  self.emit('close');
	}

	function undestroy() {
	  if (this._readableState) {
	    this._readableState.destroyed = false;
	    this._readableState.reading = false;
	    this._readableState.ended = false;
	    this._readableState.endEmitted = false;
	  }

	  if (this._writableState) {
	    this._writableState.destroyed = false;
	    this._writableState.ended = false;
	    this._writableState.ending = false;
	    this._writableState.finalCalled = false;
	    this._writableState.prefinished = false;
	    this._writableState.finished = false;
	    this._writableState.errorEmitted = false;
	  }
	}

	function emitErrorNT(self, err) {
	  self.emit('error', err);
	}

	function errorOrDestroy(stream, err) {
	  // We have tests that rely on errors being emitted
	  // in the same tick, so changing this is semver major.
	  // For now when you opt-in to autoDestroy we allow
	  // the error to be emitted nextTick. In a future
	  // semver major update we should change the default to this.
	  var rState = stream._readableState;
	  var wState = stream._writableState;
	  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
	}

	module.exports = {
	  destroy: destroy,
	  undestroy: undestroy,
	  errorOrDestroy: errorOrDestroy
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var ERR_INVALID_OPT_VALUE = __webpack_require__(36).codes.ERR_INVALID_OPT_VALUE;

	function highWaterMarkFrom(options, isDuplex, duplexKey) {
	  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
	}

	function getHighWaterMark(state, options, duplexKey, isDuplex) {
	  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

	  if (hwm != null) {
	    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
	      var name = isDuplex ? duplexKey : 'highWaterMark';
	      throw new ERR_INVALID_OPT_VALUE(name, hwm);
	    }

	    return Math.floor(hwm);
	  } // Default value


	  return state.objectMode ? 16 : 16 * 1024;
	}

	module.exports = {
	  getHighWaterMark: getHighWaterMark
	};

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(19).EventEmitter;


/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	var Buffer = __webpack_require__(1).Buffer
	var inherits = __webpack_require__(3)
	var HashBase = __webpack_require__(125)

	var ARRAY16 = new Array(16)

	var zl = [
	  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
	  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
	  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
	  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
	  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
	]

	var zr = [
	  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
	  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
	  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
	  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
	  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
	]

	var sl = [
	  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
	  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
	  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
	  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
	  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
	]

	var sr = [
	  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
	  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
	  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
	  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
	  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
	]

	var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
	var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]

	function RIPEMD160 () {
	  HashBase.call(this, 64)

	  // state
	  this._a = 0x67452301
	  this._b = 0xefcdab89
	  this._c = 0x98badcfe
	  this._d = 0x10325476
	  this._e = 0xc3d2e1f0
	}

	inherits(RIPEMD160, HashBase)

	RIPEMD160.prototype._update = function () {
	  var words = ARRAY16
	  for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)

	  var al = this._a | 0
	  var bl = this._b | 0
	  var cl = this._c | 0
	  var dl = this._d | 0
	  var el = this._e | 0

	  var ar = this._a | 0
	  var br = this._b | 0
	  var cr = this._c | 0
	  var dr = this._d | 0
	  var er = this._e | 0

	  // computation
	  for (var i = 0; i < 80; i += 1) {
	    var tl
	    var tr
	    if (i < 16) {
	      tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
	      tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
	    } else if (i < 32) {
	      tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
	      tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
	    } else if (i < 48) {
	      tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
	      tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
	    } else if (i < 64) {
	      tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
	      tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
	    } else { // if (i<80) {
	      tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
	      tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
	    }

	    al = el
	    el = dl
	    dl = rotl(cl, 10)
	    cl = bl
	    bl = tl

	    ar = er
	    er = dr
	    dr = rotl(cr, 10)
	    cr = br
	    br = tr
	  }

	  // update state
	  var t = (this._b + cl + dr) | 0
	  this._b = (this._c + dl + er) | 0
	  this._c = (this._d + el + ar) | 0
	  this._d = (this._e + al + br) | 0
	  this._e = (this._a + bl + cr) | 0
	  this._a = t
	}

	RIPEMD160.prototype._digest = function () {
	  // create padding and handle blocks
	  this._block[this._blockOffset++] = 0x80
	  if (this._blockOffset > 56) {
	    this._block.fill(0, this._blockOffset, 64)
	    this._update()
	    this._blockOffset = 0
	  }

	  this._block.fill(0, this._blockOffset, 56)
	  this._block.writeUInt32LE(this._length[0], 56)
	  this._block.writeUInt32LE(this._length[1], 60)
	  this._update()

	  // produce result
	  var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
	  buffer.writeInt32LE(this._a, 0)
	  buffer.writeInt32LE(this._b, 4)
	  buffer.writeInt32LE(this._c, 8)
	  buffer.writeInt32LE(this._d, 12)
	  buffer.writeInt32LE(this._e, 16)
	  return buffer
	}

	function rotl (x, n) {
	  return (x << n) | (x >>> (32 - n))
	}

	function fn1 (a, b, c, d, e, m, k, s) {
	  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
	}

	function fn2 (a, b, c, d, e, m, k, s) {
	  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
	}

	function fn3 (a, b, c, d, e, m, k, s) {
	  return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
	}

	function fn4 (a, b, c, d, e, m, k, s) {
	  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
	}

	function fn5 (a, b, c, d, e, m, k, s) {
	  return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
	}

	module.exports = RIPEMD160


/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	const util = __webpack_require__(11)
	const EventEmitter = __webpack_require__(19)

	var R = typeof Reflect === 'object' ? Reflect : null
	var ReflectApply = R && typeof R.apply === 'function'
	  ? R.apply
	  : function ReflectApply(target, receiver, args) {
	    return Function.prototype.apply.call(target, receiver, args);
	}

	module.exports = SafeEventEmitter


	function SafeEventEmitter() {
	  EventEmitter.call(this)
	}

	util.inherits(SafeEventEmitter, EventEmitter)

	SafeEventEmitter.prototype.emit = function (type) {
	  // copied from https://github.com/Gozala/events/blob/master/events.js
	  // modified lines are commented with "edited:"
	  var args = [];
	  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
	  var doError = (type === 'error');

	  var events = this._events;
	  if (events !== undefined)
	    doError = (doError && events.error === undefined);
	  else if (!doError)
	    return false;

	  // If there is no 'error' event listener then throw.
	  if (doError) {
	    var er;
	    if (args.length > 0)
	      er = args[0];
	    if (er instanceof Error) {
	      // Note: The comments on the `throw` lines are intentional, they show
	      // up in Node's output if this results in an unhandled exception.
	      throw er; // Unhandled 'error' event
	    }
	    // At least give some kind of context to the user
	    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
	    err.context = er;
	    throw err; // Unhandled 'error' event
	  }

	  var handler = events[type];

	  if (handler === undefined)
	    return false;

	  if (typeof handler === 'function') {
	    // edited: using safeApply
	    safeApply(handler, this, args);
	  } else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      // edited: using safeApply
	      safeApply(listeners[i], this, args);
	  }

	  return true;
	}

	function safeApply(handler, context, args) {
	  try {
	    ReflectApply(handler, context, args)
	  } catch (err) {
	    // throw error after timeout so as not to interupt the stack
	    setTimeout(() => {
	      throw err
	    })
	  }
	}

	function arrayClone(arr, n) {
	  var copy = new Array(n);
	  for (var i = 0; i < n; ++i)
	    copy[i] = arr[i];
	  return copy;
	}


/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(366)(__webpack_require__(365))


/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	var exports = module.exports = function SHA (algorithm) {
	  algorithm = algorithm.toLowerCase()

	  var Algorithm = exports[algorithm]
	  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

	  return new Algorithm()
	}

	exports.sha = __webpack_require__(368)
	exports.sha1 = __webpack_require__(369)
	exports.sha224 = __webpack_require__(370)
	exports.sha256 = __webpack_require__(150)
	exports.sha384 = __webpack_require__(371)
	exports.sha512 = __webpack_require__(151)


/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */

	var inherits = __webpack_require__(3)
	var Hash = __webpack_require__(38)
	var Buffer = __webpack_require__(6).Buffer

	var K = [
	  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
	  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
	  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
	  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
	  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
	  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
	  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
	  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
	  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
	  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
	  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
	  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
	  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
	  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
	  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
	  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
	]

	var W = new Array(64)

	function Sha256 () {
	  this.init()

	  this._w = W // new Array(64)

	  Hash.call(this, 64, 56)
	}

	inherits(Sha256, Hash)

	Sha256.prototype.init = function () {
	  this._a = 0x6a09e667
	  this._b = 0xbb67ae85
	  this._c = 0x3c6ef372
	  this._d = 0xa54ff53a
	  this._e = 0x510e527f
	  this._f = 0x9b05688c
	  this._g = 0x1f83d9ab
	  this._h = 0x5be0cd19

	  return this
	}

	function ch (x, y, z) {
	  return z ^ (x & (y ^ z))
	}

	function maj (x, y, z) {
	  return (x & y) | (z & (x | y))
	}

	function sigma0 (x) {
	  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
	}

	function sigma1 (x) {
	  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
	}

	function gamma0 (x) {
	  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
	}

	function gamma1 (x) {
	  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
	}

	Sha256.prototype._update = function (M) {
	  var W = this._w

	  var a = this._a | 0
	  var b = this._b | 0
	  var c = this._c | 0
	  var d = this._d | 0
	  var e = this._e | 0
	  var f = this._f | 0
	  var g = this._g | 0
	  var h = this._h | 0

	  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
	  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

	  for (var j = 0; j < 64; ++j) {
	    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
	    var T2 = (sigma0(a) + maj(a, b, c)) | 0

	    h = g
	    g = f
	    f = e
	    e = (d + T1) | 0
	    d = c
	    c = b
	    b = a
	    a = (T1 + T2) | 0
	  }

	  this._a = (a + this._a) | 0
	  this._b = (b + this._b) | 0
	  this._c = (c + this._c) | 0
	  this._d = (d + this._d) | 0
	  this._e = (e + this._e) | 0
	  this._f = (f + this._f) | 0
	  this._g = (g + this._g) | 0
	  this._h = (h + this._h) | 0
	}

	Sha256.prototype._hash = function () {
	  var H = Buffer.allocUnsafe(32)

	  H.writeInt32BE(this._a, 0)
	  H.writeInt32BE(this._b, 4)
	  H.writeInt32BE(this._c, 8)
	  H.writeInt32BE(this._d, 12)
	  H.writeInt32BE(this._e, 16)
	  H.writeInt32BE(this._f, 20)
	  H.writeInt32BE(this._g, 24)
	  H.writeInt32BE(this._h, 28)

	  return H
	}

	module.exports = Sha256


/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(3)
	var Hash = __webpack_require__(38)
	var Buffer = __webpack_require__(6).Buffer

	var K = [
	  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	]

	var W = new Array(160)

	function Sha512 () {
	  this.init()
	  this._w = W

	  Hash.call(this, 128, 112)
	}

	inherits(Sha512, Hash)

	Sha512.prototype.init = function () {
	  this._ah = 0x6a09e667
	  this._bh = 0xbb67ae85
	  this._ch = 0x3c6ef372
	  this._dh = 0xa54ff53a
	  this._eh = 0x510e527f
	  this._fh = 0x9b05688c
	  this._gh = 0x1f83d9ab
	  this._hh = 0x5be0cd19

	  this._al = 0xf3bcc908
	  this._bl = 0x84caa73b
	  this._cl = 0xfe94f82b
	  this._dl = 0x5f1d36f1
	  this._el = 0xade682d1
	  this._fl = 0x2b3e6c1f
	  this._gl = 0xfb41bd6b
	  this._hl = 0x137e2179

	  return this
	}

	function Ch (x, y, z) {
	  return z ^ (x & (y ^ z))
	}

	function maj (x, y, z) {
	  return (x & y) | (z & (x | y))
	}

	function sigma0 (x, xl) {
	  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
	}

	function sigma1 (x, xl) {
	  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
	}

	function Gamma0 (x, xl) {
	  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
	}

	function Gamma0l (x, xl) {
	  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
	}

	function Gamma1 (x, xl) {
	  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
	}

	function Gamma1l (x, xl) {
	  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
	}

	function getCarry (a, b) {
	  return (a >>> 0) < (b >>> 0) ? 1 : 0
	}

	Sha512.prototype._update = function (M) {
	  var W = this._w

	  var ah = this._ah | 0
	  var bh = this._bh | 0
	  var ch = this._ch | 0
	  var dh = this._dh | 0
	  var eh = this._eh | 0
	  var fh = this._fh | 0
	  var gh = this._gh | 0
	  var hh = this._hh | 0

	  var al = this._al | 0
	  var bl = this._bl | 0
	  var cl = this._cl | 0
	  var dl = this._dl | 0
	  var el = this._el | 0
	  var fl = this._fl | 0
	  var gl = this._gl | 0
	  var hl = this._hl | 0

	  for (var i = 0; i < 32; i += 2) {
	    W[i] = M.readInt32BE(i * 4)
	    W[i + 1] = M.readInt32BE(i * 4 + 4)
	  }
	  for (; i < 160; i += 2) {
	    var xh = W[i - 15 * 2]
	    var xl = W[i - 15 * 2 + 1]
	    var gamma0 = Gamma0(xh, xl)
	    var gamma0l = Gamma0l(xl, xh)

	    xh = W[i - 2 * 2]
	    xl = W[i - 2 * 2 + 1]
	    var gamma1 = Gamma1(xh, xl)
	    var gamma1l = Gamma1l(xl, xh)

	    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
	    var Wi7h = W[i - 7 * 2]
	    var Wi7l = W[i - 7 * 2 + 1]

	    var Wi16h = W[i - 16 * 2]
	    var Wi16l = W[i - 16 * 2 + 1]

	    var Wil = (gamma0l + Wi7l) | 0
	    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
	    Wil = (Wil + gamma1l) | 0
	    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
	    Wil = (Wil + Wi16l) | 0
	    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

	    W[i] = Wih
	    W[i + 1] = Wil
	  }

	  for (var j = 0; j < 160; j += 2) {
	    Wih = W[j]
	    Wil = W[j + 1]

	    var majh = maj(ah, bh, ch)
	    var majl = maj(al, bl, cl)

	    var sigma0h = sigma0(ah, al)
	    var sigma0l = sigma0(al, ah)
	    var sigma1h = sigma1(eh, el)
	    var sigma1l = sigma1(el, eh)

	    // t1 = h + sigma1 + ch + K[j] + W[j]
	    var Kih = K[j]
	    var Kil = K[j + 1]

	    var chh = Ch(eh, fh, gh)
	    var chl = Ch(el, fl, gl)

	    var t1l = (hl + sigma1l) | 0
	    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
	    t1l = (t1l + chl) | 0
	    t1h = (t1h + chh + getCarry(t1l, chl)) | 0
	    t1l = (t1l + Kil) | 0
	    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
	    t1l = (t1l + Wil) | 0
	    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

	    // t2 = sigma0 + maj
	    var t2l = (sigma0l + majl) | 0
	    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

	    hh = gh
	    hl = gl
	    gh = fh
	    gl = fl
	    fh = eh
	    fl = el
	    el = (dl + t1l) | 0
	    eh = (dh + t1h + getCarry(el, dl)) | 0
	    dh = ch
	    dl = cl
	    ch = bh
	    cl = bl
	    bh = ah
	    bl = al
	    al = (t1l + t2l) | 0
	    ah = (t1h + t2h + getCarry(al, t1l)) | 0
	  }

	  this._al = (this._al + al) | 0
	  this._bl = (this._bl + bl) | 0
	  this._cl = (this._cl + cl) | 0
	  this._dl = (this._dl + dl) | 0
	  this._el = (this._el + el) | 0
	  this._fl = (this._fl + fl) | 0
	  this._gl = (this._gl + gl) | 0
	  this._hl = (this._hl + hl) | 0

	  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
	  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
	  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
	  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
	  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
	  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
	  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
	  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
	}

	Sha512.prototype._hash = function () {
	  var H = Buffer.allocUnsafe(64)

	  function writeInt64BE (h, l, offset) {
	    H.writeInt32BE(h, offset)
	    H.writeInt32BE(l, offset + 4)
	  }

	  writeInt64BE(this._ah, this._al, 0)
	  writeInt64BE(this._bh, this._bl, 8)
	  writeInt64BE(this._ch, this._cl, 16)
	  writeInt64BE(this._dh, this._dl, 24)
	  writeInt64BE(this._eh, this._el, 32)
	  writeInt64BE(this._fh, this._fl, 40)
	  writeInt64BE(this._gh, this._gl, 48)
	  writeInt64BE(this._hh, this._hl, 56)

	  return H
	}

	module.exports = Sha512


/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.

	module.exports = PassThrough;

	var Transform = __webpack_require__(93);

	/*<replacement>*/
	var util = __webpack_require__(45);
	util.inherits = __webpack_require__(3);
	/*</replacement>*/

	util.inherits(PassThrough, Transform);

	function PassThrough(options) {
	  if (!(this instanceof PassThrough))
	    return new PassThrough(options);

	  Transform.call(this, options);
	}

	PassThrough.prototype._transform = function(chunk, encoding, cb) {
	  cb(null, chunk);
	};


/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Readable;

	/*<replacement>*/
	var isArray = __webpack_require__(309);
	/*</replacement>*/


	/*<replacement>*/
	var Buffer = __webpack_require__(1).Buffer;
	/*</replacement>*/

	Readable.ReadableState = ReadableState;

	var EE = __webpack_require__(19).EventEmitter;

	/*<replacement>*/
	if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/

	var Stream = __webpack_require__(16);

	/*<replacement>*/
	var util = __webpack_require__(45);
	util.inherits = __webpack_require__(3);
	/*</replacement>*/

	var StringDecoder;


	/*<replacement>*/
	var debug = __webpack_require__(426);
	if (debug && debug.debuglog) {
	  debug = debug.debuglog('stream');
	} else {
	  debug = function () {};
	}
	/*</replacement>*/


	util.inherits(Readable, Stream);

	function ReadableState(options, stream) {
	  var Duplex = __webpack_require__(28);

	  options = options || {};

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.buffer = [];
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;


	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder)
	      StringDecoder = __webpack_require__(154).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}

	function Readable(options) {
	  var Duplex = __webpack_require__(28);

	  if (!(this instanceof Readable))
	    return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  Stream.call(this);
	}

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function(chunk, encoding) {
	  var state = this._readableState;

	  if (util.isString(chunk) && !state.objectMode) {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = new Buffer(chunk, encoding);
	      encoding = '';
	    }
	  }

	  return readableAddChunk(this, state, chunk, encoding, false);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function(chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};

	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (util.isNullOrUndefined(chunk)) {
	    state.reading = false;
	    if (!state.ended)
	      onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var e = new Error('stream.unshift() after end event');
	      stream.emit('error', e);
	    } else {
	      if (state.decoder && !addToFront && !encoding)
	        chunk = state.decoder.write(chunk);

	      if (!addToFront)
	        state.reading = false;

	      // if we want the data now, just emit it.
	      if (state.flowing && state.length === 0 && !state.sync) {
	        stream.emit('data', chunk);
	        stream.read(0);
	      } else {
	        // update the buffer info.
	        state.length += state.objectMode ? 1 : chunk.length;
	        if (addToFront)
	          state.buffer.unshift(chunk);
	        else
	          state.buffer.push(chunk);

	        if (state.needReadable)
	          emitReadable(stream);
	      }

	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }

	  return needMoreData(state);
	}



	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended &&
	         (state.needReadable ||
	          state.length < state.highWaterMark ||
	          state.length === 0);
	}

	// backwards compatibility.
	Readable.prototype.setEncoding = function(enc) {
	  if (!StringDecoder)
	    StringDecoder = __webpack_require__(154).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};

	// Don't raise the hwm > 128MB
	var MAX_HWM = 0x800000;
	function roundUpToNextPowerOf2(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2
	    n--;
	    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
	    n++;
	  }
	  return n;
	}

	function howMuchToRead(n, state) {
	  if (state.length === 0 && state.ended)
	    return 0;

	  if (state.objectMode)
	    return n === 0 ? 0 : 1;

	  if (isNaN(n) || util.isNull(n)) {
	    // only flow one buffer at a time
	    if (state.flowing && state.buffer.length)
	      return state.buffer[0].length;
	    else
	      return state.length;
	  }

	  if (n <= 0)
	    return 0;

	  // If we're asking for more than the target buffer level,
	  // then raise the water mark.  Bump up to the next highest
	  // power of 2, to prevent increasing it excessively in tiny
	  // amounts.
	  if (n > state.highWaterMark)
	    state.highWaterMark = roundUpToNextPowerOf2(n);

	  // don't have that much.  return null, unless we've ended.
	  if (n > state.length) {
	    if (!state.ended) {
	      state.needReadable = true;
	      return 0;
	    } else
	      return state.length;
	  }

	  return n;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function(n) {
	  debug('read', n);
	  var state = this._readableState;
	  var nOrig = n;

	  if (!util.isNumber(n) || n > 0)
	    state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 &&
	      state.needReadable &&
	      (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended)
	      endReadable(this);
	    else
	      emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0)
	      endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  }

	  if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0)
	      state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	  }

	  // If _read pushed data synchronously, then `reading` will be false,
	  // and we need to re-evaluate how much data we can return to the user.
	  if (doRead && !state.reading)
	    n = howMuchToRead(nOrig, state);

	  var ret;
	  if (n > 0)
	    ret = fromList(n, state);
	  else
	    ret = null;

	  if (util.isNull(ret)) {
	    state.needReadable = true;
	    n = 0;
	  }

	  state.length -= n;

	  // If we have nothing in the buffer, then we want to know
	  // as soon as we *do* get something into the buffer.
	  if (state.length === 0 && !state.ended)
	    state.needReadable = true;

	  // If we tried to read() past the EOF, then emit end on the next tick.
	  if (nOrig !== n && state.ended && state.length === 0)
	    endReadable(this);

	  if (!util.isNull(ret))
	    this.emit('data', ret);

	  return ret;
	};

	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!util.isBuffer(chunk) &&
	      !util.isString(chunk) &&
	      !util.isNullOrUndefined(chunk) &&
	      !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}


	function onEofChunk(stream, state) {
	  if (state.decoder && !state.ended) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync)
	      process.nextTick(function() {
	        emitReadable_(stream);
	      });
	    else
	      emitReadable_(stream);
	  }
	}

	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}


	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    process.nextTick(function() {
	      maybeReadMore_(stream, state);
	    });
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended &&
	         state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;
	    else
	      len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function(n) {
	  this.emit('error', new Error('not implemented'));
	};

	Readable.prototype.pipe = function(dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

	  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
	              dest !== process.stdout &&
	              dest !== process.stderr;

	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted)
	    process.nextTick(endFn);
	  else
	    src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }

	  function onend() {
	    debug('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain &&
	        (!dest._writableState || dest._writableState.needDrain))
	      ondrain();
	  }

	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    var ret = dest.write(chunk);
	    if (false === ret) {
	      debug('false write response, pause',
	            src._readableState.awaitDrain);
	      src._readableState.awaitDrain++;
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EE.listenerCount(dest, 'error') === 0)
	      dest.emit('error', er);
	  }
	  // This is a brutally ugly hack to make sure that our error handler
	  // is attached before any userland ones.  NEVER DO THIS.
	  if (!dest._events || !dest._events.error)
	    dest.on('error', onerror);
	  else if (isArray(dest._events.error))
	    dest._events.error.unshift(onerror);
	  else
	    dest._events.error = [onerror, dest._events.error];



	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function() {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain)
	      state.awaitDrain--;
	    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}


	Readable.prototype.unpipe = function(dest) {
	  var state = this._readableState;

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0)
	    return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes)
	      return this;

	    if (!dest)
	      dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest)
	      dest.emit('unpipe', this);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var i = 0; i < len; i++)
	      dests[i].emit('unpipe', this);
	    return this;
	  }

	  // try to find the right one.
	  var i = indexOf(state.pipes, dest);
	  if (i === -1)
	    return this;

	  state.pipes.splice(i, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1)
	    state.pipes = state.pipes[0];

	  dest.emit('unpipe', this);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function(ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);

	  // If listening to data, and it has not explicitly been paused,
	  // then call resume to start the flow of data on the next tick.
	  if (ev === 'data' && false !== this._readableState.flowing) {
	    this.resume();
	  }

	  if (ev === 'readable' && this.readable) {
	    var state = this._readableState;
	    if (!state.readableListening) {
	      state.readableListening = true;
	      state.emittedReadable = false;
	      state.needReadable = true;
	      if (!state.reading) {
	        var self = this;
	        process.nextTick(function() {
	          debug('readable nexttick read 0');
	          self.read(0);
	        });
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function() {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    if (!state.reading) {
	      debug('resume read 0');
	      this.read(0);
	    }
	    resume(this, state);
	  }
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    process.nextTick(function() {
	      resume_(stream, state);
	    });
	  }
	}

	function resume_(stream, state) {
	  state.resumeScheduled = false;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading)
	    stream.read(0);
	}

	Readable.prototype.pause = function() {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  if (state.flowing) {
	    do {
	      var chunk = stream.read();
	    } while (null !== chunk && state.flowing);
	  }
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function(stream) {
	  var state = this._readableState;
	  var paused = false;

	  var self = this;
	  stream.on('end', function() {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length)
	        self.push(chunk);
	    }

	    self.push(null);
	  });

	  stream.on('data', function(chunk) {
	    debug('wrapped data');
	    if (state.decoder)
	      chunk = state.decoder.write(chunk);
	    if (!chunk || !state.objectMode && !chunk.length)
	      return;

	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {
	      this[i] = function(method) { return function() {
	        return stream[method].apply(stream, arguments);
	      }}(i);
	    }
	  }

	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function(ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function(n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return self;
	};



	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	function fromList(n, state) {
	  var list = state.buffer;
	  var length = state.length;
	  var stringMode = !!state.decoder;
	  var objectMode = !!state.objectMode;
	  var ret;

	  // nothing in the list, definitely empty.
	  if (list.length === 0)
	    return null;

	  if (length === 0)
	    ret = null;
	  else if (objectMode)
	    ret = list.shift();
	  else if (!n || n >= length) {
	    // read it all, truncate the array.
	    if (stringMode)
	      ret = list.join('');
	    else
	      ret = Buffer.concat(list, length);
	    list.length = 0;
	  } else {
	    // read just some of it.
	    if (n < list[0].length) {
	      // just take a part of the first list item.
	      // slice is the same for buffers and strings.
	      var buf = list[0];
	      ret = buf.slice(0, n);
	      list[0] = buf.slice(n);
	    } else if (n === list[0].length) {
	      // first list is a perfect match
	      ret = list.shift();
	    } else {
	      // complex case.
	      // we have enough to cover it, but it spans past the first buffer.
	      if (stringMode)
	        ret = '';
	      else
	        ret = new Buffer(n);

	      var c = 0;
	      for (var i = 0, l = list.length; i < l && c < n; i++) {
	        var buf = list[0];
	        var cpy = Math.min(n - c, buf.length);

	        if (stringMode)
	          ret += buf.slice(0, cpy);
	        else
	          buf.copy(ret, c, 0, cpy);

	        if (cpy < buf.length)
	          list[0] = buf.slice(cpy);
	        else
	          list.shift();

	        c += cpy;
	      }
	    }
	  }

	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0)
	    throw new Error('endReadable called on non-empty stream');

	  if (!state.endEmitted) {
	    state.ended = true;
	    process.nextTick(function() {
	      // Check that we didn't get one last unshift.
	      if (!state.endEmitted && state.length === 0) {
	        state.endEmitted = true;
	        stream.readable = false;
	        stream.emit('end');
	      }
	    });
	  }
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	function indexOf (xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var Buffer = __webpack_require__(1).Buffer;

	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     }


	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	var StringDecoder = exports.StringDecoder = function(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }

	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	};


	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;

	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;

	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }

	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);

	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;

	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }

	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);

	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }

	  charStr += buffer.toString(this.encoding, 0, end);

	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }

	  // or just emit the charStr
	  return charStr;
	};

	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;

	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];

	    // See http://en.wikipedia.org/wiki/UTF-8#Description

	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }

	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }

	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};

	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);

	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }

	  return res;
	};

	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}

	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}

	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}


/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	var native = __webpack_require__(96)

	function getTypeName (fn) {
	  return fn.name || fn.toString().match(/function (.*?)\s*\(/)[1]
	}

	function getValueTypeName (value) {
	  return native.Nil(value) ? '' : getTypeName(value.constructor)
	}

	function getValue (value) {
	  if (native.Function(value)) return ''
	  if (native.String(value)) return JSON.stringify(value)
	  if (value && native.Object(value)) return ''
	  return value
	}

	function captureStackTrace (e, t) {
	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(e, t)
	  }
	}

	function tfJSON (type) {
	  if (native.Function(type)) return type.toJSON ? type.toJSON() : getTypeName(type)
	  if (native.Array(type)) return 'Array'
	  if (type && native.Object(type)) return 'Object'

	  return type !== undefined ? type : ''
	}

	function tfErrorString (type, value, valueTypeName) {
	  var valueJson = getValue(value)

	  return 'Expected ' + tfJSON(type) + ', got' +
	    (valueTypeName !== '' ? ' ' + valueTypeName : '') +
	    (valueJson !== '' ? ' ' + valueJson : '')
	}

	function TfTypeError (type, value, valueTypeName) {
	  valueTypeName = valueTypeName || getValueTypeName(value)
	  this.message = tfErrorString(type, value, valueTypeName)

	  captureStackTrace(this, TfTypeError)
	  this.__type = type
	  this.__value = value
	  this.__valueTypeName = valueTypeName
	}

	TfTypeError.prototype = Object.create(Error.prototype)
	TfTypeError.prototype.constructor = TfTypeError

	function tfPropertyErrorString (type, label, name, value, valueTypeName) {
	  var description = '" of type '
	  if (label === 'key') description = '" with key type '

	  return tfErrorString('property "' + tfJSON(name) + description + tfJSON(type), value, valueTypeName)
	}

	function TfPropertyTypeError (type, property, label, value, valueTypeName) {
	  if (type) {
	    valueTypeName = valueTypeName || getValueTypeName(value)
	    this.message = tfPropertyErrorString(type, label, property, value, valueTypeName)
	  } else {
	    this.message = 'Unexpected property "' + property + '"'
	  }

	  captureStackTrace(this, TfTypeError)
	  this.__label = label
	  this.__property = property
	  this.__type = type
	  this.__value = value
	  this.__valueTypeName = valueTypeName
	}

	TfPropertyTypeError.prototype = Object.create(Error.prototype)
	TfPropertyTypeError.prototype.constructor = TfTypeError

	function tfCustomError (expected, actual) {
	  return new TfTypeError(expected, {}, actual)
	}

	function tfSubError (e, property, label) {
	  // sub child?
	  if (e instanceof TfPropertyTypeError) {
	    property = property + '.' + e.__property

	    e = new TfPropertyTypeError(
	      e.__type, property, e.__label, e.__value, e.__valueTypeName
	    )

	  // child?
	  } else if (e instanceof TfTypeError) {
	    e = new TfPropertyTypeError(
	      e.__type, property, label, e.__value, e.__valueTypeName
	    )
	  }

	  captureStackTrace(e)
	  return e
	}

	module.exports = {
	  TfTypeError: TfTypeError,
	  TfPropertyTypeError: TfPropertyTypeError,
	  tfCustomError: tfCustomError,
	  tfSubError: tfSubError,
	  tfJSON: tfJSON,
	  getValueTypeName: getValueTypeName
	}


/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var punycode = __webpack_require__(380);

	exports.parse = urlParse;
	exports.resolve = urlResolve;
	exports.resolveObject = urlResolveObject;
	exports.format = urlFormat;

	exports.Url = Url;

	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}

	// Reference: RFC 3986, RFC 1808, RFC 2396

	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	    portPattern = /:[0-9]*$/,

	    // RFC 2396: characters reserved for delimiting URLs.
	    // We actually just auto-escape these.
	    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

	    // RFC 2396: characters not allowed for various reasons.
	    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

	    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	    autoEscape = ['\''].concat(unwise),
	    // Characters that are never ever allowed in a hostname.
	    // Note that any invalid chars are also handled, but these
	    // are the ones that are *expected* to be seen, so we fast-path
	    // them.
	    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	    hostEndingChars = ['/', '?', '#'],
	    hostnameMaxLen = 255,
	    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,
	    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,
	    // protocols that can allow "unsafe" and "unwise" chars.
	    unsafeProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that never have a hostname.
	    hostlessProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that always contain a // bit.
	    slashedProtocol = {
	      'http': true,
	      'https': true,
	      'ftp': true,
	      'gopher': true,
	      'file': true,
	      'http:': true,
	      'https:': true,
	      'ftp:': true,
	      'gopher:': true,
	      'file:': true
	    },
	    querystring = __webpack_require__(358);

	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && isObject(url) && url instanceof Url) return url;

	  var u = new Url;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}

	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  if (!isString(url)) {
	    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
	  }

	  var rest = url;

	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();

	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    this.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }

	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      this.slashes = true;
	    }
	  }

	  if (!hostlessProtocol[proto] &&
	      (slashes || (proto && !slashedProtocol[proto]))) {

	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c

	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.

	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (var i = 0; i < hostEndingChars.length; i++) {
	      var hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }

	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }

	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      this.auth = decodeURIComponent(auth);
	    }

	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (var i = 0; i < nonHostChars.length; i++) {
	      var hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1)
	      hostEnd = rest.length;

	    this.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);

	    // pull out port.
	    this.parseHost();

	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    this.hostname = this.hostname || '';

	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = this.hostname[0] === '[' &&
	        this.hostname[this.hostname.length - 1] === ']';

	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = this.hostname.split(/\./);
	      for (var i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            this.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }

	    if (this.hostname.length > hostnameMaxLen) {
	      this.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      this.hostname = this.hostname.toLowerCase();
	    }

	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a puny coded representation of "domain".
	      // It only converts the part of the domain name that
	      // has non ASCII characters. I.e. it dosent matter if
	      // you call it with a domain that already is in ASCII.
	      var domainArray = this.hostname.split('.');
	      var newOut = [];
	      for (var i = 0; i < domainArray.length; ++i) {
	        var s = domainArray[i];
	        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
	            'xn--' + punycode.encode(s) : s);
	      }
	      this.hostname = newOut.join('.');
	    }

	    var p = this.port ? ':' + this.port : '';
	    var h = this.hostname || '';
	    this.host = h + p;
	    this.href += this.host;

	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }

	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {

	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (var i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }


	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    this.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    this.search = rest.substr(qm);
	    this.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      this.query = querystring.parse(this.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    this.search = '';
	    this.query = {};
	  }
	  if (rest) this.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
	      this.hostname && !this.pathname) {
	    this.pathname = '/';
	  }

	  //to support http.request
	  if (this.pathname || this.search) {
	    var p = this.pathname || '';
	    var s = this.search || '';
	    this.path = p + s;
	  }

	  // finally, reconstruct the href based on what has been validated.
	  this.href = this.format();
	  return this;
	};

	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (isString(obj)) obj = urlParse(obj);
	  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	  return obj.format();
	}

	Url.prototype.format = function() {
	  var auth = this.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }

	  var protocol = this.protocol || '',
	      pathname = this.pathname || '',
	      hash = this.hash || '',
	      host = false,
	      query = '';

	  if (this.host) {
	    host = auth + this.host;
	  } else if (this.hostname) {
	    host = auth + (this.hostname.indexOf(':') === -1 ?
	        this.hostname :
	        '[' + this.hostname + ']');
	    if (this.port) {
	      host += ':' + this.port;
	    }
	  }

	  if (this.query &&
	      isObject(this.query) &&
	      Object.keys(this.query).length) {
	    query = querystring.stringify(this.query);
	  }

	  var search = this.search || (query && ('?' + query)) || '';

	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (this.slashes ||
	      (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }

	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;

	  pathname = pathname.replace(/[?#]/g, function(match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');

	  return protocol + host + pathname + search + hash;
	};

	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}

	Url.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};

	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}

	Url.prototype.resolveObject = function(relative) {
	  if (isString(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }

	  var result = new Url();
	  Object.keys(this).forEach(function(k) {
	    result[k] = this[k];
	  }, this);

	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;

	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }

	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    Object.keys(relative).forEach(function(k) {
	      if (k !== 'protocol')
	        result[k] = relative[k];
	    });

	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] &&
	        result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }

	    result.href = result.format();
	    return result;
	  }

	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      Object.keys(relative).forEach(function(k) {
	        result[k] = relative[k];
	      });
	      result.href = result.format();
	      return result;
	    }

	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      var relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }

	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
	      isRelAbs = (
	          relative.host ||
	          relative.pathname && relative.pathname.charAt(0) === '/'
	      ),
	      mustEndAbs = (isRelAbs || isSourceAbs ||
	                    (result.host && relative.pathname)),
	      removeAllDots = mustEndAbs,
	      srcPath = result.pathname && result.pathname.split('/') || [],
	      relPath = relative.pathname && relative.pathname.split('/') || [],
	      psychotic = result.protocol && !slashedProtocol[result.protocol];

	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;
	      else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;
	        else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }

	  if (isRelAbs) {
	    // it's absolute.
	    result.host = (relative.host || relative.host === '') ?
	                  relative.host : result.host;
	    result.hostname = (relative.hostname || relative.hostname === '') ?
	                      relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especialy happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                       result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!isNull(result.pathname) || !isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') +
	                    (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }

	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }

	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
	      (result.host || relative.host) && (last === '.' || last === '..') ||
	      last === '');

	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last == '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }

	  if (mustEndAbs && srcPath[0] !== '' &&
	      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }

	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
	    srcPath.push('');
	  }

	  var isAbsolute = srcPath[0] === '' ||
	      (srcPath[0] && srcPath[0].charAt(0) === '/');

	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' :
	                                    srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especialy happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                     result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }

	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }

	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }

	  //to support request.http
	  if (!isNull(result.pathname) || !isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') +
	                  (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};

	Url.prototype.parseHost = function() {
	  var host = this.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      this.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) this.hostname = host;
	};

	function isString(arg) {
	  return typeof arg === "string";
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isNull(arg) {
	  return arg === null;
	}
	function isNullOrUndefined(arg) {
	  return  arg == null;
	}


/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	var Web3 = __webpack_require__(396);

	// dont override global variable
	if (typeof window !== 'undefined' && typeof window.Web3 === 'undefined') {
	    window.Web3 = Web3;
	}

	module.exports = Web3;


/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	/*
	    This file is part of web3.js.

	    web3.js is free software: you can redistribute it and/or modify
	    it under the terms of the GNU Lesser General Public License as published by
	    the Free Software Foundation, either version 3 of the License, or
	    (at your option) any later version.

	    web3.js is distributed in the hope that it will be useful,
	    but WITHOUT ANY WARRANTY; without even the implied warranty of
	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	    GNU Lesser General Public License for more details.

	    You should have received a copy of the GNU Lesser General Public License
	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	*/
	/** 
	 * @file param.js
	 * @author Marek Kotewicz <marek@ethdev.com>
	 * @date 2015
	 */

	var utils = __webpack_require__(9);

	/**
	 * SolidityParam object prototype.
	 * Should be used when encoding, decoding solidity bytes
	 */
	var SolidityParam = function (value, offset) {
	    this.value = value || '';
	    this.offset = offset; // offset in bytes
	};

	/**
	 * This method should be used to get length of params's dynamic part
	 * 
	 * @method dynamicPartLength
	 * @returns {Number} length of dynamic part (in bytes)
	 */
	SolidityParam.prototype.dynamicPartLength = function () {
	    return this.dynamicPart().length / 2;
	};

	/**
	 * This method should be used to create copy of solidity param with different offset
	 *
	 * @method withOffset
	 * @param {Number} offset length in bytes
	 * @returns {SolidityParam} new solidity param with applied offset
	 */
	SolidityParam.prototype.withOffset = function (offset) {
	    return new SolidityParam(this.value, offset);
	};

	/**
	 * This method should be used to combine solidity params together
	 * eg. when appending an array
	 *
	 * @method combine
	 * @param {SolidityParam} param with which we should combine
	 * @param {SolidityParam} result of combination
	 */
	SolidityParam.prototype.combine = function (param) {
	    return new SolidityParam(this.value + param.value); 
	};

	/**
	 * This method should be called to check if param has dynamic size.
	 * If it has, it returns true, otherwise false
	 *
	 * @method isDynamic
	 * @returns {Boolean}
	 */
	SolidityParam.prototype.isDynamic = function () {
	    return this.offset !== undefined;
	};

	/**
	 * This method should be called to transform offset to bytes
	 *
	 * @method offsetAsBytes
	 * @returns {String} bytes representation of offset
	 */
	SolidityParam.prototype.offsetAsBytes = function () {
	    return !this.isDynamic() ? '' : utils.padLeft(utils.toTwosComplement(this.offset).toString(16), 64);
	};

	/**
	 * This method should be called to get static part of param
	 *
	 * @method staticPart
	 * @returns {String} offset if it is a dynamic param, otherwise value
	 */
	SolidityParam.prototype.staticPart = function () {
	    if (!this.isDynamic()) {
	        return this.value; 
	    } 
	    return this.offsetAsBytes();
	};

	/**
	 * This method should be called to get dynamic part of param
	 *
	 * @method dynamicPart
	 * @returns {String} returns a value if it is a dynamic param, otherwise empty string
	 */
	SolidityParam.prototype.dynamicPart = function () {
	    return this.isDynamic() ? this.value : '';
	};

	/**
	 * This method should be called to encode param
	 *
	 * @method encode
	 * @returns {String}
	 */
	SolidityParam.prototype.encode = function () {
	    return this.staticPart() + this.dynamicPart();
	};

	/**
	 * This method should be called to encode array of params
	 *
	 * @method encodeList
	 * @param {Array[SolidityParam]} params
	 * @returns {String}
	 */
	SolidityParam.encodeList = function (params) {
	    
	    // updating offsets
	    var totalOffset = params.length * 32;
	    var offsetParams = params.map(function (param) {
	        if (!param.isDynamic()) {
	            return param;
	        }
	        var offset = totalOffset;
	        totalOffset += param.dynamicPartLength();
	        return param.withOffset(offset);
	    });

	    // encode everything!
	    return offsetParams.reduce(function (result, param) {
	        return result + param.dynamicPart();
	    }, offsetParams.reduce(function (result, param) {
	        return result + param.staticPart();
	    }, ''));
	};



	module.exports = SolidityParam;



/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	/*
	    This file is part of web3.js.

	    web3.js is free software: you can redistribute it and/or modify
	    it under the terms of the GNU Lesser General Public License as published by
	    the Free Software Foundation, either version 3 of the License, or
	    (at your option) any later version.

	    web3.js is distributed in the hope that it will be useful,
	    but WITHOUT ANY WARRANTY; without even the implied warranty of
	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	    GNU Lesser General Public License for more details.

	    You should have received a copy of the GNU Lesser General Public License
	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	*/
	/**
	 * @file event.js
	 * @author Marek Kotewicz <marek@ethdev.com>
	 * @date 2014
	 */

	var utils = __webpack_require__(9);
	var coder = __webpack_require__(97);
	var formatters = __webpack_require__(20);
	var sha3 = __webpack_require__(50);
	var Filter = __webpack_require__(68);
	var watches = __webpack_require__(70);

	/**
	 * This prototype should be used to create event filters
	 */
	var SolidityEvent = function (requestManager, json, address) {
	    this._requestManager = requestManager;
	    this._params = json.inputs;
	    this._name = utils.transformToFullName(json);
	    this._address = address;
	    this._anonymous = json.anonymous;
	};

	/**
	 * Should be used to get filtered param types
	 *
	 * @method types
	 * @param {Bool} decide if returned typed should be indexed
	 * @return {Array} array of types
	 */
	SolidityEvent.prototype.types = function (indexed) {
	    return this._params.filter(function (i) {
	        return i.indexed === indexed;
	    }).map(function (i) {
	        return i.type;
	    });
	};

	/**
	 * Should be used to get event display name
	 *
	 * @method displayName
	 * @return {String} event display name
	 */
	SolidityEvent.prototype.displayName = function () {
	    return utils.extractDisplayName(this._name);
	};

	/**
	 * Should be used to get event type name
	 *
	 * @method typeName
	 * @return {String} event type name
	 */
	SolidityEvent.prototype.typeName = function () {
	    return utils.extractTypeName(this._name);
	};

	/**
	 * Should be used to get event signature
	 *
	 * @method signature
	 * @return {String} event signature
	 */
	SolidityEvent.prototype.signature = function () {
	    return sha3(this._name);
	};

	/**
	 * Should be used to encode indexed params and options to one final object
	 *
	 * @method encode
	 * @param {Object} indexed
	 * @param {Object} options
	 * @return {Object} everything combined together and encoded
	 */
	SolidityEvent.prototype.encode = function (indexed, options) {
	    indexed = indexed || {};
	    options = options || {};
	    var result = {};

	    ['fromBlock', 'toBlock'].filter(function (f) {
	        return options[f] !== undefined;
	    }).forEach(function (f) {
	        result[f] = formatters.inputBlockNumberFormatter(options[f]);
	    });

	    result.topics = [];

	    result.address = this._address;
	    if (!this._anonymous) {
	        result.topics.push('0x' + this.signature());
	    }

	    var indexedTopics = this._params.filter(function (i) {
	        return i.indexed === true;
	    }).map(function (i) {
	        var value = indexed[i.name];
	        if (value === undefined || value === null) {
	            return null;
	        }

	        if (utils.isArray(value)) {
	            return value.map(function (v) {
	                return '0x' + coder.encodeParam(i.type, v);
	            });
	        }
	        return '0x' + coder.encodeParam(i.type, value);
	    });

	    result.topics = result.topics.concat(indexedTopics);

	    return result;
	};

	/**
	 * Should be used to decode indexed params and options
	 *
	 * @method decode
	 * @param {Object} data
	 * @return {Object} result object with decoded indexed && not indexed params
	 */
	SolidityEvent.prototype.decode = function (data) {

	    data.data = data.data || '';
	    data.topics = data.topics || [];


	    var argTopics = this._anonymous ? data.topics : data.topics.slice(1);
	    var indexedData = argTopics.map(function (topics) { return topics.slice(2); }).join("");
	    var indexedParams = coder.decodeParams(this.types(true), indexedData);

	    var notIndexedData = data.data.slice(2);
	    var notIndexedParams = coder.decodeParams(this.types(false), notIndexedData);

	    var result = formatters.outputLogFormatter(data);
	    result.event = this.displayName();
	    result.address = data.address;

	    result.args = this._params.reduce(function (acc, current) {
	        acc[current.name] = current.indexed ? indexedParams.shift() : notIndexedParams.shift();
	        return acc;
	    }, {});

	    delete result.data;
	    delete result.topics;

	    return result;
	};

	/**
	 * Should be used to create new filter object from event
	 *
	 * @method execute
	 * @param {Object} indexed
	 * @param {Object} options
	 * @return {Object} filter object
	 */
	SolidityEvent.prototype.execute = function (indexed, options, callback) {

	    if (utils.isFunction(arguments[arguments.length - 1])) {
	        callback = arguments[arguments.length - 1];
	        if(arguments.length === 2)
	            options = null;
	        if(arguments.length === 1) {
	            options = null;
	            indexed = {};
	        }
	    }

	    var o = this.encode(indexed, options);
	    var formatter = this.decode.bind(this);
	    return new Filter(o, 'eth', this._requestManager, watches.eth(), formatter, callback);
	};

	/**
	 * Should be used to attach event to contract object
	 *
	 * @method attachToContract
	 * @param {Contract}
	 */
	SolidityEvent.prototype.attachToContract = function (contract) {
	    var execute = this.execute.bind(this);
	    var displayName = this.displayName();
	    if (!contract[displayName]) {
	        contract[displayName] = execute;
	    }
	    contract[displayName][this.typeName()] = this.execute.bind(this, contract);
	};

	module.exports = SolidityEvent;



/***/ },
/* 160 */
/***/ function(module, exports) {

	/*
	    This file is part of web3.js.

	    web3.js is free software: you can redistribute it and/or modify
	    it under the terms of the GNU Lesser General Public License as published by
	    the Free Software Foundation, either version 3 of the License, or
	    (at your option) any later version.

	    web3.js is distributed in the hope that it will be useful,
	    but WITHOUT ANY WARRANTY; without even the implied warranty of
	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	    GNU Lesser General Public License for more details.

	    You should have received a copy of the GNU Lesser General Public License
	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	*/
	/** @file jsonrpc.js
	 * @authors:
	 *   Marek Kotewicz <marek@ethdev.com>
	 *   Aaron Kumavis <aaron@kumavis.me>
	 * @date 2015
	 */

	// Initialize Jsonrpc as a simple object with utility functions.
	var Jsonrpc = {
	    messageId: 0
	};

	/**
	 * Should be called to valid json create payload object
	 *
	 * @method toPayload
	 * @param {Function} method of jsonrpc call, required
	 * @param {Array} params, an array of method params, optional
	 * @returns {Object} valid jsonrpc payload object
	 */
	Jsonrpc.toPayload = function (method, params) {
	    if (!method)
	        console.error('jsonrpc method should be specified!');

	    // advance message ID
	    Jsonrpc.messageId++;

	    return {
	        jsonrpc: '2.0',
	        id: Jsonrpc.messageId,
	        method: method,
	        params: params || []
	    };
	};

	/**
	 * Should be called to check if jsonrpc response is valid
	 *
	 * @method isValidResponse
	 * @param {Object}
	 * @returns {Boolean} true if response is valid, otherwise false
	 */
	Jsonrpc.isValidResponse = function (response) {
	    return Array.isArray(response) ? response.every(validateSingleMessage) : validateSingleMessage(response);

	    function validateSingleMessage(message){
	      return !!message &&
	        !message.error &&
	        message.jsonrpc === '2.0' &&
	        typeof message.id === 'number' &&
	        message.result !== undefined; // only undefined is not valid json object
	    }
	};

	/**
	 * Should be called to create batch payload object
	 *
	 * @method toBatchPayload
	 * @param {Array} messages, an array of objects with method (required) and params (optional) fields
	 * @returns {Array} batch payload
	 */
	Jsonrpc.toBatchPayload = function (messages) {
	    return messages.map(function (message) {
	        return Jsonrpc.toPayload(message.method, message.params);
	    });
	};

	module.exports = Jsonrpc;



/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	;(function () {

	  var object =  true ? exports : this; // #8: web workers
	  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

	  function InvalidCharacterError(message) {
	    this.message = message;
	  }
	  InvalidCharacterError.prototype = new Error;
	  InvalidCharacterError.prototype.name = 'InvalidCharacterError';

	  // encoder
	  // [https://gist.github.com/999166] by [https://github.com/nignag]
	  object.btoa || (
	  object.btoa = function (input) {
	    for (
	      // initialize result and counter
	      var block, charCode, idx = 0, map = chars, output = '';
	      // if the next input index does not exist:
	      //   change the mapping table to "="
	      //   check if d has no fractional digits
	      input.charAt(idx | 0) || (map = '=', idx % 1);
	      // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
	      output += map.charAt(63 & block >> 8 - idx % 1 * 8)
	    ) {
	      charCode = input.charCodeAt(idx += 3/4);
	      if (charCode > 0xFF) {
	        throw new InvalidCharacterError("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
	      }
	      block = block << 8 | charCode;
	    }
	    return output;
	  });

	  // decoder
	  // [https://gist.github.com/1020396] by [https://github.com/atk]
	  object.atob || (
	  object.atob = function (input) {
	    input = input.replace(/=+$/, '');
	    if (input.length % 4 == 1) {
	      throw new InvalidCharacterError("'atob' failed: The string to be decoded is not correctly encoded.");
	    }
	    for (
	      // initialize result and counters
	      var bc = 0, bs, buffer, idx = 0, output = '';
	      // get next character
	      buffer = input.charAt(idx++);
	      // character found in table? initialize bit storage and add its ascii value;
	      ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
	        // and if not first of each 4 characters,
	        // convert the first 8 bits to one ascii character
	        bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0
	    ) {
	      // try to find character in table (0-63, not found => -1)
	      buffer = chars.indexOf(buffer);
	    }
	    return output;
	  });

	}());


/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015 Ambisafe Inc.
	 * 
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including the rights to use, copy, modify,
	 * merge, publish, distribute, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 * 
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 * 
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @file account.js
	 * Account class used to store all the information related to an user account.
	 * @author Charlie Fontana <charlie@ambisafe.co>
	 * @date 07/13/2015
	 */

	'use strict';

	/**
	 * This section defines the required libraries
	 */
	var crypto = __webpack_require__(60),
	    bitcoin = __webpack_require__(112),
	    Ambisafe = __webpack_require__(72);

	/**
	 * Defines the Account constructor.
	 *
	 * @param {object} container.
	 * @param {string} password.
	 * @return none.
	 */
	Ambisafe.Account = function (container, password) {
	    var key, privateKey, property;

	    this.data = {};

	    for (property in container) {
	        if (container.hasOwnProperty(property)) {
	            this.set(property, container[property]);
	        }
	    }

	    if (this.get('salt') && this.get('data') && this.get('iv') && password) {
	        key = Ambisafe.deriveKey(password, this.get('salt'));
	        this.set('key', key);

	        privateKey = Ambisafe.decrypt(
	            this.get('data'),
	            this.get('iv'),
	            this.get('key')
	        ).toString('hex');

	        this.set('private_key', privateKey);
	    }
	};

	/**
	 * Defines the instance data object used to store the Account data.
	 */
	Ambisafe.Account.prototype.data = {};

	/**
	 * Instance method that signs a transaction.
	 *
	 * @param {object} tx unsigned transaction: {hex:'...', fee:'...', sighashes:['...', '...']}.
	 * @return {object} signed transaction.
	 */
	Ambisafe.Account.prototype.signTransaction = function (tx) {

	    var privateKey = this.get('private_key');

	    if (privateKey) {
	        return Ambisafe.signTransaction(tx, privateKey);
	    }

	    console.log('ERR: The transaction was not signed. The "private_key" attribute is not defined');
	};

	/**
	 * Instance method that set a new password
	 *
	 * @param {string} password
	 * @return none.
	 */
	Ambisafe.Account.prototype.setNewPassword = function (password) {
	    var curKey, curData,
	        newKey, newData,
	        privateKey;

	    if (!this.get('salt') || !this.get('data') || !this.get('iv')) {
	        console.log('ERR: The following attributes are required: salt, data and iv.');
	        return;
	    }

	    curKey = this.get('key');
	    curData = this.get('data');

	    privateKey = Ambisafe.decrypt(curData, this.get('iv'), curKey);

	    newKey = Ambisafe.deriveKey(password, this.get('salt'));

	    this.set('iv', Ambisafe.generateRandomValue(16));
	    newData = Ambisafe.encrypt(privateKey, this.get('iv'), newKey);

	    this.set('data', newData);
	    this.set('key', newKey);
	    this.set('private_key', privateKey.toString('hex'));
	};

	/**
	 * Instance method that gets the value of an indicated attribute.
	 *
	 * @param {string} name attribute name.
	 * @return {object} return the value of the indicated attribute.
	 */
	Ambisafe.Account.prototype.get = function (name) {
	    return this.data[name];
	};

	/**
	 * Instance method that sets the value of an indicated attribute.
	 *
	 * @param {string} name attribute name.
	 * @param {object} value attribute value.
	 * @return none.
	 */
	Ambisafe.Account.prototype.set = function (name, value) {
	    this.data[name] = value;
	};

	/**
	 * Intance method that returns the Account's data in a JSON format
	 *
	 * @return {string} return the account data as string.
	 */
	Ambisafe.Account.prototype.stringify = function () {
	    return JSON.stringify(this.data);
	};

	/**
	 * Intance method that parse the Account's data
	 *
	 * @param {string} data return the account data as string
	 * @return none.
	 */
	Ambisafe.Account.prototype.parse = function (data) {
	    if (typeof data !== 'string') {
	        console.log('ERR: The account data to parse has to be string');
	        return;
	    }

	    this.data = JSON.parse(data);
	};

	/**
	 * Intance method that get the Account's container as a Javascript object
	 *
	 * @return {object}
	 */
	Ambisafe.Account.prototype.getContainer = function () {
	    var container = {};

	    container.public_key = this.get('public_key');
	    container.data = this.get('data');
	    container.salt = this.get('salt');
	    container.iv = this.get('iv');

	    return container;
	};

	/**
	 * Intance method that get the Account's container as string
	 *
	 * @return {string}
	 */
	Ambisafe.Account.prototype.getStringContainer = function () {
	    return JSON.stringify(this.getContainer());
	};

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	var Ambisafe = __webpack_require__(72);

	__webpack_require__(162);
	__webpack_require__(165);

	module.exports = Ambisafe;

/***/ },
/* 164 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2015 Ambisafe Inc.
	 * 
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including the rights to use, copy, modify,
	 * merge, publish, distribute, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 * 
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 * 
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @file qrcode.js
	 * Javascript code based on the following project: https://github.com/dwa012/html5-qrcode
	 * @author Charlie Fontana <charlie@ambisafe.co>
	 * @date 07/20/2015
	 */

	GridSampler = {};

	GridSampler.checkAndNudgePoints = function(image, points) {
		var width = qrcode.width;
		var height = qrcode.height;
		var x, y;
		// Check and nudge points from start until we see some that are OK:
		var nudged = true;
		for (var offset = 0; offset < points.Length && nudged; offset += 2) {
			x = Math.floor(points[offset]);
			y = Math.floor(points[offset + 1]);
			if (x < -1 || x > width || y < -1 || y > height) {
				throw "Error.checkAndNudgePoints ";
			}
			nudged = false;
			if (x === -1) {
				points[offset] = 0.0;
				nudged = true;
			} else if (x === width) {
				points[offset] = width - 1;
				nudged = true;
			}
			if (y === -1) {
				points[offset + 1] = 0.0;
				nudged = true;
			} else if (y === height) {
				points[offset + 1] = height - 1;
				nudged = true;
			}
		}

		nudged = true;

		for (offset = points.Length - 2; offset >= 0 && nudged; offset -= 2) {
			x = Math.floor(points[offset]);
			y = Math.floor(points[offset + 1]);

			if (x < -1 || x > width || y < -1 || y > height) {
				throw "Error.checkAndNudgePoints ";
			}
			nudged = false;
			if (x === -1) {
				points[offset] = 0.0;
				nudged = true;
			} else if (x === width) {
				points[offset] = width - 1;
				nudged = true;
			}
			if (y === -1) {
				points[offset + 1] = 0.0;
				nudged = true;
			} else if (y === height) {
				points[offset + 1] = height - 1;
				nudged = true;
			}
		}
	};

	GridSampler.sampleGrid3 = function(image, dimension, transform) {
		var bits = new BitMatrix(dimension);
		var points = new Array(dimension << 1);
		var x;
		for (var y = 0; y < dimension; y++) {
			var max = points.length;
			var iValue = y + 0.5;
			for (x = 0; x < max; x += 2) {
				points[x] = (x >> 1) + 0.5;
				points[x + 1] = iValue;
			}
			transform.transformPoints1(points);
			// Quick check to see if points transformed to something inside the image;
			// sufficient to check the endpoints
			GridSampler.checkAndNudgePoints(image, points);
			try {
				for (x = 0; x < max; x += 2) {
					var xpoint = (Math.floor(points[x]) * 4) + (Math.floor(points[x + 1]) * qrcode.width * 4);
					var bit = image[Math.floor(points[x]) + qrcode.width * Math.floor(points[x + 1])];
					qrcode.imagedata.data[xpoint] = bit ? 255 : 0;
					qrcode.imagedata.data[xpoint + 1] = bit ? 255 : 0;
					qrcode.imagedata.data[xpoint + 2] = 0;
					qrcode.imagedata.data[xpoint + 3] = 255;
					//bits[x >> 1][ y]=bit;
					if (bit) bits.set_Renamed(x >> 1, y);
				}
			} catch (aioobe) {
				throw "Error.checkAndNudgePoints";
			}
		}
		return bits;
	};

	GridSampler.sampleGridx = function(image, dimension, p1ToX, p1ToY, p2ToX, p2ToY, p3ToX, p3ToY, p4ToX, p4ToY, p1FromX, p1FromY, p2FromX, p2FromY, p3FromX, p3FromY, p4FromX, p4FromY) {
		var transform = PerspectiveTransform.quadrilateralToQuadrilateral(p1ToX, p1ToY, p2ToX, p2ToY, p3ToX, p3ToY, p4ToX, p4ToY, p1FromX, p1FromY, p2FromX, p2FromY, p3FromX, p3FromY, p4FromX, p4FromY);

		return GridSampler.sampleGrid3(image, dimension, transform);
	};

	function ECB(count, dataCodewords) {
		this.count = count;
		this.dataCodewords = dataCodewords;

		this.__defineGetter__("Count", function() {
			return this.count;
		});
		this.__defineGetter__("DataCodewords", function() {
			return this.dataCodewords;
		});
	}

	function ECBlocks(ecCodewordsPerBlock, ecBlocks1, ecBlocks2) {
		this.ecCodewordsPerBlock = ecCodewordsPerBlock;
		if (ecBlocks2) this.ecBlocks = new Array(ecBlocks1, ecBlocks2);
		else this.ecBlocks = new Array(ecBlocks1);

		this.__defineGetter__("ECCodewordsPerBlock", function() {
			return this.ecCodewordsPerBlock;
		});

		this.__defineGetter__("TotalECCodewords", function() {
			return this.ecCodewordsPerBlock * this.NumBlocks;
		});

		this.__defineGetter__("NumBlocks", function() {
			var total = 0;
			for (var i = 0; i < this.ecBlocks.length; i++) {
				total += this.ecBlocks[i].length;
			}
			return total;
		});

		this.getECBlocks = function() {
			return this.ecBlocks;
		};
	}

	function Version(versionNumber, alignmentPatternCenters, ecBlocks1, ecBlocks2, ecBlocks3, ecBlocks4) {
		this.versionNumber = versionNumber;
		this.alignmentPatternCenters = alignmentPatternCenters;
		this.ecBlocks = new Array(ecBlocks1, ecBlocks2, ecBlocks3, ecBlocks4);

		var total = 0;
		var ecCodewords = ecBlocks1.ECCodewordsPerBlock;
		var ecbArray = ecBlocks1.getECBlocks();
		for (var i = 0; i < ecbArray.length; i++) {
			var ecBlock = ecbArray[i];
			total += ecBlock.Count * (ecBlock.DataCodewords + ecCodewords);
		}

		this.totalCodewords = total;

		this.__defineGetter__("VersionNumber", function() {
			return this.versionNumber;
		});

		this.__defineGetter__("AlignmentPatternCenters", function() {
			return this.alignmentPatternCenters;
		});
		this.__defineGetter__("TotalCodewords", function() {
			return this.totalCodewords;
		});
		this.__defineGetter__("DimensionForVersion", function() {
			return 17 + 4 * this.versionNumber;
		});

		this.buildFunctionPattern = function() {
			var dimension = this.DimensionForVersion;
			var bitMatrix = new BitMatrix(dimension);

			// Top left finder pattern + separator + format
			bitMatrix.setRegion(0, 0, 9, 9);
			// Top right finder pattern + separator + format
			bitMatrix.setRegion(dimension - 8, 0, 8, 9);
			// Bottom left finder pattern + separator + format
			bitMatrix.setRegion(0, dimension - 8, 9, 8);

			// Alignment patterns
			var max = this.alignmentPatternCenters.length;
			for (var x = 0; x < max; x++) {
				var i = this.alignmentPatternCenters[x] - 2;
				for (var y = 0; y < max; y++) {
					if ((x === 0 && (y === 0 || y === max - 1)) || (x === max - 1 && y === 0)) {
						// No alignment patterns near the three finder paterns
						continue;
					}
					bitMatrix.setRegion(this.alignmentPatternCenters[y] - 2, i, 5, 5);
				}
			}

			// Vertical timing pattern
			bitMatrix.setRegion(6, 9, 1, dimension - 17);
			// Horizontal timing pattern
			bitMatrix.setRegion(9, 6, dimension - 17, 1);

			if (this.versionNumber > 6) {
				// Version info, top right
				bitMatrix.setRegion(dimension - 11, 0, 3, 6);
				// Version info, bottom left
				bitMatrix.setRegion(0, dimension - 11, 6, 3);
			}

			return bitMatrix;
		};

		this.getECBlocksForLevel = function(ecLevel) {
			return this.ecBlocks[ecLevel.ordinal()];
		};
	}

	Version.VERSION_DECODE_INFO = new Array(0x07C94, 0x085BC, 0x09A99, 0x0A4D3, 0x0BBF6, 0x0C762, 0x0D847, 0x0E60D, 0x0F928, 0x10B78, 0x1145D, 0x12A17, 0x13532, 0x149A6, 0x15683, 0x168C9, 0x177EC, 0x18EC4, 0x191E1, 0x1AFAB, 0x1B08E, 0x1CC1A, 0x1D33F, 0x1ED75, 0x1F250, 0x209D5, 0x216F0, 0x228BA, 0x2379F, 0x24B0B, 0x2542E, 0x26A64, 0x27541, 0x28C69);

	Version.VERSIONS = buildVersions();

	Version.getVersionForNumber = function(versionNumber) {
		if (versionNumber < 1 || versionNumber > 40) {
			throw "ArgumentException";
		}
		return Version.VERSIONS[versionNumber - 1];
	};

	Version.getProvisionalVersionForDimension = function(dimension) {
		if (dimension % 4 !== 1) {
			throw "Error getProvisionalVersionForDimension";
		}
		try {
			return Version.getVersionForNumber((dimension - 17) >> 2);
		} catch (iae) {
			throw "Error getVersionForNumber";
		}
	};

	Version.decodeVersionInformation = function(versionBits) {
		var bestDifference = 0xffffffff;
		var bestVersion = 0;
		for (var i = 0; i < Version.VERSION_DECODE_INFO.length; i++) {
			var targetVersion = Version.VERSION_DECODE_INFO[i];
			// Do the version info bits match exactly? done.
			if (targetVersion === versionBits) {
				return this.getVersionForNumber(i + 7);
			}
			// Otherwise see if this is the closest to a real version info bit string
			// we have seen so far
			var bitsDifference = FormatInformation.numBitsDiffering(versionBits, targetVersion);
			if (bitsDifference < bestDifference) {
				bestVersion = i + 7;
				bestDifference = bitsDifference;
			}
		}
		// We can tolerate up to 3 bits of error since no two version info codewords will
		// differ in less than 4 bits.
		if (bestDifference <= 3) {
			return this.getVersionForNumber(bestVersion);
		}
		// If we didn't find a close enough match, fail
		return null;
	};

	function buildVersions() {
		return [new Version(1, [], new ECBlocks(7, new ECB(1, 19)), new ECBlocks(10, new ECB(1, 16)), new ECBlocks(13, new ECB(1, 13)), new ECBlocks(17, new ECB(1, 9))),
		new Version(2, [6, 18], new ECBlocks(10, new ECB(1, 34)), new ECBlocks(16, new ECB(1, 28)), new ECBlocks(22, new ECB(1, 22)), new ECBlocks(28, new ECB(1, 16))),
		new Version(3, [6, 22], new ECBlocks(15, new ECB(1, 55)), new ECBlocks(26, new ECB(1, 44)), new ECBlocks(18, new ECB(2, 17)), new ECBlocks(22, new ECB(2, 13))),
		new Version(4, [6, 26], new ECBlocks(20, new ECB(1, 80)), new ECBlocks(18, new ECB(2, 32)), new ECBlocks(26, new ECB(2, 24)), new ECBlocks(16, new ECB(4, 9))),
		new Version(5, [6, 30], new ECBlocks(26, new ECB(1, 108)), new ECBlocks(24, new ECB(2, 43)), new ECBlocks(18, new ECB(2, 15), new ECB(2, 16)), new ECBlocks(22, new ECB(2, 11), new ECB(2, 12))),
		new Version(6, [6, 34], new ECBlocks(18, new ECB(2, 68)), new ECBlocks(16, new ECB(4, 27)), new ECBlocks(24, new ECB(4, 19)), new ECBlocks(28, new ECB(4, 15))),
		new Version(7, [6, 22, 38], new ECBlocks(20, new ECB(2, 78)), new ECBlocks(18, new ECB(4, 31)), new ECBlocks(18, new ECB(2, 14), new ECB(4, 15)), new ECBlocks(26, new ECB(4, 13), new ECB(1, 14))),
		new Version(8, [6, 24, 42], new ECBlocks(24, new ECB(2, 97)), new ECBlocks(22, new ECB(2, 38), new ECB(2, 39)), new ECBlocks(22, new ECB(4, 18), new ECB(2, 19)), new ECBlocks(26, new ECB(4, 14), new ECB(2, 15))),
		new Version(9, [6, 26, 46], new ECBlocks(30, new ECB(2, 116)), new ECBlocks(22, new ECB(3, 36), new ECB(2, 37)), new ECBlocks(20, new ECB(4, 16), new ECB(4, 17)), new ECBlocks(24, new ECB(4, 12), new ECB(4, 13))),
		new Version(10, [6, 28, 50], new ECBlocks(18, new ECB(2, 68), new ECB(2, 69)), new ECBlocks(26, new ECB(4, 43), new ECB(1, 44)), new ECBlocks(24, new ECB(6, 19), new ECB(2, 20)), new ECBlocks(28, new ECB(6, 15), new ECB(2, 16))),
		new Version(11, [6, 30, 54], new ECBlocks(20, new ECB(4, 81)), new ECBlocks(30, new ECB(1, 50), new ECB(4, 51)), new ECBlocks(28, new ECB(4, 22), new ECB(4, 23)), new ECBlocks(24, new ECB(3, 12), new ECB(8, 13))),
		new Version(12, [6, 32, 58], new ECBlocks(24, new ECB(2, 92), new ECB(2, 93)), new ECBlocks(22, new ECB(6, 36), new ECB(2, 37)), new ECBlocks(26, new ECB(4, 20), new ECB(6, 21)), new ECBlocks(28, new ECB(7, 14), new ECB(4, 15))),
		new Version(13, [6, 34, 62], new ECBlocks(26, new ECB(4, 107)), new ECBlocks(22, new ECB(8, 37), new ECB(1, 38)), new ECBlocks(24, new ECB(8, 20), new ECB(4, 21)), new ECBlocks(22, new ECB(12, 11), new ECB(4, 12))),
		new Version(14, [6, 26, 46, 66], new ECBlocks(30, new ECB(3, 115), new ECB(1, 116)), new ECBlocks(24, new ECB(4, 40), new ECB(5, 41)), new ECBlocks(20, new ECB(11, 16), new ECB(5, 17)), new ECBlocks(24, new ECB(11, 12), new ECB(5, 13))),
		new Version(15, [6, 26, 48, 70], new ECBlocks(22, new ECB(5, 87), new ECB(1, 88)), new ECBlocks(24, new ECB(5, 41), new ECB(5, 42)), new ECBlocks(30, new ECB(5, 24), new ECB(7, 25)), new ECBlocks(24, new ECB(11, 12), new ECB(7, 13))),
		new Version(16, [6, 26, 50, 74], new ECBlocks(24, new ECB(5, 98), new ECB(1, 99)), new ECBlocks(28, new ECB(7, 45), new ECB(3, 46)), new ECBlocks(24, new ECB(15, 19), new ECB(2, 20)), new ECBlocks(30, new ECB(3, 15), new ECB(13, 16))),
		new Version(17, [6, 30, 54, 78], new ECBlocks(28, new ECB(1, 107), new ECB(5, 108)), new ECBlocks(28, new ECB(10, 46), new ECB(1, 47)), new ECBlocks(28, new ECB(1, 22), new ECB(15, 23)), new ECBlocks(28, new ECB(2, 14), new ECB(17, 15))),
		new Version(18, [6, 30, 56, 82], new ECBlocks(30, new ECB(5, 120), new ECB(1, 121)), new ECBlocks(26, new ECB(9, 43), new ECB(4, 44)), new ECBlocks(28, new ECB(17, 22), new ECB(1, 23)), new ECBlocks(28, new ECB(2, 14), new ECB(19, 15))),
		new Version(19, [6, 30, 58, 86], new ECBlocks(28, new ECB(3, 113), new ECB(4, 114)), new ECBlocks(26, new ECB(3, 44), new ECB(11, 45)), new ECBlocks(26, new ECB(17, 21), new ECB(4, 22)), new ECBlocks(26, new ECB(9, 13), new ECB(16, 14))),
		new Version(20, [6, 34, 62, 90], new ECBlocks(28, new ECB(3, 107), new ECB(5, 108)), new ECBlocks(26, new ECB(3, 41), new ECB(13, 42)), new ECBlocks(30, new ECB(15, 24), new ECB(5, 25)), new ECBlocks(28, new ECB(15, 15), new ECB(10, 16))),
		new Version(21, [6, 28, 50, 72, 94], new ECBlocks(28, new ECB(4, 116), new ECB(4, 117)), new ECBlocks(26, new ECB(17, 42)), new ECBlocks(28, new ECB(17, 22), new ECB(6, 23)), new ECBlocks(30, new ECB(19, 16), new ECB(6, 17))),
		new Version(22, [6, 26, 50, 74, 98], new ECBlocks(28, new ECB(2, 111), new ECB(7, 112)), new ECBlocks(28, new ECB(17, 46)), new ECBlocks(30, new ECB(7, 24), new ECB(16, 25)), new ECBlocks(24, new ECB(34, 13))),
		new Version(23, [6, 30, 54, 74, 102], new ECBlocks(30, new ECB(4, 121), new ECB(5, 122)), new ECBlocks(28, new ECB(4, 47), new ECB(14, 48)), new ECBlocks(30, new ECB(11, 24), new ECB(14, 25)), new ECBlocks(30, new ECB(16, 15), new ECB(14, 16))),
		new Version(24, [6, 28, 54, 80, 106], new ECBlocks(30, new ECB(6, 117), new ECB(4, 118)), new ECBlocks(28, new ECB(6, 45), new ECB(14, 46)), new ECBlocks(30, new ECB(11, 24), new ECB(16, 25)), new ECBlocks(30, new ECB(30, 16), new ECB(2, 17))),
		new Version(25, [6, 32, 58, 84, 110], new ECBlocks(26, new ECB(8, 106), new ECB(4, 107)), new ECBlocks(28, new ECB(8, 47), new ECB(13, 48)), new ECBlocks(30, new ECB(7, 24), new ECB(22, 25)), new ECBlocks(30, new ECB(22, 15), new ECB(13, 16))),
		new Version(26, [6, 30, 58, 86, 114], new ECBlocks(28, new ECB(10, 114), new ECB(2, 115)), new ECBlocks(28, new ECB(19, 46), new ECB(4, 47)), new ECBlocks(28, new ECB(28, 22), new ECB(6, 23)), new ECBlocks(30, new ECB(33, 16), new ECB(4, 17))),
		new Version(27, [6, 34, 62, 90, 118], new ECBlocks(30, new ECB(8, 122), new ECB(4, 123)), new ECBlocks(28, new ECB(22, 45), new ECB(3, 46)), new ECBlocks(30, new ECB(8, 23), new ECB(26, 24)), new ECBlocks(30, new ECB(12, 15), new ECB(28, 16))),
		new Version(28, [6, 26, 50, 74, 98, 122], new ECBlocks(30, new ECB(3, 117), new ECB(10, 118)), new ECBlocks(28, new ECB(3, 45), new ECB(23, 46)), new ECBlocks(30, new ECB(4, 24), new ECB(31, 25)), new ECBlocks(30, new ECB(11, 15), new ECB(31, 16))),
		new Version(29, [6, 30, 54, 78, 102, 126], new ECBlocks(30, new ECB(7, 116), new ECB(7, 117)), new ECBlocks(28, new ECB(21, 45), new ECB(7, 46)), new ECBlocks(30, new ECB(1, 23), new ECB(37, 24)), new ECBlocks(30, new ECB(19, 15), new ECB(26, 16))),
		new Version(30, [6, 26, 52, 78, 104, 130], new ECBlocks(30, new ECB(5, 115), new ECB(10, 116)), new ECBlocks(28, new ECB(19, 47), new ECB(10, 48)), new ECBlocks(30, new ECB(15, 24), new ECB(25, 25)), new ECBlocks(30, new ECB(23, 15), new ECB(25, 16))),
		new Version(31, [6, 30, 56, 82, 108, 134], new ECBlocks(30, new ECB(13, 115), new ECB(3, 116)), new ECBlocks(28, new ECB(2, 46), new ECB(29, 47)), new ECBlocks(30, new ECB(42, 24), new ECB(1, 25)), new ECBlocks(30, new ECB(23, 15), new ECB(28, 16))),
		new Version(32, [6, 34, 60, 86, 112, 138], new ECBlocks(30, new ECB(17, 115)), new ECBlocks(28, new ECB(10, 46), new ECB(23, 47)), new ECBlocks(30, new ECB(10, 24), new ECB(35, 25)), new ECBlocks(30, new ECB(19, 15), new ECB(35, 16))),
		new Version(33, [6, 30, 58, 86, 114, 142], new ECBlocks(30, new ECB(17, 115), new ECB(1, 116)), new ECBlocks(28, new ECB(14, 46), new ECB(21, 47)), new ECBlocks(30, new ECB(29, 24), new ECB(19, 25)), new ECBlocks(30, new ECB(11, 15), new ECB(46, 16))),
		new Version(34, [6, 34, 62, 90, 118, 146], new ECBlocks(30, new ECB(13, 115), new ECB(6, 116)), new ECBlocks(28, new ECB(14, 46), new ECB(23, 47)), new ECBlocks(30, new ECB(44, 24), new ECB(7, 25)), new ECBlocks(30, new ECB(59, 16), new ECB(1, 17))),
		new Version(35, [6, 30, 54, 78, 102, 126, 150], new ECBlocks(30, new ECB(12, 121), new ECB(7, 122)), new ECBlocks(28, new ECB(12, 47), new ECB(26, 48)), new ECBlocks(30, new ECB(39, 24), new ECB(14, 25)), new ECBlocks(30, new ECB(22, 15), new ECB(41, 16))),
		new Version(36, [6, 24, 50, 76, 102, 128, 154], new ECBlocks(30, new ECB(6, 121), new ECB(14, 122)), new ECBlocks(28, new ECB(6, 47), new ECB(34, 48)), new ECBlocks(30, new ECB(46, 24), new ECB(10, 25)), new ECBlocks(30, new ECB(2, 15), new ECB(64, 16))),
		new Version(37, [6, 28, 54, 80, 106, 132, 158], new ECBlocks(30, new ECB(17, 122), new ECB(4, 123)), new ECBlocks(28, new ECB(29, 46), new ECB(14, 47)), new ECBlocks(30, new ECB(49, 24), new ECB(10, 25)), new ECBlocks(30, new ECB(24, 15), new ECB(46, 16))),
		new Version(38, [6, 32, 58, 84, 110, 136, 162], new ECBlocks(30, new ECB(4, 122), new ECB(18, 123)), new ECBlocks(28, new ECB(13, 46), new ECB(32, 47)), new ECBlocks(30, new ECB(48, 24), new ECB(14, 25)), new ECBlocks(30, new ECB(42, 15), new ECB(32, 16))),
		new Version(39, [6, 26, 54, 82, 110, 138, 166], new ECBlocks(30, new ECB(20, 117), new ECB(4, 118)), new ECBlocks(28, new ECB(40, 47), new ECB(7, 48)), new ECBlocks(30, new ECB(43, 24), new ECB(22, 25)), new ECBlocks(30, new ECB(10, 15), new ECB(67, 16))),
		new Version(40, [6, 30, 58, 86, 114, 142, 170], new ECBlocks(30, new ECB(19, 118), new ECB(6, 119)), new ECBlocks(28, new ECB(18, 47), new ECB(31, 48)), new ECBlocks(30, new ECB(34, 24), new ECB(34, 25)), new ECBlocks(30, new ECB(20, 15), new ECB(61, 16)))];
	}

	function PerspectiveTransform(a11, a21, a31, a12, a22, a32, a13, a23, a33) {
		this.a11 = a11;
		this.a12 = a12;
		this.a13 = a13;
		this.a21 = a21;
		this.a22 = a22;
		this.a23 = a23;
		this.a31 = a31;
		this.a32 = a32;
		this.a33 = a33;
		this.transformPoints1 = function(points) {
			var max = points.length;
			var a11 = this.a11;
			var a12 = this.a12;
			var a13 = this.a13;
			var a21 = this.a21;
			var a22 = this.a22;
			var a23 = this.a23;
			var a31 = this.a31;
			var a32 = this.a32;
			var a33 = this.a33;
			for (var i = 0; i < max; i += 2) {
				var x = points[i];
				var y = points[i + 1];
				var denominator = a13 * x + a23 * y + a33;
				points[i] = (a11 * x + a21 * y + a31) / denominator;
				points[i + 1] = (a12 * x + a22 * y + a32) / denominator;
			}
		};
		this.transformPoints2 = function(xValues, yValues) {
			var n = xValues.length;
			for (var i = 0; i < n; i++) {
				var x = xValues[i];
				var y = yValues[i];
				var denominator = this.a13 * x + this.a23 * y + this.a33;
				xValues[i] = (this.a11 * x + this.a21 * y + this.a31) / denominator;
				yValues[i] = (this.a12 * x + this.a22 * y + this.a32) / denominator;
			}
		};

		this.buildAdjoint = function() {
			// Adjoint is the transpose of the cofactor matrix:
			return new PerspectiveTransform(this.a22 * this.a33 - this.a23 * this.a32, this.a23 * this.a31 - this.a21 * this.a33, this.a21 * this.a32 - this.a22 * this.a31, this.a13 * this.a32 - this.a12 * this.a33, this.a11 * this.a33 - this.a13 * this.a31, this.a12 * this.a31 - this.a11 * this.a32, this.a12 * this.a23 - this.a13 * this.a22, this.a13 * this.a21 - this.a11 * this.a23, this.a11 * this.a22 - this.a12 * this.a21);
		};

		this.times = function(other) {
			return new PerspectiveTransform(this.a11 * other.a11 + this.a21 * other.a12 + this.a31 * other.a13, this.a11 * other.a21 + this.a21 * other.a22 + this.a31 * other.a23, this.a11 * other.a31 + this.a21 * other.a32 + this.a31 * other.a33, this.a12 * other.a11 + this.a22 * other.a12 + this.a32 * other.a13, this.a12 * other.a21 + this.a22 * other.a22 + this.a32 * other.a23, this.a12 * other.a31 + this.a22 * other.a32 + this.a32 * other.a33, this.a13 * other.a11 + this.a23 * other.a12 + this.a33 * other.a13, this.a13 * other.a21 + this.a23 * other.a22 + this.a33 * other.a23, this.a13 * other.a31 + this.a23 * other.a32 + this.a33 * other.a33);
		};
	}

	PerspectiveTransform.quadrilateralToQuadrilateral = function(x0, y0, x1, y1, x2, y2, x3, y3, x0p, y0p, x1p, y1p, x2p, y2p, x3p, y3p) {

		var qToS = this.quadrilateralToSquare(x0, y0, x1, y1, x2, y2, x3, y3);
		var sToQ = this.squareToQuadrilateral(x0p, y0p, x1p, y1p, x2p, y2p, x3p, y3p);
		return sToQ.times(qToS);
	};

	PerspectiveTransform.squareToQuadrilateral = function(x0, y0, x1, y1, x2, y2, x3, y3) {
		dy2 = y3 - y2;
		dy3 = y0 - y1 + y2 - y3;
		if (dy2 === 0.0 && dy3 === 0.0) {
			return new PerspectiveTransform(x1 - x0, x2 - x1, x0, y1 - y0, y2 - y1, y0, 0.0, 0.0, 1.0);
		} else {
			dx1 = x1 - x2;
			dx2 = x3 - x2;
			dx3 = x0 - x1 + x2 - x3;
			dy1 = y1 - y2;
			denominator = dx1 * dy2 - dx2 * dy1;
			a13 = (dx3 * dy2 - dx2 * dy3) / denominator;
			a23 = (dx1 * dy3 - dx3 * dy1) / denominator;
			return new PerspectiveTransform(x1 - x0 + a13 * x1, x3 - x0 + a23 * x3, x0, y1 - y0 + a13 * y1, y3 - y0 + a23 * y3, y0, a13, a23, 1.0);
		}
	};

	PerspectiveTransform.quadrilateralToSquare = function(x0, y0, x1, y1, x2, y2, x3, y3) {
		return this.squareToQuadrilateral(x0, y0, x1, y1, x2, y2, x3, y3).buildAdjoint();
	};

	function DetectorResult(bits, points) {
		this.bits = bits;
		this.points = points;
	}

	function Detector(image) {
		this.image = image;
		this.resultPointCallback = null;

		this.sizeOfBlackWhiteBlackRun = function(fromX, fromY, toX, toY) {
			// Mild variant of Bresenham's algorithm;
			// see http://en.wikipedia.org/wiki/Bresenham's_line_algorithm
			var steep = Math.abs(toY - fromY) > Math.abs(toX - fromX);
			if (steep) {
				var temp = fromX;
				fromX = fromY;
				fromY = temp;
				temp = toX;
				toX = toY;
				toY = temp;
			}

			var dx = Math.abs(toX - fromX);
			var dy = Math.abs(toY - fromY);
			var error = -dx >> 1;
			var ystep = fromY < toY ? 1 : -1;
			var xstep = fromX < toX ? 1 : -1;
			var state = 0; // In black pixels, looking for white, first or second time
			for (var x = fromX, y = fromY; x !== toX; x += xstep) {

				var realX = steep ? y : x;
				var realY = steep ? x : y;
				if (state === 1) {
					// In white pixels, looking for black
					if (this.image[realX + realY * qrcode.width]) {
						state++;
					}
				} else {
					if (!this.image[realX + realY * qrcode.width]) {
						state++;
					}
				}

				if (state === 3) {
					// Found black, white, black, and stumbled back onto white; done
					var diffX = x - fromX;
					var diffY = y - fromY;
					return Math.sqrt((diffX * diffX + diffY * diffY));
				}
				error += dy;
				if (error > 0) {
					if (y === toY) {
						break;
					}
					y += ystep;
					error -= dx;
				}
			}
			var diffX2 = toX - fromX;
			var diffY2 = toY - fromY;
			return Math.sqrt((diffX2 * diffX2 + diffY2 * diffY2));
		};


		this.sizeOfBlackWhiteBlackRunBothWays = function(fromX, fromY, toX, toY) {

			var result = this.sizeOfBlackWhiteBlackRun(fromX, fromY, toX, toY);
			var scale = 1.0;
			var otherToX = fromX - (toX - fromX);
			if (otherToX < 0) {
				scale = fromX / (fromX - otherToX);
				otherToX = 0;
			} else if (otherToX >= qrcode.width) {
				scale = (qrcode.width - 1 - fromX) / (otherToX - fromX);
				otherToX = qrcode.width - 1;
			}
			var otherToY = Math.floor(fromY - (toY - fromY) * scale);

			scale = 1.0;
			if (otherToY < 0) {
				scale = fromY / (fromY - otherToY);
				otherToY = 0;
			} else if (otherToY >= qrcode.height) {
				scale = (qrcode.height - 1 - fromY) / (otherToY - fromY);
				otherToY = qrcode.height - 1;
			}
			otherToX = Math.floor(fromX + (otherToX - fromX) * scale);

			result += this.sizeOfBlackWhiteBlackRun(fromX, fromY, otherToX, otherToY);
			return result - 1.0; // -1 because we counted the middle pixel twice
		};

		this.calculateModuleSizeOneWay = function(pattern, otherPattern) {
			var moduleSizeEst1 = this.sizeOfBlackWhiteBlackRunBothWays(Math.floor(pattern.X), Math.floor(pattern.Y), Math.floor(otherPattern.X), Math.floor(otherPattern.Y));
			var moduleSizeEst2 = this.sizeOfBlackWhiteBlackRunBothWays(Math.floor(otherPattern.X), Math.floor(otherPattern.Y), Math.floor(pattern.X), Math.floor(pattern.Y));
			if (isNaN(moduleSizeEst1)) {
				return moduleSizeEst2 / 7.0;
			}
			if (isNaN(moduleSizeEst2)) {
				return moduleSizeEst1 / 7.0;
			}
			// Average them, and divide by 7 since we've counted the width of 3 black modules,
			// and 1 white and 1 black module on either side. Ergo, divide sum by 14.
			return (moduleSizeEst1 + moduleSizeEst2) / 14.0;
		};


		this.calculateModuleSize = function(topLeft, topRight, bottomLeft) {
			// Take the average
			return (this.calculateModuleSizeOneWay(topLeft, topRight) + this.calculateModuleSizeOneWay(topLeft, bottomLeft)) / 2.0;
		};

		this.distance = function(pattern1, pattern2) {
			xDiff = pattern1.X - pattern2.X;
			yDiff = pattern1.Y - pattern2.Y;
			return Math.sqrt((xDiff * xDiff + yDiff * yDiff));
		};

		this.computeDimension = function(topLeft, topRight, bottomLeft, moduleSize) {

			var tltrCentersDimension = Math.round(this.distance(topLeft, topRight) / moduleSize);
			var tlblCentersDimension = Math.round(this.distance(topLeft, bottomLeft) / moduleSize);
			var dimension = ((tltrCentersDimension + tlblCentersDimension) >> 1) + 7;
			switch (dimension & 0x03) {

				// mod 4
				case 0:
					dimension++;
					break;
					// 1? do nothing

				case 2:
					dimension--;
					break;

				case 3:
					throw "Error";
			}
			return dimension;
		};

		this.findAlignmentInRegion = function(overallEstModuleSize, estAlignmentX, estAlignmentY, allowanceFactor) {
			// Look for an alignment pattern (3 modules in size) around where it
			// should be
			var allowance = Math.floor(allowanceFactor * overallEstModuleSize);
			var alignmentAreaLeftX = Math.max(0, estAlignmentX - allowance);
			var alignmentAreaRightX = Math.min(qrcode.width - 1, estAlignmentX + allowance);
			if (alignmentAreaRightX - alignmentAreaLeftX < overallEstModuleSize * 3) {
				throw "Error";
			}

			var alignmentAreaTopY = Math.max(0, estAlignmentY - allowance);
			var alignmentAreaBottomY = Math.min(qrcode.height - 1, estAlignmentY + allowance);

			var alignmentFinder = new AlignmentPatternFinder(this.image, alignmentAreaLeftX, alignmentAreaTopY, alignmentAreaRightX - alignmentAreaLeftX, alignmentAreaBottomY - alignmentAreaTopY, overallEstModuleSize, this.resultPointCallback);
			return alignmentFinder.find();
		};

		this.createTransform = function(topLeft, topRight, bottomLeft, alignmentPattern, dimension) {
			var dimMinusThree = dimension - 3.5;
			var bottomRightX;
			var bottomRightY;
			var sourceBottomRightX;
			var sourceBottomRightY;
			if (alignmentPattern !== null) {
				bottomRightX = alignmentPattern.X;
				bottomRightY = alignmentPattern.Y;
				sourceBottomRightX = sourceBottomRightY = dimMinusThree - 3.0;
			} else {
				// Don't have an alignment pattern, just make up the bottom-right point
				bottomRightX = (topRight.X - topLeft.X) + bottomLeft.X;
				bottomRightY = (topRight.Y - topLeft.Y) + bottomLeft.Y;
				sourceBottomRightX = sourceBottomRightY = dimMinusThree;
			}

			var transform = PerspectiveTransform.quadrilateralToQuadrilateral(3.5, 3.5, dimMinusThree, 3.5, sourceBottomRightX, sourceBottomRightY, 3.5, dimMinusThree, topLeft.X, topLeft.Y, topRight.X, topRight.Y, bottomRightX, bottomRightY, bottomLeft.X, bottomLeft.Y);

			return transform;
		};

		this.sampleGrid = function(image, transform, dimension) {

			var sampler = GridSampler;
			return sampler.sampleGrid3(image, dimension, transform);
		};

		this.processFinderPatternInfo = function(info) {

			var topLeft = info.TopLeft;
			var topRight = info.TopRight;
			var bottomLeft = info.BottomLeft;

			var moduleSize = this.calculateModuleSize(topLeft, topRight, bottomLeft);
			if (moduleSize < 1.0) {
				throw "Error";
			}
			var dimension = this.computeDimension(topLeft, topRight, bottomLeft, moduleSize);
			var provisionalVersion = Version.getProvisionalVersionForDimension(dimension);
			var modulesBetweenFPCenters = provisionalVersion.DimensionForVersion - 7;

			var alignmentPattern = null;
			// Anything above version 1 has an alignment pattern
			if (provisionalVersion.AlignmentPatternCenters.length > 0) {

				// Guess where a "bottom right" finder pattern would have been
				var bottomRightX = topRight.X - topLeft.X + bottomLeft.X;
				var bottomRightY = topRight.Y - topLeft.Y + bottomLeft.Y;

				// Estimate that alignment pattern is closer by 3 modules
				// from "bottom right" to known top left location
				var correctionToTopLeft = 1.0 - 3.0 / modulesBetweenFPCenters;
				var estAlignmentX = Math.floor(topLeft.X + correctionToTopLeft * (bottomRightX - topLeft.X));
				var estAlignmentY = Math.floor(topLeft.Y + correctionToTopLeft * (bottomRightY - topLeft.Y));

				// Kind of arbitrary -- expand search radius before giving up
				for (var i = 4; i <= 16; i <<= 1) {
					//try
					//{
					alignmentPattern = this.findAlignmentInRegion(moduleSize, estAlignmentX, estAlignmentY, i);
					break;
					//}
					//catch (re)
					//{
					// try next round
					//}
				}
				// If we didn't find alignment pattern... well try anyway without it
			}

			var transform = this.createTransform(topLeft, topRight, bottomLeft, alignmentPattern, dimension);

			var bits = this.sampleGrid(this.image, transform, dimension);

			var points;
			if (alignmentPattern === null) {
				points = new Array(bottomLeft, topLeft, topRight);
			} else {
				points = new Array(bottomLeft, topLeft, topRight, alignmentPattern);
			}
			return new DetectorResult(bits, points);
		};

		this.detect = function() {
			var info = new FinderPatternFinder().findFinderPattern(this.image);
			return this.processFinderPatternInfo(info);
		};
	}

	var FORMAT_INFO_MASK_QR = 0x5412;
	var FORMAT_INFO_DECODE_LOOKUP = new Array(new Array(0x5412, 0x00), new Array(0x5125, 0x01), new Array(0x5E7C, 0x02), new Array(0x5B4B, 0x03), new Array(0x45F9, 0x04), new Array(0x40CE, 0x05), new Array(0x4F97, 0x06), new Array(0x4AA0, 0x07), new Array(0x77C4, 0x08), new Array(0x72F3, 0x09), new Array(0x7DAA, 0x0A), new Array(0x789D, 0x0B), new Array(0x662F, 0x0C), new Array(0x6318, 0x0D), new Array(0x6C41, 0x0E), new Array(0x6976, 0x0F), new Array(0x1689, 0x10), new Array(0x13BE, 0x11), new Array(0x1CE7, 0x12), new Array(0x19D0, 0x13), new Array(0x0762, 0x14), new Array(0x0255, 0x15), new Array(0x0D0C, 0x16), new Array(0x083B, 0x17), new Array(0x355F, 0x18), new Array(0x3068, 0x19), new Array(0x3F31, 0x1A), new Array(0x3A06, 0x1B), new Array(0x24B4, 0x1C), new Array(0x2183, 0x1D), new Array(0x2EDA, 0x1E), new Array(0x2BED, 0x1F));
	var BITS_SET_IN_HALF_BYTE = new Array(0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4);

	function FormatInformation(formatInfo) {
		this.errorCorrectionLevel = ErrorCorrectionLevel.forBits((formatInfo >> 3) & 0x03);
		this.dataMask = (formatInfo & 0x07);

		this.__defineGetter__("ErrorCorrectionLevel", function() {
			return this.errorCorrectionLevel;
		});
		this.__defineGetter__("DataMask", function() {
			return this.dataMask;
		});
		this.GetHashCode = function() {
			return (this.errorCorrectionLevel.ordinal() << 3) | dataMask;
		};
		this.Equals = function(o) {
			var other = o;
			return this.errorCorrectionLevel === other.errorCorrectionLevel && this.dataMask === other.dataMask;
		};
	}

	FormatInformation.numBitsDiffering = function(a, b) {
		a ^= b; // a now has a 1 bit exactly where its bit differs with b's
		// Count bits set quickly with a series of lookups:
		return BITS_SET_IN_HALF_BYTE[a & 0x0F] + BITS_SET_IN_HALF_BYTE[(URShift(a, 4) & 0x0F)] + BITS_SET_IN_HALF_BYTE[(URShift(a, 8) & 0x0F)] + BITS_SET_IN_HALF_BYTE[(URShift(a, 12) & 0x0F)] + BITS_SET_IN_HALF_BYTE[(URShift(a, 16) & 0x0F)] + BITS_SET_IN_HALF_BYTE[(URShift(a, 20) & 0x0F)] + BITS_SET_IN_HALF_BYTE[(URShift(a, 24) & 0x0F)] + BITS_SET_IN_HALF_BYTE[(URShift(a, 28) & 0x0F)];
	};

	FormatInformation.decodeFormatInformation = function(maskedFormatInfo) {
		var formatInfo = FormatInformation.doDecodeFormatInformation(maskedFormatInfo);
		if (formatInfo !== null) {
			return formatInfo;
		}
		// Should return null, but, some QR codes apparently
		// do not mask this info. Try again by actually masking the pattern
		// first
		return FormatInformation.doDecodeFormatInformation(maskedFormatInfo ^ FORMAT_INFO_MASK_QR);
	};

	FormatInformation.doDecodeFormatInformation = function(maskedFormatInfo) {
		// Find the int in FORMAT_INFO_DECODE_LOOKUP with fewest bits differing
		var bestDifference = 0xffffffff;
		var bestFormatInfo = 0;
		for (var i = 0; i < FORMAT_INFO_DECODE_LOOKUP.length; i++) {
			var decodeInfo = FORMAT_INFO_DECODE_LOOKUP[i];
			var targetInfo = decodeInfo[0];
			if (targetInfo === maskedFormatInfo) {
				// Found an exact match
				return new FormatInformation(decodeInfo[1]);
			}
			var bitsDifference = this.numBitsDiffering(maskedFormatInfo, targetInfo);
			if (bitsDifference < bestDifference) {
				bestFormatInfo = decodeInfo[1];
				bestDifference = bitsDifference;
			}
		}
		// Hamming distance of the 32 masked codes is 7, by construction, so <= 3 bits
		// differing means we found a match
		if (bestDifference <= 3) {
			return new FormatInformation(bestFormatInfo);
		}
		return null;
	};

	function ErrorCorrectionLevel(ordinal, bits, name) {
		this.ordinal_Renamed_Field = ordinal;
		this.bits = bits;
		this.name = name;
		this.__defineGetter__("Bits", function() {
			return this.bits;
		});
		this.__defineGetter__("Name", function() {
			return this.name;
		});
		this.ordinal = function() {
			return this.ordinal_Renamed_Field;
		};
	}

	ErrorCorrectionLevel.forBits = function(bits) {
		if (bits < 0 || bits >= FOR_BITS.Length) {
			throw "ArgumentException";
		}
		return FOR_BITS[bits];
	};

	var L = new ErrorCorrectionLevel(0, 0x01, "L");
	var M = new ErrorCorrectionLevel(1, 0x00, "M");
	var Q = new ErrorCorrectionLevel(2, 0x03, "Q");
	var H = new ErrorCorrectionLevel(3, 0x02, "H");
	var FOR_BITS = new Array(M, L, H, Q);

	function BitMatrix(width, height) {
		if (!height) height = width;
		if (width < 1 || height < 1) {
			throw "Both dimensions must be greater than 0";
		}
		this.width = width;
		this.height = height;
		var rowSize = width >> 5;
		if ((width & 0x1f) !== 0) {
			rowSize++;
		}
		this.rowSize = rowSize;
		this.bits = new Array(rowSize * height);
		for (var i = 0; i < this.bits.length; i++)
		this.bits[i] = 0;

		this.__defineGetter__("Width", function() {
			return this.width;
		});
		this.__defineGetter__("Height", function() {
			return this.height;
		});
		this.__defineGetter__("Dimension", function() {
			if (this.width !== this.height) {
				throw "Can't call getDimension() on a non-square matrix";
			}
			return this.width;
		});

		this.get_Renamed = function(x, y) {
			var offset = y * this.rowSize + (x >> 5);
			return ((URShift(this.bits[offset], (x & 0x1f))) & 1) !== 0;
		};
		this.set_Renamed = function(x, y) {
			var offset = y * this.rowSize + (x >> 5);
			this.bits[offset] |= 1 << (x & 0x1f);
		};
		this.flip = function(x, y) {
			var offset = y * this.rowSize + (x >> 5);
			this.bits[offset] ^= 1 << (x & 0x1f);
		};
		this.clear = function() {
			var max = this.bits.length;
			for (var i = 0; i < max; i++) {
				this.bits[i] = 0;
			}
		};
		this.setRegion = function(left, top, width, height) {
			if (top < 0 || left < 0) {
				throw "Left and top must be nonnegative";
			}
			if (height < 1 || width < 1) {
				throw "Height and width must be at least 1";
			}
			var right = left + width;
			var bottom = top + height;
			if (bottom > this.height || right > this.width) {
				throw "The region must fit inside the matrix";
			}
			for (var y = top; y < bottom; y++) {
				var offset = y * this.rowSize;
				for (var x = left; x < right; x++) {
					this.bits[offset + (x >> 5)] |= 1 << (x & 0x1f);
				}
			}
		};
	}


	function DataBlock(numDataCodewords, codewords) {
		this.numDataCodewords = numDataCodewords;
		this.codewords = codewords;

		this.__defineGetter__("NumDataCodewords", function() {
			return this.numDataCodewords;
		});
		this.__defineGetter__("Codewords", function() {
			return this.codewords;
		});
	}

	DataBlock.getDataBlocks = function(rawCodewords, version, ecLevel) {
		var i, j;

		if (rawCodewords.length !== version.TotalCodewords) {
			throw "ArgumentException";
		}

		// Figure out the number and size of data blocks used by this version and
		// error correction level
		var ecBlocks = version.getECBlocksForLevel(ecLevel);

		// First count the total number of data blocks
		var totalBlocks = 0;
		var ecBlockArray = ecBlocks.getECBlocks();
		for (i = 0; i < ecBlockArray.length; i++) {
			totalBlocks += ecBlockArray[i].Count;
		}

		// Now establish DataBlocks of the appropriate size and number of data codewords
		var result = new Array(totalBlocks);
		var numResultBlocks = 0;
		for (j = 0; j < ecBlockArray.length; j++) {
			ecBlock = ecBlockArray[j];
			for (i = 0; i < ecBlock.Count; i++) {
				var numDataCodewords = ecBlock.DataCodewords;
				var numBlockCodewords = ecBlocks.ECCodewordsPerBlock + numDataCodewords;
				result[numResultBlocks++] = new DataBlock(numDataCodewords, new Array(numBlockCodewords));
			}
		}

		// All blocks have the same amount of data, except that the last n
		// (where n may be 0) have 1 more byte. Figure out where these start.
		var shorterBlocksTotalCodewords = result[0].codewords.length;
		var longerBlocksStartAt = result.length - 1;
		while (longerBlocksStartAt >= 0) {
			var numCodewords = result[longerBlocksStartAt].codewords.length;
			if (numCodewords === shorterBlocksTotalCodewords) {
				break;
			}
			longerBlocksStartAt--;
		}
		longerBlocksStartAt++;

		var shorterBlocksNumDataCodewords = shorterBlocksTotalCodewords - ecBlocks.ECCodewordsPerBlock;
		// The last elements of result may be 1 element longer;
		// first fill out as many elements as all of them have
		var rawCodewordsOffset = 0;
		for (i = 0; i < shorterBlocksNumDataCodewords; i++) {
			for (j = 0; j < numResultBlocks; j++) {
				result[j].codewords[i] = rawCodewords[rawCodewordsOffset++];
			}
		}
		// Fill out the last data block in the longer ones
		for (j = longerBlocksStartAt; j < numResultBlocks; j++) {
			result[j].codewords[shorterBlocksNumDataCodewords] = rawCodewords[rawCodewordsOffset++];
		}
		// Now add in error correction blocks
		var max = result[0].codewords.length;
		for (i = shorterBlocksNumDataCodewords; i < max; i++) {
			for (j = 0; j < numResultBlocks; j++) {
				var iOffset = j < longerBlocksStartAt ? i : i + 1;
				result[j].codewords[iOffset] = rawCodewords[rawCodewordsOffset++];
			}
		}
		return result;
	};



	function BitMatrixParser(bitMatrix) {
		var dimension = bitMatrix.Dimension;
		if (dimension < 21 || (dimension & 0x03) !== 1) {
			throw "Error BitMatrixParser";
		}
		this.bitMatrix = bitMatrix;
		this.parsedVersion = null;
		this.parsedFormatInfo = null;

		this.copyBit = function(i, j, versionBits) {
			return this.bitMatrix.get_Renamed(i, j) ? (versionBits << 1) | 0x1 : versionBits << 1;
		};

		this.readFormatInformation = function() {
			var i, j;
			if (this.parsedFormatInfo !== null) {
				return this.parsedFormatInfo;
			}

			// Read top-left format info bits
			var formatInfoBits = 0;
			for (i = 0; i < 6; i++) {
				formatInfoBits = this.copyBit(i, 8, formatInfoBits);
			}
			// .. and skip a bit in the timing pattern ...
			formatInfoBits = this.copyBit(7, 8, formatInfoBits);
			formatInfoBits = this.copyBit(8, 8, formatInfoBits);
			formatInfoBits = this.copyBit(8, 7, formatInfoBits);
			// .. and skip a bit in the timing pattern ...
			for (j = 5; j >= 0; j--) {
				formatInfoBits = this.copyBit(8, j, formatInfoBits);
			}

			this.parsedFormatInfo = FormatInformation.decodeFormatInformation(formatInfoBits);
			if (this.parsedFormatInfo !== null) {
				return this.parsedFormatInfo;
			}

			// Hmm, failed. Try the top-right/bottom-left pattern
			var dimension = this.bitMatrix.Dimension;
			formatInfoBits = 0;
			var iMin = dimension - 8;
			for (i = dimension - 1; i >= iMin; i--) {
				formatInfoBits = this.copyBit(i, 8, formatInfoBits);
			}
			for (j = dimension - 7; j < dimension; j++) {
				formatInfoBits = this.copyBit(8, j, formatInfoBits);
			}

			this.parsedFormatInfo = FormatInformation.decodeFormatInformation(formatInfoBits);
			if (this.parsedFormatInfo !== null) {
				return this.parsedFormatInfo;
			}
			throw "Error readFormatInformation";
		};

		this.readVersion = function() {
			var i, j;
			if (this.parsedVersion !== null) {
				return this.parsedVersion;
			}

			var dimension = this.bitMatrix.Dimension;

			var provisionalVersion = (dimension - 17) >> 2;
			if (provisionalVersion <= 6) {
				return Version.getVersionForNumber(provisionalVersion);
			}

			// Read top-right version info: 3 wide by 6 tall
			var versionBits = 0;
			var ijMin = dimension - 11;
			for (j = 5; j >= 0; j--) {
				for (i = dimension - 9; i >= ijMin; i--) {
					versionBits = this.copyBit(i, j, versionBits);
				}
			}

			this.parsedVersion = Version.decodeVersionInformation(versionBits);
			if (this.parsedVersion !== null && this.parsedVersion.DimensionForVersion === dimension) {
				return this.parsedVersion;
			}

			// Hmm, failed. Try bottom left: 6 wide by 3 tall
			versionBits = 0;
			for (i = 5; i >= 0; i--) {
				for (j = dimension - 9; j >= ijMin; j--) {
					versionBits = this.copyBit(i, j, versionBits);
				}
			}

			this.parsedVersion = Version.decodeVersionInformation(versionBits);
			if (this.parsedVersion !== null && this.parsedVersion.DimensionForVersion === dimension) {
				return this.parsedVersion;
			}
			throw "Error readVersion";
		};

		this.readCodewords = function() {

			var formatInfo = this.readFormatInformation();
			var version = this.readVersion();

			// Get the data mask for the format used in this QR Code. This will exclude
			// some bits from reading as we wind through the bit matrix.
			var dataMask = DataMask.forReference(formatInfo.DataMask);
			var dimension = this.bitMatrix.Dimension;
			dataMask.unmaskBitMatrix(this.bitMatrix, dimension);

			var functionPattern = version.buildFunctionPattern();

			var readingUp = true;
			var result = new Array(version.TotalCodewords);
			var resultOffset = 0;
			var currentByte = 0;
			var bitsRead = 0;
			// Read columns in pairs, from right to left
			for (var j = dimension - 1; j > 0; j -= 2) {
				if (j === 6) {
					// Skip whole column with vertical alignment pattern;
					// saves time and makes the other code proceed more cleanly
					j--;
				}
				// Read alternatingly from bottom to top then top to bottom
				for (var count = 0; count < dimension; count++) {
					var i = readingUp ? dimension - 1 - count : count;
					for (var col = 0; col < 2; col++) {
						// Ignore bits covered by the function pattern
						if (!functionPattern.get_Renamed(j - col, i)) {
							// Read a bit
							bitsRead++;
							currentByte <<= 1;
							if (this.bitMatrix.get_Renamed(j - col, i)) {
								currentByte |= 1;
							}
							// If we've made a whole byte, save it off
							if (bitsRead === 8) {
								result[resultOffset++] = currentByte;
								bitsRead = 0;
								currentByte = 0;
							}
						}
					}
				}
				readingUp ^= true; // readingUp = !readingUp; // switch directions
			}
			if (resultOffset !== version.TotalCodewords) {
				throw "Error readCodewords";
			}
			return result;
		};
	}


	DataMask = {};

	DataMask.forReference = function(reference) {
		if (reference < 0 || reference > 7) {
			throw "System.ArgumentException";
		}
		return DataMask.DATA_MASKS[reference];
	};

	function DataMask000() {
		this.unmaskBitMatrix = function(bits, dimension) {
			for (var i = 0; i < dimension; i++) {
				for (var j = 0; j < dimension; j++) {
					if (this.isMasked(i, j)) {
						bits.flip(j, i);
					}
				}
			}
		};
		this.isMasked = function(i, j) {
			return ((i + j) & 0x01) === 0;
		};
	}

	function DataMask001() {
		this.unmaskBitMatrix = function(bits, dimension) {
			for (var i = 0; i < dimension; i++) {
				for (var j = 0; j < dimension; j++) {
					if (this.isMasked(i, j)) {
						bits.flip(j, i);
					}
				}
			}
		};
		this.isMasked = function(i, j) {
			return (i & 0x01) === 0;
		};
	}

	function DataMask010() {
		this.unmaskBitMatrix = function(bits, dimension) {
			for (var i = 0; i < dimension; i++) {
				for (var j = 0; j < dimension; j++) {
					if (this.isMasked(i, j)) {
						bits.flip(j, i);
					}
				}
			}
		};
		this.isMasked = function(i, j) {
			return j % 3 === 0;
		};
	}

	function DataMask011() {
		this.unmaskBitMatrix = function(bits, dimension) {
			for (var i = 0; i < dimension; i++) {
				for (var j = 0; j < dimension; j++) {
					if (this.isMasked(i, j)) {
						bits.flip(j, i);
					}
				}
			}
		};
		this.isMasked = function(i, j) {
			return (i + j) % 3 === 0;
		};
	}

	function DataMask100() {
		this.unmaskBitMatrix = function(bits, dimension) {
			for (var i = 0; i < dimension; i++) {
				for (var j = 0; j < dimension; j++) {
					if (this.isMasked(i, j)) {
						bits.flip(j, i);
					}
				}
			}
		};
		this.isMasked = function(i, j) {
			return (((URShift(i, 1)) + (j / 3)) & 0x01) === 0;
		};
	}

	function DataMask101() {
		this.unmaskBitMatrix = function(bits, dimension) {
			for (var i = 0; i < dimension; i++) {
				for (var j = 0; j < dimension; j++) {
					if (this.isMasked(i, j)) {
						bits.flip(j, i);
					}
				}
			}
		};
		this.isMasked = function(i, j) {
			var temp = i * j;
			return (temp & 0x01) + (temp % 3) === 0;
		};
	}

	function DataMask110() {
		this.unmaskBitMatrix = function(bits, dimension) {
			for (var i = 0; i < dimension; i++) {
				for (var j = 0; j < dimension; j++) {
					if (this.isMasked(i, j)) {
						bits.flip(j, i);
					}
				}
			}
		};
		this.isMasked = function(i, j) {
			var temp = i * j;
			return (((temp & 0x01) + (temp % 3)) & 0x01) === 0;
		};
	}

	function DataMask111() {
		this.unmaskBitMatrix = function(bits, dimension) {
			for (var i = 0; i < dimension; i++) {
				for (var j = 0; j < dimension; j++) {
					if (this.isMasked(i, j)) {
						bits.flip(j, i);
					}
				}
			}
		};
		this.isMasked = function(i, j) {
			return ((((i + j) & 0x01) + ((i * j) % 3)) & 0x01) === 0;
		};
	}

	DataMask.DATA_MASKS = new Array(new DataMask000(), new DataMask001(), new DataMask010(), new DataMask011(), new DataMask100(), new DataMask101(), new DataMask110(), new DataMask111());


	function ReedSolomonDecoder(field) {
		this.field = field;
		this.decode = function(received, twoS) {
			var i;
			var poly = new GF256Poly(this.field, received);
			var syndromeCoefficients = new Array(twoS);
			for (i = 0; i < syndromeCoefficients.length; i++) syndromeCoefficients[i] = 0;
			var dataMatrix = false; //this.field.Equals(GF256.DATA_MATRIX_FIELD);
			var noError = true;
			for (i = 0; i < twoS; i++) {
				// Thanks to sanfordsquires for this fix:
				var eval1 = poly.evaluateAt(this.field.exp(dataMatrix ? i + 1 : i));
				syndromeCoefficients[syndromeCoefficients.length - 1 - i] = eval1;
				if (eval1 !== 0) {
					noError = false;
				}
			}
			if (noError) {
				return;
			}
			var syndrome = new GF256Poly(this.field, syndromeCoefficients);
			var sigmaOmega = this.runEuclideanAlgorithm(this.field.buildMonomial(twoS, 1), syndrome, twoS);
			var sigma = sigmaOmega[0];
			var omega = sigmaOmega[1];
			var errorLocations = this.findErrorLocations(sigma);
			var errorMagnitudes = this.findErrorMagnitudes(omega, errorLocations, dataMatrix);
			for (i = 0; i < errorLocations.length; i++) {
				var position = received.length - 1 - this.field.log(errorLocations[i]);
				if (position < 0) {
					throw "ReedSolomonException Bad error location";
				}
				received[position] = GF256.addOrSubtract(received[position], errorMagnitudes[i]);
			}
		};

		this.runEuclideanAlgorithm = function(a, b, R) {
			// Assume a's degree is >= b's
			if (a.Degree < b.Degree) {
				var temp = a;
				a = b;
				b = temp;
			}

			var rLast = a;
			var r = b;
			var sLast = this.field.One;
			var s = this.field.Zero;
			var tLast = this.field.Zero;
			var t = this.field.One;

			// Run Euclidean algorithm until r's degree is less than R/2
			while (r.Degree >= Math.floor(R / 2)) {
				var rLastLast = rLast;
				var sLastLast = sLast;
				var tLastLast = tLast;
				rLast = r;
				sLast = s;
				tLast = t;

				// Divide rLastLast by rLast, with quotient in q and remainder in r
				if (rLast.Zero) {
					// Oops, Euclidean algorithm already terminated?
					throw "r_{i-1} was zero";
				}
				r = rLastLast;
				var q = this.field.Zero;
				var denominatorLeadingTerm = rLast.getCoefficient(rLast.Degree);
				var dltInverse = this.field.inverse(denominatorLeadingTerm);
				while (r.Degree >= rLast.Degree && !r.Zero) {
					var degreeDiff = r.Degree - rLast.Degree;
					var scale = this.field.multiply(r.getCoefficient(r.Degree), dltInverse);
					q = q.addOrSubtract(this.field.buildMonomial(degreeDiff, scale));
					r = r.addOrSubtract(rLast.multiplyByMonomial(degreeDiff, scale));
					//r.EXE();
				}

				s = q.multiply1(sLast).addOrSubtract(sLastLast);
				t = q.multiply1(tLast).addOrSubtract(tLastLast);
			}

			var sigmaTildeAtZero = t.getCoefficient(0);
			if (sigmaTildeAtZero === 0) {
				throw "ReedSolomonException sigmaTilde(0) was zero";
			}

			var inverse = this.field.inverse(sigmaTildeAtZero);
			var sigma = t.multiply2(inverse);
			var omega = r.multiply2(inverse);
			return new Array(sigma, omega);
		};

		this.findErrorLocations = function(errorLocator) {
			// This is a direct application of Chien's search
			var numErrors = errorLocator.Degree;
			if (numErrors === 1) {
				// shortcut
				return new Array(errorLocator.getCoefficient(1));
			}
			var result = new Array(numErrors);
			var e = 0;
			for (var i = 1; i < 256 && e < numErrors; i++) {
				if (errorLocator.evaluateAt(i) === 0) {
					result[e] = this.field.inverse(i);
					e++;
				}
			}
			if (e !== numErrors) {
				throw "Error locator degree does not match number of roots";
			}
			return result;
		};

		this.findErrorMagnitudes = function(errorEvaluator, errorLocations, dataMatrix) {
			// This is directly applying Forney's Formula
			var s = errorLocations.length;
			var result = new Array(s);
			for (var i = 0; i < s; i++) {
				var xiInverse = this.field.inverse(errorLocations[i]);
				var denominator = 1;
				for (var j = 0; j < s; j++) {
					if (i !== j) {
						denominator = this.field.multiply(denominator, GF256.addOrSubtract(1, this.field.multiply(errorLocations[j], xiInverse)));
					}
				}
				result[i] = this.field.multiply(errorEvaluator.evaluateAt(xiInverse), this.field.inverse(denominator));
				// Thanks to sanfordsquires for this fix:
				if (dataMatrix) {
					result[i] = this.field.multiply(result[i], xiInverse);
				}
			}
			return result;
		};
	}


	function GF256Poly(field, coefficients) {
		if (coefficients === null || coefficients.length === 0) {
			throw "System.ArgumentException";
		}
		this.field = field;
		var coefficientsLength = coefficients.length;
		if (coefficientsLength > 1 && coefficients[0] === 0) {
			// Leading term must be non-zero for anything except the constant polynomial "0"
			var firstNonZero = 1;
			while (firstNonZero < coefficientsLength && coefficients[firstNonZero] === 0) {
				firstNonZero++;
			}
			if (firstNonZero === coefficientsLength) {
				this.coefficients = field.Zero.coefficients;
			} else {
				this.coefficients = new Array(coefficientsLength - firstNonZero);
				for (var i = 0; i < this.coefficients.length; i++) this.coefficients[i] = 0;
				//Array.Copy(coefficients, firstNonZero, this.coefficients, 0, this.coefficients.length);
				for (var ci = 0; ci < this.coefficients.length; ci++) this.coefficients[ci] = coefficients[firstNonZero + ci];
			}
		} else {
			this.coefficients = coefficients;
		}

		this.__defineGetter__("Zero", function() {
			return this.coefficients[0] === 0;
		});
		this.__defineGetter__("Degree", function() {
			return this.coefficients.length - 1;
		});
		this.__defineGetter__("Coefficients", function() {
			return this.coefficients;
		});

		this.getCoefficient = function(degree) {
			return this.coefficients[this.coefficients.length - 1 - degree];
		};

		this.evaluateAt = function(a) {
			var i;
			if (a === 0) {
				// Just return the x^0 coefficient
				return this.getCoefficient(0);
			}
			var size = this.coefficients.length;
			if (a === 1) {
				// Just the sum of the coefficients
				var result = 0;
				for (i = 0; i < size; i++) {
					result = GF256.addOrSubtract(result, this.coefficients[i]);
				}
				return result;
			}
			var result2 = this.coefficients[0];
			for (i = 1; i < size; i++) {
				result2 = GF256.addOrSubtract(this.field.multiply(a, result2), this.coefficients[i]);
			}
			return result2;
		};

		this.addOrSubtract = function(other) {
			if (this.field !== other.field) {
				throw "GF256Polys do not have same GF256 field";
			}
			if (this.Zero) {
				return other;
			}
			if (other.Zero) {
				return this;
			}

			var smallerCoefficients = this.coefficients;
			var largerCoefficients = other.coefficients;
			if (smallerCoefficients.length > largerCoefficients.length) {
				var temp = smallerCoefficients;
				smallerCoefficients = largerCoefficients;
				largerCoefficients = temp;
			}
			var sumDiff = new Array(largerCoefficients.length);
			var lengthDiff = largerCoefficients.length - smallerCoefficients.length;
			// Copy high-order terms only found in higher-degree polynomial's coefficients
			//Array.Copy(largerCoefficients, 0, sumDiff, 0, lengthDiff);
			for (var ci = 0; ci < lengthDiff; ci++) sumDiff[ci] = largerCoefficients[ci];

			for (var i = lengthDiff; i < largerCoefficients.length; i++) {
				sumDiff[i] = GF256.addOrSubtract(smallerCoefficients[i - lengthDiff], largerCoefficients[i]);
			}

			return new GF256Poly(field, sumDiff);
		};

		this.multiply1 = function(other) {
			if (this.field !== other.field) {
				throw "GF256Polys do not have same GF256 field";
			}
			if (this.Zero || other.Zero) {
				return this.field.Zero;
			}
			var aCoefficients = this.coefficients;
			var aLength = aCoefficients.length;
			var bCoefficients = other.coefficients;
			var bLength = bCoefficients.length;
			var product = new Array(aLength + bLength - 1);
			for (var i = 0; i < aLength; i++) {
				var aCoeff = aCoefficients[i];
				for (var j = 0; j < bLength; j++) {
					product[i + j] = GF256.addOrSubtract(product[i + j], this.field.multiply(aCoeff, bCoefficients[j]));
				}
			}
			return new GF256Poly(this.field, product);
		};

		this.multiply2 = function(scalar) {
			if (scalar === 0) {
				return this.field.Zero;
			}
			if (scalar === 1) {
				return this;
			}
			var size = this.coefficients.length;
			var product = new Array(size);
			for (var i = 0; i < size; i++) {
				product[i] = this.field.multiply(this.coefficients[i], scalar);
			}
			return new GF256Poly(this.field, product);
		};

		this.multiplyByMonomial = function(degree, coefficient) {
			var i;
			if (degree < 0) {
				throw "System.ArgumentException";
			}
			if (coefficient === 0) {
				return this.field.Zero;
			}
			var size = this.coefficients.length;
			var product = new Array(size + degree);
			for (i = 0; i < product.length; i++) product[i] = 0;
			for (i = 0; i < size; i++) {
				product[i] = this.field.multiply(this.coefficients[i], coefficient);
			}
			return new GF256Poly(this.field, product);
		};

		this.divide = function(other) {
			if (this.field !== other.field) {
				throw "GF256Polys do not have same GF256 field";
			}
			if (other.Zero) {
				throw "Divide by 0";
			}

			var quotient = this.field.Zero;
			var remainder = this;

			var denominatorLeadingTerm = other.getCoefficient(other.Degree);
			var inverseDenominatorLeadingTerm = this.field.inverse(denominatorLeadingTerm);

			while (remainder.Degree >= other.Degree && !remainder.Zero) {
				var degreeDifference = remainder.Degree - other.Degree;
				var scale = this.field.multiply(remainder.getCoefficient(remainder.Degree), inverseDenominatorLeadingTerm);
				var term = other.multiplyByMonomial(degreeDifference, scale);
				var iterationQuotient = this.field.buildMonomial(degreeDifference, scale);
				quotient = quotient.addOrSubtract(iterationQuotient);
				remainder = remainder.addOrSubtract(term);
			}

			return new Array(quotient, remainder);
		};
	}


	function GF256(primitive) {
		this.expTable = new Array(256);
		this.logTable = new Array(256);
		var x = 1,
			i;
		for (i = 0; i < 256; i++) {
			this.expTable[i] = x;
			x <<= 1; // x = x * 2; we're assuming the generator alpha is 2
			if (x >= 0x100) {
				x ^= primitive;
			}
		}
		for (i = 0; i < 255; i++) {
			this.logTable[this.expTable[i]] = i;
		}
		// logTable[0] === 0 but this should never be used
		var at0 = new Array(1);
		at0[0] = 0;
		this.zero = new GF256Poly(this, new Array(at0));
		var at1 = new Array(1);
		at1[0] = 1;
		this.one = new GF256Poly(this, new Array(at1));

		this.__defineGetter__("Zero", function() {
			return this.zero;
		});
		this.__defineGetter__("One", function() {
			return this.one;
		});
		this.buildMonomial = function(degree, coefficient) {
			if (degree < 0) {
				throw "System.ArgumentException";
			}
			if (coefficient === 0) {
				return zero;
			}
			var coefficients = new Array(degree + 1);
			for (var i = 0; i < coefficients.length; i++) coefficients[i] = 0;
			coefficients[0] = coefficient;
			return new GF256Poly(this, coefficients);
		};
		this.exp = function(a) {
			return this.expTable[a];
		};
		this.log = function(a) {
			if (a === 0) {
				throw "System.ArgumentException";
			}
			return this.logTable[a];
		};
		this.inverse = function(a) {
			if (a === 0) {
				throw "System.ArithmeticException";
			}
			return this.expTable[255 - this.logTable[a]];
		};
		this.multiply = function(a, b) {
			if (a === 0 || b === 0) {
				return 0;
			}
			if (a === 1) {
				return b;
			}
			if (b === 1) {
				return a;
			}
			return this.expTable[(this.logTable[a] + this.logTable[b]) % 255];
		};
	}

	GF256.QR_CODE_FIELD = new GF256(0x011D);
	GF256.DATA_MATRIX_FIELD = new GF256(0x012D);

	GF256.addOrSubtract = function(a, b) {
		return a ^ b;
	};


	Decoder = {};
	Decoder.rsDecoder = new ReedSolomonDecoder(GF256.QR_CODE_FIELD);

	Decoder.correctErrors = function(codewordBytes, numDataCodewords) {
		var numCodewords = codewordBytes.length,
			i;
		// First read into an array of ints, i
		var codewordsInts = new Array(numCodewords);
		for (i = 0; i < numCodewords; i++) {
			codewordsInts[i] = codewordBytes[i] & 0xFF;
		}
		var numECCodewords = codewordBytes.length - numDataCodewords;
		try {
			Decoder.rsDecoder.decode(codewordsInts, numECCodewords);
		} catch (rse) {
			throw rse;
		}
		for (i = 0; i < numDataCodewords; i++) {
			codewordBytes[i] = codewordsInts[i];
		}
	};

	Decoder.decode = function(bits) {
		var i, j;
		var parser = new BitMatrixParser(bits);
		var version = parser.readVersion();
		var ecLevel = parser.readFormatInformation().ErrorCorrectionLevel;

		var codewords = parser.readCodewords();
		var dataBlocks = DataBlock.getDataBlocks(codewords, version, ecLevel);
		var totalBytes = 0;

		for (i = 0; i < dataBlocks.Length; i++) {
			totalBytes += dataBlocks[i].NumDataCodewords;
		}
		var resultBytes = new Array(totalBytes);
		var resultOffset = 0;

		// Error-correct and copy data blocks together into a stream of bytes
		for (j = 0; j < dataBlocks.length; j++) {
			var dataBlock = dataBlocks[j];
			var codewordBytes = dataBlock.Codewords;
			var numDataCodewords = dataBlock.NumDataCodewords;
			Decoder.correctErrors(codewordBytes, numDataCodewords);
			for (i = 0; i < numDataCodewords; i++) {
				resultBytes[resultOffset++] = codewordBytes[i];
			}
		}

		var reader = new QRCodeDataBlockReader(resultBytes, version.VersionNumber, ecLevel.Bits);
		return reader;
	};

	var qrcode = {};
	qrcode.imagedata = null;
	qrcode.width = 0;
	qrcode.height = 0;
	qrcode.qrCodeSymbol = null;
	qrcode.debug = false;

	qrcode.sizeOfDataLengthInfo = [
		[10, 9, 8, 8],
		[12, 11, 16, 10],
		[14, 13, 16, 12]
	];

	qrcode.callback = null;

	qrcode.decode = function(src) {

		if (arguments.length === 0) {
			var canvas_qr = document.getElementById("qr-scanner-qr-canvas");
			var context = canvas_qr.getContext('2d');
			qrcode.width = canvas_qr.width;
			qrcode.height = canvas_qr.height;
			qrcode.imagedata = context.getImageData(0, 0, qrcode.width, qrcode.height);
			qrcode.result = qrcode.process(context);
			if (qrcode.callback !== null) qrcode.callback(qrcode.result);
			return qrcode.result;
		} else {
			var image = new Image();
			image.onload = function() {
				//var canvas_qr = document.getElementById("qr-canvas");
				var canvas_qr = document.createElement('canvas');
				var context = canvas_qr.getContext('2d');
				var canvas_out = document.getElementById("out-canvas");
				if (canvas_out !== null) {
					var outctx = canvas_out.getContext('2d');
					outctx.clearRect(0, 0, 320, 240);
					outctx.drawImage(image, 0, 0, 320, 240);
				}
				canvas_qr.width = image.width;
				canvas_qr.height = image.height;
				context.drawImage(image, 0, 0);
				qrcode.width = image.width;
				qrcode.height = image.height;
				try {
					qrcode.imagedata = context.getImageData(0, 0, image.width, image.height);
				} catch (e) {
					qrcode.result = "Cross domain image reading not supported in your browser! Save it to your computer then drag and drop the file!";
					if (qrcode.callback !== null) qrcode.callback(qrcode.result);
					return;
				}

				try {
					qrcode.result = qrcode.process(context);
				} catch (e) {
					qrcode.result = "error decoding QR Code";
				}
				if (qrcode.callback !== null) qrcode.callback(qrcode.result);
			};
			image.src = src;
		}
	};

	qrcode.decode_utf8 = function(s) {
		return decodeURIComponent(escape(s));
	};

	qrcode.process = function(ctx) {

		var start = new Date().getTime();

		var image = qrcode.grayScaleToBitmap(qrcode.grayscale());
		if (qrcode.debug) {
			for (var y = 0; y < qrcode.height; y++) {
				for (var x = 0; x < qrcode.width; x++) {
					var point = (x * 4) + (y * qrcode.width * 4);
					qrcode.imagedata.data[point] = image[x + y * qrcode.width] ? 0 : 0;
					qrcode.imagedata.data[point + 1] = image[x + y * qrcode.width] ? 0 : 0;
					qrcode.imagedata.data[point + 2] = image[x + y * qrcode.width] ? 255 : 0;
				}
			}
			ctx.putImageData(qrcode.imagedata, 0, 0);
		}

		var detector = new Detector(image);
		var qRCodeMatrix = detector.detect();

		if (qrcode.debug) ctx.putImageData(qrcode.imagedata, 0, 0);

		var reader = Decoder.decode(qRCodeMatrix.bits);
		var data = reader.DataByte;
		var str = "";
		for (var i = 0; i < data.length; i++) {
			for (var j = 0; j < data[i].length; j++)
			str += String.fromCharCode(data[i][j]);
		}

		var end = new Date().getTime();
		var time = end - start;

		return str;
		//alert("Time:" + time + " Code: "+str);
	};

	qrcode.getPixel = function(x, y) {
		if (qrcode.width < x) {
			throw "point error";
		}
		if (qrcode.height < y) {
			throw "point error";
		}
		point = (x * 4) + (y * qrcode.width * 4);
		p = (qrcode.imagedata.data[point] * 33 + qrcode.imagedata.data[point + 1] * 34 + qrcode.imagedata.data[point + 2] * 33) / 100;
		return p;
	};

	qrcode.binarize = function(th) {
		var ret = new Array(qrcode.width * qrcode.height);
		for (var y = 0; y < qrcode.height; y++) {
			for (var x = 0; x < qrcode.width; x++) {
				var gray = qrcode.getPixel(x, y);

				ret[x + y * qrcode.width] = gray <= th ? true : false;
			}
		}
		return ret;
	};

	qrcode.getMiddleBrightnessPerArea = function(image) {
		var ay, ax;
		var numSqrtArea = 4;
		//obtain middle brightness((min + max) / 2) per area
		var areaWidth = Math.floor(qrcode.width / numSqrtArea);
		var areaHeight = Math.floor(qrcode.height / numSqrtArea);
		var minmax = new Array(numSqrtArea);
		for (var i = 0; i < numSqrtArea; i++) {
			minmax[i] = new Array(numSqrtArea);
			for (var i2 = 0; i2 < numSqrtArea; i2++) {
				minmax[i][i2] = new Array(0, 0);
			}
		}
		for (ay = 0; ay < numSqrtArea; ay++) {
			for (ax = 0; ax < numSqrtArea; ax++) {
				minmax[ax][ay][0] = 0xFF;
				for (var dy = 0; dy < areaHeight; dy++) {
					for (var dx = 0; dx < areaWidth; dx++) {
						var target = image[areaWidth * ax + dx + (areaHeight * ay + dy) * qrcode.width];
						if (target < minmax[ax][ay][0]) minmax[ax][ay][0] = target;
						if (target > minmax[ax][ay][1]) minmax[ax][ay][1] = target;
					}
				}
			}
		}
		var middle = new Array(numSqrtArea);
		for (var i3 = 0; i3 < numSqrtArea; i3++) {
			middle[i3] = new Array(numSqrtArea);
		}
		for (ay = 0; ay < numSqrtArea; ay++) {
			for (ax = 0; ax < numSqrtArea; ax++) {
				middle[ax][ay] = Math.floor((minmax[ax][ay][0] + minmax[ax][ay][1]) / 2);
			}
		}

		return middle;
	};

	qrcode.grayScaleToBitmap = function(grayScale) {
		var middle = qrcode.getMiddleBrightnessPerArea(grayScale);
		var sqrtNumArea = middle.length;
		var areaWidth = Math.floor(qrcode.width / sqrtNumArea);
		var areaHeight = Math.floor(qrcode.height / sqrtNumArea);
		var bitmap = new Array(qrcode.height * qrcode.width);

		for (var ay = 0; ay < sqrtNumArea; ay++) {
			for (var ax = 0; ax < sqrtNumArea; ax++) {
				for (var dy = 0; dy < areaHeight; dy++) {
					for (var dx = 0; dx < areaWidth; dx++) {
						bitmap[areaWidth * ax + dx + (areaHeight * ay + dy) * qrcode.width] = (grayScale[areaWidth * ax + dx + (areaHeight * ay + dy) * qrcode.width] < middle[ax][ay]) ? true : false;
					}
				}
			}
		}
		return bitmap;
	};

	qrcode.grayscale = function() {
		var ret = new Array(qrcode.width * qrcode.height);
		for (var y = 0; y < qrcode.height; y++) {
			for (var x = 0; x < qrcode.width; x++) {
				var gray = qrcode.getPixel(x, y);

				ret[x + y * qrcode.width] = gray;
			}
		}
		return ret;
	};

	function URShift(number, bits) {
		if (number >= 0) return number >> bits;
		else return (number >> bits) + (2 << ~bits);
	}

	Array.prototype.remove = function(from, to) {
		var rest = this.slice((to || from) + 1 || this.length);
		this.length = from < 0 ? this.length + from : from;
		return this.push.apply(this, rest);
	};

	var MIN_SKIP = 3;
	var MAX_MODULES = 57;
	var INTEGER_MATH_SHIFT = 8;
	var CENTER_QUORUM = 2;

	qrcode.orderBestPatterns = function(patterns) {

		function distance(pattern1, pattern2) {
			xDiff = pattern1.X - pattern2.X;
			yDiff = pattern1.Y - pattern2.Y;
			return Math.sqrt((xDiff * xDiff + yDiff * yDiff));
		}

		function crossProductZ(pointA, pointB, pointC) {
			var bX = pointB.x;
			var bY = pointB.y;
			return ((pointC.x - bX) * (pointA.y - bY)) - ((pointC.y - bY) * (pointA.x - bX));
		}

		var zeroOneDistance = distance(patterns[0], patterns[1]);
		var oneTwoDistance = distance(patterns[1], patterns[2]);
		var zeroTwoDistance = distance(patterns[0], patterns[2]);

		var pointA, pointB, pointC;
		// Assume one closest to other two is B; A and C will just be guesses at first
		if (oneTwoDistance >= zeroOneDistance && oneTwoDistance >= zeroTwoDistance) {
			pointB = patterns[0];
			pointA = patterns[1];
			pointC = patterns[2];
		} else if (zeroTwoDistance >= oneTwoDistance && zeroTwoDistance >= zeroOneDistance) {
			pointB = patterns[1];
			pointA = patterns[0];
			pointC = patterns[2];
		} else {
			pointB = patterns[2];
			pointA = patterns[0];
			pointC = patterns[1];
		}

		if (crossProductZ(pointA, pointB, pointC) < 0.0) {
			var temp = pointA;
			pointA = pointC;
			pointC = temp;
		}

		patterns[0] = pointA;
		patterns[1] = pointB;
		patterns[2] = pointC;
	};


	function FinderPattern(posX, posY, estimatedModuleSize) {
		this.x = posX;
		this.y = posY;
		this.count = 1;
		this.estimatedModuleSize = estimatedModuleSize;

		this.__defineGetter__("EstimatedModuleSize", function() {
			return this.estimatedModuleSize;
		});
		this.__defineGetter__("Count", function() {
			return this.count;
		});
		this.__defineGetter__("X", function() {
			return this.x;
		});
		this.__defineGetter__("Y", function() {
			return this.y;
		});
		this.incrementCount = function() {
			this.count++;
		};
		this.aboutEquals = function(moduleSize, i, j) {
			if (Math.abs(i - this.y) <= moduleSize && Math.abs(j - this.x) <= moduleSize) {
				var moduleSizeDiff = Math.abs(moduleSize - this.estimatedModuleSize);
				return moduleSizeDiff <= 1.0 || moduleSizeDiff / this.estimatedModuleSize <= 1.0;
			}
			return false;
		};
	}

	function FinderPatternInfo(patternCenters) {
		this.bottomLeft = patternCenters[0];
		this.topLeft = patternCenters[1];
		this.topRight = patternCenters[2];
		this.__defineGetter__("BottomLeft", function() {
			return this.bottomLeft;
		});
		this.__defineGetter__("TopLeft", function() {
			return this.topLeft;
		});
		this.__defineGetter__("TopRight", function() {
			return this.topRight;
		});
	}

	function FinderPatternFinder() {
		this.image = null;
		this.possibleCenters = [];
		this.hasSkipped = false;
		this.crossCheckStateCount = new Array(0, 0, 0, 0, 0);
		this.resultPointCallback = null;

		this.__defineGetter__("CrossCheckStateCount", function() {
			this.crossCheckStateCount[0] = 0;
			this.crossCheckStateCount[1] = 0;
			this.crossCheckStateCount[2] = 0;
			this.crossCheckStateCount[3] = 0;
			this.crossCheckStateCount[4] = 0;
			return this.crossCheckStateCount;
		});

		this.foundPatternCross = function(stateCount) {
			var totalModuleSize = 0;
			for (var i = 0; i < 5; i++) {
				var count = stateCount[i];
				if (count === 0) {
					return false;
				}
				totalModuleSize += count;
			}
			if (totalModuleSize < 7) {
				return false;
			}
			var moduleSize = Math.floor((totalModuleSize << INTEGER_MATH_SHIFT) / 7);
			var maxVariance = Math.floor(moduleSize / 2);
			// Allow less than 50% variance from 1-1-3-1-1 proportions
			return Math.abs(moduleSize - (stateCount[0] << INTEGER_MATH_SHIFT)) < maxVariance && Math.abs(moduleSize - (stateCount[1] << INTEGER_MATH_SHIFT)) < maxVariance && Math.abs(3 * moduleSize - (stateCount[2] << INTEGER_MATH_SHIFT)) < 3 * maxVariance && Math.abs(moduleSize - (stateCount[3] << INTEGER_MATH_SHIFT)) < maxVariance && Math.abs(moduleSize - (stateCount[4] << INTEGER_MATH_SHIFT)) < maxVariance;
		};
		this.centerFromEnd = function(stateCount, end) {
			return (end - stateCount[4] - stateCount[3]) - stateCount[2] / 2.0;
		};
		this.crossCheckVertical = function(startI, centerJ, maxCount, originalStateCountTotal) {
			var image = this.image;

			var maxI = qrcode.height;
			var stateCount = this.CrossCheckStateCount;

			// Start counting up from center
			var i = startI;
			while (i >= 0 && image[centerJ + i * qrcode.width]) {
				stateCount[2]++;
				i--;
			}
			if (i < 0) {
				return NaN;
			}
			while (i >= 0 && !image[centerJ + i * qrcode.width] && stateCount[1] <= maxCount) {
				stateCount[1]++;
				i--;
			}
			// If already too many modules in this state or ran off the edge:
			if (i < 0 || stateCount[1] > maxCount) {
				return NaN;
			}
			while (i >= 0 && image[centerJ + i * qrcode.width] && stateCount[0] <= maxCount) {
				stateCount[0]++;
				i--;
			}
			if (stateCount[0] > maxCount) {
				return NaN;
			}

			// Now also count down from center
			i = startI + 1;
			while (i < maxI && image[centerJ + i * qrcode.width]) {
				stateCount[2]++;
				i++;
			}
			if (i === maxI) {
				return NaN;
			}
			while (i < maxI && !image[centerJ + i * qrcode.width] && stateCount[3] < maxCount) {
				stateCount[3]++;
				i++;
			}
			if (i === maxI || stateCount[3] >= maxCount) {
				return NaN;
			}
			while (i < maxI && image[centerJ + i * qrcode.width] && stateCount[4] < maxCount) {
				stateCount[4]++;
				i++;
			}
			if (stateCount[4] >= maxCount) {
				return NaN;
			}

			var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];
			if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {
				return NaN;
			}

			return this.foundPatternCross(stateCount) ? this.centerFromEnd(stateCount, i) : NaN;
		};
		this.crossCheckHorizontal = function(startJ, centerI, maxCount, originalStateCountTotal) {
			var image = this.image;

			var maxJ = qrcode.width;
			var stateCount = this.CrossCheckStateCount;

			var j = startJ;
			while (j >= 0 && image[j + centerI * qrcode.width]) {
				stateCount[2]++;
				j--;
			}
			if (j < 0) {
				return NaN;
			}
			while (j >= 0 && !image[j + centerI * qrcode.width] && stateCount[1] <= maxCount) {
				stateCount[1]++;
				j--;
			}
			if (j < 0 || stateCount[1] > maxCount) {
				return NaN;
			}
			while (j >= 0 && image[j + centerI * qrcode.width] && stateCount[0] <= maxCount) {
				stateCount[0]++;
				j--;
			}
			if (stateCount[0] > maxCount) {
				return NaN;
			}

			j = startJ + 1;
			while (j < maxJ && image[j + centerI * qrcode.width]) {
				stateCount[2]++;
				j++;
			}
			if (j === maxJ) {
				return NaN;
			}
			while (j < maxJ && !image[j + centerI * qrcode.width] && stateCount[3] < maxCount) {
				stateCount[3]++;
				j++;
			}
			if (j === maxJ || stateCount[3] >= maxCount) {
				return NaN;
			}
			while (j < maxJ && image[j + centerI * qrcode.width] && stateCount[4] < maxCount) {
				stateCount[4]++;
				j++;
			}
			if (stateCount[4] >= maxCount) {
				return NaN;
			}

			var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];
			if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= originalStateCountTotal) {
				return NaN;
			}

			return this.foundPatternCross(stateCount) ? this.centerFromEnd(stateCount, j) : NaN;
		};
		this.handlePossibleCenter = function(stateCount, i, j) {
			var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];
			var centerJ = this.centerFromEnd(stateCount, j); //float
			var centerI = this.crossCheckVertical(i, Math.floor(centerJ), stateCount[2], stateCountTotal); //float
			if (!isNaN(centerI)) {
				centerJ = this.crossCheckHorizontal(Math.floor(centerJ), Math.floor(centerI), stateCount[2], stateCountTotal);
				if (!isNaN(centerJ)) {
					var estimatedModuleSize = stateCountTotal / 7.0;
					var found = false;
					var max = this.possibleCenters.length;
					for (var index = 0; index < max; index++) {
						var center = this.possibleCenters[index];
						if (center.aboutEquals(estimatedModuleSize, centerI, centerJ)) {
							center.incrementCount();
							found = true;
							break;
						}
					}
					if (!found) {
						var point = new FinderPattern(centerJ, centerI, estimatedModuleSize);
						this.possibleCenters.push(point);
						if (this.resultPointCallback !== null) {
							this.resultPointCallback.foundPossibleResultPoint(point);
						}
					}
					return true;
				}
			}
			return false;
		};

		this.selectBestPatterns = function() {
			var i;
			var startSize = this.possibleCenters.length;
			if (startSize < 3) {
				throw "Couldn't find enough finder patterns";
			}

			if (startSize > 3) {
				var totalModuleSize = 0.0;
				for (i = 0; i < startSize; i++) {
					totalModuleSize += this.possibleCenters[i].EstimatedModuleSize;
				}
				var average = totalModuleSize / startSize;
				for (i = 0; i < this.possibleCenters.length && this.possibleCenters.length > 3; i++) {
					var pattern = this.possibleCenters[i];
					if (Math.abs(pattern.EstimatedModuleSize - average) > 0.2 * average) {
						this.possibleCenters.remove(i);
						i--;
					}
				}
			}

			return new Array(this.possibleCenters[0], this.possibleCenters[1], this.possibleCenters[2]);
		};

		this.findRowSkip = function() {
			var max = this.possibleCenters.length;
			if (max <= 1) {
				return 0;
			}
			var firstConfirmedCenter = null;
			for (var i = 0; i < max; i++) {
				var center = this.possibleCenters[i];
				if (center.Count >= CENTER_QUORUM) {
					if (firstConfirmedCenter === null) {
						firstConfirmedCenter = center;
					} else {
						this.hasSkipped = true;
						return Math.floor((Math.abs(firstConfirmedCenter.X - center.X) - Math.abs(firstConfirmedCenter.Y - center.Y)) / 2);
					}
				}
			}
			return 0;
		};

		this.haveMultiplyConfirmedCenters = function() {
			var confirmedCount = 0;
			var totalModuleSize = 0.0;
			var i;
			var pattern;
			var max = this.possibleCenters.length;
			for (i = 0; i < max; i++) {
				pattern = this.possibleCenters[i];
				if (pattern.Count >= CENTER_QUORUM) {
					confirmedCount++;
					totalModuleSize += pattern.EstimatedModuleSize;
				}
			}
			if (confirmedCount < 3) {
				return false;
			}
			var average = totalModuleSize / max;
			var totalDeviation = 0.0;
			for (i = 0; i < max; i++) {
				pattern = this.possibleCenters[i];
				totalDeviation += Math.abs(pattern.EstimatedModuleSize - average);
			}
			return totalDeviation <= 0.05 * totalModuleSize;
		};

		this.findFinderPattern = function(image) {
			var tryHarder = false;
			this.image = image;
			var maxI = qrcode.height;
			var maxJ = qrcode.width;
			var iSkip = Math.floor((3 * maxI) / (4 * MAX_MODULES));
			if (iSkip < MIN_SKIP || tryHarder) {
				iSkip = MIN_SKIP;
			}
			var confirmed;
			var done = false;
			var stateCount = new Array(5);
			for (var i = iSkip - 1; i < maxI && !done; i += iSkip) {
				// Get a row of black/white values
				stateCount[0] = 0;
				stateCount[1] = 0;
				stateCount[2] = 0;
				stateCount[3] = 0;
				stateCount[4] = 0;
				var currentState = 0;
				for (var j = 0; j < maxJ; j++) {
					if (image[j + i * qrcode.width]) {
						// Black pixel
						if ((currentState & 1) === 1) {
							// Counting white pixels
							currentState++;
						}
						stateCount[currentState]++;
					} else {
						if ((currentState & 1) === 0) {
							if (currentState === 4) {
								if (this.foundPatternCross(stateCount)) {
									confirmed = this.handlePossibleCenter(stateCount, i, j);
									if (confirmed) {
										iSkip = 2;
										if (this.hasSkipped) {
											done = this.haveMultiplyConfirmedCenters();
										} else {
											var rowSkip = this.findRowSkip();
											if (rowSkip > stateCount[2]) {
												i += rowSkip - stateCount[2] - iSkip;
												j = maxJ - 1;
											}
										}
									} else {
										do {
											j++;
										}
										while (j < maxJ && !image[j + i * qrcode.width]);
										j--; // back up to that last white pixel
									}

									currentState = 0;
									stateCount[0] = 0;
									stateCount[1] = 0;
									stateCount[2] = 0;
									stateCount[3] = 0;
									stateCount[4] = 0;
								} else {
									// No, shift counts back by two
									stateCount[0] = stateCount[2];
									stateCount[1] = stateCount[3];
									stateCount[2] = stateCount[4];
									stateCount[3] = 1;
									stateCount[4] = 0;
									currentState = 3;
								}
							} else {
								stateCount[++currentState]++;
							}
						} else {
							// Counting white pixels
							stateCount[currentState]++;
						}
					}
				}
				if (this.foundPatternCross(stateCount)) {
					confirmed = this.handlePossibleCenter(stateCount, i, maxJ);
					if (confirmed) {
						iSkip = stateCount[0];
						if (this.hasSkipped) {
							// Found a third one
							done = haveMultiplyConfirmedCenters();
						}
					}
				}
			}

			var patternInfo = this.selectBestPatterns();
			qrcode.orderBestPatterns(patternInfo);

			return new FinderPatternInfo(patternInfo);
		};
	}


	function AlignmentPattern(posX, posY, estimatedModuleSize) {
		this.x = posX;
		this.y = posY;
		this.count = 1;
		this.estimatedModuleSize = estimatedModuleSize;

		this.__defineGetter__("EstimatedModuleSize", function() {
			return this.estimatedModuleSize;
		});
		this.__defineGetter__("Count", function() {
			return this.count;
		});
		this.__defineGetter__("X", function() {
			return Math.floor(this.x);
		});
		this.__defineGetter__("Y", function() {
			return Math.floor(this.y);
		});
		this.incrementCount = function() {
			this.count++;
		};
		this.aboutEquals = function(moduleSize, i, j) {
			if (Math.abs(i - this.y) <= moduleSize && Math.abs(j - this.x) <= moduleSize) {
				var moduleSizeDiff = Math.abs(moduleSize - this.estimatedModuleSize);
				return moduleSizeDiff <= 1.0 || moduleSizeDiff / this.estimatedModuleSize <= 1.0;
			}
			return false;
		};
	}

	function AlignmentPatternFinder(image, startX, startY, width, height, moduleSize, resultPointCallback) {
		this.image = image;
		this.possibleCenters = [];
		this.startX = startX;
		this.startY = startY;
		this.width = width;
		this.height = height;
		this.moduleSize = moduleSize;
		this.crossCheckStateCount = new Array(0, 0, 0);
		this.resultPointCallback = resultPointCallback;

		this.centerFromEnd = function(stateCount, end) {
			return (end - stateCount[2]) - stateCount[1] / 2.0;
		};
		this.foundPatternCross = function(stateCount) {
			var moduleSize = this.moduleSize;
			var maxVariance = moduleSize / 2.0;
			for (var i = 0; i < 3; i++) {
				if (Math.abs(moduleSize - stateCount[i]) >= maxVariance) {
					return false;
				}
			}
			return true;
		};

		this.crossCheckVertical = function(startI, centerJ, maxCount, originalStateCountTotal) {
			var image = this.image;

			var maxI = qrcode.height;
			var stateCount = this.crossCheckStateCount;
			stateCount[0] = 0;
			stateCount[1] = 0;
			stateCount[2] = 0;

			var i = startI;
			while (i >= 0 && image[centerJ + i * qrcode.width] && stateCount[1] <= maxCount) {
				stateCount[1]++;
				i--;
			}
			if (i < 0 || stateCount[1] > maxCount) {
				return NaN;
			}
			while (i >= 0 && !image[centerJ + i * qrcode.width] && stateCount[0] <= maxCount) {
				stateCount[0]++;
				i--;
			}
			if (stateCount[0] > maxCount) {
				return NaN;
			}

			i = startI + 1;
			while (i < maxI && image[centerJ + i * qrcode.width] && stateCount[1] <= maxCount) {
				stateCount[1]++;
				i++;
			}
			if (i === maxI || stateCount[1] > maxCount) {
				return NaN;
			}
			while (i < maxI && !image[centerJ + i * qrcode.width] && stateCount[2] <= maxCount) {
				stateCount[2]++;
				i++;
			}
			if (stateCount[2] > maxCount) {
				return NaN;
			}

			var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2];
			if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {
				return NaN;
			}

			return this.foundPatternCross(stateCount) ? this.centerFromEnd(stateCount, i) : NaN;
		};

		this.handlePossibleCenter = function(stateCount, i, j) {
			var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2];
			var centerJ = this.centerFromEnd(stateCount, j);
			var centerI = this.crossCheckVertical(i, Math.floor(centerJ), 2 * stateCount[1], stateCountTotal);
			if (!isNaN(centerI)) {
				var estimatedModuleSize = (stateCount[0] + stateCount[1] + stateCount[2]) / 3.0;
				var max = this.possibleCenters.length;
				for (var index = 0; index < max; index++) {
					var center = this.possibleCenters[index];
					if (center.aboutEquals(estimatedModuleSize, centerI, centerJ)) {
						return new AlignmentPattern(centerJ, centerI, estimatedModuleSize);
					}
				}
				var point = new AlignmentPattern(centerJ, centerI, estimatedModuleSize);
				this.possibleCenters.push(point);
				if (this.resultPointCallback !== null) {
					this.resultPointCallback.foundPossibleResultPoint(point);
				}
			}
			return null;
		};

		this.find = function() {
			var confirmed;
			var startX = this.startX;
			var height = this.height;
			var maxJ = startX + width;
			var middleI = startY + (height >> 1);
			var stateCount = new Array(0, 0, 0);
			for (var iGen = 0; iGen < height; iGen++) {
				var i = middleI + ((iGen & 0x01) === 0 ? ((iGen + 1) >> 1) : -((iGen + 1) >> 1));
				stateCount[0] = 0;
				stateCount[1] = 0;
				stateCount[2] = 0;
				var j = startX;

				while (j < maxJ && !image[j + qrcode.width * i]) {
					j++;
				}
				var currentState = 0;
				while (j < maxJ) {
					if (image[j + i * qrcode.width]) {
						if (currentState === 1) {
							stateCount[currentState]++;
						} else {
							if (currentState === 2) {
								if (this.foundPatternCross(stateCount)) {
									confirmed = this.handlePossibleCenter(stateCount, i, j);
									if (confirmed !== null) {
										return confirmed;
									}
								}
								stateCount[0] = stateCount[2];
								stateCount[1] = 1;
								stateCount[2] = 0;
								currentState = 1;
							} else {
								stateCount[++currentState]++;
							}
						}
					} else {
						if (currentState === 1) {
							currentState++;
						}
						stateCount[currentState]++;
					}
					j++;
				}
				if (this.foundPatternCross(stateCount)) {
					confirmed = this.handlePossibleCenter(stateCount, i, maxJ);
					if (confirmed !== null) {
						return confirmed;
					}
				}
			}

			if (this.possibleCenters.length > 0) {
				return this.possibleCenters[0];
			}

			throw "Couldn't find enough alignment patterns";
		};
	}


	function QRCodeDataBlockReader(blocks, version, numErrorCorrectionCode) {
		this.blockPointer = 0;
		this.bitPointer = 7;
		this.dataLength = 0;
		this.blocks = blocks;
		this.numErrorCorrectionCode = numErrorCorrectionCode;
		if (version <= 9) this.dataLengthMode = 0;
		else if (version >= 10 && version <= 26) this.dataLengthMode = 1;
		else if (version >= 27 && version <= 40) this.dataLengthMode = 2;

		this.getNextBits = function(numBits) {
			var bits = 0,
				i;
			var mask1;
			if (numBits < this.bitPointer + 1) {
				// next word fits into current data block
				var mask = 0;
				for (i = 0; i < numBits; i++) {
					mask += (1 << i);
				}
				mask <<= (this.bitPointer - numBits + 1);

				bits = (this.blocks[this.blockPointer] & mask) >> (this.bitPointer - numBits + 1);
				this.bitPointer -= numBits;
				return bits;
			} else if (numBits < this.bitPointer + 1 + 8) {
				// next word crosses 2 data blocks
				mask1 = 0;
				for (i = 0; i < this.bitPointer + 1; i++) {
					mask1 += (1 << i);
				}
				bits = (this.blocks[this.blockPointer] & mask1) << (numBits - (this.bitPointer + 1));
				this.blockPointer++;
				bits += ((this.blocks[this.blockPointer]) >> (8 - (numBits - (this.bitPointer + 1))));

				this.bitPointer = this.bitPointer - numBits % 8;
				if (this.bitPointer < 0) {
					this.bitPointer = 8 + this.bitPointer;
				}
				return bits;
			} else if (numBits < this.bitPointer + 1 + 16) {
				mask1 = 0; // mask of first block
				var mask3 = 0; // mask of 3rd block
				for (i = 0; i < this.bitPointer + 1; i++) {
					mask1 += (1 << i);
				}
				var bitsFirstBlock = (this.blocks[this.blockPointer] & mask1) << (numBits - (this.bitPointer + 1));
				this.blockPointer++;

				var bitsSecondBlock = this.blocks[this.blockPointer] << (numBits - (this.bitPointer + 1 + 8));
				this.blockPointer++;

				for (i = 0; i < numBits - (this.bitPointer + 1 + 8); i++) {
					mask3 += (1 << i);
				}
				mask3 <<= 8 - (numBits - (this.bitPointer + 1 + 8));
				var bitsThirdBlock = (this.blocks[this.blockPointer] & mask3) >> (8 - (numBits - (this.bitPointer + 1 + 8)));

				bits = bitsFirstBlock + bitsSecondBlock + bitsThirdBlock;
				this.bitPointer = this.bitPointer - (numBits - 8) % 8;
				if (this.bitPointer < 0) {
					this.bitPointer = 8 + this.bitPointer;
				}
				return bits;
			} else {
				return 0;
			}
		};
		this.NextMode = function() {
			if ((this.blockPointer > this.blocks.length - this.numErrorCorrectionCode - 2)) return 0;
			else return this.getNextBits(4);
		};
		this.getDataLength = function(modeIndicator) {
			var index = 0;
			while (true) {
				if ((modeIndicator >> index) === 1) break;
				index++;
			}

			return this.getNextBits(qrcode.sizeOfDataLengthInfo[this.dataLengthMode][index]);
		};
		this.getRomanAndFigureString = function(dataLength) {
			var length = dataLength;
			var intData = 0;
			var strData = "";
			var tableRomanAndFigure = new Array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', '$', '%', '*', '+', '-', '.', '/', ':');
			do {
				if (length > 1) {
					intData = this.getNextBits(11);
					var firstLetter = Math.floor(intData / 45);
					var secondLetter = intData % 45;
					strData += tableRomanAndFigure[firstLetter];
					strData += tableRomanAndFigure[secondLetter];
					length -= 2;
				} else if (length === 1) {
					intData = this.getNextBits(6);
					strData += tableRomanAndFigure[intData];
					length -= 1;
				}
			}
			while (length > 0);

			return strData;
		};
		this.getFigureString = function(dataLength) {
			var length = dataLength;
			var intData = 0;
			var strData = "";
			do {
				if (length >= 3) {
					intData = this.getNextBits(10);
					if (intData < 100) strData += "0";
					if (intData < 10) strData += "0";
					length -= 3;
				} else if (length === 2) {
					intData = this.getNextBits(7);
					if (intData < 10) strData += "0";
					length -= 2;
				} else if (length === 1) {
					intData = this.getNextBits(4);
					length -= 1;
				}
				strData += intData;
			}
			while (length > 0);

			return strData;
		};
		this.get8bitByteArray = function(dataLength) {
			var length = dataLength;
			var intData = 0;
			var output = [];

			do {
				intData = this.getNextBits(8);
				output.push(intData);
				length--;
			}
			while (length > 0);
			return output;
		};
		this.getKanjiString = function(dataLength) {
			var length = dataLength;
			var intData = 0;
			var unicodeString = "";
			do {
				intData = getNextBits(13);
				var lowerByte = intData % 0xC0;
				var higherByte = intData / 0xC0;

				var tempWord = (higherByte << 8) + lowerByte;
				var shiftjisWord = 0;
				if (tempWord + 0x8140 <= 0x9FFC) {
					shiftjisWord = tempWord + 0x8140;
				} else {
					shiftjisWord = tempWord + 0xC140;
				}

				unicodeString += String.fromCharCode(shiftjisWord);
				length--;
			}
			while (length > 0);

			return unicodeString;
		};

		this.__defineGetter__("DataByte", function() {
			var output = [];
			var MODE_NUMBER = 1;
			var MODE_ROMAN_AND_NUMBER = 2;
			var MODE_8BIT_BYTE = 4;
			var MODE_KANJI = 8;
			var j;
			var temp_str, ta;
			do {
				var mode = this.NextMode();
				if (mode === 0) {
					if (output.length > 0) break;
					else throw "Empty data block";
				}
				if (mode !== MODE_NUMBER && mode !== MODE_ROMAN_AND_NUMBER && mode !== MODE_8BIT_BYTE && mode !== MODE_KANJI) {
					throw "Invalid mode: " + mode + " in (block:" + this.blockPointer + " bit:" + this.bitPointer + ")";
				}
				dataLength = this.getDataLength(mode);
				if (dataLength < 1) throw "Invalid data length: " + dataLength;
				switch (mode) {

					case MODE_NUMBER:
						temp_str = this.getFigureString(dataLength);
						ta = new Array(temp_str.length);
						for (j = 0; j < temp_str.length; j++)
						ta[j] = temp_str.charCodeAt(j);
						output.push(ta);
						break;

					case MODE_ROMAN_AND_NUMBER:
						temp_str = this.getRomanAndFigureString(dataLength);
						ta = new Array(temp_str.length);
						for (j = 0; j < temp_str.length; j++)
						ta[j] = temp_str.charCodeAt(j);
						output.push(ta);
						break;
					case MODE_8BIT_BYTE:
						var temp_sbyteArray3 = this.get8bitByteArray(dataLength);
						output.push(temp_sbyteArray3);
						break;
					case MODE_KANJI:
						temp_str = this.getKanjiString(dataLength);
						output.push(temp_str);
						break;
				}
			}
			while (true);
			return output;
		});
	}

	/**
	 * exports the created qrcode object.
	 */
	module.exports = qrcode;

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015 Ambisafe Inc.
	 * 
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including the rights to use, copy, modify,
	 * merge, publish, distribute, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 * 
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 * 
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @file qrscanner.js
	 * @author Charlie Fontana <charlie@ambisafe.co>
	 * @date 07/20/2015
	 */

	/**
	 * This section defines the required libraries
	 */
	var qrcode = __webpack_require__(164),
		Ambisafe = __webpack_require__(72);

	/**
	 * Defines the QRScanner constructor.
	 */
	Ambisafe.QRScanner = function () {

	};

	Ambisafe.QRScanner.scanQR = function(divID, success, error) {
		var div, height, width, video, canvas, context, check, play;

		if (typeof window === 'undefined') {
			error('window is not defined');
			return;
		}

		if (typeof navigator === 'undefined') {
			error('navigator is not defined');
			return;
		}

		div = document.getElementById(divID);

		if (!div) {
			error(divID + ' is not defined');
			return;
		}

		height = div.offsetHeight;
		height = height?height:250;

		width = div.offsetWidth;
		width = width?width:300;

		div.innerHTML += '<video id="readerqr-html5-video" width="' + width + 'px" height="' + height + 'px"></video>';
		div.innerHTML += '<canvas id="qr-scanner-qr-canvas" width="' + (width - 2) + 'px" height="' + (height - 2) + 
						 'px" style="display:none;"></canvas>';

		video = document.getElementById('readerqr-html5-video');
		canvas = document.getElementById('qr-scanner-qr-canvas');
		context = canvas.getContext('2d');

		check = function() {
			if (localMediaStream) {
				context.drawImage(video, 0, 0, 307, 250);

				try {
					qrcode.decode();
				} catch (err) {
					error(err);
				}
			}

			if (!video.paused) {
				setTimeout(check, 500);
			}
		};

		window.URL = window.URL || window.webkitURL || window.mozURL || window.msURL;
		navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
		
		play = function(value) {
			video.src = window.URL && window.URL.createObjectURL(value) || value;
			localMediaStream = value;
			video.play();

			if (!video.paused) {
				setTimeout(check, 1E3);
			}
		};

		if (navigator.getUserMedia) {
			navigator.getUserMedia({video: !0}, play, function(err) {
				if (err.message) {
					div.innerHTML = err.message;
					error(err.message);
				} else {
					error(err);
				}
			});
		} else {
			div.innerHTML = 'Native web camera streaming (getUserMedia) not supported in this browser';
			error(div.innerHTML);
		}

		qrcode.callback = function(data) {
			video.pause();
			success(data);
		};
	};


/***/ },
/* 166 */
/***/ function(module, exports) {

	var zpad = function (value, length) {
	    value = "" + value;
	    length -= value.length;
	    while (length-- > 0) value = '0' + value;
	    return value;
	};

	var exports = module.exports = {zpad: zpad};

/***/ },
/* 167 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 168 */
/***/ function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 169 */
[428, 168, 167],
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = asyncify;

	var _isObject = __webpack_require__(137);

	var _isObject2 = _interopRequireDefault(_isObject);

	var _initialParams = __webpack_require__(176);

	var _initialParams2 = _interopRequireDefault(_initialParams);

	var _setImmediate = __webpack_require__(180);

	var _setImmediate2 = _interopRequireDefault(_setImmediate);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Take a sync function and make it async, passing its return value to a
	 * callback. This is useful for plugging sync functions into a waterfall,
	 * series, or other async functions. Any arguments passed to the generated
	 * function will be passed to the wrapped function (except for the final
	 * callback argument). Errors thrown will be passed to the callback.
	 *
	 * If the function passed to `asyncify` returns a Promise, that promises's
	 * resolved/rejected state will be used to call the callback, rather than simply
	 * the synchronous return value.
	 *
	 * This also means you can asyncify ES2017 `async` functions.
	 *
	 * @name asyncify
	 * @static
	 * @memberOf module:Utils
	 * @method
	 * @alias wrapSync
	 * @category Util
	 * @param {Function} func - The synchronous function, or Promise-returning
	 * function to convert to an {@link AsyncFunction}.
	 * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be
	 * invoked with `(args..., callback)`.
	 * @example
	 *
	 * // passing a regular synchronous function
	 * async.waterfall([
	 *     async.apply(fs.readFile, filename, "utf8"),
	 *     async.asyncify(JSON.parse),
	 *     function (data, next) {
	 *         // data is the result of parsing the text.
	 *         // If there was a parsing error, it would have been caught.
	 *     }
	 * ], callback);
	 *
	 * // passing a function returning a promise
	 * async.waterfall([
	 *     async.apply(fs.readFile, filename, "utf8"),
	 *     async.asyncify(function (contents) {
	 *         return db.model.create(contents);
	 *     }),
	 *     function (model, next) {
	 *         // `model` is the instantiated model object.
	 *         // If there was an error, this function would be skipped.
	 *     }
	 * ], callback);
	 *
	 * // es2017 example, though `asyncify` is not needed if your JS environment
	 * // supports async functions out of the box
	 * var q = async.queue(async.asyncify(async function(file) {
	 *     var intermediateStep = await processFile(file);
	 *     return await somePromise(intermediateStep)
	 * }));
	 *
	 * q.push(files);
	 */
	function asyncify(func) {
	    return (0, _initialParams2.default)(function (args, callback) {
	        var result;
	        try {
	            result = func.apply(this, args);
	        } catch (e) {
	            return callback(e);
	        }
	        // if result is Promise object
	        if ((0, _isObject2.default)(result) && typeof result.then === 'function') {
	            result.then(function (value) {
	                invokeCallback(callback, null, value);
	            }, function (err) {
	                invokeCallback(callback, err.message ? err : new Error(err));
	            });
	        } else {
	            callback(null, result);
	        }
	    });
	}

	function invokeCallback(callback, error, value) {
	    try {
	        callback(error, value);
	    } catch (e) {
	        (0, _setImmediate2.default)(rethrow, e);
	    }
	}

	function rethrow(error) {
	    throw error;
	}
	module.exports = exports['default'];

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = eachLimit;

	var _eachOfLimit = __webpack_require__(102);

	var _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);

	var _withoutIndex = __webpack_require__(181);

	var _withoutIndex2 = _interopRequireDefault(_withoutIndex);

	var _wrapAsync = __webpack_require__(21);

	var _wrapAsync2 = _interopRequireDefault(_wrapAsync);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.
	 *
	 * @name eachLimit
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.each]{@link module:Collections.each}
	 * @alias forEachLimit
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {number} limit - The maximum number of async operations at a time.
	 * @param {AsyncFunction} iteratee - An async function to apply to each item in
	 * `coll`.
	 * The array index is not passed to the iteratee.
	 * If you need the index, use `eachOfLimit`.
	 * Invoked with (item, callback).
	 * @param {Function} [callback] - A callback which is called when all
	 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
	 */
	function eachLimit(coll, limit, iteratee, callback) {
	  (0, _eachOfLimit2.default)(limit)(coll, (0, _withoutIndex2.default)((0, _wrapAsync2.default)(iteratee)), callback);
	}
	module.exports = exports['default'];

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = eachOfLimit;

	var _eachOfLimit2 = __webpack_require__(102);

	var _eachOfLimit3 = _interopRequireDefault(_eachOfLimit2);

	var _wrapAsync = __webpack_require__(21);

	var _wrapAsync2 = _interopRequireDefault(_wrapAsync);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a
	 * time.
	 *
	 * @name eachOfLimit
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.eachOf]{@link module:Collections.eachOf}
	 * @alias forEachOfLimit
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {number} limit - The maximum number of async operations at a time.
	 * @param {AsyncFunction} iteratee - An async function to apply to each
	 * item in `coll`. The `key` is the item's key, or index in the case of an
	 * array.
	 * Invoked with (item, key, callback).
	 * @param {Function} [callback] - A callback which is called when all
	 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
	 */
	function eachOfLimit(coll, limit, iteratee, callback) {
	  (0, _eachOfLimit3.default)(limit)(coll, (0, _wrapAsync2.default)(iteratee), callback);
	}
	module.exports = exports['default'];

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _eachLimit = __webpack_require__(171);

	var _eachLimit2 = _interopRequireDefault(_eachLimit);

	var _doLimit = __webpack_require__(101);

	var _doLimit2 = _interopRequireDefault(_doLimit);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.
	 *
	 * @name eachSeries
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.each]{@link module:Collections.each}
	 * @alias forEachSeries
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {AsyncFunction} iteratee - An async function to apply to each
	 * item in `coll`.
	 * The array index is not passed to the iteratee.
	 * If you need the index, use `eachOfSeries`.
	 * Invoked with (item, callback).
	 * @param {Function} [callback] - A callback which is called when all
	 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
	 */
	exports.default = (0, _doLimit2.default)(_eachLimit2.default, 1);
	module.exports = exports['default'];

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = doParallel;

	var _eachOf = __webpack_require__(99);

	var _eachOf2 = _interopRequireDefault(_eachOf);

	var _wrapAsync = __webpack_require__(21);

	var _wrapAsync2 = _interopRequireDefault(_wrapAsync);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function doParallel(fn) {
	    return function (obj, iteratee, callback) {
	        return fn(_eachOf2.default, obj, (0, _wrapAsync2.default)(iteratee), callback);
	    };
	}
	module.exports = exports['default'];

/***/ },
/* 175 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	exports.default = function (coll) {
	    return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();
	};

	var iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator;

	module.exports = exports['default'];

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	exports.default = function (fn) {
	    return function () /*...args, callback*/{
	        var args = (0, _slice2.default)(arguments);
	        var callback = args.pop();
	        fn.call(this, args, callback);
	    };
	};

	var _slice = __webpack_require__(51);

	var _slice2 = _interopRequireDefault(_slice);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	module.exports = exports['default'];

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = iterator;

	var _isArrayLike = __webpack_require__(65);

	var _isArrayLike2 = _interopRequireDefault(_isArrayLike);

	var _getIterator = __webpack_require__(175);

	var _getIterator2 = _interopRequireDefault(_getIterator);

	var _keys = __webpack_require__(350);

	var _keys2 = _interopRequireDefault(_keys);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function createArrayIterator(coll) {
	    var i = -1;
	    var len = coll.length;
	    return function next() {
	        return ++i < len ? { value: coll[i], key: i } : null;
	    };
	}

	function createES2015Iterator(iterator) {
	    var i = -1;
	    return function next() {
	        var item = iterator.next();
	        if (item.done) return null;
	        i++;
	        return { value: item.value, key: i };
	    };
	}

	function createObjectIterator(obj) {
	    var okeys = (0, _keys2.default)(obj);
	    var i = -1;
	    var len = okeys.length;
	    return function next() {
	        var key = okeys[++i];
	        return i < len ? { value: obj[key], key: key } : null;
	    };
	}

	function iterator(coll) {
	    if ((0, _isArrayLike2.default)(coll)) {
	        return createArrayIterator(coll);
	    }

	    var iterator = (0, _getIterator2.default)(coll);
	    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);
	}
	module.exports = exports['default'];

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = _asyncMap;

	var _noop = __webpack_require__(49);

	var _noop2 = _interopRequireDefault(_noop);

	var _wrapAsync = __webpack_require__(21);

	var _wrapAsync2 = _interopRequireDefault(_wrapAsync);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _asyncMap(eachfn, arr, iteratee, callback) {
	    callback = callback || _noop2.default;
	    arr = arr || [];
	    var results = [];
	    var counter = 0;
	    var _iteratee = (0, _wrapAsync2.default)(iteratee);

	    eachfn(arr, function (value, _, callback) {
	        var index = counter++;
	        _iteratee(value, function (err, v) {
	            results[index] = v;
	            callback(err);
	        });
	    }, function (err) {
	        callback(err, results);
	    });
	}
	module.exports = exports['default'];

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = _parallel;

	var _noop = __webpack_require__(49);

	var _noop2 = _interopRequireDefault(_noop);

	var _isArrayLike = __webpack_require__(65);

	var _isArrayLike2 = _interopRequireDefault(_isArrayLike);

	var _slice = __webpack_require__(51);

	var _slice2 = _interopRequireDefault(_slice);

	var _wrapAsync = __webpack_require__(21);

	var _wrapAsync2 = _interopRequireDefault(_wrapAsync);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _parallel(eachfn, tasks, callback) {
	    callback = callback || _noop2.default;
	    var results = (0, _isArrayLike2.default)(tasks) ? [] : {};

	    eachfn(tasks, function (task, key, callback) {
	        (0, _wrapAsync2.default)(task)(function (err, result) {
	            if (arguments.length > 2) {
	                result = (0, _slice2.default)(arguments, 1);
	            }
	            results[key] = result;
	            callback(err);
	        });
	    }, function (err) {
	        callback(err, results);
	    });
	}
	module.exports = exports['default'];

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.hasNextTick = exports.hasSetImmediate = undefined;
	exports.fallback = fallback;
	exports.wrap = wrap;

	var _slice = __webpack_require__(51);

	var _slice2 = _interopRequireDefault(_slice);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var hasSetImmediate = exports.hasSetImmediate = typeof setImmediate === 'function' && setImmediate;
	var hasNextTick = exports.hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';

	function fallback(fn) {
	    setTimeout(fn, 0);
	}

	function wrap(defer) {
	    return function (fn /*, ...args*/) {
	        var args = (0, _slice2.default)(arguments, 1);
	        defer(function () {
	            fn.apply(null, args);
	        });
	    };
	}

	var _defer;

	if (hasSetImmediate) {
	    _defer = setImmediate;
	} else if (hasNextTick) {
	    _defer = process.nextTick;
	} else {
	    _defer = fallback;
	}

	exports.default = wrap(_defer);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(66).setImmediate, __webpack_require__(8)))

/***/ },
/* 181 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = _withoutIndex;
	function _withoutIndex(iteratee) {
	    return function (value, index, callback) {
	        return iteratee(value, callback);
	    };
	}
	module.exports = exports["default"];

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _doParallel = __webpack_require__(174);

	var _doParallel2 = _interopRequireDefault(_doParallel);

	var _map = __webpack_require__(178);

	var _map2 = _interopRequireDefault(_map);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Produces a new collection of values by mapping each value in `coll` through
	 * the `iteratee` function. The `iteratee` is called with an item from `coll`
	 * and a callback for when it has finished processing. Each of these callback
	 * takes 2 arguments: an `error`, and the transformed item from `coll`. If
	 * `iteratee` passes an error to its callback, the main `callback` (for the
	 * `map` function) is immediately called with the error.
	 *
	 * Note, that since this function applies the `iteratee` to each item in
	 * parallel, there is no guarantee that the `iteratee` functions will complete
	 * in order. However, the results array will be in the same order as the
	 * original `coll`.
	 *
	 * If `map` is passed an Object, the results will be an Array.  The results
	 * will roughly be in the order of the original Objects' keys (but this can
	 * vary across JavaScript engines).
	 *
	 * @name map
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {AsyncFunction} iteratee - An async function to apply to each item in
	 * `coll`.
	 * The iteratee should complete with the transformed item.
	 * Invoked with (item, callback).
	 * @param {Function} [callback] - A callback which is called when all `iteratee`
	 * functions have finished, or an error occurs. Results is an Array of the
	 * transformed items from the `coll`. Invoked with (err, results).
	 * @example
	 *
	 * async.map(['file1','file2','file3'], fs.stat, function(err, results) {
	 *     // results is now an array of stats for each file
	 * });
	 */
	exports.default = (0, _doParallel2.default)(_map2.default);
	module.exports = exports['default'];

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = parallelLimit;

	var _eachOf = __webpack_require__(99);

	var _eachOf2 = _interopRequireDefault(_eachOf);

	var _parallel = __webpack_require__(179);

	var _parallel2 = _interopRequireDefault(_parallel);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Run the `tasks` collection of functions in parallel, without waiting until
	 * the previous function has completed. If any of the functions pass an error to
	 * its callback, the main `callback` is immediately called with the value of the
	 * error. Once the `tasks` have completed, the results are passed to the final
	 * `callback` as an array.
	 *
	 * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about
	 * parallel execution of code.  If your tasks do not use any timers or perform
	 * any I/O, they will actually be executed in series.  Any synchronous setup
	 * sections for each task will happen one after the other.  JavaScript remains
	 * single-threaded.
	 *
	 * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the
	 * execution of other tasks when a task fails.
	 *
	 * It is also possible to use an object instead of an array. Each property will
	 * be run as a function and the results will be passed to the final `callback`
	 * as an object instead of an array. This can be a more readable way of handling
	 * results from {@link async.parallel}.
	 *
	 * @name parallel
	 * @static
	 * @memberOf module:ControlFlow
	 * @method
	 * @category Control Flow
	 * @param {Array|Iterable|Object} tasks - A collection of
	 * [async functions]{@link AsyncFunction} to run.
	 * Each async function can complete with any number of optional `result` values.
	 * @param {Function} [callback] - An optional callback to run once all the
	 * functions have completed successfully. This function gets a results array
	 * (or object) containing all the result arguments passed to the task callbacks.
	 * Invoked with (err, results).
	 *
	 * @example
	 * async.parallel([
	 *     function(callback) {
	 *         setTimeout(function() {
	 *             callback(null, 'one');
	 *         }, 200);
	 *     },
	 *     function(callback) {
	 *         setTimeout(function() {
	 *             callback(null, 'two');
	 *         }, 100);
	 *     }
	 * ],
	 * // optional callback
	 * function(err, results) {
	 *     // the results array will equal ['one','two'] even though
	 *     // the second function had a shorter timeout.
	 * });
	 *
	 * // an example using an object instead of an array
	 * async.parallel({
	 *     one: function(callback) {
	 *         setTimeout(function() {
	 *             callback(null, 1);
	 *         }, 200);
	 *     },
	 *     two: function(callback) {
	 *         setTimeout(function() {
	 *             callback(null, 2);
	 *         }, 100);
	 *     }
	 * }, function(err, results) {
	 *     // results is now equals to: {one: 1, two: 2}
	 * });
	 */
	function parallelLimit(tasks, callback) {
	  (0, _parallel2.default)(_eachOf2.default, tasks, callback);
	}
	module.exports = exports['default'];

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	exports.default = function (tasks, callback) {
	    callback = (0, _once2.default)(callback || _noop2.default);
	    if (!(0, _isArray2.default)(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));
	    if (!tasks.length) return callback();
	    var taskIndex = 0;

	    function nextTask(args) {
	        var task = (0, _wrapAsync2.default)(tasks[taskIndex++]);
	        args.push((0, _onlyOnce2.default)(next));
	        task.apply(null, args);
	    }

	    function next(err /*, ...args*/) {
	        if (err || taskIndex === tasks.length) {
	            return callback.apply(null, arguments);
	        }
	        nextTask((0, _slice2.default)(arguments, 1));
	    }

	    nextTask([]);
	};

	var _isArray = __webpack_require__(135);

	var _isArray2 = _interopRequireDefault(_isArray);

	var _noop = __webpack_require__(49);

	var _noop2 = _interopRequireDefault(_noop);

	var _once = __webpack_require__(73);

	var _once2 = _interopRequireDefault(_once);

	var _slice = __webpack_require__(51);

	var _slice2 = _interopRequireDefault(_slice);

	var _onlyOnce = __webpack_require__(74);

	var _onlyOnce2 = _interopRequireDefault(_onlyOnce);

	var _wrapAsync = __webpack_require__(21);

	var _wrapAsync2 = _interopRequireDefault(_wrapAsync);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	module.exports = exports['default'];

	/**
	 * Runs the `tasks` array of functions in series, each passing their results to
	 * the next in the array. However, if any of the `tasks` pass an error to their
	 * own callback, the next function is not executed, and the main `callback` is
	 * immediately called with the error.
	 *
	 * @name waterfall
	 * @static
	 * @memberOf module:ControlFlow
	 * @method
	 * @category Control Flow
	 * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}
	 * to run.
	 * Each function should complete with any number of `result` values.
	 * The `result` values will be passed as arguments, in order, to the next task.
	 * @param {Function} [callback] - An optional callback to run once all the
	 * functions have completed. This will be passed the results of the last task's
	 * callback. Invoked with (err, [results]).
	 * @returns undefined
	 * @example
	 *
	 * async.waterfall([
	 *     function(callback) {
	 *         callback(null, 'one', 'two');
	 *     },
	 *     function(arg1, arg2, callback) {
	 *         // arg1 now equals 'one' and arg2 now equals 'two'
	 *         callback(null, 'three');
	 *     },
	 *     function(arg1, callback) {
	 *         // arg1 now equals 'three'
	 *         callback(null, 'done');
	 *     }
	 * ], function (err, result) {
	 *     // result now equals 'done'
	 * });
	 *
	 * // Or, with named functions:
	 * async.waterfall([
	 *     myFirstFunction,
	 *     mySecondFunction,
	 *     myLastFunction,
	 * ], function (err, result) {
	 *     // result now equals 'done'
	 * });
	 * function myFirstFunction(callback) {
	 *     callback(null, 'one', 'two');
	 * }
	 * function mySecondFunction(arg1, arg2, callback) {
	 *     // arg1 now equals 'one' and arg2 now equals 'two'
	 *     callback(null, 'three');
	 * }
	 * function myLastFunction(arg1, callback) {
	 *     // arg1 now equals 'three'
	 *     callback(null, 'done');
	 * }
	 */

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, setImmediate) {"use strict";
	class Semaphore {
	    constructor(count) {
	        this.tasks = [];
	        this.count = count;
	    }
	    sched() {
	        if (this.count > 0 && this.tasks.length > 0) {
	            this.count--;
	            let next = this.tasks.shift();
	            if (next === undefined) {
	                throw "Unexpected undefined value in tasks list";
	            }
	            next();
	        }
	    }
	    acquire() {
	        return new Promise((res, rej) => {
	            var task = () => {
	                var released = false;
	                res(() => {
	                    if (!released) {
	                        released = true;
	                        this.count++;
	                        this.sched();
	                    }
	                });
	            };
	            this.tasks.push(task);
	            if (process && process.nextTick) {
	                process.nextTick(this.sched.bind(this));
	            }
	            else {
	                setImmediate(this.sched.bind(this));
	            }
	        });
	    }
	    use(f) {
	        return this.acquire()
	            .then(release => {
	            return f()
	                .then((res) => {
	                release();
	                return res;
	            })
	                .catch((err) => {
	                release();
	                throw err;
	            });
	        });
	    }
	}
	exports.Semaphore = Semaphore;
	class Mutex extends Semaphore {
	    constructor() {
	        super(1);
	    }
	}
	exports.Mutex = Mutex;
	//# sourceMappingURL=index.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8), __webpack_require__(66).setImmediate))

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _web3ProviderEngine = __webpack_require__(105);

	var _web3ProviderEngine2 = _interopRequireDefault(_web3ProviderEngine);

	var _nonceTracker = __webpack_require__(107);

	var _nonceTracker2 = _interopRequireDefault(_nonceTracker);

	var _filters = __webpack_require__(106);

	var _filters2 = _interopRequireDefault(_filters);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    default: obj
	  };
	}

	var engine = new _web3ProviderEngine2.default();
	engine.addProvider(new _filters2.default());
	engine.addProvider(new _nonceTracker2.default());
	exports.default = engine;
	module.exports = exports['default'];

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.waitForTransaction = waitForTransaction;
	exports.publicToAddress = publicToAddress;
	exports.privateToAddress = privateToAddress;
	exports.ecsign = ecsign;
	exports.toBuffer = toBuffer;

	var _web = _interopRequireDefault(__webpack_require__(189));

	var _ethereumjsUtil = __webpack_require__(104);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    default: obj
	  };
	}

	function waitForTransaction(txHash, callback) {
	  var filter = _web.default.eth.filter('latest').watch(function (err, blockHash) {
	    _web.default.eth.getBlock(blockHash, function (err, block) {
	      if (!err) {
	        if (block.transactions.indexOf(txHash) > -1) {
	          filter.stopWatching();
	          callback(null, true);
	        }
	      } else {
	        callback(err);
	      }
	    });
	  });
	}

	function publicToAddress(publicKey) {
	  return '0x' + (0, _ethereumjsUtil.pubToAddress)(toBuffer(publicKey), true).toString('hex');
	}

	function privateToAddress(privateKey) {
	  return '0x' + (0, _ethereumjsUtil.privateToAddress)(toBuffer(privateKey), true).toString('hex');
	}

	function ecsign(hash, privateKey) {
	  return (0, _ethereumjsUtil.ecsign)(toBuffer(hash), toBuffer(privateKey));
	}

	function toBuffer(input) {
	  return (0, _ethereumjsUtil.toBuffer)((0, _ethereumjsUtil.addHexPrefix)(input));
	}

/***/ },
/* 188 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  return Constructor;
	}

	var LogRawsSubprovider = /*#__PURE__*/function () {
	  function LogRawsSubprovider(sha3, logger) {
	    var doNotSend = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	    _classCallCheck(this, LogRawsSubprovider);

	    this.logger = logger;
	    this.doNotSend = doNotSend;
	    this.sha3 = sha3;
	  }

	  _createClass(LogRawsSubprovider, [{
	    key: "setEngine",
	    value: function setEngine() {// ignore.
	    }
	  }, {
	    key: "handleRequest",
	    value: function handleRequest(payload, next, end) {
	      if (payload.method === 'eth_sendRawTransaction') {
	        var hash = '0x' + this.sha3(payload.params[0], {
	          encoding: 'hex'
	        });
	        this.logger(payload.params[0], hash);

	        if (this.doNotSend) {
	          end(null, hash);
	          return;
	        }
	      }

	      next();
	    }
	  }]);

	  return LogRawsSubprovider;
	}();

	var _default = LogRawsSubprovider;
	exports.default = _default;

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _web = __webpack_require__(157);

	var _web2 = _interopRequireDefault(_web);

	var _engine = __webpack_require__(186);

	var _engine2 = _interopRequireDefault(_engine);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    default: obj
	  };
	}

	var web3 = new _web2.default(_engine2.default);
	exports.default = web3;
	module.exports = exports['default'];

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {const Sha3 = __webpack_require__(310);

	const hashLengths = [224, 256, 384, 512];

	var hash = function (bitcount) {
	  if (bitcount !== undefined && hashLengths.indexOf(bitcount) == -1) throw new Error('Unsupported hash length');
	  this.content = [];
	  this.bitcount = bitcount ? 'keccak_' + bitcount : 'keccak_512';
	};

	hash.prototype.update = function (i) {
	  if (Buffer.isBuffer(i)) this.content.push(i);else if (typeof i === 'string') this.content.push(new Buffer(i));else throw new Error('Unsupported argument to update');
	  return this;
	};

	hash.prototype.digest = function (encoding) {
	  var result = Sha3[this.bitcount](Buffer.concat(this.content));
	  if (encoding === 'hex') return result;else if (encoding === 'binary' || encoding === undefined) return new Buffer(result, 'hex').toString('binary');else throw new Error('Unsupported encoding for digest: ' + encoding);
	};

	module.exports = {
	  SHA3Hash: hash
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

	function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

	const EthQuery = __webpack_require__(123);

	const pify = __webpack_require__(90);

	const SafeEventEmitter = __webpack_require__(147);

	const sec = 1000;

	const calculateSum = (accumulator, currentValue) => accumulator + currentValue;

	const blockTrackerEvents = ['sync', 'latest'];

	class BaseBlockTracker extends SafeEventEmitter {
	  //
	  // public
	  //
	  constructor(opts = {}) {
	    super(); // config

	    this._blockResetDuration = opts.blockResetDuration || 20 * sec; // state

	    this._blockResetTimeout;
	    this._currentBlock = null;
	    this._isRunning = false; // bind functions for internal use

	    this._onNewListener = this._onNewListener.bind(this);
	    this._onRemoveListener = this._onRemoveListener.bind(this);
	    this._resetCurrentBlock = this._resetCurrentBlock.bind(this); // listen for handler changes

	    this._setupInternalEvents();
	  }

	  isRunning() {
	    return this._isRunning;
	  }

	  getCurrentBlock() {
	    return this._currentBlock;
	  }

	  getLatestBlock() {
	    var _this = this;

	    return _asyncToGenerator(function* () {
	      // return if available
	      if (_this._currentBlock) return _this._currentBlock; // wait for a new latest block

	      const latestBlock = yield new Promise(resolve => _this.once('latest', resolve)); // return newly set current block

	      return latestBlock;
	    })();
	  } // dont allow module consumer to remove our internal event listeners


	  removeAllListeners(eventName) {
	    // perform default behavior, preserve fn arity
	    if (eventName) {
	      super.removeAllListeners(eventName);
	    } else {
	      super.removeAllListeners();
	    } // re-add internal events


	    this._setupInternalEvents(); // trigger stop check just in case


	    this._onRemoveListener();
	  } //
	  // to be implemented in subclass
	  //


	  _start() {// default behavior is noop
	  }

	  _end() {// default behavior is noop
	  } //
	  // private
	  //


	  _setupInternalEvents() {
	    // first remove listeners for idempotence
	    this.removeListener('newListener', this._onNewListener);
	    this.removeListener('removeListener', this._onRemoveListener); // then add them

	    this.on('newListener', this._onNewListener);
	    this.on('removeListener', this._onRemoveListener);
	  }

	  _onNewListener(eventName, handler) {
	    // `newListener` is called *before* the listener is added
	    if (!blockTrackerEvents.includes(eventName)) return;

	    this._maybeStart();
	  }

	  _onRemoveListener(eventName, handler) {
	    // `removeListener` is called *after* the listener is removed
	    if (this._getBlockTrackerEventCount() > 0) return;

	    this._maybeEnd();
	  }

	  _maybeStart() {
	    if (this._isRunning) return;
	    this._isRunning = true; // cancel setting latest block to stale

	    this._cancelBlockResetTimeout();

	    this._start();
	  }

	  _maybeEnd() {
	    if (!this._isRunning) return;
	    this._isRunning = false;

	    this._setupBlockResetTimeout();

	    this._end();
	  }

	  _getBlockTrackerEventCount() {
	    return blockTrackerEvents.map(eventName => this.listenerCount(eventName)).reduce(calculateSum);
	  }

	  _newPotentialLatest(newBlock) {
	    const currentBlock = this._currentBlock; // only update if blok number is higher

	    if (currentBlock && hexToInt(newBlock) <= hexToInt(currentBlock)) return;

	    this._setCurrentBlock(newBlock);
	  }

	  _setCurrentBlock(newBlock) {
	    const oldBlock = this._currentBlock;
	    this._currentBlock = newBlock;
	    this.emit('latest', newBlock);
	    this.emit('sync', {
	      oldBlock,
	      newBlock
	    });
	  }

	  _setupBlockResetTimeout() {
	    // clear any existing timeout
	    this._cancelBlockResetTimeout(); // clear latest block when stale


	    this._blockResetTimeout = setTimeout(this._resetCurrentBlock, this._blockResetDuration); // nodejs - dont hold process open

	    if (this._blockResetTimeout.unref) {
	      this._blockResetTimeout.unref();
	    }
	  }

	  _cancelBlockResetTimeout() {
	    clearTimeout(this._blockResetTimeout);
	  }

	  _resetCurrentBlock() {
	    this._currentBlock = null;
	  }

	}

	module.exports = BaseBlockTracker;

	function hexToInt(hexInt) {
	  return Number.parseInt(hexInt, 16);
	}

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

	function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

	function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

	const pify = __webpack_require__(90);

	const BaseBlockTracker = __webpack_require__(191);

	const sec = 1000;

	class PollingBlockTracker extends BaseBlockTracker {
	  constructor(opts = {}) {
	    // parse + validate args
	    if (!opts.provider) throw new Error('PollingBlockTracker - no provider specified.');
	    const pollingInterval = opts.pollingInterval || 20 * sec;
	    const retryTimeout = opts.retryTimeout || pollingInterval / 10;
	    const keepEventLoopActive = opts.keepEventLoopActive !== undefined ? opts.keepEventLoopActive : true;
	    const setSkipCacheFlag = opts.setSkipCacheFlag || false; // BaseBlockTracker constructor

	    super(_extends({
	      blockResetDuration: pollingInterval
	    }, opts)); // config

	    this._provider = opts.provider;
	    this._pollingInterval = pollingInterval;
	    this._retryTimeout = retryTimeout;
	    this._keepEventLoopActive = keepEventLoopActive;
	    this._setSkipCacheFlag = setSkipCacheFlag;
	  } //
	  // public
	  //
	  // trigger block polling


	  checkForLatestBlock() {
	    var _this = this;

	    return _asyncToGenerator(function* () {
	      yield _this._updateLatestBlock();
	      return yield _this.getLatestBlock();
	    })();
	  } //
	  // private
	  //


	  _start() {
	    this._performSync().catch(err => this.emit('error', err));
	  }

	  _performSync() {
	    var _this2 = this;

	    return _asyncToGenerator(function* () {
	      while (_this2._isRunning) {
	        try {
	          yield _this2._updateLatestBlock();
	          yield timeout(_this2._pollingInterval, !_this2._keepEventLoopActive);
	        } catch (err) {
	          const newErr = new Error(`PollingBlockTracker - encountered an error while attempting to update latest block:\n${err.stack}`);

	          try {
	            _this2.emit('error', newErr);
	          } catch (emitErr) {
	            console.error(newErr);
	          }

	          yield timeout(_this2._retryTimeout, !_this2._keepEventLoopActive);
	        }
	      }
	    })();
	  }

	  _updateLatestBlock() {
	    var _this3 = this;

	    return _asyncToGenerator(function* () {
	      // fetch + set latest block
	      const latestBlock = yield _this3._fetchLatestBlock();

	      _this3._newPotentialLatest(latestBlock);
	    })();
	  }

	  _fetchLatestBlock() {
	    var _this4 = this;

	    return _asyncToGenerator(function* () {
	      const req = {
	        jsonrpc: "2.0",
	        id: 1,
	        method: 'eth_blockNumber',
	        params: []
	      };
	      if (_this4._setSkipCacheFlag) req.skipCache = true;
	      const res = yield pify(cb => _this4._provider.sendAsync(req, cb))();
	      if (res.error) throw new Error(`PollingBlockTracker - encountered error fetching block:\n${res.error}`);
	      return res.result;
	    })();
	  }

	}

	module.exports = PollingBlockTracker;

	function timeout(duration, unref) {
	  return new Promise(resolve => {
	    const timoutRef = setTimeout(resolve, duration); // don't keep process open

	    if (timoutRef.unref && unref) {
	      timoutRef.unref();
	    }
	  });
	}

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

	function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

	const BaseFilter = __webpack_require__(75); // tracks all results ever recorded


	class BaseFilterWithHistory extends BaseFilter {
	  constructor() {
	    super();
	    this.allResults = [];
	  }

	  update() {
	    return _asyncToGenerator(function* () {
	      throw new Error('BaseFilterWithHistory - no update method specified');
	    })();
	  }

	  addResults(newResults) {
	    this.allResults = this.allResults.concat(newResults);
	    super.addResults(newResults);
	  }

	  addInitialResults(newResults) {
	    this.allResults = this.allResults.concat(newResults);
	    super.addInitialResults(newResults);
	  }

	  getAllResults() {
	    return this.allResults;
	  }

	}

	module.exports = BaseFilterWithHistory;

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

	function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

	const BaseFilter = __webpack_require__(75);

	const getBlocksForRange = __webpack_require__(103);

	const {
	  incrementHexInt
	} = __webpack_require__(52);

	class BlockFilter extends BaseFilter {
	  constructor({
	    provider,
	    params
	  }) {
	    super();
	    this.type = 'block';
	    this.provider = provider;
	  }

	  update({
	    oldBlock,
	    newBlock
	  }) {
	    var _this = this;

	    return _asyncToGenerator(function* () {
	      const toBlock = newBlock;
	      const fromBlock = incrementHexInt(oldBlock);
	      const blockBodies = yield getBlocksForRange({
	        provider: _this.provider,
	        fromBlock,
	        toBlock
	      });
	      const blockHashes = blockBodies.map(block => block.hash);

	      _this.addResults(blockHashes);
	    })();
	  }

	}

	module.exports = BlockFilter;

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

	function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

	const Mutex = __webpack_require__(185).Mutex;

	const createAsyncMiddleware = __webpack_require__(202);

	const createJsonRpcMiddleware = __webpack_require__(274);

	const LogFilter = __webpack_require__(196);

	const BlockFilter = __webpack_require__(194);

	const TxFilter = __webpack_require__(197);

	const {
	  intToHex,
	  hexToInt
	} = __webpack_require__(52);

	module.exports = createEthFilterMiddleware;

	function createEthFilterMiddleware({
	  blockTracker,
	  provider
	}) {
	  // create filter collection
	  let filterIndex = 0;
	  let filters = {}; // create update mutex

	  const mutex = new Mutex();
	  const waitForFree = mutexMiddlewareWrapper({
	    mutex
	  });
	  const middleware = createJsonRpcMiddleware({
	    // install filters
	    eth_newFilter: waitForFree(toFilterCreationMiddleware(newLogFilter)),
	    eth_newBlockFilter: waitForFree(toFilterCreationMiddleware(newBlockFilter)),
	    eth_newPendingTransactionFilter: waitForFree(toFilterCreationMiddleware(newPendingTransactionFilter)),
	    // uninstall filters
	    eth_uninstallFilter: waitForFree(toAsyncRpcMiddleware(uninstallFilterHandler)),
	    // checking filter changes
	    eth_getFilterChanges: waitForFree(toAsyncRpcMiddleware(getFilterChanges)),
	    eth_getFilterLogs: waitForFree(toAsyncRpcMiddleware(getFilterLogs))
	  }); // setup filter updating and destroy handler

	  const filterUpdater = /*#__PURE__*/function () {
	    var _ref = _asyncToGenerator(function* ({
	      oldBlock,
	      newBlock
	    }) {
	      if (filters.length === 0) return; // lock update reads

	      const releaseLock = yield mutex.acquire();

	      try {
	        // process all filters in parallel
	        yield Promise.all(objValues(filters).map( /*#__PURE__*/function () {
	          var _ref2 = _asyncToGenerator(function* (filter) {
	            try {
	              yield filter.update({
	                oldBlock,
	                newBlock
	              });
	            } catch (err) {
	              // handle each error individually so filter update errors don't affect other filters
	              console.error(err);
	            }
	          });

	          return function (_x2) {
	            return _ref2.apply(this, arguments);
	          };
	        }()));
	      } catch (err) {
	        // log error so we don't skip the releaseLock
	        console.error(err);
	      } // unlock update reads


	      releaseLock();
	    });

	    return function filterUpdater(_x) {
	      return _ref.apply(this, arguments);
	    };
	  }(); // expose filter methods directly


	  middleware.newLogFilter = newLogFilter;
	  middleware.newBlockFilter = newBlockFilter;
	  middleware.newPendingTransactionFilter = newPendingTransactionFilter;
	  middleware.uninstallFilter = uninstallFilterHandler;
	  middleware.getFilterChanges = getFilterChanges;
	  middleware.getFilterLogs = getFilterLogs; // expose destroy method for cleanup

	  middleware.destroy = () => {
	    uninstallAllFilters();
	  };

	  return middleware; //
	  // new filters
	  //

	  function newLogFilter(_x3) {
	    return _newLogFilter.apply(this, arguments);
	  }

	  function _newLogFilter() {
	    _newLogFilter = _asyncToGenerator(function* (params) {
	      const filter = new LogFilter({
	        provider,
	        params
	      });
	      const filterIndex = yield installFilter(filter);
	      return filter;
	    });
	    return _newLogFilter.apply(this, arguments);
	  }

	  function newBlockFilter() {
	    return _newBlockFilter.apply(this, arguments);
	  }

	  function _newBlockFilter() {
	    _newBlockFilter = _asyncToGenerator(function* () {
	      const filter = new BlockFilter({
	        provider
	      });
	      const filterIndex = yield installFilter(filter);
	      return filter;
	    });
	    return _newBlockFilter.apply(this, arguments);
	  }

	  function newPendingTransactionFilter() {
	    return _newPendingTransactionFilter.apply(this, arguments);
	  } //
	  // get filter changes
	  //


	  function _newPendingTransactionFilter() {
	    _newPendingTransactionFilter = _asyncToGenerator(function* () {
	      const filter = new TxFilter({
	        provider
	      });
	      const filterIndex = yield installFilter(filter);
	      return filter;
	    });
	    return _newPendingTransactionFilter.apply(this, arguments);
	  }

	  function getFilterChanges(_x4) {
	    return _getFilterChanges.apply(this, arguments);
	  }

	  function _getFilterChanges() {
	    _getFilterChanges = _asyncToGenerator(function* (filterIndexHex) {
	      const filterIndex = hexToInt(filterIndexHex);
	      const filter = filters[filterIndex];

	      if (!filter) {
	        throw new Error(`No filter for index "${filterIndex}"`);
	      }

	      const results = filter.getChangesAndClear();
	      return results;
	    });
	    return _getFilterChanges.apply(this, arguments);
	  }

	  function getFilterLogs(_x5) {
	    return _getFilterLogs.apply(this, arguments);
	  } //
	  // remove filters
	  //


	  function _getFilterLogs() {
	    _getFilterLogs = _asyncToGenerator(function* (filterIndexHex) {
	      const filterIndex = hexToInt(filterIndexHex);
	      const filter = filters[filterIndex];

	      if (!filter) {
	        throw new Error(`No filter for index "${filterIndex}"`);
	      } // only return results for log filters


	      if (filter.type === 'log') {
	        results = filter.getAllResults();
	      } else {
	        results = [];
	      }

	      return results;
	    });
	    return _getFilterLogs.apply(this, arguments);
	  }

	  function uninstallFilterHandler(_x6) {
	    return _uninstallFilterHandler.apply(this, arguments);
	  } //
	  // utils
	  //


	  function _uninstallFilterHandler() {
	    _uninstallFilterHandler = _asyncToGenerator(function* (filterIndexHex) {
	      // check filter exists
	      const filterIndex = hexToInt(filterIndexHex);
	      const filter = filters[filterIndex];
	      const result = Boolean(filter); // uninstall filter

	      if (result) {
	        yield uninstallFilter(filterIndex);
	      }

	      return result;
	    });
	    return _uninstallFilterHandler.apply(this, arguments);
	  }

	  function installFilter(_x7) {
	    return _installFilter.apply(this, arguments);
	  }

	  function _installFilter() {
	    _installFilter = _asyncToGenerator(function* (filter) {
	      const prevFilterCount = objValues(filters).length; // install filter

	      const currentBlock = yield blockTracker.getLatestBlock();
	      yield filter.initialize({
	        currentBlock
	      });
	      filterIndex++;
	      filters[filterIndex] = filter;
	      filter.id = filterIndex;
	      filter.idHex = intToHex(filterIndex); // update block tracker subs

	      const newFilterCount = objValues(filters).length;
	      updateBlockTrackerSubs({
	        prevFilterCount,
	        newFilterCount
	      });
	      return filterIndex;
	    });
	    return _installFilter.apply(this, arguments);
	  }

	  function uninstallFilter(_x8) {
	    return _uninstallFilter.apply(this, arguments);
	  }

	  function _uninstallFilter() {
	    _uninstallFilter = _asyncToGenerator(function* (filterIndex) {
	      const prevFilterCount = objValues(filters).length;
	      delete filters[filterIndex]; // update block tracker subs

	      const newFilterCount = objValues(filters).length;
	      updateBlockTrackerSubs({
	        prevFilterCount,
	        newFilterCount
	      });
	    });
	    return _uninstallFilter.apply(this, arguments);
	  }

	  function uninstallAllFilters() {
	    return _uninstallAllFilters.apply(this, arguments);
	  }

	  function _uninstallAllFilters() {
	    _uninstallAllFilters = _asyncToGenerator(function* () {
	      const prevFilterCount = objValues(filters).length;
	      filters = {}; // update block tracker subs

	      updateBlockTrackerSubs({
	        prevFilterCount,
	        newFilterCount: 0
	      });
	    });
	    return _uninstallAllFilters.apply(this, arguments);
	  }

	  function updateBlockTrackerSubs({
	    prevFilterCount,
	    newFilterCount
	  }) {
	    // subscribe
	    if (prevFilterCount === 0 && newFilterCount > 0) {
	      blockTracker.on('sync', filterUpdater);
	      return;
	    } // unsubscribe


	    if (prevFilterCount > 0 && newFilterCount === 0) {
	      blockTracker.removeListener('sync', filterUpdater);
	      return;
	    }
	  }
	} // helper for turning filter constructors into rpc middleware


	function toFilterCreationMiddleware(createFilterFn) {
	  return toAsyncRpcMiddleware( /*#__PURE__*/function () {
	    var _ref3 = _asyncToGenerator(function* (...args) {
	      const filter = yield createFilterFn(...args);
	      const result = intToHex(filter.id);
	      return result;
	    });

	    return function () {
	      return _ref3.apply(this, arguments);
	    };
	  }());
	} // helper for pulling out req.params and setting res.result


	function toAsyncRpcMiddleware(asyncFn) {
	  return createAsyncMiddleware( /*#__PURE__*/function () {
	    var _ref4 = _asyncToGenerator(function* (req, res) {
	      const result = yield asyncFn.apply(null, req.params);
	      res.result = result;
	    });

	    return function (_x9, _x10) {
	      return _ref4.apply(this, arguments);
	    };
	  }());
	}

	function mutexMiddlewareWrapper({
	  mutex
	}) {
	  return middleware => {
	    return /*#__PURE__*/function () {
	      var _ref5 = _asyncToGenerator(function* (req, res, next, end) {
	        // wait for mutex available
	        // we can release immediately because
	        // we just need to make sure updates aren't active
	        const releaseLock = yield mutex.acquire();
	        releaseLock();
	        middleware(req, res, next, end);
	      });

	      return function (_x11, _x12, _x13, _x14) {
	        return _ref5.apply(this, arguments);
	      };
	    }();
	  };
	}

	function objValues(obj, fn) {
	  const values = [];

	  for (let key in obj) {
	    values.push(obj[key]);
	  }

	  return values;
	}

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

	function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

	function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

	const EthQuery = __webpack_require__(123);

	const pify = __webpack_require__(90);

	const BaseFilterWithHistory = __webpack_require__(193);

	const {
	  bnToHex,
	  hexToInt,
	  incrementHexInt,
	  minBlockRef,
	  blockRefIsNumber
	} = __webpack_require__(52);

	class LogFilter extends BaseFilterWithHistory {
	  constructor({
	    provider,
	    params
	  }) {
	    super();
	    this.type = 'log';
	    this.ethQuery = new EthQuery(provider);
	    this.params = _extends({
	      fromBlock: 'latest',
	      toBlock: 'latest',
	      address: undefined,
	      topics: []
	    }, params); // normalize address parameter

	    if (this.params.address) {
	      // ensure array
	      if (!Array.isArray(this.params.address)) {
	        this.params.address = [this.params.address];
	      } // ensure lowercase


	      this.params.address = this.params.address.map(address => address.toLowerCase());
	    }
	  }

	  initialize({
	    currentBlock
	  }) {
	    var _this = this;

	    return _asyncToGenerator(function* () {
	      // resolve params.fromBlock
	      let fromBlock = _this.params.fromBlock;
	      if (['latest', 'pending'].includes(fromBlock)) fromBlock = currentBlock;
	      if ('earliest' === fromBlock) fromBlock = '0x0';
	      _this.params.fromBlock = fromBlock; // set toBlock for initial lookup

	      const toBlock = minBlockRef(_this.params.toBlock, currentBlock);

	      const params = _extends({}, _this.params, {
	        toBlock
	      }); // fetch logs and add to results


	      const newLogs = yield _this._fetchLogs(params);

	      _this.addInitialResults(newLogs);
	    })();
	  }

	  update({
	    oldBlock,
	    newBlock
	  }) {
	    var _this2 = this;

	    return _asyncToGenerator(function* () {
	      // configure params for this update
	      const toBlock = newBlock;
	      let fromBlock; // oldBlock is empty on first sync

	      if (oldBlock) {
	        fromBlock = incrementHexInt(oldBlock);
	      } else {
	        fromBlock = newBlock;
	      } // fetch logs


	      const params = _extends({}, _this2.params, {
	        fromBlock,
	        toBlock
	      });

	      const newLogs = yield _this2._fetchLogs(params);
	      const matchingLogs = newLogs.filter(log => _this2.matchLog(log)); // add to results

	      _this2.addResults(matchingLogs);
	    })();
	  }

	  _fetchLogs(params) {
	    var _this3 = this;

	    return _asyncToGenerator(function* () {
	      const newLogs = yield pify(cb => _this3.ethQuery.getLogs(params, cb))(); // add to results

	      return newLogs;
	    })();
	  }

	  matchLog(log) {
	    // check if block number in bounds:
	    if (hexToInt(this.params.fromBlock) >= hexToInt(log.blockNumber)) return false;
	    if (blockRefIsNumber(this.params.toBlock) && hexToInt(this.params.toBlock) <= hexToInt(log.blockNumber)) return false; // address is correct:

	    const normalizedLogAddress = log.address && log.address.toLowerCase();
	    if (this.params.address && normalizedLogAddress && !this.params.address.includes(normalizedLogAddress)) return false; // topics match:
	    // topics are position-dependant
	    // topics can be nested to represent `or` [[a || b], c]
	    // topics can be null, representing a wild card for that position

	    const topicsMatch = this.params.topics.every((topicPattern, index) => {
	      // pattern is longer than actual topics
	      let logTopic = log.topics[index];
	      if (!logTopic) return false;
	      logTopic = logTopic.toLowerCase(); // normalize subTopics

	      let subtopicsToMatch = Array.isArray(topicPattern) ? topicPattern : [topicPattern]; // check for wild card

	      const subtopicsIncludeWildcard = subtopicsToMatch.includes(null);
	      if (subtopicsIncludeWildcard) return true;
	      subtopicsToMatch = subtopicsToMatch.map(topic => topic.toLowerCase()); // check each possible matching topic

	      const topicDoesMatch = subtopicsToMatch.includes(logTopic);
	      return topicDoesMatch;
	    });
	    return topicsMatch;
	  }

	}

	module.exports = LogFilter;

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

	function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

	const flatMap = __webpack_require__(332);

	const BaseFilter = __webpack_require__(75);

	const getBlocksForRange = __webpack_require__(103);

	const {
	  incrementHexInt
	} = __webpack_require__(52);

	class TxFilter extends BaseFilter {
	  constructor({
	    provider
	  }) {
	    super();
	    this.type = 'tx';
	    this.provider = provider;
	  }

	  update({
	    oldBlock
	  }) {
	    var _this = this;

	    return _asyncToGenerator(function* () {
	      const toBlock = oldBlock;
	      const fromBlock = incrementHexInt(oldBlock);
	      const blocks = yield getBlocksForRange({
	        provider: _this.provider,
	        fromBlock,
	        toBlock
	      });
	      const blockTxHashes = flatMap(blocks, block => block.transactions); // add to results

	      _this.addResults(blockTxHashes);
	    })();
	  }

	}

	module.exports = TxFilter;

/***/ },
/* 198 */
[429, 199],
/* 199 */
[430, 201, 200],
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict"; // This file is imported from secp256k1 v3
	// https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE

	var EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer.from([// begin
	0x30, 0x81, 0xd3, 0x02, 0x01, 0x01, 0x04, 0x20, // private key
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // middle
	0xa0, 0x81, 0x85, 0x30, 0x81, 0x82, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04, 0x21, 0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xba, 0xae, 0xdc, 0xe6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5e, 0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x24, 0x03, 0x22, 0x00, // public key
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
	var EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer.from([// begin
	0x30, 0x82, 0x01, 0x13, 0x02, 0x01, 0x01, 0x04, 0x20, // private key
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // middle
	0xa0, 0x81, 0xa5, 0x30, 0x81, 0xa2, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04, 0x41, 0x04, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x48, 0x3a, 0xda, 0x77, 0x26, 0xa3, 0xc4, 0x65, 0x5d, 0xa4, 0xfb, 0xfc, 0x0e, 0x11, 0x08, 0xa8, 0xfd, 0x17, 0xb4, 0x48, 0xa6, 0x85, 0x54, 0x19, 0x9c, 0x47, 0xd0, 0x8f, 0xfb, 0x10, 0xd4, 0xb8, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xba, 0xae, 0xdc, 0xe6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5e, 0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x44, 0x03, 0x42, 0x00, // public key
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);

	exports.privateKeyExport = function (privateKey, publicKey, compressed) {
	  var result = Buffer.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED);
	  privateKey.copy(result, compressed ? 8 : 9);
	  publicKey.copy(result, compressed ? 181 : 214);
	  return result;
	};

	exports.privateKeyImport = function (privateKey) {
	  var length = privateKey.length; // sequence header

	  var index = 0;
	  if (length < index + 1 || privateKey[index] !== 0x30) return null;
	  index += 1; // sequence length constructor

	  if (length < index + 1 || !(privateKey[index] & 0x80)) return null;
	  var lenb = privateKey[index] & 0x7f;
	  index += 1;
	  if (lenb < 1 || lenb > 2) return null;
	  if (length < index + lenb) return null; // sequence length

	  var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0);
	  index += lenb;
	  if (length < index + len) return null; // sequence element 0: version number (=1)

	  if (length < index + 3 || privateKey[index] !== 0x02 || privateKey[index + 1] !== 0x01 || privateKey[index + 2] !== 0x01) {
	    return null;
	  }

	  index += 3; // sequence element 1: octet string, up to 32 bytes

	  if (length < index + 2 || privateKey[index] !== 0x04 || privateKey[index + 1] > 0x20 || length < index + 2 + privateKey[index + 1]) {
	    return null;
	  }

	  return privateKey.slice(index + 2, index + 2 + privateKey[index + 1]);
	};

	exports.signatureImportLax = function (signature) {
	  var r = Buffer.alloc(32, 0);
	  var s = Buffer.alloc(32, 0);
	  var length = signature.length;
	  var index = 0; // sequence tag byte

	  if (signature[index++] !== 0x30) {
	    return null;
	  } // sequence length byte


	  var lenbyte = signature[index++];

	  if (lenbyte & 0x80) {
	    index += lenbyte - 0x80;

	    if (index > length) {
	      return null;
	    }
	  } // sequence tag byte for r


	  if (signature[index++] !== 0x02) {
	    return null;
	  } // length for r


	  var rlen = signature[index++];

	  if (rlen & 0x80) {
	    lenbyte = rlen - 0x80;

	    if (index + lenbyte > length) {
	      return null;
	    }

	    for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1) {}

	    for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1) {
	      rlen = (rlen << 8) + signature[index];
	    }
	  }

	  if (rlen > length - index) {
	    return null;
	  }

	  var rindex = index;
	  index += rlen; // sequence tag byte for s

	  if (signature[index++] !== 0x02) {
	    return null;
	  } // length for s


	  var slen = signature[index++];

	  if (slen & 0x80) {
	    lenbyte = slen - 0x80;

	    if (index + lenbyte > length) {
	      return null;
	    }

	    for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1) {}

	    for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1) {
	      slen = (slen << 8) + signature[index];
	    }
	  }

	  if (slen > length - index) {
	    return null;
	  }

	  var sindex = index;
	  index += slen; // ignore leading zeros in r

	  for (; rlen > 0 && signature[rindex] === 0x00; rlen -= 1, rindex += 1) {} // copy r value


	  if (rlen > 32) {
	    return null;
	  }

	  var rvalue = signature.slice(rindex, rindex + rlen);
	  rvalue.copy(r, 32 - rvalue.length); // ignore leading zeros in s

	  for (; slen > 0 && signature[sindex] === 0x00; slen -= 1, sindex += 1) {} // copy s value


	  if (slen > 32) {
	    return null;
	  }

	  var svalue = signature.slice(sindex, sindex + slen);
	  svalue.copy(s, 32 - svalue.length);
	  return {
	    r: r,
	    s: s
	  };
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict'; // This file is imported from secp256k1 v3
	// https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE

	var BN = __webpack_require__(4);

	var EC = __webpack_require__(35).ec;

	var ec = new EC('secp256k1');
	var ecparams = ec.curve;

	exports.privateKeyExport = function (privateKey, compressed) {
	  var d = new BN(privateKey);

	  if (d.ucmp(ecparams.n) >= 0) {
	    throw new Error('couldn\'t export to DER format');
	  }

	  var point = ec.g.mul(d);
	  return toPublicKey(point.getX(), point.getY(), compressed);
	};

	exports.privateKeyModInverse = function (privateKey) {
	  var bn = new BN(privateKey);

	  if (bn.ucmp(ecparams.n) >= 0 || bn.isZero()) {
	    throw new Error('private key range is invalid');
	  }

	  return bn.invm(ecparams.n).toArrayLike(Buffer, 'be', 32);
	};

	exports.signatureImport = function (sigObj) {
	  var r = new BN(sigObj.r);

	  if (r.ucmp(ecparams.n) >= 0) {
	    r = new BN(0);
	  }

	  var s = new BN(sigObj.s);

	  if (s.ucmp(ecparams.n) >= 0) {
	    s = new BN(0);
	  }

	  return Buffer.concat([r.toArrayLike(Buffer, 'be', 32), s.toArrayLike(Buffer, 'be', 32)]);
	};

	exports.ecdhUnsafe = function (publicKey, privateKey, compressed) {
	  var point = ec.keyFromPublic(publicKey);
	  var scalar = new BN(privateKey);

	  if (scalar.ucmp(ecparams.n) >= 0 || scalar.isZero()) {
	    throw new Error('scalar was invalid (zero or overflow)');
	  }

	  var shared = point.pub.mul(scalar);
	  return toPublicKey(shared.getX(), shared.getY(), compressed);
	};

	var toPublicKey = function toPublicKey(x, y, compressed) {
	  var publicKey = void 0;

	  if (compressed) {
	    publicKey = Buffer.alloc(33);
	    publicKey[0] = y.isOdd() ? 0x03 : 0x02;
	    x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);
	  } else {
	    publicKey = Buffer.alloc(65);
	    publicKey[0] = 0x04;
	    x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);
	    y.toArrayLike(Buffer, 'be', 32).copy(publicKey, 33);
	  }

	  return publicKey;
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 202 */
/***/ function(module, exports) {

	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

	function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

	/**
	 * JsonRpcEngine only accepts callback-based middleware directly.
	 * createAsyncMiddleware exists to enable consumers to pass in async middleware
	 * functions.
	 *
	 * Async middleware have no "end" function. Instead, they "end" if they return
	 * without calling "next". Rather than passing in explicit return handlers,
	 * async middleware can simply await "next", and perform operations on the
	 * response object when execution resumes.
	 *
	 * To accomplish this, createAsyncMiddleware passes the async middleware a
	 * wrapped "next" function. That function calls the internal JsonRpcEngine
	 * "next" function with a return handler that resolves a promise when called.
	 *
	 * The return handler will always be called. Its resolution of the promise
	 * enables the control flow described above.
	 */
	module.exports = function createAsyncMiddleware(asyncMiddleware) {
	  return (req, res, next, end) => {
	    // nextPromise is the key to the implementation
	    // it is resolved by the return handler passed to the
	    // "next" function
	    let resolveNextPromise;
	    const nextPromise = new Promise(resolve => {
	      resolveNextPromise = resolve;
	    });
	    let returnHandlerCallback, nextWasCalled;

	    const asyncNext = /*#__PURE__*/function () {
	      var _ref = _asyncToGenerator(function* () {
	        nextWasCalled = true;
	        next(callback => {
	          // eslint-disable-line callback-return
	          returnHandlerCallback = callback;
	          resolveNextPromise();
	        });
	        yield nextPromise;
	      });

	      return function asyncNext() {
	        return _ref.apply(this, arguments);
	      };
	    }();

	    asyncMiddleware(req, res, asyncNext).then( /*#__PURE__*/_asyncToGenerator(function* () {
	      if (nextWasCalled) {
	        yield nextPromise; // we must wait until the return handler is called

	        returnHandlerCallback(null);
	      } else {
	        end(null);
	      }
	    })).catch(error => {
	      if (returnHandlerCallback) {
	        returnHandlerCallback(error);
	      } else {
	        end(error);
	      }
	    });
	  };
	};

/***/ },
/* 203 */
/***/ function(module, exports) {

	module.exports = function createScaffoldMiddleware(handlers) {
	  return (req, res, next, end) => {
	    const handler = handlers[req.method]; // if no handler, return

	    if (handler === undefined) {
	      return next();
	    } // if handler is fn, call as middleware


	    if (typeof handler === 'function') {
	      return handler(req, res, next, end);
	    } // if handler is some other value, use as result


	    res.result = handler;
	    return end();
	  };
	};

/***/ },
/* 204 */
[430, 206, 205],
/* 205 */
200,
/* 206 */
201,
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * Uses ethereumjs-tx to sign a transaction.
	 *
	 * The two callbacks a user needs to implement are:
	 * - getAccounts() -- array of addresses supported
	 * - getPrivateKey(address) -- return private key for a given address
	 *
	 * Optionally approveTransaction(), approveMessage() can be supplied too.
	 */
	const inherits = __webpack_require__(11).inherits;

	const HookedWalletProvider = __webpack_require__(208);

	const EthTx = __webpack_require__(76);

	const ethUtil = __webpack_require__(53);

	const sigUtil = __webpack_require__(124);

	module.exports = HookedWalletEthTxSubprovider;
	inherits(HookedWalletEthTxSubprovider, HookedWalletProvider);

	function HookedWalletEthTxSubprovider(opts) {
	  const self = this;
	  HookedWalletEthTxSubprovider.super_.call(self, opts);

	  self.signTransaction = function (txData, cb) {
	    // defaults
	    if (txData.gas !== undefined) txData.gasLimit = txData.gas;
	    txData.value = txData.value || '0x00';
	    txData.data = ethUtil.addHexPrefix(txData.data);
	    opts.getPrivateKey(txData.from, function (err, privateKey) {
	      if (err) return cb(err);
	      var tx = new EthTx(txData);
	      tx.sign(privateKey);
	      cb(null, '0x' + tx.serialize().toString('hex'));
	    });
	  };

	  self.signMessage = function (msgParams, cb) {
	    opts.getPrivateKey(msgParams.from, function (err, privateKey) {
	      if (err) return cb(err);
	      var dataBuff = ethUtil.toBuffer(msgParams.data);
	      var msgHash = ethUtil.hashPersonalMessage(dataBuff);
	      var sig = ethUtil.ecsign(msgHash, privateKey);
	      var serialized = ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));
	      cb(null, serialized);
	    });
	  };

	  self.signPersonalMessage = function (msgParams, cb) {
	    opts.getPrivateKey(msgParams.from, function (err, privateKey) {
	      if (err) return cb(err);
	      const serialized = sigUtil.personalSign(privateKey, msgParams);
	      cb(null, serialized);
	    });
	  };

	  self.signTypedMessage = function (msgParams, cb) {
	    opts.getPrivateKey(msgParams.from, function (err, privateKey) {
	      if (err) return cb(err);
	      const serialized = sigUtil.signTypedData(privateKey, msgParams);
	      cb(null, serialized);
	    });
	  };
	}

	function concatSig(v, r, s) {
	  r = ethUtil.fromSigned(r);
	  s = ethUtil.fromSigned(s);
	  v = ethUtil.bufferToInt(v);
	  r = ethUtil.toUnsigned(r).toString('hex').padStart(64, 0);
	  s = ethUtil.toUnsigned(s).toString('hex').padStart(64, 0);
	  v = ethUtil.stripHexPrefix(ethUtil.intToHex(v));
	  return ethUtil.addHexPrefix(r.concat(s, v).toString("hex"));
	}

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * Emulate 'eth_accounts' / 'eth_sendTransaction' using 'eth_sendRawTransaction'
	 *
	 * The two callbacks a user needs to implement are:
	 * - getAccounts() -- array of addresses supported
	 * - signTransaction(tx) -- sign a raw transaction object
	 */
	const waterfall = __webpack_require__(184);

	const parallel = __webpack_require__(183);

	const inherits = __webpack_require__(11).inherits;

	const ethUtil = __webpack_require__(53);

	const sigUtil = __webpack_require__(124);

	const extend = __webpack_require__(71);

	const Semaphore = __webpack_require__(367);

	const Subprovider = __webpack_require__(54);

	const estimateGas = __webpack_require__(211);

	const hexRegex = /^[0-9A-Fa-f]+$/g;
	module.exports = HookedWalletSubprovider; // handles the following RPC methods:
	//   eth_coinbase
	//   eth_accounts
	//   eth_sendTransaction
	//   eth_sign
	//   eth_signTypedData
	//   eth_signTypedData_v3
	//   eth_signTypedData_v4
	//   personal_sign
	//   eth_decryptMessage
	//   encryption_public_key
	//   personal_ecRecover
	//   parity_postTransaction
	//   parity_checkRequest
	//   parity_defaultAccount
	//
	// Tx Signature Flow
	//
	// handleRequest: eth_sendTransaction
	//   validateTransaction (basic validity check)
	//     validateSender (checks that sender is in accounts)
	//   processTransaction (sign tx and submit to network)
	//     approveTransaction (UI approval hook)
	//     checkApproval
	//     finalizeAndSubmitTx (tx signing)
	//       nonceLock.take (bottle neck to ensure atomic nonce)
	//         fillInTxExtras (set fallback gasPrice, nonce, etc)
	//         signTransaction (perform the signature)
	//         publishTransaction (publish signed tx to network)
	//

	inherits(HookedWalletSubprovider, Subprovider);

	function HookedWalletSubprovider(opts) {
	  const self = this; // control flow

	  self.nonceLock = Semaphore(1); // data lookup

	  if (opts.getAccounts) self.getAccounts = opts.getAccounts; // high level override

	  if (opts.processTransaction) self.processTransaction = opts.processTransaction;
	  if (opts.processMessage) self.processMessage = opts.processMessage;
	  if (opts.processPersonalMessage) self.processPersonalMessage = opts.processPersonalMessage;
	  if (opts.processTypedMessage) self.processTypedMessage = opts.processTypedMessage; // approval hooks

	  self.approveTransaction = opts.approveTransaction || self.autoApprove;
	  self.approveMessage = opts.approveMessage || self.autoApprove;
	  self.approvePersonalMessage = opts.approvePersonalMessage || self.autoApprove;
	  self.approveDecryptMessage = opts.approveDecryptMessage || self.autoApprove;
	  self.approveEncryptionPublicKey = opts.approveEncryptionPublicKey || self.autoApprove;
	  self.approveTypedMessage = opts.approveTypedMessage || self.autoApprove; // actually perform the signature

	  if (opts.signTransaction) self.signTransaction = opts.signTransaction || mustProvideInConstructor('signTransaction');
	  if (opts.signMessage) self.signMessage = opts.signMessage || mustProvideInConstructor('signMessage');
	  if (opts.signPersonalMessage) self.signPersonalMessage = opts.signPersonalMessage || mustProvideInConstructor('signPersonalMessage');
	  if (opts.decryptMessage) self.decryptMessage = opts.decryptMessage || mustProvideInConstructor('decryptMessage');
	  if (opts.encryptionPublicKey) self.encryptionPublicKey = opts.encryptionPublicKey || mustProvideInConstructor('encryptionPublicKey');
	  if (opts.signTypedMessage) self.signTypedMessage = opts.signTypedMessage || mustProvideInConstructor('signTypedMessage');
	  if (opts.recoverPersonalSignature) self.recoverPersonalSignature = opts.recoverPersonalSignature; // publish to network

	  if (opts.publishTransaction) self.publishTransaction = opts.publishTransaction; // gas options

	  self.estimateGas = opts.estimateGas || self.estimateGas;
	  self.getGasPrice = opts.getGasPrice || self.getGasPrice;
	}

	HookedWalletSubprovider.prototype.handleRequest = function (payload, next, end) {
	  const self = this;
	  self._parityRequests = {};
	  self._parityRequestCount = 0; // switch statement is not block scoped
	  // sp we cant repeat var declarations

	  let txParams, msgParams, extraParams;
	  let message, address;

	  switch (payload.method) {
	    case 'eth_coinbase':
	      // process normally
	      self.getAccounts(function (err, accounts) {
	        if (err) return end(err);
	        let result = accounts[0] || null;
	        end(null, result);
	      });
	      return;

	    case 'eth_accounts':
	      // process normally
	      self.getAccounts(function (err, accounts) {
	        if (err) return end(err);
	        end(null, accounts);
	      });
	      return;

	    case 'eth_sendTransaction':
	      txParams = payload.params[0];
	      waterfall([cb => self.validateTransaction(txParams, cb), cb => self.processTransaction(txParams, cb)], end);
	      return;

	    case 'eth_signTransaction':
	      txParams = payload.params[0];
	      waterfall([cb => self.validateTransaction(txParams, cb), cb => self.processSignTransaction(txParams, cb)], end);
	      return;

	    case 'eth_sign':
	      // process normally
	      address = payload.params[0];
	      message = payload.params[1]; // non-standard "extraParams" to be appended to our "msgParams" obj
	      // good place for metadata

	      extraParams = payload.params[2] || {};
	      msgParams = extend(extraParams, {
	        from: address,
	        data: message
	      });
	      waterfall([cb => self.validateMessage(msgParams, cb), cb => self.processMessage(msgParams, cb)], end);
	      return;

	    case 'personal_sign':
	      return function () {
	        // process normally
	        const first = payload.params[0];
	        const second = payload.params[1]; // We initially incorrectly ordered these parameters.
	        // To gracefully respect users who adopted this API early,
	        // we are currently gracefully recovering from the wrong param order
	        // when it is clearly identifiable.
	        //
	        // That means when the first param is definitely an address,
	        // and the second param is definitely not, but is hex.

	        if (resemblesData(second) && resemblesAddress(first)) {
	          let warning = `The eth_personalSign method requires params ordered `;
	          warning += `[message, address]. This was previously handled incorrectly, `;
	          warning += `and has been corrected automatically. `;
	          warning += `Please switch this param order for smooth behavior in the future.`;
	          console.warn(warning);
	          address = payload.params[0];
	          message = payload.params[1];
	        } else {
	          message = payload.params[0];
	          address = payload.params[1];
	        } // non-standard "extraParams" to be appended to our "msgParams" obj
	        // good place for metadata


	        extraParams = payload.params[2] || {};
	        msgParams = extend(extraParams, {
	          from: address,
	          data: message
	        });
	        waterfall([cb => self.validatePersonalMessage(msgParams, cb), cb => self.processPersonalMessage(msgParams, cb)], end);
	      }();

	    case 'eth_decryptMessage':
	      return function () {
	        // process normally
	        const first = payload.params[0];
	        const second = payload.params[1]; // We initially incorrectly ordered these parameters.
	        // To gracefully respect users who adopted this API early,
	        // we are currently gracefully recovering from the wrong param order
	        // when it is clearly identifiable.
	        //
	        // That means when the first param is definitely an address,
	        // and the second param is definitely not, but is hex.

	        if (resemblesData(second) && resemblesAddress(first)) {
	          let warning = `The eth_decryptMessage method requires params ordered `;
	          warning += `[message, address]. This was previously handled incorrectly, `;
	          warning += `and has been corrected automatically. `;
	          warning += `Please switch this param order for smooth behavior in the future.`;
	          console.warn(warning);
	          address = payload.params[0];
	          message = payload.params[1];
	        } else {
	          message = payload.params[0];
	          address = payload.params[1];
	        } // non-standard "extraParams" to be appended to our "msgParams" obj
	        // good place for metadata


	        extraParams = payload.params[2] || {};
	        msgParams = extend(extraParams, {
	          from: address,
	          data: message
	        });
	        waterfall([cb => self.validateDecryptMessage(msgParams, cb), cb => self.processDecryptMessage(msgParams, cb)], end);
	      }();

	    case 'encryption_public_key':
	      return function () {
	        const address = payload.params[0];
	        waterfall([cb => self.validateEncryptionPublicKey(address, cb), cb => self.processEncryptionPublicKey(address, cb)], end);
	      }();

	    case 'personal_ecRecover':
	      return function () {
	        message = payload.params[0];
	        let signature = payload.params[1]; // non-standard "extraParams" to be appended to our "msgParams" obj
	        // good place for metadata

	        extraParams = payload.params[2] || {};
	        msgParams = extend(extraParams, {
	          sig: signature,
	          data: message
	        });
	        self.recoverPersonalSignature(msgParams, end);
	      }();

	    case 'eth_signTypedData':
	    case 'eth_signTypedData_v3':
	    case 'eth_signTypedData_v4':
	      return function () {
	        // process normally
	        const first = payload.params[0];
	        const second = payload.params[1];

	        if (resemblesAddress(first)) {
	          address = first;
	          message = second;
	        } else {
	          message = first;
	          address = second;
	        }

	        extraParams = payload.params[2] || {};
	        msgParams = extend(extraParams, {
	          from: address,
	          data: message
	        });
	        waterfall([cb => self.validateTypedMessage(msgParams, cb), cb => self.processTypedMessage(msgParams, cb)], end);
	      }();

	    case 'parity_postTransaction':
	      txParams = payload.params[0];
	      self.parityPostTransaction(txParams, end);
	      return;

	    case 'parity_postSign':
	      address = payload.params[0];
	      message = payload.params[1];
	      self.parityPostSign(address, message, end);
	      return;

	    case 'parity_checkRequest':
	      return function () {
	        const requestId = payload.params[0];
	        self.parityCheckRequest(requestId, end);
	      }();

	    case 'parity_defaultAccount':
	      self.getAccounts(function (err, accounts) {
	        if (err) return end(err);
	        const account = accounts[0] || null;
	        end(null, account);
	      });
	      return;

	    default:
	      next();
	      return;
	  }
	}; //
	// data lookup
	//


	HookedWalletSubprovider.prototype.getAccounts = function (cb) {
	  cb(null, []);
	}; //
	// "process" high level flow
	//


	HookedWalletSubprovider.prototype.processTransaction = function (txParams, cb) {
	  const self = this;
	  waterfall([cb => self.approveTransaction(txParams, cb), (didApprove, cb) => self.checkApproval('transaction', didApprove, cb), cb => self.finalizeAndSubmitTx(txParams, cb)], cb);
	};

	HookedWalletSubprovider.prototype.processSignTransaction = function (txParams, cb) {
	  const self = this;
	  waterfall([cb => self.approveTransaction(txParams, cb), (didApprove, cb) => self.checkApproval('transaction', didApprove, cb), cb => self.finalizeTx(txParams, cb)], cb);
	};

	HookedWalletSubprovider.prototype.processMessage = function (msgParams, cb) {
	  const self = this;
	  waterfall([cb => self.approveMessage(msgParams, cb), (didApprove, cb) => self.checkApproval('message', didApprove, cb), cb => self.signMessage(msgParams, cb)], cb);
	};

	HookedWalletSubprovider.prototype.processPersonalMessage = function (msgParams, cb) {
	  const self = this;
	  waterfall([cb => self.approvePersonalMessage(msgParams, cb), (didApprove, cb) => self.checkApproval('message', didApprove, cb), cb => self.signPersonalMessage(msgParams, cb)], cb);
	};

	HookedWalletSubprovider.prototype.processDecryptMessage = function (msgParams, cb) {
	  const self = this;
	  waterfall([cb => self.approveDecryptMessage(msgParams, cb), (didApprove, cb) => self.checkApproval('decryptMessage', didApprove, cb), cb => self.decryptMessage(msgParams, cb)], cb);
	};

	HookedWalletSubprovider.prototype.processEncryptionPublicKey = function (msgParams, cb) {
	  const self = this;
	  waterfall([cb => self.approveEncryptionPublicKey(msgParams, cb), (didApprove, cb) => self.checkApproval('encryptionPublicKey', didApprove, cb), cb => self.encryptionPublicKey(msgParams, cb)], cb);
	};

	HookedWalletSubprovider.prototype.processTypedMessage = function (msgParams, cb) {
	  const self = this;
	  waterfall([cb => self.approveTypedMessage(msgParams, cb), (didApprove, cb) => self.checkApproval('message', didApprove, cb), cb => self.signTypedMessage(msgParams, cb)], cb);
	}; //
	// approval
	//


	HookedWalletSubprovider.prototype.autoApprove = function (txParams, cb) {
	  cb(null, true);
	};

	HookedWalletSubprovider.prototype.checkApproval = function (type, didApprove, cb) {
	  cb(didApprove ? null : new Error('User denied ' + type + ' signature.'));
	}; //
	// parity
	//


	HookedWalletSubprovider.prototype.parityPostTransaction = function (txParams, cb) {
	  const self = this; // get next id

	  const count = self._parityRequestCount;
	  const reqId = `0x${count.toString(16)}`;
	  self._parityRequestCount++;
	  self.emitPayload({
	    method: 'eth_sendTransaction',
	    params: [txParams]
	  }, function (error, res) {
	    if (error) {
	      self._parityRequests[reqId] = {
	        error
	      };
	      return;
	    }

	    const txHash = res.result;
	    self._parityRequests[reqId] = txHash;
	  });
	  cb(null, reqId);
	};

	HookedWalletSubprovider.prototype.parityPostSign = function (address, message, cb) {
	  const self = this; // get next id

	  const count = self._parityRequestCount;
	  const reqId = `0x${count.toString(16)}`;
	  self._parityRequestCount++;
	  self.emitPayload({
	    method: 'eth_sign',
	    params: [address, message]
	  }, function (error, res) {
	    if (error) {
	      self._parityRequests[reqId] = {
	        error
	      };
	      return;
	    }

	    const result = res.result;
	    self._parityRequests[reqId] = result;
	  });
	  cb(null, reqId);
	};

	HookedWalletSubprovider.prototype.parityCheckRequest = function (reqId, cb) {
	  const self = this;
	  const result = self._parityRequests[reqId] || null; // tx not handled yet

	  if (!result) return cb(null, null); // tx was rejected (or other error)

	  if (result.error) return cb(result.error); // tx sent

	  cb(null, result);
	}; //
	// signature and recovery
	//


	HookedWalletSubprovider.prototype.recoverPersonalSignature = function (msgParams, cb) {
	  let senderHex;

	  try {
	    senderHex = sigUtil.recoverPersonalSignature(msgParams);
	  } catch (err) {
	    return cb(err);
	  }

	  cb(null, senderHex);
	}; //
	// validation
	//


	HookedWalletSubprovider.prototype.validateTransaction = function (txParams, cb) {
	  const self = this; // shortcut: undefined sender is invalid

	  if (txParams.from === undefined) return cb(new Error(`Undefined address - from address required to sign transaction.`));
	  self.validateSender(txParams.from, function (err, senderIsValid) {
	    if (err) return cb(err);
	    if (!senderIsValid) return cb(new Error(`Unknown address - unable to sign transaction for this address: "${txParams.from}"`));
	    cb();
	  });
	};

	HookedWalletSubprovider.prototype.validateMessage = function (msgParams, cb) {
	  const self = this;
	  if (msgParams.from === undefined) return cb(new Error(`Undefined address - from address required to sign message.`));
	  self.validateSender(msgParams.from, function (err, senderIsValid) {
	    if (err) return cb(err);
	    if (!senderIsValid) return cb(new Error(`Unknown address - unable to sign message for this address: "${msgParams.from}"`));
	    cb();
	  });
	};

	HookedWalletSubprovider.prototype.validatePersonalMessage = function (msgParams, cb) {
	  const self = this;
	  if (msgParams.from === undefined) return cb(new Error(`Undefined address - from address required to sign personal message.`));
	  if (msgParams.data === undefined) return cb(new Error(`Undefined message - message required to sign personal message.`));
	  if (!isValidHex(msgParams.data)) return cb(new Error(`HookedWalletSubprovider - validateMessage - message was not encoded as hex.`));
	  self.validateSender(msgParams.from, function (err, senderIsValid) {
	    if (err) return cb(err);
	    if (!senderIsValid) return cb(new Error(`Unknown address - unable to sign message for this address: "${msgParams.from}"`));
	    cb();
	  });
	};

	HookedWalletSubprovider.prototype.validateDecryptMessage = function (msgParams, cb) {
	  const self = this;
	  if (msgParams.from === undefined) return cb(new Error(`Undefined address - from address required to decrypt message.`));
	  if (msgParams.data === undefined) return cb(new Error(`Undefined message - message required to decrypt message.`));
	  if (!isValidHex(msgParams.data)) return cb(new Error(`HookedWalletSubprovider - validateDecryptMessage - message was not encoded as hex.`));
	  self.validateSender(msgParams.from, function (err, senderIsValid) {
	    if (err) return cb(err);
	    if (!senderIsValid) return cb(new Error(`Unknown address - unable to decrypt message for this address: "${msgParams.from}"`));
	    cb();
	  });
	};

	HookedWalletSubprovider.prototype.validateEncryptionPublicKey = function (address, cb) {
	  const self = this;
	  self.validateSender(address, function (err, senderIsValid) {
	    if (err) return cb(err);
	    if (!senderIsValid) return cb(new Error(`Unknown address - unable to obtain encryption public key for this address: "${address}"`));
	    cb();
	  });
	};

	HookedWalletSubprovider.prototype.validateTypedMessage = function (msgParams, cb) {
	  if (msgParams.from === undefined) return cb(new Error(`Undefined address - from address required to sign typed data.`));
	  if (msgParams.data === undefined) return cb(new Error(`Undefined data - message required to sign typed data.`));
	  this.validateSender(msgParams.from, function (err, senderIsValid) {
	    if (err) return cb(err);
	    if (!senderIsValid) return cb(new Error(`Unknown address - unable to sign message for this address: "${msgParams.from}"`));
	    cb();
	  });
	};

	HookedWalletSubprovider.prototype.validateSender = function (senderAddress, cb) {
	  const self = this; // shortcut: undefined sender is invalid

	  if (!senderAddress) return cb(null, false);
	  self.getAccounts(function (err, accounts) {
	    if (err) return cb(err);
	    const senderIsValid = accounts.map(toLowerCase).indexOf(senderAddress.toLowerCase()) !== -1;
	    cb(null, senderIsValid);
	  });
	}; //
	// tx helpers
	//


	HookedWalletSubprovider.prototype.finalizeAndSubmitTx = function (txParams, cb) {
	  const self = this; // can only allow one tx to pass through this flow at a time
	  // so we can atomically consume a nonce

	  self.nonceLock.take(function () {
	    waterfall([self.fillInTxExtras.bind(self, txParams), self.signTransaction.bind(self), self.publishTransaction.bind(self)], function (err, txHash) {
	      self.nonceLock.leave();
	      if (err) return cb(err);
	      cb(null, txHash);
	    });
	  });
	};

	HookedWalletSubprovider.prototype.finalizeTx = function (txParams, cb) {
	  const self = this; // can only allow one tx to pass through this flow at a time
	  // so we can atomically consume a nonce

	  self.nonceLock.take(function () {
	    waterfall([self.fillInTxExtras.bind(self, txParams), self.signTransaction.bind(self)], function (err, signedTx) {
	      self.nonceLock.leave();
	      if (err) return cb(err);
	      cb(null, {
	        raw: signedTx,
	        tx: txParams
	      });
	    });
	  });
	};

	HookedWalletSubprovider.prototype.publishTransaction = function (rawTx, cb) {
	  const self = this;
	  self.emitPayload({
	    method: 'eth_sendRawTransaction',
	    params: [rawTx]
	  }, function (err, res) {
	    if (err) return cb(err);
	    cb(null, res.result);
	  });
	};

	HookedWalletSubprovider.prototype.estimateGas = function (txParams, cb) {
	  const self = this;
	  estimateGas(self.engine, txParams, cb);
	};

	HookedWalletSubprovider.prototype.getGasPrice = function (cb) {
	  const self = this;
	  self.emitPayload({
	    method: 'eth_gasPrice',
	    params: []
	  }, function (err, res) {
	    if (err) return cb(err);
	    cb(null, res.result);
	  });
	};

	HookedWalletSubprovider.prototype.fillInTxExtras = function (txParams, cb) {
	  const self = this;
	  const address = txParams.from; // console.log('fillInTxExtras - address:', address)

	  const tasks = {};

	  if (txParams.gasPrice === undefined) {
	    // console.log("need to get gasprice")
	    tasks.gasPrice = self.getGasPrice.bind(self);
	  }

	  if (txParams.nonce === undefined) {
	    // console.log("need to get nonce")
	    tasks.nonce = self.emitPayload.bind(self, {
	      method: 'eth_getTransactionCount',
	      params: [address, 'pending']
	    });
	  }

	  if (txParams.gas === undefined) {
	    // console.log("need to get gas")
	    tasks.gas = self.estimateGas.bind(self, cloneTxParams(txParams));
	  }

	  parallel(tasks, function (err, taskResults) {
	    if (err) return cb(err);
	    const result = {};
	    if (taskResults.gasPrice) result.gasPrice = taskResults.gasPrice;
	    if (taskResults.nonce) result.nonce = taskResults.nonce.result;
	    if (taskResults.gas) result.gas = taskResults.gas;
	    cb(null, extend(txParams, result));
	  });
	}; // util
	// we use this to clean any custom params from the txParams


	function cloneTxParams(txParams) {
	  return {
	    from: txParams.from,
	    to: txParams.to,
	    value: txParams.value,
	    data: txParams.data,
	    gas: txParams.gas,
	    gasPrice: txParams.gasPrice,
	    nonce: txParams.nonce
	  };
	}

	function toLowerCase(string) {
	  return string.toLowerCase();
	}

	function resemblesAddress(string) {
	  const fixed = ethUtil.addHexPrefix(string);
	  const isValid = ethUtil.isValidAddress(fixed);
	  return isValid;
	} // Returns true if resembles hex data
	// but definitely not a valid address.


	function resemblesData(string) {
	  const fixed = ethUtil.addHexPrefix(string);
	  const isValidAddress = ethUtil.isValidAddress(fixed);
	  return !isValidAddress && isValidHex(string);
	}

	function isValidHex(data) {
	  const isString = typeof data === 'string';
	  if (!isString) return false;
	  const isHexPrefixed = data.slice(0, 2) === '0x';
	  if (!isHexPrefixed) return false;
	  const nonPrefixed = data.slice(2);
	  const isValid = nonPrefixed.match(hexRegex);
	  return isValid;
	}

	function mustProvideInConstructor(methodName) {
	  return function (params, cb) {
	    cb(new Error('ProviderEngine - HookedWalletSubprovider - Must provide "' + methodName + '" fn in constructor options'));
	  };
	}

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	const Subprovider = __webpack_require__(54); // wraps a json-rpc-engine middleware in a subprovider interface


	class JsonRpcEngineMiddlewareSubprovider extends Subprovider {
	  // take a constructorFn to call once we have a reference to the engine
	  constructor(constructorFn) {
	    super();
	    if (!constructorFn) throw new Error('JsonRpcEngineMiddlewareSubprovider - no constructorFn specified');
	    this._constructorFn = constructorFn;
	  } // this is called once the subprovider has been added to the provider engine


	  setEngine(engine) {
	    if (this.middleware) throw new Error('JsonRpcEngineMiddlewareSubprovider - subprovider added to engine twice');
	    const blockTracker = engine._blockTracker;

	    const middleware = this._constructorFn({
	      engine,
	      provider: engine,
	      blockTracker
	    });

	    if (!middleware) throw new Error('JsonRpcEngineMiddlewareSubprovider - _constructorFn did not return middleware');
	    if (typeof middleware !== 'function') throw new Error('JsonRpcEngineMiddlewareSubprovider - specified middleware is not a function');
	    this.middleware = middleware;
	  }

	  handleRequest(req, provEngNext, provEngEnd) {
	    const res = {
	      id: req.id
	    };
	    this.middleware(req, res, middlewareNext, middlewareEnd);

	    function middlewareNext(handler) {
	      provEngNext((err, result, cb) => {
	        // update response object with result or error
	        if (err) {
	          delete res.result;
	          res.error = {
	            message: err.message || err
	          };
	        } else {
	          res.result = result;
	        } // call middleware's next handler (even if error)


	        if (handler) {
	          handler(cb);
	        } else {
	          cb();
	        }
	      });
	    }

	    function middlewareEnd(err) {
	      if (err) return provEngEnd(err);
	      provEngEnd(null, res.result);
	    }
	  }

	}

	module.exports = JsonRpcEngineMiddlewareSubprovider;

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {const xhr = process.browser ? __webpack_require__(415) : __webpack_require__(427);

	const inherits = __webpack_require__(11).inherits;

	const createPayload = __webpack_require__(55);

	const Subprovider = __webpack_require__(54);

	const {
	  ethErrors,
	  serializeError
	} = __webpack_require__(272);

	module.exports = RpcSource;
	inherits(RpcSource, Subprovider);

	function RpcSource(opts) {
	  const self = this;
	  self.rpcUrl = opts.rpcUrl;
	}

	RpcSource.prototype.handleRequest = function (payload, next, end) {
	  const self = this;
	  const targetUrl = self.rpcUrl; // overwrite id to conflict with other concurrent users

	  const sanitizedPayload = sanitizePayload(payload);
	  const newPayload = createPayload(sanitizedPayload);
	  xhr({
	    uri: targetUrl,
	    method: 'POST',
	    headers: {
	      'Accept': 'application/json',
	      'Content-Type': 'application/json'
	    },
	    body: JSON.stringify(newPayload),
	    rejectUnauthorized: false,
	    timeout: 20000
	  }, function (err, res, body) {
	    if (err) return end(serializeError(err)); // check for error code

	    switch (res.statusCode) {
	      case 405:
	        return end(ethErrors.rpc.methodNotFound());

	      case 504:
	        // Gateway timeout
	        return function () {
	          let msg = `Gateway timeout. The request took too long to process. `;
	          msg += `This can happen when querying logs over too wide a block range.`;
	          const err = new Error(msg);
	          return end(serializeError(err));
	        }();

	      case 429:
	        // Too many requests (rate limiting)
	        return function () {
	          const err = new Error(`Too Many Requests`);
	          return end(serializeError(err));
	        }();

	      default:
	        if (res.statusCode != 200) {
	          const msg = 'Unknown Error: ' + res.body;
	          const err = new Error(msg);
	          return end(serializeError(err));
	        }

	    } // parse response


	    let data;

	    try {
	      data = JSON.parse(body);
	    } catch (err) {
	      console.error(err.stack);
	      return end(serializeError(err));
	    }

	    if (data.error) return end(data.error);
	    end(null, data.result);
	  });
	}; // drops any non-standard params


	function sanitizePayload(payload) {
	  return {
	    id: payload.id,
	    jsonrpc: payload.jsonrpc,
	    method: payload.method,
	    params: payload.params
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	const createPayload = __webpack_require__(55);

	module.exports = estimateGas;
	/*

	This is a work around for https://github.com/ethereum/go-ethereum/issues/2577

	*/

	function estimateGas(provider, txParams, cb) {
	  provider.sendAsync(createPayload({
	    method: 'eth_estimateGas',
	    params: [txParams]
	  }), function (err, res) {
	    if (err) {
	      // handle simple value transfer case
	      if (err.message === 'no contract code at given address') {
	        return cb(null, '0xcf08');
	      } else {
	        return cb(err);
	      }
	    }

	    cb(null, res.result);
	  });
	}

/***/ },
/* 212 */
/***/ function(module, exports) {

	module.exports = createRandomId;

	function createRandomId() {
	  // random id
	  return Math.floor(Number.MAX_SAFE_INTEGER * Math.random());
	}

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	const EventEmitter = __webpack_require__(19).EventEmitter;

	const inherits = __webpack_require__(11).inherits;

	module.exports = Stoplight;
	inherits(Stoplight, EventEmitter);

	function Stoplight() {
	  const self = this;
	  EventEmitter.call(self);
	  self.isLocked = true;
	}

	Stoplight.prototype.go = function () {
	  const self = this;
	  self.isLocked = false;
	  self.emit('unlock');
	};

	Stoplight.prototype.stop = function () {
	  const self = this;
	  self.isLocked = true;
	  self.emit('lock');
	};

	Stoplight.prototype.await = function (fn) {
	  const self = this;

	  if (self.isLocked) {
	    self.once('unlock', fn);
	  } else {
	    setTimeout(fn);
	  }
	};

/***/ },
/* 214 */
/***/ function(module, exports) {

	// base-x encoding
	// Forked from https://github.com/cryptocoinjs/bs58
	// Originally written by Mike Hearn for BitcoinJ
	// Copyright (c) 2011 Google Inc
	// Ported to JavaScript by Stefan Thomas
	// Merged Buffer refactorings from base58-native by Stephen Pair
	// Copyright (c) 2013 BitPay Inc

	module.exports = function base (ALPHABET) {
	  var ALPHABET_MAP = {}
	  var BASE = ALPHABET.length
	  var LEADER = ALPHABET.charAt(0)

	  // pre-compute lookup table
	  for (var i = 0; i < ALPHABET.length; i++) {
	    ALPHABET_MAP[ALPHABET.charAt(i)] = i
	  }

	  function encode (source) {
	    if (source.length === 0) return ''

	    var digits = [0]
	    for (var i = 0; i < source.length; ++i) {
	      for (var j = 0, carry = source[i]; j < digits.length; ++j) {
	        carry += digits[j] << 8
	        digits[j] = carry % BASE
	        carry = (carry / BASE) | 0
	      }

	      while (carry > 0) {
	        digits.push(carry % BASE)
	        carry = (carry / BASE) | 0
	      }
	    }

	    var string = ''

	    // deal with leading zeros
	    for (var k = 0; source[k] === 0 && k < source.length - 1; ++k) string += ALPHABET[0]
	    // convert digits to a string
	    for (var q = digits.length - 1; q >= 0; --q) string += ALPHABET[digits[q]]

	    return string
	  }

	  function decodeUnsafe (string) {
	    if (string.length === 0) return []

	    var bytes = [0]
	    for (var i = 0; i < string.length; i++) {
	      var value = ALPHABET_MAP[string[i]]
	      if (value === undefined) return

	      for (var j = 0, carry = value; j < bytes.length; ++j) {
	        carry += bytes[j] * BASE
	        bytes[j] = carry & 0xff
	        carry >>= 8
	      }

	      while (carry > 0) {
	        bytes.push(carry & 0xff)
	        carry >>= 8
	      }
	    }

	    // deal with leading zeros
	    for (var k = 0; string[k] === LEADER && k < string.length - 1; ++k) {
	      bytes.push(0)
	    }

	    return bytes.reverse()
	  }

	  function decode (string) {
	    var array = decodeUnsafe(string)
	    if (array) return array

	    throw new Error('Non-base' + BASE + ' character')
	  }

	  return {
	    encode: encode,
	    decodeUnsafe: decodeUnsafe,
	    decode: decode
	  }
	}


/***/ },
/* 215 */
/***/ function(module, exports) {

	'use strict'

	exports.byteLength = byteLength
	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray

	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i]
	  revLookup[code.charCodeAt(i)] = i
	}

	// Support decoding URL-safe base64 strings, as Node.js does.
	// See: https://en.wikipedia.org/wiki/Base64#URL_applications
	revLookup['-'.charCodeAt(0)] = 62
	revLookup['_'.charCodeAt(0)] = 63

	function getLens (b64) {
	  var len = b64.length

	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // Trim off extra bytes after placeholder bytes are found
	  // See: https://github.com/beatgammit/base64-js/issues/42
	  var validLen = b64.indexOf('=')
	  if (validLen === -1) validLen = len

	  var placeHoldersLen = validLen === len
	    ? 0
	    : 4 - (validLen % 4)

	  return [validLen, placeHoldersLen]
	}

	// base64 is 4/3 + up to two characters of the original data
	function byteLength (b64) {
	  var lens = getLens(b64)
	  var validLen = lens[0]
	  var placeHoldersLen = lens[1]
	  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
	}

	function _byteLength (b64, validLen, placeHoldersLen) {
	  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
	}

	function toByteArray (b64) {
	  var tmp
	  var lens = getLens(b64)
	  var validLen = lens[0]
	  var placeHoldersLen = lens[1]

	  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

	  var curByte = 0

	  // if there are placeholders, only get up to the last complete 4 chars
	  var len = placeHoldersLen > 0
	    ? validLen - 4
	    : validLen

	  var i
	  for (i = 0; i < len; i += 4) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 18) |
	      (revLookup[b64.charCodeAt(i + 1)] << 12) |
	      (revLookup[b64.charCodeAt(i + 2)] << 6) |
	      revLookup[b64.charCodeAt(i + 3)]
	    arr[curByte++] = (tmp >> 16) & 0xFF
	    arr[curByte++] = (tmp >> 8) & 0xFF
	    arr[curByte++] = tmp & 0xFF
	  }

	  if (placeHoldersLen === 2) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 2) |
	      (revLookup[b64.charCodeAt(i + 1)] >> 4)
	    arr[curByte++] = tmp & 0xFF
	  }

	  if (placeHoldersLen === 1) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 10) |
	      (revLookup[b64.charCodeAt(i + 1)] << 4) |
	      (revLookup[b64.charCodeAt(i + 2)] >> 2)
	    arr[curByte++] = (tmp >> 8) & 0xFF
	    arr[curByte++] = tmp & 0xFF
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] +
	    lookup[num >> 12 & 0x3F] +
	    lookup[num >> 6 & 0x3F] +
	    lookup[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
	    tmp =
	      ((uint8[i] << 16) & 0xFF0000) +
	      ((uint8[i + 1] << 8) & 0xFF00) +
	      (uint8[i + 2] & 0xFF)
	    output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(
	      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
	    ))
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1]
	    parts.push(
	      lookup[tmp >> 2] +
	      lookup[(tmp << 4) & 0x3F] +
	      '=='
	    )
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
	    parts.push(
	      lookup[tmp >> 10] +
	      lookup[(tmp >> 4) & 0x3F] +
	      lookup[(tmp << 2) & 0x3F] +
	      '='
	    )
	  }

	  return parts.join('')
	}


/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// FIXME: Kind of a weird way to throw exceptions, consider removing
	var assert = __webpack_require__(5)
	var BigInteger = __webpack_require__(109)

	/**
	 * Turns a byte array into a big integer.
	 *
	 * This function will interpret a byte array as a big integer in big
	 * endian notation.
	 */
	BigInteger.fromByteArrayUnsigned = function(byteArray) {
	  // BigInteger expects a DER integer conformant byte array
	  if (byteArray[0] & 0x80) {
	    return new BigInteger([0].concat(byteArray))
	  }

	  return new BigInteger(byteArray)
	}

	/**
	 * Returns a byte array representation of the big integer.
	 *
	 * This returns the absolute of the contained value in big endian
	 * form. A value of zero results in an empty array.
	 */
	BigInteger.prototype.toByteArrayUnsigned = function() {
	  var byteArray = this.toByteArray()
	  return byteArray[0] === 0 ? byteArray.slice(1) : byteArray
	}

	BigInteger.fromDERInteger = function(byteArray) {
	  return new BigInteger(byteArray)
	}

	/*
	 * Converts BigInteger to a DER integer representation.
	 *
	 * The format for this value uses the most significant bit as a sign
	 * bit.  If the most significant bit is already set and the integer is
	 * positive, a 0x00 is prepended.
	 *
	 * Examples:
	 *
	 *      0 =>     0x00
	 *      1 =>     0x01
	 *     -1 =>     0xff
	 *    127 =>     0x7f
	 *   -127 =>     0x81
	 *    128 =>   0x0080
	 *   -128 =>     0x80
	 *    255 =>   0x00ff
	 *   -255 =>   0xff01
	 *  16300 =>   0x3fac
	 * -16300 =>   0xc054
	 *  62300 => 0x00f35c
	 * -62300 => 0xff0ca4
	*/
	BigInteger.prototype.toDERInteger = BigInteger.prototype.toByteArray

	BigInteger.fromBuffer = function(buffer) {
	  // BigInteger expects a DER integer conformant byte array
	  if (buffer[0] & 0x80) {
	    var byteArray = Array.prototype.slice.call(buffer)

	    return new BigInteger([0].concat(byteArray))
	  }

	  return new BigInteger(buffer)
	}

	BigInteger.fromHex = function(hex) {
	  if (hex === '') return BigInteger.ZERO

	  assert.equal(hex, hex.match(/^[A-Fa-f0-9]+/), 'Invalid hex string')
	  assert.equal(hex.length % 2, 0, 'Incomplete hex')
	  return new BigInteger(hex, 16)
	}

	BigInteger.prototype.toBuffer = function(size) {
	  var byteArray = this.toByteArrayUnsigned()
	  var zeros = []

	  var padding = size - byteArray.length
	  while (zeros.length < padding) zeros.push(0)

	  return new Buffer(zeros.concat(byteArray))
	}

	BigInteger.prototype.toHex = function(size) {
	  return this.toBuffer(size).toString('hex')
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	// Reference https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki
	// Format: 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
	// NOTE: SIGHASH byte ignored AND restricted, truncate before use

	var Buffer = __webpack_require__(6).Buffer

	function check (buffer) {
	  if (buffer.length < 8) return false
	  if (buffer.length > 72) return false
	  if (buffer[0] !== 0x30) return false
	  if (buffer[1] !== buffer.length - 2) return false
	  if (buffer[2] !== 0x02) return false

	  var lenR = buffer[3]
	  if (lenR === 0) return false
	  if (5 + lenR >= buffer.length) return false
	  if (buffer[4 + lenR] !== 0x02) return false

	  var lenS = buffer[5 + lenR]
	  if (lenS === 0) return false
	  if ((6 + lenR + lenS) !== buffer.length) return false

	  if (buffer[4] & 0x80) return false
	  if (lenR > 1 && (buffer[4] === 0x00) && !(buffer[5] & 0x80)) return false

	  if (buffer[lenR + 6] & 0x80) return false
	  if (lenS > 1 && (buffer[lenR + 6] === 0x00) && !(buffer[lenR + 7] & 0x80)) return false
	  return true
	}

	function decode (buffer) {
	  if (buffer.length < 8) throw new Error('DER sequence length is too short')
	  if (buffer.length > 72) throw new Error('DER sequence length is too long')
	  if (buffer[0] !== 0x30) throw new Error('Expected DER sequence')
	  if (buffer[1] !== buffer.length - 2) throw new Error('DER sequence length is invalid')
	  if (buffer[2] !== 0x02) throw new Error('Expected DER integer')

	  var lenR = buffer[3]
	  if (lenR === 0) throw new Error('R length is zero')
	  if (5 + lenR >= buffer.length) throw new Error('R length is too long')
	  if (buffer[4 + lenR] !== 0x02) throw new Error('Expected DER integer (2)')

	  var lenS = buffer[5 + lenR]
	  if (lenS === 0) throw new Error('S length is zero')
	  if ((6 + lenR + lenS) !== buffer.length) throw new Error('S length is invalid')

	  if (buffer[4] & 0x80) throw new Error('R value is negative')
	  if (lenR > 1 && (buffer[4] === 0x00) && !(buffer[5] & 0x80)) throw new Error('R value excessively padded')

	  if (buffer[lenR + 6] & 0x80) throw new Error('S value is negative')
	  if (lenS > 1 && (buffer[lenR + 6] === 0x00) && !(buffer[lenR + 7] & 0x80)) throw new Error('S value excessively padded')

	  // non-BIP66 - extract R, S values
	  return {
	    r: buffer.slice(4, 4 + lenR),
	    s: buffer.slice(6 + lenR)
	  }
	}

	/*
	 * Expects r and s to be positive DER integers.
	 *
	 * The DER format uses the most significant bit as a sign bit (& 0x80).
	 * If the significant bit is set AND the integer is positive, a 0x00 is prepended.
	 *
	 * Examples:
	 *
	 *      0 =>     0x00
	 *      1 =>     0x01
	 *     -1 =>     0xff
	 *    127 =>     0x7f
	 *   -127 =>     0x81
	 *    128 =>   0x0080
	 *   -128 =>     0x80
	 *    255 =>   0x00ff
	 *   -255 =>   0xff01
	 *  16300 =>   0x3fac
	 * -16300 =>   0xc054
	 *  62300 => 0x00f35c
	 * -62300 => 0xff0ca4
	*/
	function encode (r, s) {
	  var lenR = r.length
	  var lenS = s.length
	  if (lenR === 0) throw new Error('R length is zero')
	  if (lenS === 0) throw new Error('S length is zero')
	  if (lenR > 33) throw new Error('R length is too long')
	  if (lenS > 33) throw new Error('S length is too long')
	  if (r[0] & 0x80) throw new Error('R value is negative')
	  if (s[0] & 0x80) throw new Error('S value is negative')
	  if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) throw new Error('R value excessively padded')
	  if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) throw new Error('S value excessively padded')

	  var signature = Buffer.allocUnsafe(6 + lenR + lenS)

	  // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
	  signature[0] = 0x30
	  signature[1] = signature.length - 2
	  signature[2] = 0x02
	  signature[3] = r.length
	  r.copy(signature, 4)
	  signature[4 + lenR] = 0x02
	  signature[5 + lenR] = s.length
	  s.copy(signature, 6 + lenR)

	  return signature
	}

	module.exports = {
	  check: check,
	  decode: decode,
	  encode: encode
	}


/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	var bs58check = __webpack_require__(59)

	function decode () {
	  console.warn('bs58check will be removed in 2.0.0. require("bs58check") instead.')

	  return bs58check.decode.apply(undefined, arguments)
	}

	function encode () {
	  console.warn('bs58check will be removed in 2.0.0. require("bs58check") instead.')

	  return bs58check.encode.apply(undefined, arguments)
	}

	module.exports = {
	  decode: decode,
	  encode: encode
	}


/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var assert = __webpack_require__(5)
	var bufferutils = __webpack_require__(30)
	var crypto = __webpack_require__(23)

	var Transaction = __webpack_require__(77)

	function Block () {
	  this.version = 1
	  this.prevHash = null
	  this.merkleRoot = null
	  this.timestamp = 0
	  this.bits = 0
	  this.nonce = 0
	}

	Block.fromBuffer = function (buffer) {
	  assert(buffer.length >= 80, 'Buffer too small (< 80 bytes)')

	  var offset = 0
	  function readSlice (n) {
	    offset += n
	    return buffer.slice(offset - n, offset)
	  }

	  function readUInt32 () {
	    var i = buffer.readUInt32LE(offset)
	    offset += 4
	    return i
	  }

	  var block = new Block()
	  block.version = readUInt32()
	  block.prevHash = readSlice(32)
	  block.merkleRoot = readSlice(32)
	  block.timestamp = readUInt32()
	  block.bits = readUInt32()
	  block.nonce = readUInt32()

	  if (buffer.length === 80) return block

	  function readVarInt () {
	    var vi = bufferutils.readVarInt(buffer, offset)
	    offset += vi.size
	    return vi.number
	  }

	  // FIXME: poor performance
	  function readTransaction () {
	    var tx = Transaction.fromBuffer(buffer.slice(offset), true)

	    offset += tx.toBuffer().length
	    return tx
	  }

	  var nTransactions = readVarInt()
	  block.transactions = []

	  for (var i = 0; i < nTransactions; ++i) {
	    var tx = readTransaction()
	    block.transactions.push(tx)
	  }

	  return block
	}

	Block.fromHex = function (hex) {
	  return Block.fromBuffer(new Buffer(hex, 'hex'))
	}

	Block.prototype.getHash = function () {
	  return crypto.hash256(this.toBuffer(true))
	}

	Block.prototype.getId = function () {
	  return bufferutils.reverse(this.getHash()).toString('hex')
	}

	Block.prototype.getUTCDate = function () {
	  var date = new Date(0) // epoch
	  date.setUTCSeconds(this.timestamp)

	  return date
	}

	Block.prototype.toBuffer = function (headersOnly) {
	  var buffer = new Buffer(80)

	  var offset = 0
	  function writeSlice (slice) {
	    slice.copy(buffer, offset)
	    offset += slice.length
	  }

	  function writeUInt32 (i) {
	    buffer.writeUInt32LE(i, offset)
	    offset += 4
	  }

	  writeUInt32(this.version)
	  writeSlice(this.prevHash)
	  writeSlice(this.merkleRoot)
	  writeUInt32(this.timestamp)
	  writeUInt32(this.bits)
	  writeUInt32(this.nonce)

	  if (headersOnly || !this.transactions) return buffer

	  var txLenBuffer = bufferutils.varIntBuffer(this.transactions.length)
	  var txBuffers = this.transactions.map(function (tx) {
	    return tx.toBuffer()
	  })

	  return Buffer.concat([buffer, txLenBuffer].concat(txBuffers))
	}

	Block.prototype.toHex = function (headersOnly) {
	  return this.toBuffer(headersOnly).toString('hex')
	}

	module.exports = Block

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var bufferutils = __webpack_require__(30)
	var crypto = __webpack_require__(23)
	var ecdsa = __webpack_require__(57)
	var networks = __webpack_require__(24)

	var BigInteger = __webpack_require__(15)
	var ECPubKey = __webpack_require__(43)
	var ECSignature = __webpack_require__(31)

	var ecurve = __webpack_require__(46)
	var ecparams = ecurve.getCurveByName('secp256k1')

	function magicHash (message, network) {
	  var magicPrefix = new Buffer(network.magicPrefix)
	  var messageBuffer = new Buffer(message)
	  var lengthBuffer = bufferutils.varIntBuffer(messageBuffer.length)

	  var buffer = Buffer.concat([magicPrefix, lengthBuffer, messageBuffer])
	  return crypto.hash256(buffer)
	}

	function sign (privKey, message, network) {
	  network = network || networks.bitcoin

	  var hash = magicHash(message, network)
	  var signature = privKey.sign(hash)
	  var e = BigInteger.fromBuffer(hash)
	  var i = ecdsa.calcPubKeyRecoveryParam(ecparams, e, signature, privKey.pub.Q)

	  return signature.toCompact(i, privKey.pub.compressed)
	}

	// TODO: network could be implied from address
	function verify (address, signature, message, network) {
	  if (!Buffer.isBuffer(signature)) {
	    signature = new Buffer(signature, 'base64')
	  }

	  network = network || networks.bitcoin

	  var hash = magicHash(message, network)
	  var parsed = ECSignature.parseCompact(signature)
	  var e = BigInteger.fromBuffer(hash)
	  var Q = ecdsa.recoverPubKey(ecparams, e, parsed.signature, parsed.i)

	  var pubKey = new ECPubKey(Q, parsed.compressed)
	  return pubKey.getAddress(network).toString() === address.toString()
	}

	module.exports = {
	  magicHash: magicHash,
	  sign: sign,
	  verify: verify
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var assert = __webpack_require__(5)
	var bufferutils = __webpack_require__(30)
	var typeForce = __webpack_require__(14)
	var networks = __webpack_require__(24)
	var randomBytes = __webpack_require__(91)

	var Address = __webpack_require__(56)
	var HDNode = __webpack_require__(111)
	var TransactionBuilder = __webpack_require__(113)
	var Script = __webpack_require__(44)

	function Wallet (seed, network) {
	  console.warn('Wallet is deprecated and will be removed in 2.0.0, see #296')

	  seed = seed || randomBytes(32)
	  network = network || networks.bitcoin

	  // Stored in a closure to make accidental serialization less likely
	  var masterKey = HDNode.fromSeedBuffer(seed, network)

	  // HD first-level child derivation method should be hardened
	  // See https://bitcointalk.org/index.php?topic=405179.msg4415254#msg4415254
	  var accountZero = masterKey.deriveHardened(0)
	  var externalAccount = accountZero.derive(0)
	  var internalAccount = accountZero.derive(1)

	  this.addresses = []
	  this.changeAddresses = []
	  this.network = network
	  this.unspents = []

	  // FIXME: remove in 2.0.0
	  this.unspentMap = {}

	  // FIXME: remove in 2.0.0
	  var me = this
	  this.newMasterKey = function (seed) {
	    console.warn('newMasterKey is deprecated, please make a new Wallet instance instead')

	    seed = seed || randomBytes(32)
	    masterKey = HDNode.fromSeedBuffer(seed, network)

	    accountZero = masterKey.deriveHardened(0)
	    externalAccount = accountZero.derive(0)
	    internalAccount = accountZero.derive(1)

	    me.addresses = []
	    me.changeAddresses = []

	    me.unspents = []
	    me.unspentMap = {}
	  }

	  this.getMasterKey = function () {
	    return masterKey
	  }
	  this.getAccountZero = function () {
	    return accountZero
	  }
	  this.getExternalAccount = function () {
	    return externalAccount
	  }
	  this.getInternalAccount = function () {
	    return internalAccount
	  }
	}

	Wallet.prototype.createTransaction = function (to, value, options) {
	  // FIXME: remove in 2.0.0
	  if (typeof options !== 'object') {
	    if (options !== undefined) {
	      console.warn('Non options object parameters are deprecated, use options object instead')

	      options = {
	        fixedFee: arguments[2],
	        changeAddress: arguments[3]
	      }
	    }
	  }

	  options = options || {}

	  assert(value > this.network.dustThreshold, value + ' must be above dust threshold (' + this.network.dustThreshold + ' Satoshis)')

	  var changeAddress = options.changeAddress
	  var fixedFee = options.fixedFee
	  var minConf = options.minConf === undefined ? 0 : options.minConf // FIXME: change minConf:1 by default in 2.0.0

	  // filter by minConf, then pending and sort by descending value
	  var unspents = this.unspents.filter(function (unspent) {
	    return unspent.confirmations >= minConf
	  }).filter(function (unspent) {
	    return !unspent.pending
	  }).sort(function (o1, o2) {
	    return o2.value - o1.value
	  })

	  var accum = 0
	  var addresses = []
	  var subTotal = value

	  var txb = new TransactionBuilder()
	  txb.addOutput(to, value)

	  for (var i = 0; i < unspents.length; ++i) {
	    var unspent = unspents[i]
	    addresses.push(unspent.address)

	    txb.addInput(unspent.txHash, unspent.index)

	    var fee = fixedFee === undefined ? estimatePaddedFee(txb.buildIncomplete(), this.network) : fixedFee

	    accum += unspent.value
	    subTotal = value + fee

	    if (accum >= subTotal) {
	      var change = accum - subTotal

	      if (change > this.network.dustThreshold) {
	        txb.addOutput(changeAddress || this.getChangeAddress(), change)
	      }

	      break
	    }
	  }

	  assert(accum >= subTotal, 'Not enough funds (incl. fee): ' + accum + ' < ' + subTotal)

	  return this.signWith(txb, addresses).build()
	}

	// FIXME: remove in 2.0.0
	Wallet.prototype.processPendingTx = function (tx) {
	  this.__processTx(tx, true)
	}

	// FIXME: remove in 2.0.0
	Wallet.prototype.processConfirmedTx = function (tx) {
	  this.__processTx(tx, false)
	}

	// FIXME: remove in 2.0.0
	Wallet.prototype.__processTx = function (tx, isPending) {
	  console.warn('processTransaction is considered harmful, see issue #260 for more information')

	  var txId = tx.getId()
	  var txHash = tx.getHash()

	  tx.outs.forEach(function (txOut, i) {
	    var address

	    try {
	      address = Address.fromOutputScript(txOut.script, this.network).toString()
	    } catch (e) {
	      if (!(e.message.match(/has no matching Address/)))
	        throw e
	    }

	    var myAddresses = this.addresses.concat(this.changeAddresses)
	    if (myAddresses.indexOf(address) > -1) {
	      var lookup = txId + ':' + i
	      if (lookup in this.unspentMap) return

	      // its unique, add it
	      var unspent = {
	        address: address,
	        confirmations: 0, // no way to determine this without more information
	        index: i,
	        txHash: txHash,
	        txId: txId,
	        value: txOut.value,
	        pending: isPending
	      }

	      this.unspentMap[lookup] = unspent
	      this.unspents.push(unspent)
	    }
	  }, this)

	  tx.ins.forEach(function (txIn) {
	    // copy and convert to big-endian hex
	    var txInId = bufferutils.reverse(txIn.hash).toString('hex')

	    var lookup = txInId + ':' + txIn.index
	    if (!(lookup in this.unspentMap)) return

	    var unspent = this.unspentMap[lookup]

	    if (isPending) {
	      unspent.pending = true
	      unspent.spent = true
	    } else {
	      delete this.unspentMap[lookup]

	      this.unspents = this.unspents.filter(function (unspent2) {
	        return unspent !== unspent2
	      })
	    }
	  }, this)
	}

	Wallet.prototype.generateAddress = function () {
	  var k = this.addresses.length
	  var address = this.getExternalAccount().derive(k).getAddress()

	  this.addresses.push(address.toString())

	  return this.getReceiveAddress()
	}

	Wallet.prototype.generateChangeAddress = function () {
	  var k = this.changeAddresses.length
	  var address = this.getInternalAccount().derive(k).getAddress()

	  this.changeAddresses.push(address.toString())

	  return this.getChangeAddress()
	}

	Wallet.prototype.getAddress = function () {
	  if (this.addresses.length === 0) {
	    this.generateAddress()
	  }

	  return this.addresses[this.addresses.length - 1]
	}

	Wallet.prototype.getBalance = function (minConf) {
	  minConf = minConf || 0

	  return this.unspents.filter(function (unspent) {
	    return unspent.confirmations >= minConf

	      // FIXME: remove spent filter in 2.0.0
	  }).filter(function (unspent) {
	    return !unspent.spent
	  }).reduce(function (accum, unspent) {
	    return accum + unspent.value
	  }, 0)
	}

	Wallet.prototype.getChangeAddress = function () {
	  if (this.changeAddresses.length === 0) {
	    this.generateChangeAddress()
	  }

	  return this.changeAddresses[this.changeAddresses.length - 1]
	}

	Wallet.prototype.getInternalPrivateKey = function (index) {
	  return this.getInternalAccount().derive(index).privKey
	}

	Wallet.prototype.getPrivateKey = function (index) {
	  return this.getExternalAccount().derive(index).privKey
	}

	Wallet.prototype.getPrivateKeyForAddress = function (address) {
	  var index

	  if ((index = this.addresses.indexOf(address)) > -1) {
	    return this.getPrivateKey(index)
	  }

	  if ((index = this.changeAddresses.indexOf(address)) > -1) {
	    return this.getInternalPrivateKey(index)
	  }

	  assert(false, 'Unknown address. Make sure the address is from the keychain and has been generated')
	}

	Wallet.prototype.getUnspentOutputs = function (minConf) {
	  minConf = minConf || 0

	  return this.unspents.filter(function (unspent) {
	    return unspent.confirmations >= minConf

	      // FIXME: remove spent filter in 2.0.0
	  }).filter(function (unspent) {
	    return !unspent.spent
	  }).map(function (unspent) {
	    return {
	      address: unspent.address,
	      confirmations: unspent.confirmations,
	      index: unspent.index,
	      txId: unspent.txId,
	      value: unspent.value,

	      // FIXME: remove in 2.0.0
	      hash: unspent.txId,
	      pending: unspent.pending
	    }
	  })
	}

	Wallet.prototype.setUnspentOutputs = function (unspents) {
	  this.unspentMap = {}
	  this.unspents = unspents.map(function (unspent) {
	    // FIXME: remove unspent.hash in 2.0.0
	    var txId = unspent.txId || unspent.hash
	    var index = unspent.index

	    // FIXME: remove in 2.0.0
	    if (unspent.hash !== undefined) {
	      console.warn('unspent.hash is deprecated, use unspent.txId instead')
	    }

	    // FIXME: remove in 2.0.0
	    if (index === undefined) {
	      console.warn('unspent.outputIndex is deprecated, use unspent.index instead')
	      index = unspent.outputIndex
	    }

	    typeForce('String', txId)
	    typeForce('Number', index)
	    typeForce('Number', unspent.value)

	    assert.equal(txId.length, 64, 'Expected valid txId, got ' + txId)
	    assert.doesNotThrow(function () {
	      Address.fromBase58Check(unspent.address)
	    }, 'Expected Base58 Address, got ' + unspent.address)
	    assert(isFinite(index), 'Expected finite index, got ' + index)

	    // FIXME: remove branch in 2.0.0
	    if (unspent.confirmations !== undefined) {
	      typeForce('Number', unspent.confirmations)
	    }

	    var txHash = bufferutils.reverse(new Buffer(txId, 'hex'))

	    unspent = {
	      address: unspent.address,
	      confirmations: unspent.confirmations || 0,
	      index: index,
	      txHash: txHash,
	      txId: txId,
	      value: unspent.value,

	      // FIXME: remove in 2.0.0
	      pending: unspent.pending || false
	    }

	    // FIXME: remove in 2.0.0
	    this.unspentMap[txId + ':' + index] = unspent

	    return unspent
	  }, this)
	}

	Wallet.prototype.signWith = function (tx, addresses) {
	  addresses.forEach(function (address, i) {
	    var privKey = this.getPrivateKeyForAddress(address)

	    tx.sign(i, privKey)
	  }, this)

	  return tx
	}

	function estimatePaddedFee (tx, network) {
	  var tmpTx = tx.clone()
	  tmpTx.addOutput(Script.EMPTY, network.dustSoftThreshold || 0)

	  return network.estimateFee(tmpTx)
	}

	// FIXME: 1.0.0 shims, remove in 2.0.0
	Wallet.prototype.getReceiveAddress = Wallet.prototype.getAddress
	Wallet.prototype.createTx = Wallet.prototype.createTransaction

	module.exports = Wallet

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	var basex = __webpack_require__(214)
	var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'

	module.exports = basex(ALPHABET)


/***/ },
/* 223 */
/***/ function(module, exports) {

	var toString = {}.toString;

	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 224 */
/***/ function(module, exports) {

	/* jshint node: true */
	(function () {
	    "use strict";

	    function CookieAccessInfo(domain, path, secure, script) {
	        if (this instanceof CookieAccessInfo) {
	            this.domain = domain || undefined;
	            this.path = path || "/";
	            this.secure = !!secure;
	            this.script = !!script;
	            return this;
	        }
	        return new CookieAccessInfo(domain, path, secure, script);
	    }
	    CookieAccessInfo.All = Object.freeze(Object.create(null));
	    exports.CookieAccessInfo = CookieAccessInfo;

	    function Cookie(cookiestr, request_domain, request_path) {
	        if (cookiestr instanceof Cookie) {
	            return cookiestr;
	        }
	        if (this instanceof Cookie) {
	            this.name = null;
	            this.value = null;
	            this.expiration_date = Infinity;
	            this.path = String(request_path || "/");
	            this.explicit_path = false;
	            this.domain = request_domain || null;
	            this.explicit_domain = false;
	            this.secure = false; //how to define default?
	            this.noscript = false; //httponly
	            if (cookiestr) {
	                this.parse(cookiestr, request_domain, request_path);
	            }
	            return this;
	        }
	        return new Cookie(cookiestr, request_domain, request_path);
	    }
	    exports.Cookie = Cookie;

	    Cookie.prototype.toString = function toString() {
	        var str = [this.name + "=" + this.value];
	        if (this.expiration_date !== Infinity) {
	            str.push("expires=" + (new Date(this.expiration_date)).toGMTString());
	        }
	        if (this.domain) {
	            str.push("domain=" + this.domain);
	        }
	        if (this.path) {
	            str.push("path=" + this.path);
	        }
	        if (this.secure) {
	            str.push("secure");
	        }
	        if (this.noscript) {
	            str.push("httponly");
	        }
	        return str.join("; ");
	    };

	    Cookie.prototype.toValueString = function toValueString() {
	        return this.name + "=" + this.value;
	    };

	    var cookie_str_splitter = /[:](?=\s*[a-zA-Z0-9_\-]+\s*[=])/g;
	    Cookie.prototype.parse = function parse(str, request_domain, request_path) {
	        if (this instanceof Cookie) {
	            var parts = str.split(";").filter(function (value) {
	                    return !!value;
	                });
	            var i;

	            var pair = parts[0].match(/([^=]+)=([\s\S]*)/);
	            if (!pair) {
	                console.warn("Invalid cookie header encountered. Header: '"+str+"'");
	                return;
	            }

	            var key = pair[1];
	            var value = pair[2];
	            if ( typeof key !== 'string' || key.length === 0 || typeof value !== 'string' ) {
	                console.warn("Unable to extract values from cookie header. Cookie: '"+str+"'");
	                return;
	            }

	            this.name = key;
	            this.value = value;

	            for (i = 1; i < parts.length; i += 1) {
	                pair = parts[i].match(/([^=]+)(?:=([\s\S]*))?/);
	                key = pair[1].trim().toLowerCase();
	                value = pair[2];
	                switch (key) {
	                case "httponly":
	                    this.noscript = true;
	                    break;
	                case "expires":
	                    this.expiration_date = value ?
	                            Number(Date.parse(value)) :
	                            Infinity;
	                    break;
	                case "path":
	                    this.path = value ?
	                            value.trim() :
	                            "";
	                    this.explicit_path = true;
	                    break;
	                case "domain":
	                    this.domain = value ?
	                            value.trim() :
	                            "";
	                    this.explicit_domain = !!this.domain;
	                    break;
	                case "secure":
	                    this.secure = true;
	                    break;
	                }
	            }

	            if (!this.explicit_path) {
	               this.path = request_path || "/";
	            }
	            if (!this.explicit_domain) {
	               this.domain = request_domain;
	            }

	            return this;
	        }
	        return new Cookie().parse(str, request_domain, request_path);
	    };

	    Cookie.prototype.matches = function matches(access_info) {
	        if (access_info === CookieAccessInfo.All) {
	          return true;
	        }
	        if (this.noscript && access_info.script ||
	                this.secure && !access_info.secure ||
	                !this.collidesWith(access_info)) {
	            return false;
	        }
	        return true;
	    };

	    Cookie.prototype.collidesWith = function collidesWith(access_info) {
	        if ((this.path && !access_info.path) || (this.domain && !access_info.domain)) {
	            return false;
	        }
	        if (this.path && access_info.path.indexOf(this.path) !== 0) {
	            return false;
	        }
	        if (this.explicit_path && access_info.path.indexOf( this.path ) !== 0) {
	           return false;
	        }
	        var access_domain = access_info.domain && access_info.domain.replace(/^[\.]/,'');
	        var cookie_domain = this.domain && this.domain.replace(/^[\.]/,'');
	        if (cookie_domain === access_domain) {
	            return true;
	        }
	        if (cookie_domain) {
	            if (!this.explicit_domain) {
	                return false; // we already checked if the domains were exactly the same
	            }
	            var wildcard = access_domain.indexOf(cookie_domain);
	            if (wildcard === -1 || wildcard !== access_domain.length - cookie_domain.length) {
	                return false;
	            }
	            return true;
	        }
	        return true;
	    };

	    function CookieJar() {
	        var cookies, cookies_list, collidable_cookie;
	        if (this instanceof CookieJar) {
	            cookies = Object.create(null); //name: [Cookie]

	            this.setCookie = function setCookie(cookie, request_domain, request_path) {
	                var remove, i;
	                cookie = new Cookie(cookie, request_domain, request_path);
	                //Delete the cookie if the set is past the current time
	                remove = cookie.expiration_date <= Date.now();
	                if (cookies[cookie.name] !== undefined) {
	                    cookies_list = cookies[cookie.name];
	                    for (i = 0; i < cookies_list.length; i += 1) {
	                        collidable_cookie = cookies_list[i];
	                        if (collidable_cookie.collidesWith(cookie)) {
	                            if (remove) {
	                                cookies_list.splice(i, 1);
	                                if (cookies_list.length === 0) {
	                                    delete cookies[cookie.name];
	                                }
	                                return false;
	                            }
	                            cookies_list[i] = cookie;
	                            return cookie;
	                        }
	                    }
	                    if (remove) {
	                        return false;
	                    }
	                    cookies_list.push(cookie);
	                    return cookie;
	                }
	                if (remove) {
	                    return false;
	                }
	                cookies[cookie.name] = [cookie];
	                return cookies[cookie.name];
	            };
	            //returns a cookie
	            this.getCookie = function getCookie(cookie_name, access_info) {
	                var cookie, i;
	                cookies_list = cookies[cookie_name];
	                if (!cookies_list) {
	                    return;
	                }
	                for (i = 0; i < cookies_list.length; i += 1) {
	                    cookie = cookies_list[i];
	                    if (cookie.expiration_date <= Date.now()) {
	                        if (cookies_list.length === 0) {
	                            delete cookies[cookie.name];
	                        }
	                        continue;
	                    }

	                    if (cookie.matches(access_info)) {
	                        return cookie;
	                    }
	                }
	            };
	            //returns a list of cookies
	            this.getCookies = function getCookies(access_info) {
	                var matches = [], cookie_name, cookie;
	                for (cookie_name in cookies) {
	                    cookie = this.getCookie(cookie_name, access_info);
	                    if (cookie) {
	                        matches.push(cookie);
	                    }
	                }
	                matches.toString = function toString() {
	                    return matches.join(":");
	                };
	                matches.toValueString = function toValueString() {
	                    return matches.map(function (c) {
	                        return c.toValueString();
	                    }).join(';');
	                };
	                return matches;
	            };

	            return this;
	        }
	        return new CookieJar();
	    }
	    exports.CookieJar = CookieJar;

	    //returns list of cookies that were set correctly. Cookies that are expired and removed are not returned.
	    CookieJar.prototype.setCookies = function setCookies(cookies, request_domain, request_path) {
	        cookies = Array.isArray(cookies) ?
	                cookies :
	                cookies.split(cookie_str_splitter);
	        var successful = [],
	            i,
	            cookie;
	        cookies = cookies.map(function(item){
	            return new Cookie(item, request_domain, request_path);
	        });
	        for (i = 0; i < cookies.length; i += 1) {
	            cookie = cookies[i];
	            if (this.setCookie(cookie, request_domain, request_path)) {
	                successful.push(cookie);
	            }
	        }
	        return successful;
	    };
	}());


/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	var MD5 = __webpack_require__(138)

	module.exports = function (buffer) {
	  return new MD5().update(buffer).digest()
	}


/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	var inherits = __webpack_require__(3)
	var Buffer = __webpack_require__(6).Buffer

	var Base = __webpack_require__(78)

	var ZEROS = Buffer.alloc(128)
	var blocksize = 64

	function Hmac (alg, key) {
	  Base.call(this, 'digest')
	  if (typeof key === 'string') {
	    key = Buffer.from(key)
	  }

	  this._alg = alg
	  this._key = key

	  if (key.length > blocksize) {
	    key = alg(key)
	  } else if (key.length < blocksize) {
	    key = Buffer.concat([key, ZEROS], blocksize)
	  }

	  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
	  var opad = this._opad = Buffer.allocUnsafe(blocksize)

	  for (var i = 0; i < blocksize; i++) {
	    ipad[i] = key[i] ^ 0x36
	    opad[i] = key[i] ^ 0x5C
	  }

	  this._hash = [ipad]
	}

	inherits(Hmac, Base)

	Hmac.prototype._update = function (data) {
	  this._hash.push(data)
	}

	Hmac.prototype._final = function () {
	  var h = this._alg(Buffer.concat(this._hash))
	  return this._alg(Buffer.concat([this._opad, h]))
	}
	module.exports = Hmac


/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(115)

	var zeroBuffer = new Buffer(128)
	zeroBuffer.fill(0)

	module.exports = Hmac

	function Hmac (alg, key) {
	  if(!(this instanceof Hmac)) return new Hmac(alg, key)
	  this._opad = opad
	  this._alg = alg

	  var blocksize = (alg === 'sha512') ? 128 : 64

	  key = this._key = !Buffer.isBuffer(key) ? new Buffer(key) : key

	  if(key.length > blocksize) {
	    key = createHash(alg).update(key).digest()
	  } else if(key.length < blocksize) {
	    key = Buffer.concat([key, zeroBuffer], blocksize)
	  }

	  var ipad = this._ipad = new Buffer(blocksize)
	  var opad = this._opad = new Buffer(blocksize)

	  for(var i = 0; i < blocksize; i++) {
	    ipad[i] = key[i] ^ 0x36
	    opad[i] = key[i] ^ 0x5C
	  }

	  this._hash = createHash(alg).update(ipad)
	}

	Hmac.prototype.update = function (data, enc) {
	  this._hash.update(data, enc)
	  return this
	}

	Hmac.prototype.digest = function (enc) {
	  var h = this._hash.digest()
	  return createHash(this._alg).update(this._opad).update(h).digest(enc)
	}


	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var intSize = 4;
	var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
	var chrsz = 8;

	function toArray(buf, bigEndian) {
	  if ((buf.length % intSize) !== 0) {
	    var len = buf.length + (intSize - (buf.length % intSize));
	    buf = Buffer.concat([buf, zeroBuffer], len);
	  }

	  var arr = [];
	  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
	  for (var i = 0; i < buf.length; i += intSize) {
	    arr.push(fn.call(buf, i));
	  }
	  return arr;
	}

	function toBuffer(arr, size, bigEndian) {
	  var buf = new Buffer(size);
	  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
	  for (var i = 0; i < arr.length; i++) {
	    fn.call(buf, arr[i], i * 4, true);
	  }
	  return buf;
	}

	function hash(buf, fn, hashSize, bigEndian) {
	  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
	  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
	  return toBuffer(arr, hashSize, bigEndian);
	}

	module.exports = { hash: hash };

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
	 * Digest Algorithm, as defined in RFC 1321.
	 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for more info.
	 */

	var helpers = __webpack_require__(228);

	/*
	 * Calculate the MD5 of an array of little-endian words, and a bit length
	 */
	function core_md5(x, len)
	{
	  /* append padding */
	  x[len >> 5] |= 0x80 << ((len) % 32);
	  x[(((len + 64) >>> 9) << 4) + 14] = len;

	  var a =  1732584193;
	  var b = -271733879;
	  var c = -1732584194;
	  var d =  271733878;

	  for(var i = 0; i < x.length; i += 16)
	  {
	    var olda = a;
	    var oldb = b;
	    var oldc = c;
	    var oldd = d;

	    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
	    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
	    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
	    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
	    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
	    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
	    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
	    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
	    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
	    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
	    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
	    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
	    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
	    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
	    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
	    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

	    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
	    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
	    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
	    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
	    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
	    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
	    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
	    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
	    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
	    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
	    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
	    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
	    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
	    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
	    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
	    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

	    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
	    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
	    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
	    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
	    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
	    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
	    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
	    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
	    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
	    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
	    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
	    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
	    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
	    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
	    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
	    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

	    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
	    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
	    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
	    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
	    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
	    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
	    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
	    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
	    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
	    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
	    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
	    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
	    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
	    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
	    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
	    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

	    a = safe_add(a, olda);
	    b = safe_add(b, oldb);
	    c = safe_add(c, oldc);
	    d = safe_add(d, oldd);
	  }
	  return Array(a, b, c, d);

	}

	/*
	 * These functions implement the four basic operations the algorithm uses.
	 */
	function md5_cmn(q, a, b, x, s, t)
	{
	  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
	}
	function md5_ff(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
	}
	function md5_gg(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
	}
	function md5_hh(a, b, c, d, x, s, t)
	{
	  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
	}
	function md5_ii(a, b, c, d, x, s, t)
	{
	  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
	}

	/*
	 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	 * to work around bugs in some JS interpreters.
	 */
	function safe_add(x, y)
	{
	  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  return (msw << 16) | (lsw & 0xFFFF);
	}

	/*
	 * Bitwise rotate a 32-bit number to the left.
	 */
	function bit_rol(num, cnt)
	{
	  return (num << cnt) | (num >>> (32 - cnt));
	}

	module.exports = function md5(buf) {
	  return helpers.hash(buf, core_md5, 16);
	};


/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	module.exports = ripemd160



	/*
	CryptoJS v3.1.2
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	/** @preserve
	(c) 2012 by Cédric Mesnil. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	// Constants table
	var zl = [
	    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
	    7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
	    3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
	    1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
	    4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13];
	var zr = [
	    5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
	    6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
	    15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
	    8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
	    12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11];
	var sl = [
	     11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
	    7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
	    11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
	      11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
	    9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ];
	var sr = [
	    8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
	    9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
	    9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
	    15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
	    8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ];

	var hl =  [ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E];
	var hr =  [ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000];

	var bytesToWords = function (bytes) {
	  var words = [];
	  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
	    words[b >>> 5] |= bytes[i] << (24 - b % 32);
	  }
	  return words;
	};

	var wordsToBytes = function (words) {
	  var bytes = [];
	  for (var b = 0; b < words.length * 32; b += 8) {
	    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
	  }
	  return bytes;
	};

	var processBlock = function (H, M, offset) {

	  // Swap endian
	  for (var i = 0; i < 16; i++) {
	    var offset_i = offset + i;
	    var M_offset_i = M[offset_i];

	    // Swap
	    M[offset_i] = (
	        (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	        (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	    );
	  }

	  // Working variables
	  var al, bl, cl, dl, el;
	  var ar, br, cr, dr, er;

	  ar = al = H[0];
	  br = bl = H[1];
	  cr = cl = H[2];
	  dr = dl = H[3];
	  er = el = H[4];
	  // Computation
	  var t;
	  for (var i = 0; i < 80; i += 1) {
	    t = (al +  M[offset+zl[i]])|0;
	    if (i<16){
	        t +=  f1(bl,cl,dl) + hl[0];
	    } else if (i<32) {
	        t +=  f2(bl,cl,dl) + hl[1];
	    } else if (i<48) {
	        t +=  f3(bl,cl,dl) + hl[2];
	    } else if (i<64) {
	        t +=  f4(bl,cl,dl) + hl[3];
	    } else {// if (i<80) {
	        t +=  f5(bl,cl,dl) + hl[4];
	    }
	    t = t|0;
	    t =  rotl(t,sl[i]);
	    t = (t+el)|0;
	    al = el;
	    el = dl;
	    dl = rotl(cl, 10);
	    cl = bl;
	    bl = t;

	    t = (ar + M[offset+zr[i]])|0;
	    if (i<16){
	        t +=  f5(br,cr,dr) + hr[0];
	    } else if (i<32) {
	        t +=  f4(br,cr,dr) + hr[1];
	    } else if (i<48) {
	        t +=  f3(br,cr,dr) + hr[2];
	    } else if (i<64) {
	        t +=  f2(br,cr,dr) + hr[3];
	    } else {// if (i<80) {
	        t +=  f1(br,cr,dr) + hr[4];
	    }
	    t = t|0;
	    t =  rotl(t,sr[i]) ;
	    t = (t+er)|0;
	    ar = er;
	    er = dr;
	    dr = rotl(cr, 10);
	    cr = br;
	    br = t;
	  }
	  // Intermediate hash value
	  t    = (H[1] + cl + dr)|0;
	  H[1] = (H[2] + dl + er)|0;
	  H[2] = (H[3] + el + ar)|0;
	  H[3] = (H[4] + al + br)|0;
	  H[4] = (H[0] + bl + cr)|0;
	  H[0] =  t;
	};

	function f1(x, y, z) {
	  return ((x) ^ (y) ^ (z));
	}

	function f2(x, y, z) {
	  return (((x)&(y)) | ((~x)&(z)));
	}

	function f3(x, y, z) {
	  return (((x) | (~(y))) ^ (z));
	}

	function f4(x, y, z) {
	  return (((x) & (z)) | ((y)&(~(z))));
	}

	function f5(x, y, z) {
	  return ((x) ^ ((y) |(~(z))));
	}

	function rotl(x,n) {
	  return (x<<n) | (x>>>(32-n));
	}

	function ripemd160(message) {
	  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];

	  if (typeof message == 'string')
	    message = new Buffer(message, 'utf8');

	  var m = bytesToWords(message);

	  var nBitsLeft = message.length * 8;
	  var nBitsTotal = message.length * 8;

	  // Add padding
	  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	      (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
	      (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
	  );

	  for (var i=0 ; i<m.length; i += 16) {
	    processBlock(H, m, i);
	  }

	  // Swap endian
	  for (var i = 0; i < 5; i++) {
	      // Shortcut
	    var H_i = H[i];

	    // Swap
	    H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	          (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	  }

	  var digestbytes = wordsToBytes(H);
	  return new Buffer(digestbytes);
	}



	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 231 */
/***/ function(module, exports) {

	module.exports = function (Buffer) {

	  //prototype class for hash functions
	  function Hash (blockSize, finalSize) {
	    this._block = new Buffer(blockSize) //new Uint32Array(blockSize/4)
	    this._finalSize = finalSize
	    this._blockSize = blockSize
	    this._len = 0
	    this._s = 0
	  }

	  Hash.prototype.init = function () {
	    this._s = 0
	    this._len = 0
	  }

	  Hash.prototype.update = function (data, enc) {
	    if ("string" === typeof data) {
	      enc = enc || "utf8"
	      data = new Buffer(data, enc)
	    }

	    var l = this._len += data.length
	    var s = this._s = (this._s || 0)
	    var f = 0
	    var buffer = this._block

	    while (s < l) {
	      var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
	      var ch = (t - f)

	      for (var i = 0; i < ch; i++) {
	        buffer[(s % this._blockSize) + i] = data[i + f]
	      }

	      s += ch
	      f += ch

	      if ((s % this._blockSize) === 0) {
	        this._update(buffer)
	      }
	    }
	    this._s = s

	    return this
	  }

	  Hash.prototype.digest = function (enc) {
	    // Suppose the length of the message M, in bits, is l
	    var l = this._len * 8

	    // Append the bit 1 to the end of the message
	    this._block[this._len % this._blockSize] = 0x80

	    // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
	    this._block.fill(0, this._len % this._blockSize + 1)

	    if (l % (this._blockSize * 8) >= this._finalSize * 8) {
	      this._update(this._block)
	      this._block.fill(0)
	    }

	    // to this append the block which is equal to the number l written in binary
	    // TODO: handle case where l is > Math.pow(2, 29)
	    this._block.writeInt32BE(l, this._blockSize - 4)

	    var hash = this._update(this._block) || this._hash()

	    return enc ? hash.toString(enc) : hash
	  }

	  Hash.prototype._update = function () {
	    throw new Error('_update must be implemented by subclass')
	  }

	  return Hash
	}


/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	var exports = module.exports = function (alg) {
	  var Alg = exports[alg]
	  if(!Alg) throw new Error(alg + ' is not supported (we accept pull requests)')
	  return new Alg()
	}

	var Buffer = __webpack_require__(1).Buffer
	var Hash   = __webpack_require__(231)(Buffer)

	exports.sha1 = __webpack_require__(233)(Buffer, Hash)
	exports.sha256 = __webpack_require__(234)(Buffer, Hash)
	exports.sha512 = __webpack_require__(235)(Buffer, Hash)


/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
	 * in FIPS PUB 180-1
	 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for details.
	 */

	var inherits = __webpack_require__(11).inherits

	module.exports = function (Buffer, Hash) {

	  var A = 0|0
	  var B = 4|0
	  var C = 8|0
	  var D = 12|0
	  var E = 16|0

	  var W = new (typeof Int32Array === 'undefined' ? Array : Int32Array)(80)

	  var POOL = []

	  function Sha1 () {
	    if(POOL.length)
	      return POOL.pop().init()

	    if(!(this instanceof Sha1)) return new Sha1()
	    this._w = W
	    Hash.call(this, 16*4, 14*4)

	    this._h = null
	    this.init()
	  }

	  inherits(Sha1, Hash)

	  Sha1.prototype.init = function () {
	    this._a = 0x67452301
	    this._b = 0xefcdab89
	    this._c = 0x98badcfe
	    this._d = 0x10325476
	    this._e = 0xc3d2e1f0

	    Hash.prototype.init.call(this)
	    return this
	  }

	  Sha1.prototype._POOL = POOL
	  Sha1.prototype._update = function (X) {

	    var a, b, c, d, e, _a, _b, _c, _d, _e

	    a = _a = this._a
	    b = _b = this._b
	    c = _c = this._c
	    d = _d = this._d
	    e = _e = this._e

	    var w = this._w

	    for(var j = 0; j < 80; j++) {
	      var W = w[j] = j < 16 ? X.readInt32BE(j*4)
	        : rol(w[j - 3] ^ w[j -  8] ^ w[j - 14] ^ w[j - 16], 1)

	      var t = add(
	        add(rol(a, 5), sha1_ft(j, b, c, d)),
	        add(add(e, W), sha1_kt(j))
	      )

	      e = d
	      d = c
	      c = rol(b, 30)
	      b = a
	      a = t
	    }

	    this._a = add(a, _a)
	    this._b = add(b, _b)
	    this._c = add(c, _c)
	    this._d = add(d, _d)
	    this._e = add(e, _e)
	  }

	  Sha1.prototype._hash = function () {
	    if(POOL.length < 100) POOL.push(this)
	    var H = new Buffer(20)
	    //console.log(this._a|0, this._b|0, this._c|0, this._d|0, this._e|0)
	    H.writeInt32BE(this._a|0, A)
	    H.writeInt32BE(this._b|0, B)
	    H.writeInt32BE(this._c|0, C)
	    H.writeInt32BE(this._d|0, D)
	    H.writeInt32BE(this._e|0, E)
	    return H
	  }

	  /*
	   * Perform the appropriate triplet combination function for the current
	   * iteration
	   */
	  function sha1_ft(t, b, c, d) {
	    if(t < 20) return (b & c) | ((~b) & d);
	    if(t < 40) return b ^ c ^ d;
	    if(t < 60) return (b & c) | (b & d) | (c & d);
	    return b ^ c ^ d;
	  }

	  /*
	   * Determine the appropriate additive constant for the current iteration
	   */
	  function sha1_kt(t) {
	    return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
	           (t < 60) ? -1894007588 : -899497514;
	  }

	  /*
	   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	   * to work around bugs in some JS interpreters.
	   * //dominictarr: this is 10 years old, so maybe this can be dropped?)
	   *
	   */
	  function add(x, y) {
	    return (x + y ) | 0
	  //lets see how this goes on testling.
	  //  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  //  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  //  return (msw << 16) | (lsw & 0xFFFF);
	  }

	  /*
	   * Bitwise rotate a 32-bit number to the left.
	   */
	  function rol(num, cnt) {
	    return (num << cnt) | (num >>> (32 - cnt));
	  }

	  return Sha1
	}


/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */

	var inherits = __webpack_require__(11).inherits

	module.exports = function (Buffer, Hash) {

	  var K = [
	      0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
	      0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
	      0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
	      0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
	      0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
	      0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
	      0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
	      0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
	      0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
	      0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
	      0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
	      0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
	      0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
	      0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
	      0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
	      0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
	    ]

	  var W = new Array(64)

	  function Sha256() {
	    this.init()

	    this._w = W //new Array(64)

	    Hash.call(this, 16*4, 14*4)
	  }

	  inherits(Sha256, Hash)

	  Sha256.prototype.init = function () {

	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0

	    this._len = this._s = 0

	    return this
	  }

	  function S (X, n) {
	    return (X >>> n) | (X << (32 - n));
	  }

	  function R (X, n) {
	    return (X >>> n);
	  }

	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }

	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }

	  function Sigma0256 (x) {
	    return (S(x, 2) ^ S(x, 13) ^ S(x, 22));
	  }

	  function Sigma1256 (x) {
	    return (S(x, 6) ^ S(x, 11) ^ S(x, 25));
	  }

	  function Gamma0256 (x) {
	    return (S(x, 7) ^ S(x, 18) ^ R(x, 3));
	  }

	  function Gamma1256 (x) {
	    return (S(x, 17) ^ S(x, 19) ^ R(x, 10));
	  }

	  Sha256.prototype._update = function(M) {

	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var T1, T2

	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0

	    for (var j = 0; j < 64; j++) {
	      var w = W[j] = j < 16
	        ? M.readInt32BE(j * 4)
	        : Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16]

	      T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w

	      T2 = Sigma0256(a) + Maj(a, b, c);
	      h = g; g = f; f = e; e = d + T1; d = c; c = b; b = a; a = T1 + T2;
	    }

	    this._a = (a + this._a) | 0
	    this._b = (b + this._b) | 0
	    this._c = (c + this._c) | 0
	    this._d = (d + this._d) | 0
	    this._e = (e + this._e) | 0
	    this._f = (f + this._f) | 0
	    this._g = (g + this._g) | 0
	    this._h = (h + this._h) | 0

	  };

	  Sha256.prototype._hash = function () {
	    var H = new Buffer(32)

	    H.writeInt32BE(this._a,  0)
	    H.writeInt32BE(this._b,  4)
	    H.writeInt32BE(this._c,  8)
	    H.writeInt32BE(this._d, 12)
	    H.writeInt32BE(this._e, 16)
	    H.writeInt32BE(this._f, 20)
	    H.writeInt32BE(this._g, 24)
	    H.writeInt32BE(this._h, 28)

	    return H
	  }

	  return Sha256

	}


/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(11).inherits

	module.exports = function (Buffer, Hash) {
	  var K = [
	    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	  ]

	  var W = new Array(160)

	  function Sha512() {
	    this.init()
	    this._w = W

	    Hash.call(this, 128, 112)
	  }

	  inherits(Sha512, Hash)

	  Sha512.prototype.init = function () {

	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0

	    this._al = 0xf3bcc908|0
	    this._bl = 0x84caa73b|0
	    this._cl = 0xfe94f82b|0
	    this._dl = 0x5f1d36f1|0
	    this._el = 0xade682d1|0
	    this._fl = 0x2b3e6c1f|0
	    this._gl = 0xfb41bd6b|0
	    this._hl = 0x137e2179|0

	    this._len = this._s = 0

	    return this
	  }

	  function S (X, Xl, n) {
	    return (X >>> n) | (Xl << (32 - n))
	  }

	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }

	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }

	  Sha512.prototype._update = function(M) {

	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var al, bl, cl, dl, el, fl, gl, hl

	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0

	    al = this._al | 0
	    bl = this._bl | 0
	    cl = this._cl | 0
	    dl = this._dl | 0
	    el = this._el | 0
	    fl = this._fl | 0
	    gl = this._gl | 0
	    hl = this._hl | 0

	    for (var i = 0; i < 80; i++) {
	      var j = i * 2

	      var Wi, Wil

	      if (i < 16) {
	        Wi = W[j] = M.readInt32BE(j * 4)
	        Wil = W[j + 1] = M.readInt32BE(j * 4 + 4)

	      } else {
	        var x  = W[j - 15*2]
	        var xl = W[j - 15*2 + 1]
	        var gamma0  = S(x, xl, 1) ^ S(x, xl, 8) ^ (x >>> 7)
	        var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7)

	        x  = W[j - 2*2]
	        xl = W[j - 2*2 + 1]
	        var gamma1  = S(x, xl, 19) ^ S(xl, x, 29) ^ (x >>> 6)
	        var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6)

	        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
	        var Wi7  = W[j - 7*2]
	        var Wi7l = W[j - 7*2 + 1]

	        var Wi16  = W[j - 16*2]
	        var Wi16l = W[j - 16*2 + 1]

	        Wil = gamma0l + Wi7l
	        Wi  = gamma0  + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)
	        Wil = Wil + gamma1l
	        Wi  = Wi  + gamma1  + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)
	        Wil = Wil + Wi16l
	        Wi  = Wi  + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)

	        W[j] = Wi
	        W[j + 1] = Wil
	      }

	      var maj = Maj(a, b, c)
	      var majl = Maj(al, bl, cl)

	      var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7)
	      var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7)
	      var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9)
	      var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9)

	      // t1 = h + sigma1 + ch + K[i] + W[i]
	      var Ki = K[j]
	      var Kil = K[j + 1]

	      var ch = Ch(e, f, g)
	      var chl = Ch(el, fl, gl)

	      var t1l = hl + sigma1l
	      var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)
	      t1l = t1l + chl
	      t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)
	      t1l = t1l + Kil
	      t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)
	      t1l = t1l + Wil
	      t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)

	      // t2 = sigma0 + maj
	      var t2l = sigma0l + majl
	      var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)

	      h  = g
	      hl = gl
	      g  = f
	      gl = fl
	      f  = e
	      fl = el
	      el = (dl + t1l) | 0
	      e  = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	      d  = c
	      dl = cl
	      c  = b
	      cl = bl
	      b  = a
	      bl = al
	      al = (t1l + t2l) | 0
	      a  = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0
	    }

	    this._al = (this._al + al) | 0
	    this._bl = (this._bl + bl) | 0
	    this._cl = (this._cl + cl) | 0
	    this._dl = (this._dl + dl) | 0
	    this._el = (this._el + el) | 0
	    this._fl = (this._fl + fl) | 0
	    this._gl = (this._gl + gl) | 0
	    this._hl = (this._hl + hl) | 0

	    this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0
	    this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0
	    this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0
	    this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	    this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0
	    this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0
	    this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0
	    this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0
	  }

	  Sha512.prototype._hash = function () {
	    var H = new Buffer(64)

	    function writeInt64BE(h, l, offset) {
	      H.writeInt32BE(h, offset)
	      H.writeInt32BE(l, offset + 4)
	    }

	    writeInt64BE(this._a, this._al, 0)
	    writeInt64BE(this._b, this._bl, 8)
	    writeInt64BE(this._c, this._cl, 16)
	    writeInt64BE(this._d, this._dl, 24)
	    writeInt64BE(this._e, this._el, 32)
	    writeInt64BE(this._f, this._fl, 40)
	    writeInt64BE(this._g, this._gl, 48)
	    writeInt64BE(this._h, this._hl, 56)

	    return H
	  }

	  return Sha512

	}


/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	var pbkdf2Export = __webpack_require__(355)

	module.exports = function (crypto, exports) {
	  exports = exports || {}

	  var exported = pbkdf2Export(crypto)

	  exports.pbkdf2 = exported.pbkdf2
	  exports.pbkdf2Sync = exported.pbkdf2Sync

	  return exports
	}


/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, Buffer) {(function() {
	  var g = ('undefined' === typeof window ? global : window) || {}
	  _crypto = (
	    g.crypto || g.msCrypto || __webpack_require__(423)
	  )
	  module.exports = function(size) {
	    // Modern Browsers
	    if(_crypto.getRandomValues) {
	      var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array
	      /* This will not work in older browsers.
	       * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
	       */
	    
	      _crypto.getRandomValues(bytes);
	      return bytes;
	    }
	    else if (_crypto.randomBytes) {
	      return _crypto.randomBytes(size)
	    }
	    else
	      throw new Error(
	        'secure random number generation not supported by this browser\n'+
	        'use chrome, FireFox or Internet Explorer 11'
	      )
	  }
	}())

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(1).Buffer))

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(33), __webpack_require__(34), __webpack_require__(26), __webpack_require__(7));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var BlockCipher = C_lib.BlockCipher;
		    var C_algo = C.algo;

		    // Lookup tables
		    var SBOX = [];
		    var INV_SBOX = [];
		    var SUB_MIX_0 = [];
		    var SUB_MIX_1 = [];
		    var SUB_MIX_2 = [];
		    var SUB_MIX_3 = [];
		    var INV_SUB_MIX_0 = [];
		    var INV_SUB_MIX_1 = [];
		    var INV_SUB_MIX_2 = [];
		    var INV_SUB_MIX_3 = [];

		    // Compute lookup tables
		    (function () {
		        // Compute double table
		        var d = [];
		        for (var i = 0; i < 256; i++) {
		            if (i < 128) {
		                d[i] = i << 1;
		            } else {
		                d[i] = (i << 1) ^ 0x11b;
		            }
		        }

		        // Walk GF(2^8)
		        var x = 0;
		        var xi = 0;
		        for (var i = 0; i < 256; i++) {
		            // Compute sbox
		            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
		            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
		            SBOX[x] = sx;
		            INV_SBOX[sx] = x;

		            // Compute multiplication
		            var x2 = d[x];
		            var x4 = d[x2];
		            var x8 = d[x4];

		            // Compute sub bytes, mix columns tables
		            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);
		            SUB_MIX_0[x] = (t << 24) | (t >>> 8);
		            SUB_MIX_1[x] = (t << 16) | (t >>> 16);
		            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);
		            SUB_MIX_3[x] = t;

		            // Compute inv sub bytes, inv mix columns tables
		            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
		            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);
		            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);
		            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);
		            INV_SUB_MIX_3[sx] = t;

		            // Compute next counter
		            if (!x) {
		                x = xi = 1;
		            } else {
		                x = x2 ^ d[d[d[x8 ^ x2]]];
		                xi ^= d[d[xi]];
		            }
		        }
		    }());

		    // Precomputed Rcon lookup
		    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

		    /**
		     * AES block cipher algorithm.
		     */
		    var AES = C_algo.AES = BlockCipher.extend({
		        _doReset: function () {
		            // Skip reset of nRounds has been set before and key did not change
		            if (this._nRounds && this._keyPriorReset === this._key) {
		                return;
		            }

		            // Shortcuts
		            var key = this._keyPriorReset = this._key;
		            var keyWords = key.words;
		            var keySize = key.sigBytes / 4;

		            // Compute number of rounds
		            var nRounds = this._nRounds = keySize + 6;

		            // Compute number of key schedule rows
		            var ksRows = (nRounds + 1) * 4;

		            // Compute key schedule
		            var keySchedule = this._keySchedule = [];
		            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
		                if (ksRow < keySize) {
		                    keySchedule[ksRow] = keyWords[ksRow];
		                } else {
		                    var t = keySchedule[ksRow - 1];

		                    if (!(ksRow % keySize)) {
		                        // Rot word
		                        t = (t << 8) | (t >>> 24);

		                        // Sub word
		                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];

		                        // Mix Rcon
		                        t ^= RCON[(ksRow / keySize) | 0] << 24;
		                    } else if (keySize > 6 && ksRow % keySize == 4) {
		                        // Sub word
		                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
		                    }

		                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
		                }
		            }

		            // Compute inv key schedule
		            var invKeySchedule = this._invKeySchedule = [];
		            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
		                var ksRow = ksRows - invKsRow;

		                if (invKsRow % 4) {
		                    var t = keySchedule[ksRow];
		                } else {
		                    var t = keySchedule[ksRow - 4];
		                }

		                if (invKsRow < 4 || ksRow <= 4) {
		                    invKeySchedule[invKsRow] = t;
		                } else {
		                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^
		                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
		                }
		            }
		        },

		        encryptBlock: function (M, offset) {
		            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
		        },

		        decryptBlock: function (M, offset) {
		            // Swap 2nd and 4th rows
		            var t = M[offset + 1];
		            M[offset + 1] = M[offset + 3];
		            M[offset + 3] = t;

		            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);

		            // Inv swap 2nd and 4th rows
		            var t = M[offset + 1];
		            M[offset + 1] = M[offset + 3];
		            M[offset + 3] = t;
		        },

		        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
		            // Shortcut
		            var nRounds = this._nRounds;

		            // Get input, add round key
		            var s0 = M[offset]     ^ keySchedule[0];
		            var s1 = M[offset + 1] ^ keySchedule[1];
		            var s2 = M[offset + 2] ^ keySchedule[2];
		            var s3 = M[offset + 3] ^ keySchedule[3];

		            // Key schedule row counter
		            var ksRow = 4;

		            // Rounds
		            for (var round = 1; round < nRounds; round++) {
		                // Shift rows, sub bytes, mix columns, add round key
		                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
		                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
		                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
		                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];

		                // Update state
		                s0 = t0;
		                s1 = t1;
		                s2 = t2;
		                s3 = t3;
		            }

		            // Shift rows, sub bytes, add round key
		            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
		            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
		            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
		            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];

		            // Set output
		            M[offset]     = t0;
		            M[offset + 1] = t1;
		            M[offset + 2] = t2;
		            M[offset + 3] = t3;
		        },

		        keySize: 256/32
		    });

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
		     */
		    C.AES = BlockCipher._createHelper(AES);
		}());


		return CryptoJS.AES;

	}));

/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var C_enc = C.enc;

		    /**
		     * UTF-16 BE encoding strategy.
		     */
		    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
		        /**
		         * Converts a word array to a UTF-16 BE string.
		         *
		         * @param {WordArray} wordArray The word array.
		         *
		         * @return {string} The UTF-16 BE string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
		         */
		        stringify: function (wordArray) {
		            // Shortcuts
		            var words = wordArray.words;
		            var sigBytes = wordArray.sigBytes;

		            // Convert
		            var utf16Chars = [];
		            for (var i = 0; i < sigBytes; i += 2) {
		                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;
		                utf16Chars.push(String.fromCharCode(codePoint));
		            }

		            return utf16Chars.join('');
		        },

		        /**
		         * Converts a UTF-16 BE string to a word array.
		         *
		         * @param {string} utf16Str The UTF-16 BE string.
		         *
		         * @return {WordArray} The word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
		         */
		        parse: function (utf16Str) {
		            // Shortcut
		            var utf16StrLength = utf16Str.length;

		            // Convert
		            var words = [];
		            for (var i = 0; i < utf16StrLength; i++) {
		                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);
		            }

		            return WordArray.create(words, utf16StrLength * 2);
		        }
		    };

		    /**
		     * UTF-16 LE encoding strategy.
		     */
		    C_enc.Utf16LE = {
		        /**
		         * Converts a word array to a UTF-16 LE string.
		         *
		         * @param {WordArray} wordArray The word array.
		         *
		         * @return {string} The UTF-16 LE string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
		         */
		        stringify: function (wordArray) {
		            // Shortcuts
		            var words = wordArray.words;
		            var sigBytes = wordArray.sigBytes;

		            // Convert
		            var utf16Chars = [];
		            for (var i = 0; i < sigBytes; i += 2) {
		                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);
		                utf16Chars.push(String.fromCharCode(codePoint));
		            }

		            return utf16Chars.join('');
		        },

		        /**
		         * Converts a UTF-16 LE string to a word array.
		         *
		         * @param {string} utf16Str The UTF-16 LE string.
		         *
		         * @return {WordArray} The word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
		         */
		        parse: function (utf16Str) {
		            // Shortcut
		            var utf16StrLength = utf16Str.length;

		            // Convert
		            var words = [];
		            for (var i = 0; i < utf16StrLength; i++) {
		                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));
		            }

		            return WordArray.create(words, utf16StrLength * 2);
		        }
		    };

		    function swapEndian(word) {
		        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);
		    }
		}());


		return CryptoJS.enc.Utf16;

	}));

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(7));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function (undefined) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var CipherParams = C_lib.CipherParams;
		    var C_enc = C.enc;
		    var Hex = C_enc.Hex;
		    var C_format = C.format;

		    var HexFormatter = C_format.Hex = {
		        /**
		         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
		         *
		         * @param {CipherParams} cipherParams The cipher params object.
		         *
		         * @return {string} The hexadecimally encoded string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
		         */
		        stringify: function (cipherParams) {
		            return cipherParams.ciphertext.toString(Hex);
		        },

		        /**
		         * Converts a hexadecimally encoded ciphertext string to a cipher params object.
		         *
		         * @param {string} input The hexadecimally encoded string.
		         *
		         * @return {CipherParams} The cipher params object.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
		         */
		        parse: function (input) {
		            var ciphertext = Hex.parse(input);
		            return CipherParams.create({ ciphertext: ciphertext });
		        }
		    };
		}());


		return CryptoJS.format.Hex;

	}));

/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(61), __webpack_require__(242), __webpack_require__(239), __webpack_require__(33), __webpack_require__(34), __webpack_require__(81), __webpack_require__(116), __webpack_require__(258), __webpack_require__(118), __webpack_require__(259), __webpack_require__(117), __webpack_require__(257), __webpack_require__(80), __webpack_require__(253), __webpack_require__(26), __webpack_require__(7), __webpack_require__(243), __webpack_require__(245), __webpack_require__(244), __webpack_require__(247), __webpack_require__(246), __webpack_require__(248), __webpack_require__(249), __webpack_require__(250), __webpack_require__(252), __webpack_require__(251), __webpack_require__(240), __webpack_require__(238), __webpack_require__(260), __webpack_require__(256), __webpack_require__(255), __webpack_require__(254));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./x64-core", "./lib-typedarrays", "./enc-utf16", "./enc-base64", "./md5", "./sha1", "./sha256", "./sha224", "./sha512", "./sha384", "./sha3", "./ripemd160", "./hmac", "./pbkdf2", "./evpkdf", "./cipher-core", "./mode-cfb", "./mode-ctr", "./mode-ctr-gladman", "./mode-ofb", "./mode-ecb", "./pad-ansix923", "./pad-iso10126", "./pad-iso97971", "./pad-zeropadding", "./pad-nopadding", "./format-hex", "./aes", "./tripledes", "./rc4", "./rabbit", "./rabbit-legacy"], factory);
		}
		else {
			// Global (browser)
			root.CryptoJS = factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		return CryptoJS;

	}));

/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Check if typed arrays are supported
		    if (typeof ArrayBuffer != 'function') {
		        return;
		    }

		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;

		    // Reference original init
		    var superInit = WordArray.init;

		    // Augment WordArray.init to handle typed arrays
		    var subInit = WordArray.init = function (typedArray) {
		        // Convert buffers to uint8
		        if (typedArray instanceof ArrayBuffer) {
		            typedArray = new Uint8Array(typedArray);
		        }

		        // Convert other array views to uint8
		        if (
		            typedArray instanceof Int8Array ||
		            (typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray) ||
		            typedArray instanceof Int16Array ||
		            typedArray instanceof Uint16Array ||
		            typedArray instanceof Int32Array ||
		            typedArray instanceof Uint32Array ||
		            typedArray instanceof Float32Array ||
		            typedArray instanceof Float64Array
		        ) {
		            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
		        }

		        // Handle Uint8Array
		        if (typedArray instanceof Uint8Array) {
		            // Shortcut
		            var typedArrayByteLength = typedArray.byteLength;

		            // Extract bytes
		            var words = [];
		            for (var i = 0; i < typedArrayByteLength; i++) {
		                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);
		            }

		            // Initialize this word array
		            superInit.call(this, words, typedArrayByteLength);
		        } else {
		            // Else call normal init
		            superInit.apply(this, arguments);
		        }
		    };

		    subInit.prototype = WordArray;
		}());


		return CryptoJS.lib.WordArray;

	}));

/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(7));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		/**
		 * Cipher Feedback block mode.
		 */
		CryptoJS.mode.CFB = (function () {
		    var CFB = CryptoJS.lib.BlockCipherMode.extend();

		    CFB.Encryptor = CFB.extend({
		        processBlock: function (words, offset) {
		            // Shortcuts
		            var cipher = this._cipher;
		            var blockSize = cipher.blockSize;

		            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

		            // Remember this block to use with next block
		            this._prevBlock = words.slice(offset, offset + blockSize);
		        }
		    });

		    CFB.Decryptor = CFB.extend({
		        processBlock: function (words, offset) {
		            // Shortcuts
		            var cipher = this._cipher;
		            var blockSize = cipher.blockSize;

		            // Remember this block to use with next block
		            var thisBlock = words.slice(offset, offset + blockSize);

		            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

		            // This block becomes the previous block
		            this._prevBlock = thisBlock;
		        }
		    });

		    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
		        // Shortcut
		        var iv = this._iv;

		        // Generate keystream
		        if (iv) {
		            var keystream = iv.slice(0);

		            // Remove IV for subsequent blocks
		            this._iv = undefined;
		        } else {
		            var keystream = this._prevBlock;
		        }
		        cipher.encryptBlock(keystream, 0);

		        // Encrypt
		        for (var i = 0; i < blockSize; i++) {
		            words[offset + i] ^= keystream[i];
		        }
		    }

		    return CFB;
		}());


		return CryptoJS.mode.CFB;

	}));

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(7));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		/** @preserve
		 * Counter block mode compatible with  Dr Brian Gladman fileenc.c
		 * derived from CryptoJS.mode.CTR
		 * Jan Hruby jhruby.web@gmail.com
		 */
		CryptoJS.mode.CTRGladman = (function () {
		    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();

			function incWord(word)
			{
				if (((word >> 24) & 0xff) === 0xff) { //overflow
				var b1 = (word >> 16)&0xff;
				var b2 = (word >> 8)&0xff;
				var b3 = word & 0xff;

				if (b1 === 0xff) // overflow b1
				{
				b1 = 0;
				if (b2 === 0xff)
				{
					b2 = 0;
					if (b3 === 0xff)
					{
						b3 = 0;
					}
					else
					{
						++b3;
					}
				}
				else
				{
					++b2;
				}
				}
				else
				{
				++b1;
				}

				word = 0;
				word += (b1 << 16);
				word += (b2 << 8);
				word += b3;
				}
				else
				{
				word += (0x01 << 24);
				}
				return word;
			}

			function incCounter(counter)
			{
				if ((counter[0] = incWord(counter[0])) === 0)
				{
					// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8
					counter[1] = incWord(counter[1]);
				}
				return counter;
			}

		    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
		        processBlock: function (words, offset) {
		            // Shortcuts
		            var cipher = this._cipher
		            var blockSize = cipher.blockSize;
		            var iv = this._iv;
		            var counter = this._counter;

		            // Generate keystream
		            if (iv) {
		                counter = this._counter = iv.slice(0);

		                // Remove IV for subsequent blocks
		                this._iv = undefined;
		            }

					incCounter(counter);

					var keystream = counter.slice(0);
		            cipher.encryptBlock(keystream, 0);

		            // Encrypt
		            for (var i = 0; i < blockSize; i++) {
		                words[offset + i] ^= keystream[i];
		            }
		        }
		    });

		    CTRGladman.Decryptor = Encryptor;

		    return CTRGladman;
		}());




		return CryptoJS.mode.CTRGladman;

	}));

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(7));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		/**
		 * Counter block mode.
		 */
		CryptoJS.mode.CTR = (function () {
		    var CTR = CryptoJS.lib.BlockCipherMode.extend();

		    var Encryptor = CTR.Encryptor = CTR.extend({
		        processBlock: function (words, offset) {
		            // Shortcuts
		            var cipher = this._cipher
		            var blockSize = cipher.blockSize;
		            var iv = this._iv;
		            var counter = this._counter;

		            // Generate keystream
		            if (iv) {
		                counter = this._counter = iv.slice(0);

		                // Remove IV for subsequent blocks
		                this._iv = undefined;
		            }
		            var keystream = counter.slice(0);
		            cipher.encryptBlock(keystream, 0);

		            // Increment counter
		            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0

		            // Encrypt
		            for (var i = 0; i < blockSize; i++) {
		                words[offset + i] ^= keystream[i];
		            }
		        }
		    });

		    CTR.Decryptor = Encryptor;

		    return CTR;
		}());


		return CryptoJS.mode.CTR;

	}));

/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(7));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		/**
		 * Electronic Codebook block mode.
		 */
		CryptoJS.mode.ECB = (function () {
		    var ECB = CryptoJS.lib.BlockCipherMode.extend();

		    ECB.Encryptor = ECB.extend({
		        processBlock: function (words, offset) {
		            this._cipher.encryptBlock(words, offset);
		        }
		    });

		    ECB.Decryptor = ECB.extend({
		        processBlock: function (words, offset) {
		            this._cipher.decryptBlock(words, offset);
		        }
		    });

		    return ECB;
		}());


		return CryptoJS.mode.ECB;

	}));

/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(7));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		/**
		 * Output Feedback block mode.
		 */
		CryptoJS.mode.OFB = (function () {
		    var OFB = CryptoJS.lib.BlockCipherMode.extend();

		    var Encryptor = OFB.Encryptor = OFB.extend({
		        processBlock: function (words, offset) {
		            // Shortcuts
		            var cipher = this._cipher
		            var blockSize = cipher.blockSize;
		            var iv = this._iv;
		            var keystream = this._keystream;

		            // Generate keystream
		            if (iv) {
		                keystream = this._keystream = iv.slice(0);

		                // Remove IV for subsequent blocks
		                this._iv = undefined;
		            }
		            cipher.encryptBlock(keystream, 0);

		            // Encrypt
		            for (var i = 0; i < blockSize; i++) {
		                words[offset + i] ^= keystream[i];
		            }
		        }
		    });

		    OFB.Decryptor = Encryptor;

		    return OFB;
		}());


		return CryptoJS.mode.OFB;

	}));

/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(7));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		/**
		 * ANSI X.923 padding strategy.
		 */
		CryptoJS.pad.AnsiX923 = {
		    pad: function (data, blockSize) {
		        // Shortcuts
		        var dataSigBytes = data.sigBytes;
		        var blockSizeBytes = blockSize * 4;

		        // Count padding bytes
		        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;

		        // Compute last byte position
		        var lastBytePos = dataSigBytes + nPaddingBytes - 1;

		        // Pad
		        data.clamp();
		        data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);
		        data.sigBytes += nPaddingBytes;
		    },

		    unpad: function (data) {
		        // Get number of padding bytes from last byte
		        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

		        // Remove padding
		        data.sigBytes -= nPaddingBytes;
		    }
		};


		return CryptoJS.pad.Ansix923;

	}));

/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(7));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		/**
		 * ISO 10126 padding strategy.
		 */
		CryptoJS.pad.Iso10126 = {
		    pad: function (data, blockSize) {
		        // Shortcut
		        var blockSizeBytes = blockSize * 4;

		        // Count padding bytes
		        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

		        // Pad
		        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).
		             concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
		    },

		    unpad: function (data) {
		        // Get number of padding bytes from last byte
		        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

		        // Remove padding
		        data.sigBytes -= nPaddingBytes;
		    }
		};


		return CryptoJS.pad.Iso10126;

	}));

/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(7));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		/**
		 * ISO/IEC 9797-1 Padding Method 2.
		 */
		CryptoJS.pad.Iso97971 = {
		    pad: function (data, blockSize) {
		        // Add 0x80 byte
		        data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));

		        // Zero pad the rest
		        CryptoJS.pad.ZeroPadding.pad(data, blockSize);
		    },

		    unpad: function (data) {
		        // Remove zero padding
		        CryptoJS.pad.ZeroPadding.unpad(data);

		        // Remove one more byte -- the 0x80 byte
		        data.sigBytes--;
		    }
		};


		return CryptoJS.pad.Iso97971;

	}));

/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(7));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		/**
		 * A noop padding strategy.
		 */
		CryptoJS.pad.NoPadding = {
		    pad: function () {
		    },

		    unpad: function () {
		    }
		};


		return CryptoJS.pad.NoPadding;

	}));

/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(7));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		/**
		 * Zero padding strategy.
		 */
		CryptoJS.pad.ZeroPadding = {
		    pad: function (data, blockSize) {
		        // Shortcut
		        var blockSizeBytes = blockSize * 4;

		        // Pad
		        data.clamp();
		        data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);
		    },

		    unpad: function (data) {
		        // Shortcut
		        var dataWords = data.words;

		        // Unpad
		        var i = data.sigBytes - 1;
		        while (!((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {
		            i--;
		        }
		        data.sigBytes = i + 1;
		    }
		};


		return CryptoJS.pad.ZeroPadding;

	}));

/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(81), __webpack_require__(80));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./sha1", "./hmac"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var Base = C_lib.Base;
		    var WordArray = C_lib.WordArray;
		    var C_algo = C.algo;
		    var SHA1 = C_algo.SHA1;
		    var HMAC = C_algo.HMAC;

		    /**
		     * Password-Based Key Derivation Function 2 algorithm.
		     */
		    var PBKDF2 = C_algo.PBKDF2 = Base.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
		         * @property {Hasher} hasher The hasher to use. Default: SHA1
		         * @property {number} iterations The number of iterations to perform. Default: 1
		         */
		        cfg: Base.extend({
		            keySize: 128/32,
		            hasher: SHA1,
		            iterations: 1
		        }),

		        /**
		         * Initializes a newly created key derivation function.
		         *
		         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
		         *
		         * @example
		         *
		         *     var kdf = CryptoJS.algo.PBKDF2.create();
		         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
		         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
		         */
		        init: function (cfg) {
		            this.cfg = this.cfg.extend(cfg);
		        },

		        /**
		         * Computes the Password-Based Key Derivation Function 2.
		         *
		         * @param {WordArray|string} password The password.
		         * @param {WordArray|string} salt A salt.
		         *
		         * @return {WordArray} The derived key.
		         *
		         * @example
		         *
		         *     var key = kdf.compute(password, salt);
		         */
		        compute: function (password, salt) {
		            // Shortcut
		            var cfg = this.cfg;

		            // Init HMAC
		            var hmac = HMAC.create(cfg.hasher, password);

		            // Initial values
		            var derivedKey = WordArray.create();
		            var blockIndex = WordArray.create([0x00000001]);

		            // Shortcuts
		            var derivedKeyWords = derivedKey.words;
		            var blockIndexWords = blockIndex.words;
		            var keySize = cfg.keySize;
		            var iterations = cfg.iterations;

		            // Generate key
		            while (derivedKeyWords.length < keySize) {
		                var block = hmac.update(salt).finalize(blockIndex);
		                hmac.reset();

		                // Shortcuts
		                var blockWords = block.words;
		                var blockWordsLength = blockWords.length;

		                // Iterations
		                var intermediate = block;
		                for (var i = 1; i < iterations; i++) {
		                    intermediate = hmac.finalize(intermediate);
		                    hmac.reset();

		                    // Shortcut
		                    var intermediateWords = intermediate.words;

		                    // XOR intermediate with block
		                    for (var j = 0; j < blockWordsLength; j++) {
		                        blockWords[j] ^= intermediateWords[j];
		                    }
		                }

		                derivedKey.concat(block);
		                blockIndexWords[0]++;
		            }
		            derivedKey.sigBytes = keySize * 4;

		            return derivedKey;
		        }
		    });

		    /**
		     * Computes the Password-Based Key Derivation Function 2.
		     *
		     * @param {WordArray|string} password The password.
		     * @param {WordArray|string} salt A salt.
		     * @param {Object} cfg (Optional) The configuration options to use for this computation.
		     *
		     * @return {WordArray} The derived key.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var key = CryptoJS.PBKDF2(password, salt);
		     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });
		     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });
		     */
		    C.PBKDF2 = function (password, salt, cfg) {
		        return PBKDF2.create(cfg).compute(password, salt);
		    };
		}());


		return CryptoJS.PBKDF2;

	}));

/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(33), __webpack_require__(34), __webpack_require__(26), __webpack_require__(7));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var StreamCipher = C_lib.StreamCipher;
		    var C_algo = C.algo;

		    // Reusable objects
		    var S  = [];
		    var C_ = [];
		    var G  = [];

		    /**
		     * Rabbit stream cipher algorithm.
		     *
		     * This is a legacy version that neglected to convert the key to little-endian.
		     * This error doesn't affect the cipher's security,
		     * but it does affect its compatibility with other implementations.
		     */
		    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
		        _doReset: function () {
		            // Shortcuts
		            var K = this._key.words;
		            var iv = this.cfg.iv;

		            // Generate initial state values
		            var X = this._X = [
		                K[0], (K[3] << 16) | (K[2] >>> 16),
		                K[1], (K[0] << 16) | (K[3] >>> 16),
		                K[2], (K[1] << 16) | (K[0] >>> 16),
		                K[3], (K[2] << 16) | (K[1] >>> 16)
		            ];

		            // Generate initial counter values
		            var C = this._C = [
		                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
		                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
		                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
		                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
		            ];

		            // Carry bit
		            this._b = 0;

		            // Iterate the system four times
		            for (var i = 0; i < 4; i++) {
		                nextState.call(this);
		            }

		            // Modify the counters
		            for (var i = 0; i < 8; i++) {
		                C[i] ^= X[(i + 4) & 7];
		            }

		            // IV setup
		            if (iv) {
		                // Shortcuts
		                var IV = iv.words;
		                var IV_0 = IV[0];
		                var IV_1 = IV[1];

		                // Generate four subvectors
		                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
		                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
		                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
		                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);

		                // Modify counter values
		                C[0] ^= i0;
		                C[1] ^= i1;
		                C[2] ^= i2;
		                C[3] ^= i3;
		                C[4] ^= i0;
		                C[5] ^= i1;
		                C[6] ^= i2;
		                C[7] ^= i3;

		                // Iterate the system four times
		                for (var i = 0; i < 4; i++) {
		                    nextState.call(this);
		                }
		            }
		        },

		        _doProcessBlock: function (M, offset) {
		            // Shortcut
		            var X = this._X;

		            // Iterate the system
		            nextState.call(this);

		            // Generate four keystream words
		            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
		            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
		            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
		            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);

		            for (var i = 0; i < 4; i++) {
		                // Swap endian
		                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |
		                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);

		                // Encrypt
		                M[offset + i] ^= S[i];
		            }
		        },

		        blockSize: 128/32,

		        ivSize: 64/32
		    });

		    function nextState() {
		        // Shortcuts
		        var X = this._X;
		        var C = this._C;

		        // Save old counter values
		        for (var i = 0; i < 8; i++) {
		            C_[i] = C[i];
		        }

		        // Calculate new counter values
		        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
		        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
		        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
		        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
		        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
		        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
		        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
		        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
		        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;

		        // Calculate the g-values
		        for (var i = 0; i < 8; i++) {
		            var gx = X[i] + C[i];

		            // Construct high and low argument for squaring
		            var ga = gx & 0xffff;
		            var gb = gx >>> 16;

		            // Calculate high and low result of squaring
		            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
		            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);

		            // High XOR low
		            G[i] = gh ^ gl;
		        }

		        // Calculate new state values
		        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
		        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;
		        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
		        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;
		        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
		        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;
		        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
		        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;
		    }

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);
		     */
		    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
		}());


		return CryptoJS.RabbitLegacy;

	}));

/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(33), __webpack_require__(34), __webpack_require__(26), __webpack_require__(7));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var StreamCipher = C_lib.StreamCipher;
		    var C_algo = C.algo;

		    // Reusable objects
		    var S  = [];
		    var C_ = [];
		    var G  = [];

		    /**
		     * Rabbit stream cipher algorithm
		     */
		    var Rabbit = C_algo.Rabbit = StreamCipher.extend({
		        _doReset: function () {
		            // Shortcuts
		            var K = this._key.words;
		            var iv = this.cfg.iv;

		            // Swap endian
		            for (var i = 0; i < 4; i++) {
		                K[i] = (((K[i] << 8)  | (K[i] >>> 24)) & 0x00ff00ff) |
		                       (((K[i] << 24) | (K[i] >>> 8))  & 0xff00ff00);
		            }

		            // Generate initial state values
		            var X = this._X = [
		                K[0], (K[3] << 16) | (K[2] >>> 16),
		                K[1], (K[0] << 16) | (K[3] >>> 16),
		                K[2], (K[1] << 16) | (K[0] >>> 16),
		                K[3], (K[2] << 16) | (K[1] >>> 16)
		            ];

		            // Generate initial counter values
		            var C = this._C = [
		                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
		                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
		                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
		                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
		            ];

		            // Carry bit
		            this._b = 0;

		            // Iterate the system four times
		            for (var i = 0; i < 4; i++) {
		                nextState.call(this);
		            }

		            // Modify the counters
		            for (var i = 0; i < 8; i++) {
		                C[i] ^= X[(i + 4) & 7];
		            }

		            // IV setup
		            if (iv) {
		                // Shortcuts
		                var IV = iv.words;
		                var IV_0 = IV[0];
		                var IV_1 = IV[1];

		                // Generate four subvectors
		                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
		                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
		                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
		                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);

		                // Modify counter values
		                C[0] ^= i0;
		                C[1] ^= i1;
		                C[2] ^= i2;
		                C[3] ^= i3;
		                C[4] ^= i0;
		                C[5] ^= i1;
		                C[6] ^= i2;
		                C[7] ^= i3;

		                // Iterate the system four times
		                for (var i = 0; i < 4; i++) {
		                    nextState.call(this);
		                }
		            }
		        },

		        _doProcessBlock: function (M, offset) {
		            // Shortcut
		            var X = this._X;

		            // Iterate the system
		            nextState.call(this);

		            // Generate four keystream words
		            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
		            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
		            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
		            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);

		            for (var i = 0; i < 4; i++) {
		                // Swap endian
		                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |
		                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);

		                // Encrypt
		                M[offset + i] ^= S[i];
		            }
		        },

		        blockSize: 128/32,

		        ivSize: 64/32
		    });

		    function nextState() {
		        // Shortcuts
		        var X = this._X;
		        var C = this._C;

		        // Save old counter values
		        for (var i = 0; i < 8; i++) {
		            C_[i] = C[i];
		        }

		        // Calculate new counter values
		        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
		        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
		        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
		        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
		        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
		        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
		        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
		        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
		        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;

		        // Calculate the g-values
		        for (var i = 0; i < 8; i++) {
		            var gx = X[i] + C[i];

		            // Construct high and low argument for squaring
		            var ga = gx & 0xffff;
		            var gb = gx >>> 16;

		            // Calculate high and low result of squaring
		            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
		            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);

		            // High XOR low
		            G[i] = gh ^ gl;
		        }

		        // Calculate new state values
		        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
		        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;
		        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
		        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;
		        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
		        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;
		        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
		        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;
		    }

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);
		     */
		    C.Rabbit = StreamCipher._createHelper(Rabbit);
		}());


		return CryptoJS.Rabbit;

	}));

/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(33), __webpack_require__(34), __webpack_require__(26), __webpack_require__(7));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var StreamCipher = C_lib.StreamCipher;
		    var C_algo = C.algo;

		    /**
		     * RC4 stream cipher algorithm.
		     */
		    var RC4 = C_algo.RC4 = StreamCipher.extend({
		        _doReset: function () {
		            // Shortcuts
		            var key = this._key;
		            var keyWords = key.words;
		            var keySigBytes = key.sigBytes;

		            // Init sbox
		            var S = this._S = [];
		            for (var i = 0; i < 256; i++) {
		                S[i] = i;
		            }

		            // Key setup
		            for (var i = 0, j = 0; i < 256; i++) {
		                var keyByteIndex = i % keySigBytes;
		                var keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;

		                j = (j + S[i] + keyByte) % 256;

		                // Swap
		                var t = S[i];
		                S[i] = S[j];
		                S[j] = t;
		            }

		            // Counters
		            this._i = this._j = 0;
		        },

		        _doProcessBlock: function (M, offset) {
		            M[offset] ^= generateKeystreamWord.call(this);
		        },

		        keySize: 256/32,

		        ivSize: 0
		    });

		    function generateKeystreamWord() {
		        // Shortcuts
		        var S = this._S;
		        var i = this._i;
		        var j = this._j;

		        // Generate keystream word
		        var keystreamWord = 0;
		        for (var n = 0; n < 4; n++) {
		            i = (i + 1) % 256;
		            j = (j + S[i]) % 256;

		            // Swap
		            var t = S[i];
		            S[i] = S[j];
		            S[j] = t;

		            keystreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);
		        }

		        // Update counters
		        this._i = i;
		        this._j = j;

		        return keystreamWord;
		    }

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);
		     */
		    C.RC4 = StreamCipher._createHelper(RC4);

		    /**
		     * Modified RC4 stream cipher algorithm.
		     */
		    var RC4Drop = C_algo.RC4Drop = RC4.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {number} drop The number of keystream words to drop. Default 192
		         */
		        cfg: RC4.cfg.extend({
		            drop: 192
		        }),

		        _doReset: function () {
		            RC4._doReset.call(this);

		            // Drop
		            for (var i = this.cfg.drop; i > 0; i--) {
		                generateKeystreamWord.call(this);
		            }
		        }
		    });

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);
		     */
		    C.RC4Drop = StreamCipher._createHelper(RC4Drop);
		}());


		return CryptoJS.RC4;

	}));

/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		/** @preserve
		(c) 2012 by Cédric Mesnil. All rights reserved.

		Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

		    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
		    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

		THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		*/

		(function (Math) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var Hasher = C_lib.Hasher;
		    var C_algo = C.algo;

		    // Constants table
		    var _zl = WordArray.create([
		        0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
		        7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
		        3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
		        1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
		        4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13]);
		    var _zr = WordArray.create([
		        5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
		        6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
		        15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
		        8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
		        12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11]);
		    var _sl = WordArray.create([
		         11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
		        7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
		        11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
		          11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
		        9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ]);
		    var _sr = WordArray.create([
		        8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
		        9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
		        9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
		        15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
		        8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ]);

		    var _hl =  WordArray.create([ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);
		    var _hr =  WordArray.create([ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);

		    /**
		     * RIPEMD160 hash algorithm.
		     */
		    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
		        _doReset: function () {
		            this._hash  = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);
		        },

		        _doProcessBlock: function (M, offset) {

		            // Swap endian
		            for (var i = 0; i < 16; i++) {
		                // Shortcuts
		                var offset_i = offset + i;
		                var M_offset_i = M[offset_i];

		                // Swap
		                M[offset_i] = (
		                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
		                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
		                );
		            }
		            // Shortcut
		            var H  = this._hash.words;
		            var hl = _hl.words;
		            var hr = _hr.words;
		            var zl = _zl.words;
		            var zr = _zr.words;
		            var sl = _sl.words;
		            var sr = _sr.words;

		            // Working variables
		            var al, bl, cl, dl, el;
		            var ar, br, cr, dr, er;

		            ar = al = H[0];
		            br = bl = H[1];
		            cr = cl = H[2];
		            dr = dl = H[3];
		            er = el = H[4];
		            // Computation
		            var t;
		            for (var i = 0; i < 80; i += 1) {
		                t = (al +  M[offset+zl[i]])|0;
		                if (i<16){
			            t +=  f1(bl,cl,dl) + hl[0];
		                } else if (i<32) {
			            t +=  f2(bl,cl,dl) + hl[1];
		                } else if (i<48) {
			            t +=  f3(bl,cl,dl) + hl[2];
		                } else if (i<64) {
			            t +=  f4(bl,cl,dl) + hl[3];
		                } else {// if (i<80) {
			            t +=  f5(bl,cl,dl) + hl[4];
		                }
		                t = t|0;
		                t =  rotl(t,sl[i]);
		                t = (t+el)|0;
		                al = el;
		                el = dl;
		                dl = rotl(cl, 10);
		                cl = bl;
		                bl = t;

		                t = (ar + M[offset+zr[i]])|0;
		                if (i<16){
			            t +=  f5(br,cr,dr) + hr[0];
		                } else if (i<32) {
			            t +=  f4(br,cr,dr) + hr[1];
		                } else if (i<48) {
			            t +=  f3(br,cr,dr) + hr[2];
		                } else if (i<64) {
			            t +=  f2(br,cr,dr) + hr[3];
		                } else {// if (i<80) {
			            t +=  f1(br,cr,dr) + hr[4];
		                }
		                t = t|0;
		                t =  rotl(t,sr[i]) ;
		                t = (t+er)|0;
		                ar = er;
		                er = dr;
		                dr = rotl(cr, 10);
		                cr = br;
		                br = t;
		            }
		            // Intermediate hash value
		            t    = (H[1] + cl + dr)|0;
		            H[1] = (H[2] + dl + er)|0;
		            H[2] = (H[3] + el + ar)|0;
		            H[3] = (H[4] + al + br)|0;
		            H[4] = (H[0] + bl + cr)|0;
		            H[0] =  t;
		        },

		        _doFinalize: function () {
		            // Shortcuts
		            var data = this._data;
		            var dataWords = data.words;

		            var nBitsTotal = this._nDataBytes * 8;
		            var nBitsLeft = data.sigBytes * 8;

		            // Add padding
		            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
		                (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
		                (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
		            );
		            data.sigBytes = (dataWords.length + 1) * 4;

		            // Hash final blocks
		            this._process();

		            // Shortcuts
		            var hash = this._hash;
		            var H = hash.words;

		            // Swap endian
		            for (var i = 0; i < 5; i++) {
		                // Shortcut
		                var H_i = H[i];

		                // Swap
		                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
		                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
		            }

		            // Return final computed hash
		            return hash;
		        },

		        clone: function () {
		            var clone = Hasher.clone.call(this);
		            clone._hash = this._hash.clone();

		            return clone;
		        }
		    });


		    function f1(x, y, z) {
		        return ((x) ^ (y) ^ (z));

		    }

		    function f2(x, y, z) {
		        return (((x)&(y)) | ((~x)&(z)));
		    }

		    function f3(x, y, z) {
		        return (((x) | (~(y))) ^ (z));
		    }

		    function f4(x, y, z) {
		        return (((x) & (z)) | ((y)&(~(z))));
		    }

		    function f5(x, y, z) {
		        return ((x) ^ ((y) |(~(z))));

		    }

		    function rotl(x,n) {
		        return (x<<n) | (x>>>(32-n));
		    }


		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.RIPEMD160('message');
		     *     var hash = CryptoJS.RIPEMD160(wordArray);
		     */
		    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacRIPEMD160(message, key);
		     */
		    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
		}(Math));


		return CryptoJS.RIPEMD160;

	}));

/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(116));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./sha256"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var C_algo = C.algo;
		    var SHA256 = C_algo.SHA256;

		    /**
		     * SHA-224 hash algorithm.
		     */
		    var SHA224 = C_algo.SHA224 = SHA256.extend({
		        _doReset: function () {
		            this._hash = new WordArray.init([
		                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
		                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4
		            ]);
		        },

		        _doFinalize: function () {
		            var hash = SHA256._doFinalize.call(this);

		            hash.sigBytes -= 4;

		            return hash;
		        }
		    });

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.SHA224('message');
		     *     var hash = CryptoJS.SHA224(wordArray);
		     */
		    C.SHA224 = SHA256._createHelper(SHA224);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacSHA224(message, key);
		     */
		    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
		}());


		return CryptoJS.SHA224;

	}));

/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(61), __webpack_require__(118));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./x64-core", "./sha512"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_x64 = C.x64;
		    var X64Word = C_x64.Word;
		    var X64WordArray = C_x64.WordArray;
		    var C_algo = C.algo;
		    var SHA512 = C_algo.SHA512;

		    /**
		     * SHA-384 hash algorithm.
		     */
		    var SHA384 = C_algo.SHA384 = SHA512.extend({
		        _doReset: function () {
		            this._hash = new X64WordArray.init([
		                new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),
		                new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),
		                new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),
		                new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)
		            ]);
		        },

		        _doFinalize: function () {
		            var hash = SHA512._doFinalize.call(this);

		            hash.sigBytes -= 16;

		            return hash;
		        }
		    });

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.SHA384('message');
		     *     var hash = CryptoJS.SHA384(wordArray);
		     */
		    C.SHA384 = SHA512._createHelper(SHA384);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacSHA384(message, key);
		     */
		    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
		}());


		return CryptoJS.SHA384;

	}));

/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(33), __webpack_require__(34), __webpack_require__(26), __webpack_require__(7));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var BlockCipher = C_lib.BlockCipher;
		    var C_algo = C.algo;

		    // Permuted Choice 1 constants
		    var PC1 = [
		        57, 49, 41, 33, 25, 17, 9,  1,
		        58, 50, 42, 34, 26, 18, 10, 2,
		        59, 51, 43, 35, 27, 19, 11, 3,
		        60, 52, 44, 36, 63, 55, 47, 39,
		        31, 23, 15, 7,  62, 54, 46, 38,
		        30, 22, 14, 6,  61, 53, 45, 37,
		        29, 21, 13, 5,  28, 20, 12, 4
		    ];

		    // Permuted Choice 2 constants
		    var PC2 = [
		        14, 17, 11, 24, 1,  5,
		        3,  28, 15, 6,  21, 10,
		        23, 19, 12, 4,  26, 8,
		        16, 7,  27, 20, 13, 2,
		        41, 52, 31, 37, 47, 55,
		        30, 40, 51, 45, 33, 48,
		        44, 49, 39, 56, 34, 53,
		        46, 42, 50, 36, 29, 32
		    ];

		    // Cumulative bit shift constants
		    var BIT_SHIFTS = [1,  2,  4,  6,  8,  10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];

		    // SBOXes and round permutation constants
		    var SBOX_P = [
		        {
		            0x0: 0x808200,
		            0x10000000: 0x8000,
		            0x20000000: 0x808002,
		            0x30000000: 0x2,
		            0x40000000: 0x200,
		            0x50000000: 0x808202,
		            0x60000000: 0x800202,
		            0x70000000: 0x800000,
		            0x80000000: 0x202,
		            0x90000000: 0x800200,
		            0xa0000000: 0x8200,
		            0xb0000000: 0x808000,
		            0xc0000000: 0x8002,
		            0xd0000000: 0x800002,
		            0xe0000000: 0x0,
		            0xf0000000: 0x8202,
		            0x8000000: 0x0,
		            0x18000000: 0x808202,
		            0x28000000: 0x8202,
		            0x38000000: 0x8000,
		            0x48000000: 0x808200,
		            0x58000000: 0x200,
		            0x68000000: 0x808002,
		            0x78000000: 0x2,
		            0x88000000: 0x800200,
		            0x98000000: 0x8200,
		            0xa8000000: 0x808000,
		            0xb8000000: 0x800202,
		            0xc8000000: 0x800002,
		            0xd8000000: 0x8002,
		            0xe8000000: 0x202,
		            0xf8000000: 0x800000,
		            0x1: 0x8000,
		            0x10000001: 0x2,
		            0x20000001: 0x808200,
		            0x30000001: 0x800000,
		            0x40000001: 0x808002,
		            0x50000001: 0x8200,
		            0x60000001: 0x200,
		            0x70000001: 0x800202,
		            0x80000001: 0x808202,
		            0x90000001: 0x808000,
		            0xa0000001: 0x800002,
		            0xb0000001: 0x8202,
		            0xc0000001: 0x202,
		            0xd0000001: 0x800200,
		            0xe0000001: 0x8002,
		            0xf0000001: 0x0,
		            0x8000001: 0x808202,
		            0x18000001: 0x808000,
		            0x28000001: 0x800000,
		            0x38000001: 0x200,
		            0x48000001: 0x8000,
		            0x58000001: 0x800002,
		            0x68000001: 0x2,
		            0x78000001: 0x8202,
		            0x88000001: 0x8002,
		            0x98000001: 0x800202,
		            0xa8000001: 0x202,
		            0xb8000001: 0x808200,
		            0xc8000001: 0x800200,
		            0xd8000001: 0x0,
		            0xe8000001: 0x8200,
		            0xf8000001: 0x808002
		        },
		        {
		            0x0: 0x40084010,
		            0x1000000: 0x4000,
		            0x2000000: 0x80000,
		            0x3000000: 0x40080010,
		            0x4000000: 0x40000010,
		            0x5000000: 0x40084000,
		            0x6000000: 0x40004000,
		            0x7000000: 0x10,
		            0x8000000: 0x84000,
		            0x9000000: 0x40004010,
		            0xa000000: 0x40000000,
		            0xb000000: 0x84010,
		            0xc000000: 0x80010,
		            0xd000000: 0x0,
		            0xe000000: 0x4010,
		            0xf000000: 0x40080000,
		            0x800000: 0x40004000,
		            0x1800000: 0x84010,
		            0x2800000: 0x10,
		            0x3800000: 0x40004010,
		            0x4800000: 0x40084010,
		            0x5800000: 0x40000000,
		            0x6800000: 0x80000,
		            0x7800000: 0x40080010,
		            0x8800000: 0x80010,
		            0x9800000: 0x0,
		            0xa800000: 0x4000,
		            0xb800000: 0x40080000,
		            0xc800000: 0x40000010,
		            0xd800000: 0x84000,
		            0xe800000: 0x40084000,
		            0xf800000: 0x4010,
		            0x10000000: 0x0,
		            0x11000000: 0x40080010,
		            0x12000000: 0x40004010,
		            0x13000000: 0x40084000,
		            0x14000000: 0x40080000,
		            0x15000000: 0x10,
		            0x16000000: 0x84010,
		            0x17000000: 0x4000,
		            0x18000000: 0x4010,
		            0x19000000: 0x80000,
		            0x1a000000: 0x80010,
		            0x1b000000: 0x40000010,
		            0x1c000000: 0x84000,
		            0x1d000000: 0x40004000,
		            0x1e000000: 0x40000000,
		            0x1f000000: 0x40084010,
		            0x10800000: 0x84010,
		            0x11800000: 0x80000,
		            0x12800000: 0x40080000,
		            0x13800000: 0x4000,
		            0x14800000: 0x40004000,
		            0x15800000: 0x40084010,
		            0x16800000: 0x10,
		            0x17800000: 0x40000000,
		            0x18800000: 0x40084000,
		            0x19800000: 0x40000010,
		            0x1a800000: 0x40004010,
		            0x1b800000: 0x80010,
		            0x1c800000: 0x0,
		            0x1d800000: 0x4010,
		            0x1e800000: 0x40080010,
		            0x1f800000: 0x84000
		        },
		        {
		            0x0: 0x104,
		            0x100000: 0x0,
		            0x200000: 0x4000100,
		            0x300000: 0x10104,
		            0x400000: 0x10004,
		            0x500000: 0x4000004,
		            0x600000: 0x4010104,
		            0x700000: 0x4010000,
		            0x800000: 0x4000000,
		            0x900000: 0x4010100,
		            0xa00000: 0x10100,
		            0xb00000: 0x4010004,
		            0xc00000: 0x4000104,
		            0xd00000: 0x10000,
		            0xe00000: 0x4,
		            0xf00000: 0x100,
		            0x80000: 0x4010100,
		            0x180000: 0x4010004,
		            0x280000: 0x0,
		            0x380000: 0x4000100,
		            0x480000: 0x4000004,
		            0x580000: 0x10000,
		            0x680000: 0x10004,
		            0x780000: 0x104,
		            0x880000: 0x4,
		            0x980000: 0x100,
		            0xa80000: 0x4010000,
		            0xb80000: 0x10104,
		            0xc80000: 0x10100,
		            0xd80000: 0x4000104,
		            0xe80000: 0x4010104,
		            0xf80000: 0x4000000,
		            0x1000000: 0x4010100,
		            0x1100000: 0x10004,
		            0x1200000: 0x10000,
		            0x1300000: 0x4000100,
		            0x1400000: 0x100,
		            0x1500000: 0x4010104,
		            0x1600000: 0x4000004,
		            0x1700000: 0x0,
		            0x1800000: 0x4000104,
		            0x1900000: 0x4000000,
		            0x1a00000: 0x4,
		            0x1b00000: 0x10100,
		            0x1c00000: 0x4010000,
		            0x1d00000: 0x104,
		            0x1e00000: 0x10104,
		            0x1f00000: 0x4010004,
		            0x1080000: 0x4000000,
		            0x1180000: 0x104,
		            0x1280000: 0x4010100,
		            0x1380000: 0x0,
		            0x1480000: 0x10004,
		            0x1580000: 0x4000100,
		            0x1680000: 0x100,
		            0x1780000: 0x4010004,
		            0x1880000: 0x10000,
		            0x1980000: 0x4010104,
		            0x1a80000: 0x10104,
		            0x1b80000: 0x4000004,
		            0x1c80000: 0x4000104,
		            0x1d80000: 0x4010000,
		            0x1e80000: 0x4,
		            0x1f80000: 0x10100
		        },
		        {
		            0x0: 0x80401000,
		            0x10000: 0x80001040,
		            0x20000: 0x401040,
		            0x30000: 0x80400000,
		            0x40000: 0x0,
		            0x50000: 0x401000,
		            0x60000: 0x80000040,
		            0x70000: 0x400040,
		            0x80000: 0x80000000,
		            0x90000: 0x400000,
		            0xa0000: 0x40,
		            0xb0000: 0x80001000,
		            0xc0000: 0x80400040,
		            0xd0000: 0x1040,
		            0xe0000: 0x1000,
		            0xf0000: 0x80401040,
		            0x8000: 0x80001040,
		            0x18000: 0x40,
		            0x28000: 0x80400040,
		            0x38000: 0x80001000,
		            0x48000: 0x401000,
		            0x58000: 0x80401040,
		            0x68000: 0x0,
		            0x78000: 0x80400000,
		            0x88000: 0x1000,
		            0x98000: 0x80401000,
		            0xa8000: 0x400000,
		            0xb8000: 0x1040,
		            0xc8000: 0x80000000,
		            0xd8000: 0x400040,
		            0xe8000: 0x401040,
		            0xf8000: 0x80000040,
		            0x100000: 0x400040,
		            0x110000: 0x401000,
		            0x120000: 0x80000040,
		            0x130000: 0x0,
		            0x140000: 0x1040,
		            0x150000: 0x80400040,
		            0x160000: 0x80401000,
		            0x170000: 0x80001040,
		            0x180000: 0x80401040,
		            0x190000: 0x80000000,
		            0x1a0000: 0x80400000,
		            0x1b0000: 0x401040,
		            0x1c0000: 0x80001000,
		            0x1d0000: 0x400000,
		            0x1e0000: 0x40,
		            0x1f0000: 0x1000,
		            0x108000: 0x80400000,
		            0x118000: 0x80401040,
		            0x128000: 0x0,
		            0x138000: 0x401000,
		            0x148000: 0x400040,
		            0x158000: 0x80000000,
		            0x168000: 0x80001040,
		            0x178000: 0x40,
		            0x188000: 0x80000040,
		            0x198000: 0x1000,
		            0x1a8000: 0x80001000,
		            0x1b8000: 0x80400040,
		            0x1c8000: 0x1040,
		            0x1d8000: 0x80401000,
		            0x1e8000: 0x400000,
		            0x1f8000: 0x401040
		        },
		        {
		            0x0: 0x80,
		            0x1000: 0x1040000,
		            0x2000: 0x40000,
		            0x3000: 0x20000000,
		            0x4000: 0x20040080,
		            0x5000: 0x1000080,
		            0x6000: 0x21000080,
		            0x7000: 0x40080,
		            0x8000: 0x1000000,
		            0x9000: 0x20040000,
		            0xa000: 0x20000080,
		            0xb000: 0x21040080,
		            0xc000: 0x21040000,
		            0xd000: 0x0,
		            0xe000: 0x1040080,
		            0xf000: 0x21000000,
		            0x800: 0x1040080,
		            0x1800: 0x21000080,
		            0x2800: 0x80,
		            0x3800: 0x1040000,
		            0x4800: 0x40000,
		            0x5800: 0x20040080,
		            0x6800: 0x21040000,
		            0x7800: 0x20000000,
		            0x8800: 0x20040000,
		            0x9800: 0x0,
		            0xa800: 0x21040080,
		            0xb800: 0x1000080,
		            0xc800: 0x20000080,
		            0xd800: 0x21000000,
		            0xe800: 0x1000000,
		            0xf800: 0x40080,
		            0x10000: 0x40000,
		            0x11000: 0x80,
		            0x12000: 0x20000000,
		            0x13000: 0x21000080,
		            0x14000: 0x1000080,
		            0x15000: 0x21040000,
		            0x16000: 0x20040080,
		            0x17000: 0x1000000,
		            0x18000: 0x21040080,
		            0x19000: 0x21000000,
		            0x1a000: 0x1040000,
		            0x1b000: 0x20040000,
		            0x1c000: 0x40080,
		            0x1d000: 0x20000080,
		            0x1e000: 0x0,
		            0x1f000: 0x1040080,
		            0x10800: 0x21000080,
		            0x11800: 0x1000000,
		            0x12800: 0x1040000,
		            0x13800: 0x20040080,
		            0x14800: 0x20000000,
		            0x15800: 0x1040080,
		            0x16800: 0x80,
		            0x17800: 0x21040000,
		            0x18800: 0x40080,
		            0x19800: 0x21040080,
		            0x1a800: 0x0,
		            0x1b800: 0x21000000,
		            0x1c800: 0x1000080,
		            0x1d800: 0x40000,
		            0x1e800: 0x20040000,
		            0x1f800: 0x20000080
		        },
		        {
		            0x0: 0x10000008,
		            0x100: 0x2000,
		            0x200: 0x10200000,
		            0x300: 0x10202008,
		            0x400: 0x10002000,
		            0x500: 0x200000,
		            0x600: 0x200008,
		            0x700: 0x10000000,
		            0x800: 0x0,
		            0x900: 0x10002008,
		            0xa00: 0x202000,
		            0xb00: 0x8,
		            0xc00: 0x10200008,
		            0xd00: 0x202008,
		            0xe00: 0x2008,
		            0xf00: 0x10202000,
		            0x80: 0x10200000,
		            0x180: 0x10202008,
		            0x280: 0x8,
		            0x380: 0x200000,
		            0x480: 0x202008,
		            0x580: 0x10000008,
		            0x680: 0x10002000,
		            0x780: 0x2008,
		            0x880: 0x200008,
		            0x980: 0x2000,
		            0xa80: 0x10002008,
		            0xb80: 0x10200008,
		            0xc80: 0x0,
		            0xd80: 0x10202000,
		            0xe80: 0x202000,
		            0xf80: 0x10000000,
		            0x1000: 0x10002000,
		            0x1100: 0x10200008,
		            0x1200: 0x10202008,
		            0x1300: 0x2008,
		            0x1400: 0x200000,
		            0x1500: 0x10000000,
		            0x1600: 0x10000008,
		            0x1700: 0x202000,
		            0x1800: 0x202008,
		            0x1900: 0x0,
		            0x1a00: 0x8,
		            0x1b00: 0x10200000,
		            0x1c00: 0x2000,
		            0x1d00: 0x10002008,
		            0x1e00: 0x10202000,
		            0x1f00: 0x200008,
		            0x1080: 0x8,
		            0x1180: 0x202000,
		            0x1280: 0x200000,
		            0x1380: 0x10000008,
		            0x1480: 0x10002000,
		            0x1580: 0x2008,
		            0x1680: 0x10202008,
		            0x1780: 0x10200000,
		            0x1880: 0x10202000,
		            0x1980: 0x10200008,
		            0x1a80: 0x2000,
		            0x1b80: 0x202008,
		            0x1c80: 0x200008,
		            0x1d80: 0x0,
		            0x1e80: 0x10000000,
		            0x1f80: 0x10002008
		        },
		        {
		            0x0: 0x100000,
		            0x10: 0x2000401,
		            0x20: 0x400,
		            0x30: 0x100401,
		            0x40: 0x2100401,
		            0x50: 0x0,
		            0x60: 0x1,
		            0x70: 0x2100001,
		            0x80: 0x2000400,
		            0x90: 0x100001,
		            0xa0: 0x2000001,
		            0xb0: 0x2100400,
		            0xc0: 0x2100000,
		            0xd0: 0x401,
		            0xe0: 0x100400,
		            0xf0: 0x2000000,
		            0x8: 0x2100001,
		            0x18: 0x0,
		            0x28: 0x2000401,
		            0x38: 0x2100400,
		            0x48: 0x100000,
		            0x58: 0x2000001,
		            0x68: 0x2000000,
		            0x78: 0x401,
		            0x88: 0x100401,
		            0x98: 0x2000400,
		            0xa8: 0x2100000,
		            0xb8: 0x100001,
		            0xc8: 0x400,
		            0xd8: 0x2100401,
		            0xe8: 0x1,
		            0xf8: 0x100400,
		            0x100: 0x2000000,
		            0x110: 0x100000,
		            0x120: 0x2000401,
		            0x130: 0x2100001,
		            0x140: 0x100001,
		            0x150: 0x2000400,
		            0x160: 0x2100400,
		            0x170: 0x100401,
		            0x180: 0x401,
		            0x190: 0x2100401,
		            0x1a0: 0x100400,
		            0x1b0: 0x1,
		            0x1c0: 0x0,
		            0x1d0: 0x2100000,
		            0x1e0: 0x2000001,
		            0x1f0: 0x400,
		            0x108: 0x100400,
		            0x118: 0x2000401,
		            0x128: 0x2100001,
		            0x138: 0x1,
		            0x148: 0x2000000,
		            0x158: 0x100000,
		            0x168: 0x401,
		            0x178: 0x2100400,
		            0x188: 0x2000001,
		            0x198: 0x2100000,
		            0x1a8: 0x0,
		            0x1b8: 0x2100401,
		            0x1c8: 0x100401,
		            0x1d8: 0x400,
		            0x1e8: 0x2000400,
		            0x1f8: 0x100001
		        },
		        {
		            0x0: 0x8000820,
		            0x1: 0x20000,
		            0x2: 0x8000000,
		            0x3: 0x20,
		            0x4: 0x20020,
		            0x5: 0x8020820,
		            0x6: 0x8020800,
		            0x7: 0x800,
		            0x8: 0x8020000,
		            0x9: 0x8000800,
		            0xa: 0x20800,
		            0xb: 0x8020020,
		            0xc: 0x820,
		            0xd: 0x0,
		            0xe: 0x8000020,
		            0xf: 0x20820,
		            0x80000000: 0x800,
		            0x80000001: 0x8020820,
		            0x80000002: 0x8000820,
		            0x80000003: 0x8000000,
		            0x80000004: 0x8020000,
		            0x80000005: 0x20800,
		            0x80000006: 0x20820,
		            0x80000007: 0x20,
		            0x80000008: 0x8000020,
		            0x80000009: 0x820,
		            0x8000000a: 0x20020,
		            0x8000000b: 0x8020800,
		            0x8000000c: 0x0,
		            0x8000000d: 0x8020020,
		            0x8000000e: 0x8000800,
		            0x8000000f: 0x20000,
		            0x10: 0x20820,
		            0x11: 0x8020800,
		            0x12: 0x20,
		            0x13: 0x800,
		            0x14: 0x8000800,
		            0x15: 0x8000020,
		            0x16: 0x8020020,
		            0x17: 0x20000,
		            0x18: 0x0,
		            0x19: 0x20020,
		            0x1a: 0x8020000,
		            0x1b: 0x8000820,
		            0x1c: 0x8020820,
		            0x1d: 0x20800,
		            0x1e: 0x820,
		            0x1f: 0x8000000,
		            0x80000010: 0x20000,
		            0x80000011: 0x800,
		            0x80000012: 0x8020020,
		            0x80000013: 0x20820,
		            0x80000014: 0x20,
		            0x80000015: 0x8020000,
		            0x80000016: 0x8000000,
		            0x80000017: 0x8000820,
		            0x80000018: 0x8020820,
		            0x80000019: 0x8000020,
		            0x8000001a: 0x8000800,
		            0x8000001b: 0x0,
		            0x8000001c: 0x20800,
		            0x8000001d: 0x820,
		            0x8000001e: 0x20020,
		            0x8000001f: 0x8020800
		        }
		    ];

		    // Masks that select the SBOX input
		    var SBOX_MASK = [
		        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,
		        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f
		    ];

		    /**
		     * DES block cipher algorithm.
		     */
		    var DES = C_algo.DES = BlockCipher.extend({
		        _doReset: function () {
		            // Shortcuts
		            var key = this._key;
		            var keyWords = key.words;

		            // Select 56 bits according to PC1
		            var keyBits = [];
		            for (var i = 0; i < 56; i++) {
		                var keyBitPos = PC1[i] - 1;
		                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;
		            }

		            // Assemble 16 subkeys
		            var subKeys = this._subKeys = [];
		            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
		                // Create subkey
		                var subKey = subKeys[nSubKey] = [];

		                // Shortcut
		                var bitShift = BIT_SHIFTS[nSubKey];

		                // Select 48 bits according to PC2
		                for (var i = 0; i < 24; i++) {
		                    // Select from the left 28 key bits
		                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);

		                    // Select from the right 28 key bits
		                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);
		                }

		                // Since each subkey is applied to an expanded 32-bit input,
		                // the subkey can be broken into 8 values scaled to 32-bits,
		                // which allows the key to be used without expansion
		                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);
		                for (var i = 1; i < 7; i++) {
		                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);
		                }
		                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);
		            }

		            // Compute inverse subkeys
		            var invSubKeys = this._invSubKeys = [];
		            for (var i = 0; i < 16; i++) {
		                invSubKeys[i] = subKeys[15 - i];
		            }
		        },

		        encryptBlock: function (M, offset) {
		            this._doCryptBlock(M, offset, this._subKeys);
		        },

		        decryptBlock: function (M, offset) {
		            this._doCryptBlock(M, offset, this._invSubKeys);
		        },

		        _doCryptBlock: function (M, offset, subKeys) {
		            // Get input
		            this._lBlock = M[offset];
		            this._rBlock = M[offset + 1];

		            // Initial permutation
		            exchangeLR.call(this, 4,  0x0f0f0f0f);
		            exchangeLR.call(this, 16, 0x0000ffff);
		            exchangeRL.call(this, 2,  0x33333333);
		            exchangeRL.call(this, 8,  0x00ff00ff);
		            exchangeLR.call(this, 1,  0x55555555);

		            // Rounds
		            for (var round = 0; round < 16; round++) {
		                // Shortcuts
		                var subKey = subKeys[round];
		                var lBlock = this._lBlock;
		                var rBlock = this._rBlock;

		                // Feistel function
		                var f = 0;
		                for (var i = 0; i < 8; i++) {
		                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
		                }
		                this._lBlock = rBlock;
		                this._rBlock = lBlock ^ f;
		            }

		            // Undo swap from last round
		            var t = this._lBlock;
		            this._lBlock = this._rBlock;
		            this._rBlock = t;

		            // Final permutation
		            exchangeLR.call(this, 1,  0x55555555);
		            exchangeRL.call(this, 8,  0x00ff00ff);
		            exchangeRL.call(this, 2,  0x33333333);
		            exchangeLR.call(this, 16, 0x0000ffff);
		            exchangeLR.call(this, 4,  0x0f0f0f0f);

		            // Set output
		            M[offset] = this._lBlock;
		            M[offset + 1] = this._rBlock;
		        },

		        keySize: 64/32,

		        ivSize: 64/32,

		        blockSize: 64/32
		    });

		    // Swap bits across the left and right words
		    function exchangeLR(offset, mask) {
		        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;
		        this._rBlock ^= t;
		        this._lBlock ^= t << offset;
		    }

		    function exchangeRL(offset, mask) {
		        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;
		        this._lBlock ^= t;
		        this._rBlock ^= t << offset;
		    }

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);
		     */
		    C.DES = BlockCipher._createHelper(DES);

		    /**
		     * Triple-DES block cipher algorithm.
		     */
		    var TripleDES = C_algo.TripleDES = BlockCipher.extend({
		        _doReset: function () {
		            // Shortcuts
		            var key = this._key;
		            var keyWords = key.words;

		            // Create DES instances
		            this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));
		            this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));
		            this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));
		        },

		        encryptBlock: function (M, offset) {
		            this._des1.encryptBlock(M, offset);
		            this._des2.decryptBlock(M, offset);
		            this._des3.encryptBlock(M, offset);
		        },

		        decryptBlock: function (M, offset) {
		            this._des3.decryptBlock(M, offset);
		            this._des2.encryptBlock(M, offset);
		            this._des1.decryptBlock(M, offset);
		        },

		        keySize: 192/32,

		        ivSize: 64/32,

		        blockSize: 64/32
		    });

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);
		     */
		    C.TripleDES = BlockCipher._createHelper(TripleDES);
		}());


		return CryptoJS.TripleDES;

	}));

/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	var BigInteger = __webpack_require__(15)

	var curves = __webpack_require__(312)
	var Curve = __webpack_require__(119)

	function getCurveByName (name) {
	  var curve = curves[name]
	  if (!curve) return null

	  var p = new BigInteger(curve.p, 16)
	  var a = new BigInteger(curve.a, 16)
	  var b = new BigInteger(curve.b, 16)
	  var n = new BigInteger(curve.n, 16)
	  var h = new BigInteger(curve.h, 16)
	  var Gx = new BigInteger(curve.Gx, 16)
	  var Gy = new BigInteger(curve.Gy, 16)

	  return new Curve(p, a, b, Gx, Gy, n, h)
	}

	module.exports = getCurveByName


/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(10);
	var BN = __webpack_require__(4);
	var inherits = __webpack_require__(3);
	var Base = __webpack_require__(62);

	var assert = utils.assert;

	function EdwardsCurve(conf) {
	  // NOTE: Important as we are creating point in Base.call()
	  this.twisted = (conf.a | 0) !== 1;
	  this.mOneA = this.twisted && (conf.a | 0) === -1;
	  this.extended = this.mOneA;

	  Base.call(this, 'edwards', conf);

	  this.a = new BN(conf.a, 16).umod(this.red.m);
	  this.a = this.a.toRed(this.red);
	  this.c = new BN(conf.c, 16).toRed(this.red);
	  this.c2 = this.c.redSqr();
	  this.d = new BN(conf.d, 16).toRed(this.red);
	  this.dd = this.d.redAdd(this.d);

	  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
	  this.oneC = (conf.c | 0) === 1;
	}
	inherits(EdwardsCurve, Base);
	module.exports = EdwardsCurve;

	EdwardsCurve.prototype._mulA = function _mulA(num) {
	  if (this.mOneA)
	    return num.redNeg();
	  else
	    return this.a.redMul(num);
	};

	EdwardsCurve.prototype._mulC = function _mulC(num) {
	  if (this.oneC)
	    return num;
	  else
	    return this.c.redMul(num);
	};

	// Just for compatibility with Short curve
	EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
	  return this.point(x, y, z, t);
	};

	EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
	  x = new BN(x, 16);
	  if (!x.red)
	    x = x.toRed(this.red);

	  var x2 = x.redSqr();
	  var rhs = this.c2.redSub(this.a.redMul(x2));
	  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

	  var y2 = rhs.redMul(lhs.redInvm());
	  var y = y2.redSqrt();
	  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
	    throw new Error('invalid point');

	  var isOdd = y.fromRed().isOdd();
	  if (odd && !isOdd || !odd && isOdd)
	    y = y.redNeg();

	  return this.point(x, y);
	};

	EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
	  y = new BN(y, 16);
	  if (!y.red)
	    y = y.toRed(this.red);

	  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
	  var y2 = y.redSqr();
	  var lhs = y2.redSub(this.c2);
	  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
	  var x2 = lhs.redMul(rhs.redInvm());

	  if (x2.cmp(this.zero) === 0) {
	    if (odd)
	      throw new Error('invalid point');
	    else
	      return this.point(this.zero, y);
	  }

	  var x = x2.redSqrt();
	  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
	    throw new Error('invalid point');

	  if (x.fromRed().isOdd() !== odd)
	    x = x.redNeg();

	  return this.point(x, y);
	};

	EdwardsCurve.prototype.validate = function validate(point) {
	  if (point.isInfinity())
	    return true;

	  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
	  point.normalize();

	  var x2 = point.x.redSqr();
	  var y2 = point.y.redSqr();
	  var lhs = x2.redMul(this.a).redAdd(y2);
	  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

	  return lhs.cmp(rhs) === 0;
	};

	function Point(curve, x, y, z, t) {
	  Base.BasePoint.call(this, curve, 'projective');
	  if (x === null && y === null && z === null) {
	    this.x = this.curve.zero;
	    this.y = this.curve.one;
	    this.z = this.curve.one;
	    this.t = this.curve.zero;
	    this.zOne = true;
	  } else {
	    this.x = new BN(x, 16);
	    this.y = new BN(y, 16);
	    this.z = z ? new BN(z, 16) : this.curve.one;
	    this.t = t && new BN(t, 16);
	    if (!this.x.red)
	      this.x = this.x.toRed(this.curve.red);
	    if (!this.y.red)
	      this.y = this.y.toRed(this.curve.red);
	    if (!this.z.red)
	      this.z = this.z.toRed(this.curve.red);
	    if (this.t && !this.t.red)
	      this.t = this.t.toRed(this.curve.red);
	    this.zOne = this.z === this.curve.one;

	    // Use extended coordinates
	    if (this.curve.extended && !this.t) {
	      this.t = this.x.redMul(this.y);
	      if (!this.zOne)
	        this.t = this.t.redMul(this.z.redInvm());
	    }
	  }
	}
	inherits(Point, Base.BasePoint);

	EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
	  return Point.fromJSON(this, obj);
	};

	EdwardsCurve.prototype.point = function point(x, y, z, t) {
	  return new Point(this, x, y, z, t);
	};

	Point.fromJSON = function fromJSON(curve, obj) {
	  return new Point(curve, obj[0], obj[1], obj[2]);
	};

	Point.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
	      ' y: ' + this.y.fromRed().toString(16, 2) +
	      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
	};

	Point.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.x.cmpn(0) === 0 &&
	    (this.y.cmp(this.z) === 0 ||
	    (this.zOne && this.y.cmp(this.curve.c) === 0));
	};

	Point.prototype._extDbl = function _extDbl() {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
	  //     #doubling-dbl-2008-hwcd
	  // 4M + 4S

	  // A = X1^2
	  var a = this.x.redSqr();
	  // B = Y1^2
	  var b = this.y.redSqr();
	  // C = 2 * Z1^2
	  var c = this.z.redSqr();
	  c = c.redIAdd(c);
	  // D = a * A
	  var d = this.curve._mulA(a);
	  // E = (X1 + Y1)^2 - A - B
	  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
	  // G = D + B
	  var g = d.redAdd(b);
	  // F = G - C
	  var f = g.redSub(c);
	  // H = D - B
	  var h = d.redSub(b);
	  // X3 = E * F
	  var nx = e.redMul(f);
	  // Y3 = G * H
	  var ny = g.redMul(h);
	  // T3 = E * H
	  var nt = e.redMul(h);
	  // Z3 = F * G
	  var nz = f.redMul(g);
	  return this.curve.point(nx, ny, nz, nt);
	};

	Point.prototype._projDbl = function _projDbl() {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
	  //     #doubling-dbl-2008-bbjlp
	  //     #doubling-dbl-2007-bl
	  // and others
	  // Generally 3M + 4S or 2M + 4S

	  // B = (X1 + Y1)^2
	  var b = this.x.redAdd(this.y).redSqr();
	  // C = X1^2
	  var c = this.x.redSqr();
	  // D = Y1^2
	  var d = this.y.redSqr();

	  var nx;
	  var ny;
	  var nz;
	  if (this.curve.twisted) {
	    // E = a * C
	    var e = this.curve._mulA(c);
	    // F = E + D
	    var f = e.redAdd(d);
	    if (this.zOne) {
	      // X3 = (B - C - D) * (F - 2)
	      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
	      // Y3 = F * (E - D)
	      ny = f.redMul(e.redSub(d));
	      // Z3 = F^2 - 2 * F
	      nz = f.redSqr().redSub(f).redSub(f);
	    } else {
	      // H = Z1^2
	      var h = this.z.redSqr();
	      // J = F - 2 * H
	      var j = f.redSub(h).redISub(h);
	      // X3 = (B-C-D)*J
	      nx = b.redSub(c).redISub(d).redMul(j);
	      // Y3 = F * (E - D)
	      ny = f.redMul(e.redSub(d));
	      // Z3 = F * J
	      nz = f.redMul(j);
	    }
	  } else {
	    // E = C + D
	    var e = c.redAdd(d);
	    // H = (c * Z1)^2
	    var h = this.curve._mulC(this.z).redSqr();
	    // J = E - 2 * H
	    var j = e.redSub(h).redSub(h);
	    // X3 = c * (B - E) * J
	    nx = this.curve._mulC(b.redISub(e)).redMul(j);
	    // Y3 = c * E * (C - D)
	    ny = this.curve._mulC(e).redMul(c.redISub(d));
	    // Z3 = E * J
	    nz = e.redMul(j);
	  }
	  return this.curve.point(nx, ny, nz);
	};

	Point.prototype.dbl = function dbl() {
	  if (this.isInfinity())
	    return this;

	  // Double in extended coordinates
	  if (this.curve.extended)
	    return this._extDbl();
	  else
	    return this._projDbl();
	};

	Point.prototype._extAdd = function _extAdd(p) {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
	  //     #addition-add-2008-hwcd-3
	  // 8M

	  // A = (Y1 - X1) * (Y2 - X2)
	  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
	  // B = (Y1 + X1) * (Y2 + X2)
	  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
	  // C = T1 * k * T2
	  var c = this.t.redMul(this.curve.dd).redMul(p.t);
	  // D = Z1 * 2 * Z2
	  var d = this.z.redMul(p.z.redAdd(p.z));
	  // E = B - A
	  var e = b.redSub(a);
	  // F = D - C
	  var f = d.redSub(c);
	  // G = D + C
	  var g = d.redAdd(c);
	  // H = B + A
	  var h = b.redAdd(a);
	  // X3 = E * F
	  var nx = e.redMul(f);
	  // Y3 = G * H
	  var ny = g.redMul(h);
	  // T3 = E * H
	  var nt = e.redMul(h);
	  // Z3 = F * G
	  var nz = f.redMul(g);
	  return this.curve.point(nx, ny, nz, nt);
	};

	Point.prototype._projAdd = function _projAdd(p) {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
	  //     #addition-add-2008-bbjlp
	  //     #addition-add-2007-bl
	  // 10M + 1S

	  // A = Z1 * Z2
	  var a = this.z.redMul(p.z);
	  // B = A^2
	  var b = a.redSqr();
	  // C = X1 * X2
	  var c = this.x.redMul(p.x);
	  // D = Y1 * Y2
	  var d = this.y.redMul(p.y);
	  // E = d * C * D
	  var e = this.curve.d.redMul(c).redMul(d);
	  // F = B - E
	  var f = b.redSub(e);
	  // G = B + E
	  var g = b.redAdd(e);
	  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
	  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
	  var nx = a.redMul(f).redMul(tmp);
	  var ny;
	  var nz;
	  if (this.curve.twisted) {
	    // Y3 = A * G * (D - a * C)
	    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
	    // Z3 = F * G
	    nz = f.redMul(g);
	  } else {
	    // Y3 = A * G * (D - C)
	    ny = a.redMul(g).redMul(d.redSub(c));
	    // Z3 = c * F * G
	    nz = this.curve._mulC(f).redMul(g);
	  }
	  return this.curve.point(nx, ny, nz);
	};

	Point.prototype.add = function add(p) {
	  if (this.isInfinity())
	    return p;
	  if (p.isInfinity())
	    return this;

	  if (this.curve.extended)
	    return this._extAdd(p);
	  else
	    return this._projAdd(p);
	};

	Point.prototype.mul = function mul(k) {
	  if (this._hasDoubles(k))
	    return this.curve._fixedNafMul(this, k);
	  else
	    return this.curve._wnafMul(this, k);
	};

	Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
	  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
	};

	Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
	  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
	};

	Point.prototype.normalize = function normalize() {
	  if (this.zOne)
	    return this;

	  // Normalize coordinates
	  var zi = this.z.redInvm();
	  this.x = this.x.redMul(zi);
	  this.y = this.y.redMul(zi);
	  if (this.t)
	    this.t = this.t.redMul(zi);
	  this.z = this.curve.one;
	  this.zOne = true;
	  return this;
	};

	Point.prototype.neg = function neg() {
	  return this.curve.point(this.x.redNeg(),
	                          this.y,
	                          this.z,
	                          this.t && this.t.redNeg());
	};

	Point.prototype.getX = function getX() {
	  this.normalize();
	  return this.x.fromRed();
	};

	Point.prototype.getY = function getY() {
	  this.normalize();
	  return this.y.fromRed();
	};

	Point.prototype.eq = function eq(other) {
	  return this === other ||
	         this.getX().cmp(other.getX()) === 0 &&
	         this.getY().cmp(other.getY()) === 0;
	};

	Point.prototype.eqXToP = function eqXToP(x) {
	  var rx = x.toRed(this.curve.red).redMul(this.z);
	  if (this.x.cmp(rx) === 0)
	    return true;

	  var xc = x.clone();
	  var t = this.curve.redN.redMul(this.z);
	  for (;;) {
	    xc.iadd(this.curve.n);
	    if (xc.cmp(this.curve.p) >= 0)
	      return false;

	    rx.redIAdd(t);
	    if (this.x.cmp(rx) === 0)
	      return true;
	  }
	};

	// Compatibility with BaseCurve
	Point.prototype.toP = Point.prototype.normalize;
	Point.prototype.mixedAdd = Point.prototype.add;


/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var BN = __webpack_require__(4);
	var inherits = __webpack_require__(3);
	var Base = __webpack_require__(62);

	var utils = __webpack_require__(10);

	function MontCurve(conf) {
	  Base.call(this, 'mont', conf);

	  this.a = new BN(conf.a, 16).toRed(this.red);
	  this.b = new BN(conf.b, 16).toRed(this.red);
	  this.i4 = new BN(4).toRed(this.red).redInvm();
	  this.two = new BN(2).toRed(this.red);
	  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
	}
	inherits(MontCurve, Base);
	module.exports = MontCurve;

	MontCurve.prototype.validate = function validate(point) {
	  var x = point.normalize().x;
	  var x2 = x.redSqr();
	  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
	  var y = rhs.redSqrt();

	  return y.redSqr().cmp(rhs) === 0;
	};

	function Point(curve, x, z) {
	  Base.BasePoint.call(this, curve, 'projective');
	  if (x === null && z === null) {
	    this.x = this.curve.one;
	    this.z = this.curve.zero;
	  } else {
	    this.x = new BN(x, 16);
	    this.z = new BN(z, 16);
	    if (!this.x.red)
	      this.x = this.x.toRed(this.curve.red);
	    if (!this.z.red)
	      this.z = this.z.toRed(this.curve.red);
	  }
	}
	inherits(Point, Base.BasePoint);

	MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
	  return this.point(utils.toArray(bytes, enc), 1);
	};

	MontCurve.prototype.point = function point(x, z) {
	  return new Point(this, x, z);
	};

	MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
	  return Point.fromJSON(this, obj);
	};

	Point.prototype.precompute = function precompute() {
	  // No-op
	};

	Point.prototype._encode = function _encode() {
	  return this.getX().toArray('be', this.curve.p.byteLength());
	};

	Point.fromJSON = function fromJSON(curve, obj) {
	  return new Point(curve, obj[0], obj[1] || curve.one);
	};

	Point.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
	      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
	};

	Point.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.z.cmpn(0) === 0;
	};

	Point.prototype.dbl = function dbl() {
	  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
	  // 2M + 2S + 4A

	  // A = X1 + Z1
	  var a = this.x.redAdd(this.z);
	  // AA = A^2
	  var aa = a.redSqr();
	  // B = X1 - Z1
	  var b = this.x.redSub(this.z);
	  // BB = B^2
	  var bb = b.redSqr();
	  // C = AA - BB
	  var c = aa.redSub(bb);
	  // X3 = AA * BB
	  var nx = aa.redMul(bb);
	  // Z3 = C * (BB + A24 * C)
	  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
	  return this.curve.point(nx, nz);
	};

	Point.prototype.add = function add() {
	  throw new Error('Not supported on Montgomery curve');
	};

	Point.prototype.diffAdd = function diffAdd(p, diff) {
	  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
	  // 4M + 2S + 6A

	  // A = X2 + Z2
	  var a = this.x.redAdd(this.z);
	  // B = X2 - Z2
	  var b = this.x.redSub(this.z);
	  // C = X3 + Z3
	  var c = p.x.redAdd(p.z);
	  // D = X3 - Z3
	  var d = p.x.redSub(p.z);
	  // DA = D * A
	  var da = d.redMul(a);
	  // CB = C * B
	  var cb = c.redMul(b);
	  // X5 = Z1 * (DA + CB)^2
	  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
	  // Z5 = X1 * (DA - CB)^2
	  var nz = diff.x.redMul(da.redISub(cb).redSqr());
	  return this.curve.point(nx, nz);
	};

	Point.prototype.mul = function mul(k) {
	  var t = k.clone();
	  var a = this; // (N / 2) * Q + Q
	  var b = this.curve.point(null, null); // (N / 2) * Q
	  var c = this; // Q

	  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
	    bits.push(t.andln(1));

	  for (var i = bits.length - 1; i >= 0; i--) {
	    if (bits[i] === 0) {
	      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
	      a = a.diffAdd(b, c);
	      // N * Q = 2 * ((N / 2) * Q + Q))
	      b = b.dbl();
	    } else {
	      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
	      b = a.diffAdd(b, c);
	      // N * Q + Q = 2 * ((N / 2) * Q + Q)
	      a = a.dbl();
	    }
	  }
	  return b;
	};

	Point.prototype.mulAdd = function mulAdd() {
	  throw new Error('Not supported on Montgomery curve');
	};

	Point.prototype.jumlAdd = function jumlAdd() {
	  throw new Error('Not supported on Montgomery curve');
	};

	Point.prototype.eq = function eq(other) {
	  return this.getX().cmp(other.getX()) === 0;
	};

	Point.prototype.normalize = function normalize() {
	  this.x = this.x.redMul(this.z.redInvm());
	  this.z = this.curve.one;
	  return this;
	};

	Point.prototype.getX = function getX() {
	  // Normalize coordinates
	  this.normalize();

	  return this.x.fromRed();
	};


/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(10);
	var BN = __webpack_require__(4);
	var inherits = __webpack_require__(3);
	var Base = __webpack_require__(62);

	var assert = utils.assert;

	function ShortCurve(conf) {
	  Base.call(this, 'short', conf);

	  this.a = new BN(conf.a, 16).toRed(this.red);
	  this.b = new BN(conf.b, 16).toRed(this.red);
	  this.tinv = this.two.redInvm();

	  this.zeroA = this.a.fromRed().cmpn(0) === 0;
	  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

	  // If the curve is endomorphic, precalculate beta and lambda
	  this.endo = this._getEndomorphism(conf);
	  this._endoWnafT1 = new Array(4);
	  this._endoWnafT2 = new Array(4);
	}
	inherits(ShortCurve, Base);
	module.exports = ShortCurve;

	ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
	  // No efficient endomorphism
	  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
	    return;

	  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
	  var beta;
	  var lambda;
	  if (conf.beta) {
	    beta = new BN(conf.beta, 16).toRed(this.red);
	  } else {
	    var betas = this._getEndoRoots(this.p);
	    // Choose the smallest beta
	    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
	    beta = beta.toRed(this.red);
	  }
	  if (conf.lambda) {
	    lambda = new BN(conf.lambda, 16);
	  } else {
	    // Choose the lambda that is matching selected beta
	    var lambdas = this._getEndoRoots(this.n);
	    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
	      lambda = lambdas[0];
	    } else {
	      lambda = lambdas[1];
	      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
	    }
	  }

	  // Get basis vectors, used for balanced length-two representation
	  var basis;
	  if (conf.basis) {
	    basis = conf.basis.map(function(vec) {
	      return {
	        a: new BN(vec.a, 16),
	        b: new BN(vec.b, 16)
	      };
	    });
	  } else {
	    basis = this._getEndoBasis(lambda);
	  }

	  return {
	    beta: beta,
	    lambda: lambda,
	    basis: basis
	  };
	};

	ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
	  // Find roots of for x^2 + x + 1 in F
	  // Root = (-1 +- Sqrt(-3)) / 2
	  //
	  var red = num === this.p ? this.red : BN.mont(num);
	  var tinv = new BN(2).toRed(red).redInvm();
	  var ntinv = tinv.redNeg();

	  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

	  var l1 = ntinv.redAdd(s).fromRed();
	  var l2 = ntinv.redSub(s).fromRed();
	  return [ l1, l2 ];
	};

	ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
	  // aprxSqrt >= sqrt(this.n)
	  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

	  // 3.74
	  // Run EGCD, until r(L + 1) < aprxSqrt
	  var u = lambda;
	  var v = this.n.clone();
	  var x1 = new BN(1);
	  var y1 = new BN(0);
	  var x2 = new BN(0);
	  var y2 = new BN(1);

	  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
	  var a0;
	  var b0;
	  // First vector
	  var a1;
	  var b1;
	  // Second vector
	  var a2;
	  var b2;

	  var prevR;
	  var i = 0;
	  var r;
	  var x;
	  while (u.cmpn(0) !== 0) {
	    var q = v.div(u);
	    r = v.sub(q.mul(u));
	    x = x2.sub(q.mul(x1));
	    var y = y2.sub(q.mul(y1));

	    if (!a1 && r.cmp(aprxSqrt) < 0) {
	      a0 = prevR.neg();
	      b0 = x1;
	      a1 = r.neg();
	      b1 = x;
	    } else if (a1 && ++i === 2) {
	      break;
	    }
	    prevR = r;

	    v = u;
	    u = r;
	    x2 = x1;
	    x1 = x;
	    y2 = y1;
	    y1 = y;
	  }
	  a2 = r.neg();
	  b2 = x;

	  var len1 = a1.sqr().add(b1.sqr());
	  var len2 = a2.sqr().add(b2.sqr());
	  if (len2.cmp(len1) >= 0) {
	    a2 = a0;
	    b2 = b0;
	  }

	  // Normalize signs
	  if (a1.negative) {
	    a1 = a1.neg();
	    b1 = b1.neg();
	  }
	  if (a2.negative) {
	    a2 = a2.neg();
	    b2 = b2.neg();
	  }

	  return [
	    { a: a1, b: b1 },
	    { a: a2, b: b2 }
	  ];
	};

	ShortCurve.prototype._endoSplit = function _endoSplit(k) {
	  var basis = this.endo.basis;
	  var v1 = basis[0];
	  var v2 = basis[1];

	  var c1 = v2.b.mul(k).divRound(this.n);
	  var c2 = v1.b.neg().mul(k).divRound(this.n);

	  var p1 = c1.mul(v1.a);
	  var p2 = c2.mul(v2.a);
	  var q1 = c1.mul(v1.b);
	  var q2 = c2.mul(v2.b);

	  // Calculate answer
	  var k1 = k.sub(p1).sub(p2);
	  var k2 = q1.add(q2).neg();
	  return { k1: k1, k2: k2 };
	};

	ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
	  x = new BN(x, 16);
	  if (!x.red)
	    x = x.toRed(this.red);

	  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
	  var y = y2.redSqrt();
	  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
	    throw new Error('invalid point');

	  // XXX Is there any way to tell if the number is odd without converting it
	  // to non-red form?
	  var isOdd = y.fromRed().isOdd();
	  if (odd && !isOdd || !odd && isOdd)
	    y = y.redNeg();

	  return this.point(x, y);
	};

	ShortCurve.prototype.validate = function validate(point) {
	  if (point.inf)
	    return true;

	  var x = point.x;
	  var y = point.y;

	  var ax = this.a.redMul(x);
	  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
	  return y.redSqr().redISub(rhs).cmpn(0) === 0;
	};

	ShortCurve.prototype._endoWnafMulAdd =
	    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
	  var npoints = this._endoWnafT1;
	  var ncoeffs = this._endoWnafT2;
	  for (var i = 0; i < points.length; i++) {
	    var split = this._endoSplit(coeffs[i]);
	    var p = points[i];
	    var beta = p._getBeta();

	    if (split.k1.negative) {
	      split.k1.ineg();
	      p = p.neg(true);
	    }
	    if (split.k2.negative) {
	      split.k2.ineg();
	      beta = beta.neg(true);
	    }

	    npoints[i * 2] = p;
	    npoints[i * 2 + 1] = beta;
	    ncoeffs[i * 2] = split.k1;
	    ncoeffs[i * 2 + 1] = split.k2;
	  }
	  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

	  // Clean-up references to points and coefficients
	  for (var j = 0; j < i * 2; j++) {
	    npoints[j] = null;
	    ncoeffs[j] = null;
	  }
	  return res;
	};

	function Point(curve, x, y, isRed) {
	  Base.BasePoint.call(this, curve, 'affine');
	  if (x === null && y === null) {
	    this.x = null;
	    this.y = null;
	    this.inf = true;
	  } else {
	    this.x = new BN(x, 16);
	    this.y = new BN(y, 16);
	    // Force redgomery representation when loading from JSON
	    if (isRed) {
	      this.x.forceRed(this.curve.red);
	      this.y.forceRed(this.curve.red);
	    }
	    if (!this.x.red)
	      this.x = this.x.toRed(this.curve.red);
	    if (!this.y.red)
	      this.y = this.y.toRed(this.curve.red);
	    this.inf = false;
	  }
	}
	inherits(Point, Base.BasePoint);

	ShortCurve.prototype.point = function point(x, y, isRed) {
	  return new Point(this, x, y, isRed);
	};

	ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
	  return Point.fromJSON(this, obj, red);
	};

	Point.prototype._getBeta = function _getBeta() {
	  if (!this.curve.endo)
	    return;

	  var pre = this.precomputed;
	  if (pre && pre.beta)
	    return pre.beta;

	  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
	  if (pre) {
	    var curve = this.curve;
	    var endoMul = function(p) {
	      return curve.point(p.x.redMul(curve.endo.beta), p.y);
	    };
	    pre.beta = beta;
	    beta.precomputed = {
	      beta: null,
	      naf: pre.naf && {
	        wnd: pre.naf.wnd,
	        points: pre.naf.points.map(endoMul)
	      },
	      doubles: pre.doubles && {
	        step: pre.doubles.step,
	        points: pre.doubles.points.map(endoMul)
	      }
	    };
	  }
	  return beta;
	};

	Point.prototype.toJSON = function toJSON() {
	  if (!this.precomputed)
	    return [ this.x, this.y ];

	  return [ this.x, this.y, this.precomputed && {
	    doubles: this.precomputed.doubles && {
	      step: this.precomputed.doubles.step,
	      points: this.precomputed.doubles.points.slice(1)
	    },
	    naf: this.precomputed.naf && {
	      wnd: this.precomputed.naf.wnd,
	      points: this.precomputed.naf.points.slice(1)
	    }
	  } ];
	};

	Point.fromJSON = function fromJSON(curve, obj, red) {
	  if (typeof obj === 'string')
	    obj = JSON.parse(obj);
	  var res = curve.point(obj[0], obj[1], red);
	  if (!obj[2])
	    return res;

	  function obj2point(obj) {
	    return curve.point(obj[0], obj[1], red);
	  }

	  var pre = obj[2];
	  res.precomputed = {
	    beta: null,
	    doubles: pre.doubles && {
	      step: pre.doubles.step,
	      points: [ res ].concat(pre.doubles.points.map(obj2point))
	    },
	    naf: pre.naf && {
	      wnd: pre.naf.wnd,
	      points: [ res ].concat(pre.naf.points.map(obj2point))
	    }
	  };
	  return res;
	};

	Point.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
	      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
	};

	Point.prototype.isInfinity = function isInfinity() {
	  return this.inf;
	};

	Point.prototype.add = function add(p) {
	  // O + P = P
	  if (this.inf)
	    return p;

	  // P + O = P
	  if (p.inf)
	    return this;

	  // P + P = 2P
	  if (this.eq(p))
	    return this.dbl();

	  // P + (-P) = O
	  if (this.neg().eq(p))
	    return this.curve.point(null, null);

	  // P + Q = O
	  if (this.x.cmp(p.x) === 0)
	    return this.curve.point(null, null);

	  var c = this.y.redSub(p.y);
	  if (c.cmpn(0) !== 0)
	    c = c.redMul(this.x.redSub(p.x).redInvm());
	  var nx = c.redSqr().redISub(this.x).redISub(p.x);
	  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
	  return this.curve.point(nx, ny);
	};

	Point.prototype.dbl = function dbl() {
	  if (this.inf)
	    return this;

	  // 2P = O
	  var ys1 = this.y.redAdd(this.y);
	  if (ys1.cmpn(0) === 0)
	    return this.curve.point(null, null);

	  var a = this.curve.a;

	  var x2 = this.x.redSqr();
	  var dyinv = ys1.redInvm();
	  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

	  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
	  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
	  return this.curve.point(nx, ny);
	};

	Point.prototype.getX = function getX() {
	  return this.x.fromRed();
	};

	Point.prototype.getY = function getY() {
	  return this.y.fromRed();
	};

	Point.prototype.mul = function mul(k) {
	  k = new BN(k, 16);
	  if (this.isInfinity())
	    return this;
	  else if (this._hasDoubles(k))
	    return this.curve._fixedNafMul(this, k);
	  else if (this.curve.endo)
	    return this.curve._endoWnafMulAdd([ this ], [ k ]);
	  else
	    return this.curve._wnafMul(this, k);
	};

	Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
	  var points = [ this, p2 ];
	  var coeffs = [ k1, k2 ];
	  if (this.curve.endo)
	    return this.curve._endoWnafMulAdd(points, coeffs);
	  else
	    return this.curve._wnafMulAdd(1, points, coeffs, 2);
	};

	Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
	  var points = [ this, p2 ];
	  var coeffs = [ k1, k2 ];
	  if (this.curve.endo)
	    return this.curve._endoWnafMulAdd(points, coeffs, true);
	  else
	    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
	};

	Point.prototype.eq = function eq(p) {
	  return this === p ||
	         this.inf === p.inf &&
	             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
	};

	Point.prototype.neg = function neg(_precompute) {
	  if (this.inf)
	    return this;

	  var res = this.curve.point(this.x, this.y.redNeg());
	  if (_precompute && this.precomputed) {
	    var pre = this.precomputed;
	    var negate = function(p) {
	      return p.neg();
	    };
	    res.precomputed = {
	      naf: pre.naf && {
	        wnd: pre.naf.wnd,
	        points: pre.naf.points.map(negate)
	      },
	      doubles: pre.doubles && {
	        step: pre.doubles.step,
	        points: pre.doubles.points.map(negate)
	      }
	    };
	  }
	  return res;
	};

	Point.prototype.toJ = function toJ() {
	  if (this.inf)
	    return this.curve.jpoint(null, null, null);

	  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
	  return res;
	};

	function JPoint(curve, x, y, z) {
	  Base.BasePoint.call(this, curve, 'jacobian');
	  if (x === null && y === null && z === null) {
	    this.x = this.curve.one;
	    this.y = this.curve.one;
	    this.z = new BN(0);
	  } else {
	    this.x = new BN(x, 16);
	    this.y = new BN(y, 16);
	    this.z = new BN(z, 16);
	  }
	  if (!this.x.red)
	    this.x = this.x.toRed(this.curve.red);
	  if (!this.y.red)
	    this.y = this.y.toRed(this.curve.red);
	  if (!this.z.red)
	    this.z = this.z.toRed(this.curve.red);

	  this.zOne = this.z === this.curve.one;
	}
	inherits(JPoint, Base.BasePoint);

	ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
	  return new JPoint(this, x, y, z);
	};

	JPoint.prototype.toP = function toP() {
	  if (this.isInfinity())
	    return this.curve.point(null, null);

	  var zinv = this.z.redInvm();
	  var zinv2 = zinv.redSqr();
	  var ax = this.x.redMul(zinv2);
	  var ay = this.y.redMul(zinv2).redMul(zinv);

	  return this.curve.point(ax, ay);
	};

	JPoint.prototype.neg = function neg() {
	  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
	};

	JPoint.prototype.add = function add(p) {
	  // O + P = P
	  if (this.isInfinity())
	    return p;

	  // P + O = P
	  if (p.isInfinity())
	    return this;

	  // 12M + 4S + 7A
	  var pz2 = p.z.redSqr();
	  var z2 = this.z.redSqr();
	  var u1 = this.x.redMul(pz2);
	  var u2 = p.x.redMul(z2);
	  var s1 = this.y.redMul(pz2.redMul(p.z));
	  var s2 = p.y.redMul(z2.redMul(this.z));

	  var h = u1.redSub(u2);
	  var r = s1.redSub(s2);
	  if (h.cmpn(0) === 0) {
	    if (r.cmpn(0) !== 0)
	      return this.curve.jpoint(null, null, null);
	    else
	      return this.dbl();
	  }

	  var h2 = h.redSqr();
	  var h3 = h2.redMul(h);
	  var v = u1.redMul(h2);

	  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
	  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
	  var nz = this.z.redMul(p.z).redMul(h);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.mixedAdd = function mixedAdd(p) {
	  // O + P = P
	  if (this.isInfinity())
	    return p.toJ();

	  // P + O = P
	  if (p.isInfinity())
	    return this;

	  // 8M + 3S + 7A
	  var z2 = this.z.redSqr();
	  var u1 = this.x;
	  var u2 = p.x.redMul(z2);
	  var s1 = this.y;
	  var s2 = p.y.redMul(z2).redMul(this.z);

	  var h = u1.redSub(u2);
	  var r = s1.redSub(s2);
	  if (h.cmpn(0) === 0) {
	    if (r.cmpn(0) !== 0)
	      return this.curve.jpoint(null, null, null);
	    else
	      return this.dbl();
	  }

	  var h2 = h.redSqr();
	  var h3 = h2.redMul(h);
	  var v = u1.redMul(h2);

	  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
	  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
	  var nz = this.z.redMul(h);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.dblp = function dblp(pow) {
	  if (pow === 0)
	    return this;
	  if (this.isInfinity())
	    return this;
	  if (!pow)
	    return this.dbl();

	  if (this.curve.zeroA || this.curve.threeA) {
	    var r = this;
	    for (var i = 0; i < pow; i++)
	      r = r.dbl();
	    return r;
	  }

	  // 1M + 2S + 1A + N * (4S + 5M + 8A)
	  // N = 1 => 6M + 6S + 9A
	  var a = this.curve.a;
	  var tinv = this.curve.tinv;

	  var jx = this.x;
	  var jy = this.y;
	  var jz = this.z;
	  var jz4 = jz.redSqr().redSqr();

	  // Reuse results
	  var jyd = jy.redAdd(jy);
	  for (var i = 0; i < pow; i++) {
	    var jx2 = jx.redSqr();
	    var jyd2 = jyd.redSqr();
	    var jyd4 = jyd2.redSqr();
	    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

	    var t1 = jx.redMul(jyd2);
	    var nx = c.redSqr().redISub(t1.redAdd(t1));
	    var t2 = t1.redISub(nx);
	    var dny = c.redMul(t2);
	    dny = dny.redIAdd(dny).redISub(jyd4);
	    var nz = jyd.redMul(jz);
	    if (i + 1 < pow)
	      jz4 = jz4.redMul(jyd4);

	    jx = nx;
	    jz = nz;
	    jyd = dny;
	  }

	  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
	};

	JPoint.prototype.dbl = function dbl() {
	  if (this.isInfinity())
	    return this;

	  if (this.curve.zeroA)
	    return this._zeroDbl();
	  else if (this.curve.threeA)
	    return this._threeDbl();
	  else
	    return this._dbl();
	};

	JPoint.prototype._zeroDbl = function _zeroDbl() {
	  var nx;
	  var ny;
	  var nz;
	  // Z = 1
	  if (this.zOne) {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
	    //     #doubling-mdbl-2007-bl
	    // 1M + 5S + 14A

	    // XX = X1^2
	    var xx = this.x.redSqr();
	    // YY = Y1^2
	    var yy = this.y.redSqr();
	    // YYYY = YY^2
	    var yyyy = yy.redSqr();
	    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
	    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	    s = s.redIAdd(s);
	    // M = 3 * XX + a; a = 0
	    var m = xx.redAdd(xx).redIAdd(xx);
	    // T = M ^ 2 - 2*S
	    var t = m.redSqr().redISub(s).redISub(s);

	    // 8 * YYYY
	    var yyyy8 = yyyy.redIAdd(yyyy);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    yyyy8 = yyyy8.redIAdd(yyyy8);

	    // X3 = T
	    nx = t;
	    // Y3 = M * (S - T) - 8 * YYYY
	    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
	    // Z3 = 2*Y1
	    nz = this.y.redAdd(this.y);
	  } else {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
	    //     #doubling-dbl-2009-l
	    // 2M + 5S + 13A

	    // A = X1^2
	    var a = this.x.redSqr();
	    // B = Y1^2
	    var b = this.y.redSqr();
	    // C = B^2
	    var c = b.redSqr();
	    // D = 2 * ((X1 + B)^2 - A - C)
	    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
	    d = d.redIAdd(d);
	    // E = 3 * A
	    var e = a.redAdd(a).redIAdd(a);
	    // F = E^2
	    var f = e.redSqr();

	    // 8 * C
	    var c8 = c.redIAdd(c);
	    c8 = c8.redIAdd(c8);
	    c8 = c8.redIAdd(c8);

	    // X3 = F - 2 * D
	    nx = f.redISub(d).redISub(d);
	    // Y3 = E * (D - X3) - 8 * C
	    ny = e.redMul(d.redISub(nx)).redISub(c8);
	    // Z3 = 2 * Y1 * Z1
	    nz = this.y.redMul(this.z);
	    nz = nz.redIAdd(nz);
	  }

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype._threeDbl = function _threeDbl() {
	  var nx;
	  var ny;
	  var nz;
	  // Z = 1
	  if (this.zOne) {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
	    //     #doubling-mdbl-2007-bl
	    // 1M + 5S + 15A

	    // XX = X1^2
	    var xx = this.x.redSqr();
	    // YY = Y1^2
	    var yy = this.y.redSqr();
	    // YYYY = YY^2
	    var yyyy = yy.redSqr();
	    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
	    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	    s = s.redIAdd(s);
	    // M = 3 * XX + a
	    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
	    // T = M^2 - 2 * S
	    var t = m.redSqr().redISub(s).redISub(s);
	    // X3 = T
	    nx = t;
	    // Y3 = M * (S - T) - 8 * YYYY
	    var yyyy8 = yyyy.redIAdd(yyyy);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
	    // Z3 = 2 * Y1
	    nz = this.y.redAdd(this.y);
	  } else {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
	    // 3M + 5S

	    // delta = Z1^2
	    var delta = this.z.redSqr();
	    // gamma = Y1^2
	    var gamma = this.y.redSqr();
	    // beta = X1 * gamma
	    var beta = this.x.redMul(gamma);
	    // alpha = 3 * (X1 - delta) * (X1 + delta)
	    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
	    alpha = alpha.redAdd(alpha).redIAdd(alpha);
	    // X3 = alpha^2 - 8 * beta
	    var beta4 = beta.redIAdd(beta);
	    beta4 = beta4.redIAdd(beta4);
	    var beta8 = beta4.redAdd(beta4);
	    nx = alpha.redSqr().redISub(beta8);
	    // Z3 = (Y1 + Z1)^2 - gamma - delta
	    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
	    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
	    var ggamma8 = gamma.redSqr();
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
	  }

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype._dbl = function _dbl() {
	  var a = this.curve.a;

	  // 4M + 6S + 10A
	  var jx = this.x;
	  var jy = this.y;
	  var jz = this.z;
	  var jz4 = jz.redSqr().redSqr();

	  var jx2 = jx.redSqr();
	  var jy2 = jy.redSqr();

	  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

	  var jxd4 = jx.redAdd(jx);
	  jxd4 = jxd4.redIAdd(jxd4);
	  var t1 = jxd4.redMul(jy2);
	  var nx = c.redSqr().redISub(t1.redAdd(t1));
	  var t2 = t1.redISub(nx);

	  var jyd8 = jy2.redSqr();
	  jyd8 = jyd8.redIAdd(jyd8);
	  jyd8 = jyd8.redIAdd(jyd8);
	  jyd8 = jyd8.redIAdd(jyd8);
	  var ny = c.redMul(t2).redISub(jyd8);
	  var nz = jy.redAdd(jy).redMul(jz);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.trpl = function trpl() {
	  if (!this.curve.zeroA)
	    return this.dbl().add(this);

	  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
	  // 5M + 10S + ...

	  // XX = X1^2
	  var xx = this.x.redSqr();
	  // YY = Y1^2
	  var yy = this.y.redSqr();
	  // ZZ = Z1^2
	  var zz = this.z.redSqr();
	  // YYYY = YY^2
	  var yyyy = yy.redSqr();
	  // M = 3 * XX + a * ZZ2; a = 0
	  var m = xx.redAdd(xx).redIAdd(xx);
	  // MM = M^2
	  var mm = m.redSqr();
	  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
	  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	  e = e.redIAdd(e);
	  e = e.redAdd(e).redIAdd(e);
	  e = e.redISub(mm);
	  // EE = E^2
	  var ee = e.redSqr();
	  // T = 16*YYYY
	  var t = yyyy.redIAdd(yyyy);
	  t = t.redIAdd(t);
	  t = t.redIAdd(t);
	  t = t.redIAdd(t);
	  // U = (M + E)^2 - MM - EE - T
	  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
	  // X3 = 4 * (X1 * EE - 4 * YY * U)
	  var yyu4 = yy.redMul(u);
	  yyu4 = yyu4.redIAdd(yyu4);
	  yyu4 = yyu4.redIAdd(yyu4);
	  var nx = this.x.redMul(ee).redISub(yyu4);
	  nx = nx.redIAdd(nx);
	  nx = nx.redIAdd(nx);
	  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
	  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
	  ny = ny.redIAdd(ny);
	  ny = ny.redIAdd(ny);
	  ny = ny.redIAdd(ny);
	  // Z3 = (Z1 + E)^2 - ZZ - EE
	  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.mul = function mul(k, kbase) {
	  k = new BN(k, kbase);

	  return this.curve._wnafMul(this, k);
	};

	JPoint.prototype.eq = function eq(p) {
	  if (p.type === 'affine')
	    return this.eq(p.toJ());

	  if (this === p)
	    return true;

	  // x1 * z2^2 == x2 * z1^2
	  var z2 = this.z.redSqr();
	  var pz2 = p.z.redSqr();
	  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
	    return false;

	  // y1 * z2^3 == y2 * z1^3
	  var z3 = z2.redMul(this.z);
	  var pz3 = pz2.redMul(p.z);
	  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
	};

	JPoint.prototype.eqXToP = function eqXToP(x) {
	  var zs = this.z.redSqr();
	  var rx = x.toRed(this.curve.red).redMul(zs);
	  if (this.x.cmp(rx) === 0)
	    return true;

	  var xc = x.clone();
	  var t = this.curve.redN.redMul(zs);
	  for (;;) {
	    xc.iadd(this.curve.n);
	    if (xc.cmp(this.curve.p) >= 0)
	      return false;

	    rx.redIAdd(t);
	    if (this.x.cmp(rx) === 0)
	      return true;
	  }
	};

	JPoint.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC JPoint Infinity>';
	  return '<EC JPoint x: ' + this.x.toString(16, 2) +
	      ' y: ' + this.y.toString(16, 2) +
	      ' z: ' + this.z.toString(16, 2) + '>';
	};

	JPoint.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.z.cmpn(0) === 0;
	};


/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var BN = __webpack_require__(4);
	var HmacDRBG = __webpack_require__(303);
	var utils = __webpack_require__(10);
	var curves = __webpack_require__(82);
	var rand = __webpack_require__(114);
	var assert = utils.assert;

	var KeyPair = __webpack_require__(266);
	var Signature = __webpack_require__(267);

	function EC(options) {
	  if (!(this instanceof EC))
	    return new EC(options);

	  // Shortcut `elliptic.ec(curve-name)`
	  if (typeof options === 'string') {
	    assert(curves.hasOwnProperty(options), 'Unknown curve ' + options);

	    options = curves[options];
	  }

	  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
	  if (options instanceof curves.PresetCurve)
	    options = { curve: options };

	  this.curve = options.curve.curve;
	  this.n = this.curve.n;
	  this.nh = this.n.ushrn(1);
	  this.g = this.curve.g;

	  // Point on curve
	  this.g = options.curve.g;
	  this.g.precompute(options.curve.n.bitLength() + 1);

	  // Hash for function for DRBG
	  this.hash = options.hash || options.curve.hash;
	}
	module.exports = EC;

	EC.prototype.keyPair = function keyPair(options) {
	  return new KeyPair(this, options);
	};

	EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
	  return KeyPair.fromPrivate(this, priv, enc);
	};

	EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
	  return KeyPair.fromPublic(this, pub, enc);
	};

	EC.prototype.genKeyPair = function genKeyPair(options) {
	  if (!options)
	    options = {};

	  // Instantiate Hmac_DRBG
	  var drbg = new HmacDRBG({
	    hash: this.hash,
	    pers: options.pers,
	    persEnc: options.persEnc || 'utf8',
	    entropy: options.entropy || rand(this.hash.hmacStrength),
	    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
	    nonce: this.n.toArray()
	  });

	  var bytes = this.n.byteLength();
	  var ns2 = this.n.sub(new BN(2));
	  do {
	    var priv = new BN(drbg.generate(bytes));
	    if (priv.cmp(ns2) > 0)
	      continue;

	    priv.iaddn(1);
	    return this.keyFromPrivate(priv);
	  } while (true);
	};

	EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
	  var delta = msg.byteLength() * 8 - this.n.bitLength();
	  if (delta > 0)
	    msg = msg.ushrn(delta);
	  if (!truncOnly && msg.cmp(this.n) >= 0)
	    return msg.sub(this.n);
	  else
	    return msg;
	};

	EC.prototype.sign = function sign(msg, key, enc, options) {
	  if (typeof enc === 'object') {
	    options = enc;
	    enc = null;
	  }
	  if (!options)
	    options = {};

	  key = this.keyFromPrivate(key, enc);
	  msg = this._truncateToN(new BN(msg, 16));

	  // Zero-extend key to provide enough entropy
	  var bytes = this.n.byteLength();
	  var bkey = key.getPrivate().toArray('be', bytes);

	  // Zero-extend nonce to have the same byte size as N
	  var nonce = msg.toArray('be', bytes);

	  // Instantiate Hmac_DRBG
	  var drbg = new HmacDRBG({
	    hash: this.hash,
	    entropy: bkey,
	    nonce: nonce,
	    pers: options.pers,
	    persEnc: options.persEnc || 'utf8'
	  });

	  // Number of bytes to generate
	  var ns1 = this.n.sub(new BN(1));

	  for (var iter = 0; true; iter++) {
	    var k = options.k ?
	        options.k(iter) :
	        new BN(drbg.generate(this.n.byteLength()));
	    k = this._truncateToN(k, true);
	    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
	      continue;

	    var kp = this.g.mul(k);
	    if (kp.isInfinity())
	      continue;

	    var kpX = kp.getX();
	    var r = kpX.umod(this.n);
	    if (r.cmpn(0) === 0)
	      continue;

	    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
	    s = s.umod(this.n);
	    if (s.cmpn(0) === 0)
	      continue;

	    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
	                        (kpX.cmp(r) !== 0 ? 2 : 0);

	    // Use complement of `s`, if it is > `n / 2`
	    if (options.canonical && s.cmp(this.nh) > 0) {
	      s = this.n.sub(s);
	      recoveryParam ^= 1;
	    }

	    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
	  }
	};

	EC.prototype.verify = function verify(msg, signature, key, enc) {
	  msg = this._truncateToN(new BN(msg, 16));
	  key = this.keyFromPublic(key, enc);
	  signature = new Signature(signature, 'hex');

	  // Perform primitive values validation
	  var r = signature.r;
	  var s = signature.s;
	  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
	    return false;
	  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
	    return false;

	  // Validate signature
	  var sinv = s.invm(this.n);
	  var u1 = sinv.mul(msg).umod(this.n);
	  var u2 = sinv.mul(r).umod(this.n);

	  if (!this.curve._maxwellTrick) {
	    var p = this.g.mulAdd(u1, key.getPublic(), u2);
	    if (p.isInfinity())
	      return false;

	    return p.getX().umod(this.n).cmp(r) === 0;
	  }

	  // NOTE: Greg Maxwell's trick, inspired by:
	  // https://git.io/vad3K

	  var p = this.g.jmulAdd(u1, key.getPublic(), u2);
	  if (p.isInfinity())
	    return false;

	  // Compare `p.x` of Jacobian point with `r`,
	  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
	  // inverse of `p.z^2`
	  return p.eqXToP(r);
	};

	EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
	  assert((3 & j) === j, 'The recovery param is more than two bits');
	  signature = new Signature(signature, enc);

	  var n = this.n;
	  var e = new BN(msg);
	  var r = signature.r;
	  var s = signature.s;

	  // A set LSB signifies that the y-coordinate is odd
	  var isYOdd = j & 1;
	  var isSecondKey = j >> 1;
	  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
	    throw new Error('Unable to find sencond key candinate');

	  // 1.1. Let x = r + jn.
	  if (isSecondKey)
	    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
	  else
	    r = this.curve.pointFromX(r, isYOdd);

	  var rInv = signature.r.invm(n);
	  var s1 = n.sub(e).mul(rInv).umod(n);
	  var s2 = s.mul(rInv).umod(n);

	  // 1.6.1 Compute Q = r^-1 (sR -  eG)
	  //               Q = r^-1 (sR + -eG)
	  return this.g.mulAdd(s1, r, s2);
	};

	EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
	  signature = new Signature(signature, enc);
	  if (signature.recoveryParam !== null)
	    return signature.recoveryParam;

	  for (var i = 0; i < 4; i++) {
	    var Qprime;
	    try {
	      Qprime = this.recoverPubKey(e, signature, i);
	    } catch (e) {
	      continue;
	    }

	    if (Qprime.eq(Q))
	      return i;
	  }
	  throw new Error('Unable to find valid recovery factor');
	};


/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var BN = __webpack_require__(4);
	var utils = __webpack_require__(10);
	var assert = utils.assert;

	function KeyPair(ec, options) {
	  this.ec = ec;
	  this.priv = null;
	  this.pub = null;

	  // KeyPair(ec, { priv: ..., pub: ... })
	  if (options.priv)
	    this._importPrivate(options.priv, options.privEnc);
	  if (options.pub)
	    this._importPublic(options.pub, options.pubEnc);
	}
	module.exports = KeyPair;

	KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
	  if (pub instanceof KeyPair)
	    return pub;

	  return new KeyPair(ec, {
	    pub: pub,
	    pubEnc: enc
	  });
	};

	KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
	  if (priv instanceof KeyPair)
	    return priv;

	  return new KeyPair(ec, {
	    priv: priv,
	    privEnc: enc
	  });
	};

	KeyPair.prototype.validate = function validate() {
	  var pub = this.getPublic();

	  if (pub.isInfinity())
	    return { result: false, reason: 'Invalid public key' };
	  if (!pub.validate())
	    return { result: false, reason: 'Public key is not a point' };
	  if (!pub.mul(this.ec.curve.n).isInfinity())
	    return { result: false, reason: 'Public key * N != O' };

	  return { result: true, reason: null };
	};

	KeyPair.prototype.getPublic = function getPublic(compact, enc) {
	  // compact is optional argument
	  if (typeof compact === 'string') {
	    enc = compact;
	    compact = null;
	  }

	  if (!this.pub)
	    this.pub = this.ec.g.mul(this.priv);

	  if (!enc)
	    return this.pub;

	  return this.pub.encode(enc, compact);
	};

	KeyPair.prototype.getPrivate = function getPrivate(enc) {
	  if (enc === 'hex')
	    return this.priv.toString(16, 2);
	  else
	    return this.priv;
	};

	KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
	  this.priv = new BN(key, enc || 16);

	  // Ensure that the priv won't be bigger than n, otherwise we may fail
	  // in fixed multiplication method
	  this.priv = this.priv.umod(this.ec.curve.n);
	};

	KeyPair.prototype._importPublic = function _importPublic(key, enc) {
	  if (key.x || key.y) {
	    // Montgomery points only have an `x` coordinate.
	    // Weierstrass/Edwards points on the other hand have both `x` and
	    // `y` coordinates.
	    if (this.ec.curve.type === 'mont') {
	      assert(key.x, 'Need x coordinate');
	    } else if (this.ec.curve.type === 'short' ||
	               this.ec.curve.type === 'edwards') {
	      assert(key.x && key.y, 'Need both x and y coordinate');
	    }
	    this.pub = this.ec.curve.point(key.x, key.y);
	    return;
	  }
	  this.pub = this.ec.curve.decodePoint(key, enc);
	};

	// ECDH
	KeyPair.prototype.derive = function derive(pub) {
	  return pub.mul(this.priv).getX();
	};

	// ECDSA
	KeyPair.prototype.sign = function sign(msg, enc, options) {
	  return this.ec.sign(msg, this, enc, options);
	};

	KeyPair.prototype.verify = function verify(msg, signature) {
	  return this.ec.verify(msg, signature, this);
	};

	KeyPair.prototype.inspect = function inspect() {
	  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
	         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
	};


/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var BN = __webpack_require__(4);

	var utils = __webpack_require__(10);
	var assert = utils.assert;

	function Signature(options, enc) {
	  if (options instanceof Signature)
	    return options;

	  if (this._importDER(options, enc))
	    return;

	  assert(options.r && options.s, 'Signature without r or s');
	  this.r = new BN(options.r, 16);
	  this.s = new BN(options.s, 16);
	  if (options.recoveryParam === undefined)
	    this.recoveryParam = null;
	  else
	    this.recoveryParam = options.recoveryParam;
	}
	module.exports = Signature;

	function Position() {
	  this.place = 0;
	}

	function getLength(buf, p) {
	  var initial = buf[p.place++];
	  if (!(initial & 0x80)) {
	    return initial;
	  }
	  var octetLen = initial & 0xf;

	  // Indefinite length or overflow
	  if (octetLen === 0 || octetLen > 4) {
	    return false;
	  }

	  var val = 0;
	  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
	    val <<= 8;
	    val |= buf[off];
	    val >>>= 0;
	  }

	  // Leading zeroes
	  if (val <= 0x7f) {
	    return false;
	  }

	  p.place = off;
	  return val;
	}

	function rmPadding(buf) {
	  var i = 0;
	  var len = buf.length - 1;
	  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
	    i++;
	  }
	  if (i === 0) {
	    return buf;
	  }
	  return buf.slice(i);
	}

	Signature.prototype._importDER = function _importDER(data, enc) {
	  data = utils.toArray(data, enc);
	  var p = new Position();
	  if (data[p.place++] !== 0x30) {
	    return false;
	  }
	  var len = getLength(data, p);
	  if (len === false) {
	    return false;
	  }
	  if ((len + p.place) !== data.length) {
	    return false;
	  }
	  if (data[p.place++] !== 0x02) {
	    return false;
	  }
	  var rlen = getLength(data, p);
	  if (rlen === false) {
	    return false;
	  }
	  var r = data.slice(p.place, rlen + p.place);
	  p.place += rlen;
	  if (data[p.place++] !== 0x02) {
	    return false;
	  }
	  var slen = getLength(data, p);
	  if (slen === false) {
	    return false;
	  }
	  if (data.length !== slen + p.place) {
	    return false;
	  }
	  var s = data.slice(p.place, slen + p.place);
	  if (r[0] === 0) {
	    if (r[1] & 0x80) {
	      r = r.slice(1);
	    } else {
	      // Leading zeroes
	      return false;
	    }
	  }
	  if (s[0] === 0) {
	    if (s[1] & 0x80) {
	      s = s.slice(1);
	    } else {
	      // Leading zeroes
	      return false;
	    }
	  }

	  this.r = new BN(r);
	  this.s = new BN(s);
	  this.recoveryParam = null;

	  return true;
	};

	function constructLength(arr, len) {
	  if (len < 0x80) {
	    arr.push(len);
	    return;
	  }
	  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
	  arr.push(octets | 0x80);
	  while (--octets) {
	    arr.push((len >>> (octets << 3)) & 0xff);
	  }
	  arr.push(len);
	}

	Signature.prototype.toDER = function toDER(enc) {
	  var r = this.r.toArray();
	  var s = this.s.toArray();

	  // Pad values
	  if (r[0] & 0x80)
	    r = [ 0 ].concat(r);
	  // Pad values
	  if (s[0] & 0x80)
	    s = [ 0 ].concat(s);

	  r = rmPadding(r);
	  s = rmPadding(s);

	  while (!s[0] && !(s[1] & 0x80)) {
	    s = s.slice(1);
	  }
	  var arr = [ 0x02 ];
	  constructLength(arr, r.length);
	  arr = arr.concat(r);
	  arr.push(0x02);
	  constructLength(arr, s.length);
	  var backHalf = arr.concat(s);
	  var res = [ 0x30 ];
	  constructLength(res, backHalf.length);
	  res = res.concat(backHalf);
	  return utils.encode(res, enc);
	};


/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var hash = __webpack_require__(86);
	var curves = __webpack_require__(82);
	var utils = __webpack_require__(10);
	var assert = utils.assert;
	var parseBytes = utils.parseBytes;
	var KeyPair = __webpack_require__(269);
	var Signature = __webpack_require__(270);

	function EDDSA(curve) {
	  assert(curve === 'ed25519', 'only tested with ed25519 so far');

	  if (!(this instanceof EDDSA))
	    return new EDDSA(curve);

	  var curve = curves[curve].curve;
	  this.curve = curve;
	  this.g = curve.g;
	  this.g.precompute(curve.n.bitLength() + 1);

	  this.pointClass = curve.point().constructor;
	  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
	  this.hash = hash.sha512;
	}

	module.exports = EDDSA;

	/**
	* @param {Array|String} message - message bytes
	* @param {Array|String|KeyPair} secret - secret bytes or a keypair
	* @returns {Signature} - signature
	*/
	EDDSA.prototype.sign = function sign(message, secret) {
	  message = parseBytes(message);
	  var key = this.keyFromSecret(secret);
	  var r = this.hashInt(key.messagePrefix(), message);
	  var R = this.g.mul(r);
	  var Rencoded = this.encodePoint(R);
	  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
	               .mul(key.priv());
	  var S = r.add(s_).umod(this.curve.n);
	  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
	};

	/**
	* @param {Array} message - message bytes
	* @param {Array|String|Signature} sig - sig bytes
	* @param {Array|String|Point|KeyPair} pub - public key
	* @returns {Boolean} - true if public key matches sig of message
	*/
	EDDSA.prototype.verify = function verify(message, sig, pub) {
	  message = parseBytes(message);
	  sig = this.makeSignature(sig);
	  var key = this.keyFromPublic(pub);
	  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
	  var SG = this.g.mul(sig.S());
	  var RplusAh = sig.R().add(key.pub().mul(h));
	  return RplusAh.eq(SG);
	};

	EDDSA.prototype.hashInt = function hashInt() {
	  var hash = this.hash();
	  for (var i = 0; i < arguments.length; i++)
	    hash.update(arguments[i]);
	  return utils.intFromLE(hash.digest()).umod(this.curve.n);
	};

	EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
	  return KeyPair.fromPublic(this, pub);
	};

	EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
	  return KeyPair.fromSecret(this, secret);
	};

	EDDSA.prototype.makeSignature = function makeSignature(sig) {
	  if (sig instanceof Signature)
	    return sig;
	  return new Signature(this, sig);
	};

	/**
	* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
	*
	* EDDSA defines methods for encoding and decoding points and integers. These are
	* helper convenience methods, that pass along to utility functions implied
	* parameters.
	*
	*/
	EDDSA.prototype.encodePoint = function encodePoint(point) {
	  var enc = point.getY().toArray('le', this.encodingLength);
	  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
	  return enc;
	};

	EDDSA.prototype.decodePoint = function decodePoint(bytes) {
	  bytes = utils.parseBytes(bytes);

	  var lastIx = bytes.length - 1;
	  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
	  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

	  var y = utils.intFromLE(normed);
	  return this.curve.pointFromY(y, xIsOdd);
	};

	EDDSA.prototype.encodeInt = function encodeInt(num) {
	  return num.toArray('le', this.encodingLength);
	};

	EDDSA.prototype.decodeInt = function decodeInt(bytes) {
	  return utils.intFromLE(bytes);
	};

	EDDSA.prototype.isPoint = function isPoint(val) {
	  return val instanceof this.pointClass;
	};


/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(10);
	var assert = utils.assert;
	var parseBytes = utils.parseBytes;
	var cachedProperty = utils.cachedProperty;

	/**
	* @param {EDDSA} eddsa - instance
	* @param {Object} params - public/private key parameters
	*
	* @param {Array<Byte>} [params.secret] - secret seed bytes
	* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
	* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
	*
	*/
	function KeyPair(eddsa, params) {
	  this.eddsa = eddsa;
	  this._secret = parseBytes(params.secret);
	  if (eddsa.isPoint(params.pub))
	    this._pub = params.pub;
	  else
	    this._pubBytes = parseBytes(params.pub);
	}

	KeyPair.fromPublic = function fromPublic(eddsa, pub) {
	  if (pub instanceof KeyPair)
	    return pub;
	  return new KeyPair(eddsa, { pub: pub });
	};

	KeyPair.fromSecret = function fromSecret(eddsa, secret) {
	  if (secret instanceof KeyPair)
	    return secret;
	  return new KeyPair(eddsa, { secret: secret });
	};

	KeyPair.prototype.secret = function secret() {
	  return this._secret;
	};

	cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
	  return this.eddsa.encodePoint(this.pub());
	});

	cachedProperty(KeyPair, 'pub', function pub() {
	  if (this._pubBytes)
	    return this.eddsa.decodePoint(this._pubBytes);
	  return this.eddsa.g.mul(this.priv());
	});

	cachedProperty(KeyPair, 'privBytes', function privBytes() {
	  var eddsa = this.eddsa;
	  var hash = this.hash();
	  var lastIx = eddsa.encodingLength - 1;

	  var a = hash.slice(0, eddsa.encodingLength);
	  a[0] &= 248;
	  a[lastIx] &= 127;
	  a[lastIx] |= 64;

	  return a;
	});

	cachedProperty(KeyPair, 'priv', function priv() {
	  return this.eddsa.decodeInt(this.privBytes());
	});

	cachedProperty(KeyPair, 'hash', function hash() {
	  return this.eddsa.hash().update(this.secret()).digest();
	});

	cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
	  return this.hash().slice(this.eddsa.encodingLength);
	});

	KeyPair.prototype.sign = function sign(message) {
	  assert(this._secret, 'KeyPair can only verify');
	  return this.eddsa.sign(message, this);
	};

	KeyPair.prototype.verify = function verify(message, sig) {
	  return this.eddsa.verify(message, sig, this);
	};

	KeyPair.prototype.getSecret = function getSecret(enc) {
	  assert(this._secret, 'KeyPair is public only');
	  return utils.encode(this.secret(), enc);
	};

	KeyPair.prototype.getPublic = function getPublic(enc) {
	  return utils.encode(this.pubBytes(), enc);
	};

	module.exports = KeyPair;


/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var BN = __webpack_require__(4);
	var utils = __webpack_require__(10);
	var assert = utils.assert;
	var cachedProperty = utils.cachedProperty;
	var parseBytes = utils.parseBytes;

	/**
	* @param {EDDSA} eddsa - eddsa instance
	* @param {Array<Bytes>|Object} sig -
	* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
	* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
	* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
	* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
	*/
	function Signature(eddsa, sig) {
	  this.eddsa = eddsa;

	  if (typeof sig !== 'object')
	    sig = parseBytes(sig);

	  if (Array.isArray(sig)) {
	    sig = {
	      R: sig.slice(0, eddsa.encodingLength),
	      S: sig.slice(eddsa.encodingLength)
	    };
	  }

	  assert(sig.R && sig.S, 'Signature without R or S');

	  if (eddsa.isPoint(sig.R))
	    this._R = sig.R;
	  if (sig.S instanceof BN)
	    this._S = sig.S;

	  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
	  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
	}

	cachedProperty(Signature, 'S', function S() {
	  return this.eddsa.decodeInt(this.Sencoded());
	});

	cachedProperty(Signature, 'R', function R() {
	  return this.eddsa.decodePoint(this.Rencoded());
	});

	cachedProperty(Signature, 'Rencoded', function Rencoded() {
	  return this.eddsa.encodePoint(this.R());
	});

	cachedProperty(Signature, 'Sencoded', function Sencoded() {
	  return this.eddsa.encodeInt(this.S());
	});

	Signature.prototype.toBytes = function toBytes() {
	  return this.Rencoded().concat(this.Sencoded());
	};

	Signature.prototype.toHex = function toHex() {
	  return utils.encode(this.toBytes(), 'hex').toUpperCase();
	};

	module.exports = Signature;


/***/ },
/* 271 */
/***/ function(module, exports) {

	module.exports = {
	  doubles: {
	    step: 4,
	    points: [
	      [
	        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
	        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
	      ],
	      [
	        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
	        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
	      ],
	      [
	        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
	        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
	      ],
	      [
	        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
	        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
	      ],
	      [
	        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
	        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
	      ],
	      [
	        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
	        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
	      ],
	      [
	        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
	        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
	      ],
	      [
	        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
	        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
	      ],
	      [
	        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
	        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
	      ],
	      [
	        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
	        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
	      ],
	      [
	        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
	        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
	      ],
	      [
	        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
	        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
	      ],
	      [
	        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
	        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
	      ],
	      [
	        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
	        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
	      ],
	      [
	        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
	        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
	      ],
	      [
	        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
	        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
	      ],
	      [
	        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
	        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
	      ],
	      [
	        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
	        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
	      ],
	      [
	        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
	        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
	      ],
	      [
	        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
	        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
	      ],
	      [
	        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
	        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
	      ],
	      [
	        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
	        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
	      ],
	      [
	        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
	        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
	      ],
	      [
	        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
	        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
	      ],
	      [
	        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
	        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
	      ],
	      [
	        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
	        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
	      ],
	      [
	        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
	        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
	      ],
	      [
	        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
	        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
	      ],
	      [
	        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
	        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
	      ],
	      [
	        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
	        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
	      ],
	      [
	        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
	        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
	      ],
	      [
	        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
	        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
	      ],
	      [
	        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
	        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
	      ],
	      [
	        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
	        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
	      ],
	      [
	        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
	        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
	      ],
	      [
	        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
	        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
	      ],
	      [
	        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
	        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
	      ],
	      [
	        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
	        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
	      ],
	      [
	        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
	        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
	      ],
	      [
	        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
	        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
	      ],
	      [
	        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
	        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
	      ],
	      [
	        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
	        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
	      ],
	      [
	        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
	        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
	      ],
	      [
	        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
	        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
	      ],
	      [
	        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
	        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
	      ],
	      [
	        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
	        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
	      ],
	      [
	        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
	        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
	      ],
	      [
	        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
	        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
	      ],
	      [
	        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
	        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
	      ],
	      [
	        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
	        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
	      ],
	      [
	        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
	        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
	      ],
	      [
	        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
	        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
	      ],
	      [
	        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
	        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
	      ],
	      [
	        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
	        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
	      ],
	      [
	        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
	        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
	      ],
	      [
	        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
	        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
	      ],
	      [
	        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
	        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
	      ],
	      [
	        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
	        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
	      ],
	      [
	        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
	        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
	      ],
	      [
	        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
	        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
	      ],
	      [
	        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
	        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
	      ],
	      [
	        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
	        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
	      ],
	      [
	        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
	        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
	      ],
	      [
	        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
	        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
	      ],
	      [
	        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
	        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
	      ]
	    ]
	  },
	  naf: {
	    wnd: 7,
	    points: [
	      [
	        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
	        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
	      ],
	      [
	        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
	        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
	      ],
	      [
	        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
	        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
	      ],
	      [
	        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
	        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
	      ],
	      [
	        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
	        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
	      ],
	      [
	        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
	        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
	      ],
	      [
	        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
	        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
	      ],
	      [
	        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
	        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
	      ],
	      [
	        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
	        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
	      ],
	      [
	        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
	        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
	      ],
	      [
	        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
	        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
	      ],
	      [
	        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
	        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
	      ],
	      [
	        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
	        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
	      ],
	      [
	        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
	        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
	      ],
	      [
	        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
	        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
	      ],
	      [
	        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
	        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
	      ],
	      [
	        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
	        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
	      ],
	      [
	        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
	        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
	      ],
	      [
	        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
	        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
	      ],
	      [
	        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
	        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
	      ],
	      [
	        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
	        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
	      ],
	      [
	        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
	        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
	      ],
	      [
	        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
	        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
	      ],
	      [
	        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
	        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
	      ],
	      [
	        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
	        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
	      ],
	      [
	        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
	        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
	      ],
	      [
	        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
	        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
	      ],
	      [
	        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
	        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
	      ],
	      [
	        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
	        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
	      ],
	      [
	        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
	        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
	      ],
	      [
	        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
	        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
	      ],
	      [
	        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
	        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
	      ],
	      [
	        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
	        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
	      ],
	      [
	        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
	        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
	      ],
	      [
	        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
	        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
	      ],
	      [
	        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
	        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
	      ],
	      [
	        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
	        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
	      ],
	      [
	        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
	        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
	      ],
	      [
	        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
	        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
	      ],
	      [
	        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
	        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
	      ],
	      [
	        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
	        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
	      ],
	      [
	        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
	        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
	      ],
	      [
	        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
	        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
	      ],
	      [
	        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
	        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
	      ],
	      [
	        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
	        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
	      ],
	      [
	        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
	        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
	      ],
	      [
	        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
	        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
	      ],
	      [
	        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
	        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
	      ],
	      [
	        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
	        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
	      ],
	      [
	        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
	        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
	      ],
	      [
	        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
	        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
	      ],
	      [
	        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
	        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
	      ],
	      [
	        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
	        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
	      ],
	      [
	        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
	        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
	      ],
	      [
	        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
	        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
	      ],
	      [
	        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
	        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
	      ],
	      [
	        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
	        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
	      ],
	      [
	        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
	        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
	      ],
	      [
	        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
	        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
	      ],
	      [
	        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
	        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
	      ],
	      [
	        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
	        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
	      ],
	      [
	        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
	        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
	      ],
	      [
	        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
	        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
	      ],
	      [
	        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
	        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
	      ],
	      [
	        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
	        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
	      ],
	      [
	        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
	        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
	      ],
	      [
	        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
	        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
	      ],
	      [
	        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
	        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
	      ],
	      [
	        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
	        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
	      ],
	      [
	        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
	        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
	      ],
	      [
	        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
	        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
	      ],
	      [
	        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
	        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
	      ],
	      [
	        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
	        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
	      ],
	      [
	        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
	        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
	      ],
	      [
	        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
	        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
	      ],
	      [
	        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
	        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
	      ],
	      [
	        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
	        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
	      ],
	      [
	        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
	        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
	      ],
	      [
	        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
	        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
	      ],
	      [
	        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
	        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
	      ],
	      [
	        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
	        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
	      ],
	      [
	        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
	        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
	      ],
	      [
	        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
	        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
	      ],
	      [
	        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
	        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
	      ],
	      [
	        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
	        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
	      ],
	      [
	        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
	        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
	      ],
	      [
	        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
	        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
	      ],
	      [
	        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
	        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
	      ],
	      [
	        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
	        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
	      ],
	      [
	        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
	        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
	      ],
	      [
	        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
	        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
	      ],
	      [
	        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
	        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
	      ],
	      [
	        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
	        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
	      ],
	      [
	        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
	        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
	      ],
	      [
	        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
	        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
	      ],
	      [
	        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
	        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
	      ],
	      [
	        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
	        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
	      ],
	      [
	        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
	        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
	      ],
	      [
	        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
	        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
	      ],
	      [
	        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
	        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
	      ],
	      [
	        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
	        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
	      ],
	      [
	        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
	        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
	      ],
	      [
	        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
	        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
	      ],
	      [
	        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
	        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
	      ],
	      [
	        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
	        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
	      ],
	      [
	        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
	        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
	      ],
	      [
	        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
	        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
	      ],
	      [
	        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
	        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
	      ],
	      [
	        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
	        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
	      ],
	      [
	        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
	        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
	      ],
	      [
	        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
	        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
	      ],
	      [
	        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
	        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
	      ],
	      [
	        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
	        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
	      ],
	      [
	        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
	        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
	      ],
	      [
	        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
	        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
	      ],
	      [
	        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
	        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
	      ],
	      [
	        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
	        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
	      ],
	      [
	        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
	        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
	      ],
	      [
	        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
	        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
	      ],
	      [
	        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
	        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
	      ],
	      [
	        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
	        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
	      ],
	      [
	        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
	        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
	      ],
	      [
	        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
	        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
	      ],
	      [
	        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
	        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
	      ],
	      [
	        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
	        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
	      ],
	      [
	        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
	        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
	      ],
	      [
	        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
	        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
	      ]
	    ]
	  }
	};


/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	
	const { EthereumRpcError, EthereumProviderError } = __webpack_require__(83)
	const {
	  serializeError, getMessageFromCode,
	} = __webpack_require__(122)
	const ethErrors = __webpack_require__(273)
	const ERROR_CODES = __webpack_require__(87)

	module.exports = {
	  ethErrors,
	  EthereumRpcError,
	  EthereumProviderError,
	  serializeError,
	  getMessageFromCode,
	  /** @type ErrorCodes */
	  ERROR_CODES,
	}

	// Types

	/**
	 * @typedef {Object} EthereumProviderErrorCodes
	 * @property {number} userRejectedRequest
	 * @property {number} unauthorized
	 * @property {number} unsupportedMethod
	 */

	/**
	 * @typedef {Object} EthereumRpcErrorCodes
	 * @property {number} parse
	 * @property {number} invalidRequest
	 * @property {number} invalidParams
	 * @property {number} methodNotFound
	 * @property {number} internal
	 * @property {number} invalidInput
	 * @property {number} resourceNotFound
	 * @property {number} resourceUnavailable
	 * @property {number} transactionRejected
	 * @property {number} methodNotSupported
	 */

	/**
	 * @typedef ErrorCodes
	 * @property {EthereumRpcErrorCodes} rpc
	 * @property {EthereumProviderErrorCodes} provider
	 */


/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	
	const { EthereumRpcError, EthereumProviderError } = __webpack_require__(83)
	const { getMessageFromCode } = __webpack_require__(122)
	const ERROR_CODES = __webpack_require__(87)

	module.exports = {
	  rpc: {
	    /**
	     * Get a JSON RPC 2.0 Parse (-32700) error.
	     * 
	     * @param {Object|string} [opts] - Options object or error message string
	     * @param {string} [opts.message] - The error message
	     * @param {any} [opts.data] - Error data
	     * @returns {EthereumRpcError} The error
	     */
	    parse: (opts) => getEthJsonRpcError(
	      ERROR_CODES.rpc.parse, opts
	    ),

	    /**
	     * Get a JSON RPC 2.0 Invalid Request (-32600) error.
	     * 
	     * @param {Object|string} [opts] - Options object or error message string
	     * @param {string} [opts.message] - The error message
	     * @param {any} [opts.data] - Error data
	     * @returns {EthereumRpcError} The error
	     */
	    invalidRequest: (opts) => getEthJsonRpcError(
	      ERROR_CODES.rpc.invalidRequest, opts
	    ),

	    /**
	     * Get a JSON RPC 2.0 Invalid Params (-32602) error.
	     * 
	     * @param {Object|string} [opts] - Options object or error message string
	     * @param {string} [opts.message] - The error message
	     * @param {any} [opts.data] - Error data
	     * @returns {EthereumRpcError} The error
	     */
	    invalidParams: (opts) => getEthJsonRpcError(
	      ERROR_CODES.rpc.invalidParams, opts
	    ),

	    /**
	     * Get a JSON RPC 2.0 Method Not Found (-32601) error.
	     * 
	     * @param {Object|string} [opts] - Options object or error message string
	     * @param {string} [opts.message] - The error message
	     * @param {any} [opts.data] - Error data
	     * @returns {EthereumRpcError} The error
	     */
	    methodNotFound: (opts) => getEthJsonRpcError(
	      ERROR_CODES.rpc.methodNotFound, opts
	    ),

	    /**
	     * Get a JSON RPC 2.0 Internal (-32603) error.
	     * 
	     * @param {Object|string} [opts] - Options object or error message string
	     * @param {string} [opts.message] - The error message
	     * @param {any} [opts.data] - Error data
	     * @returns {EthereumRpcError} The error
	     */
	    internal: (opts) => getEthJsonRpcError(
	      ERROR_CODES.rpc.internal, opts
	    ),

	    /**
	     * Get a JSON RPC 2.0 Server error.
	     * Permits integer error codes in the [ -32099 <= -32005 ] range.
	     * Codes -32000 through -32004 are reserved by EIP 1474.
	     * 
	     * @param {Object|string} opts - Options object
	     * @param {number} opts.code - The error code
	     * @param {string} [opts.message] - The error message
	     * @param {any} [opts.data] - Error data
	     * @returns {EthereumRpcError} The error
	     */
	    server: (opts) => {
	      if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {
	        throw new Error('Ethereum RPC Server errors must provide single object argument.')
	      }
	      const { code } = opts
	      if (!Number.isInteger(code) || code > -32005 || code < -32099) {
	        throw new Error(
	          '"code" must be an integer such that: -32099 <= code <= -32005'
	        )
	      }
	      return getEthJsonRpcError(code, opts)
	    },

	    /**
	     * Get an Ethereum JSON RPC Invalid Input (-32000) error.
	     * 
	     * @param {Object|string} [opts] - Options object or error message string
	     * @param {string} [opts.message] - The error message
	     * @param {any} [opts.data] - Error data
	     * @returns {EthereumRpcError} The error
	     */
	    invalidInput: (opts) => getEthJsonRpcError(
	      ERROR_CODES.rpc.invalidInput, opts
	    ),

	    /**
	     * Get an Ethereum JSON RPC Resource Not Found (-32001) error.
	     * 
	     * @param {Object|string} [opts] - Options object or error message string
	     * @param {string} [opts.message] - The error message
	     * @param {any} [opts.data] - Error data
	     * @returns {EthereumRpcError} The error
	     */
	    resourceNotFound: (opts) => getEthJsonRpcError(
	      ERROR_CODES.rpc.resourceNotFound, opts
	    ),

	    /**
	     * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.
	     * 
	     * @param {Object|string} [opts] - Options object or error message string
	     * @param {string} [opts.message] - The error message
	     * @param {any} [opts.data] - Error data
	     * @returns {EthereumRpcError} The error
	     */
	    resourceUnavailable: (opts) => getEthJsonRpcError(
	      ERROR_CODES.rpc.resourceUnavailable, opts
	    ),

	    /**
	     * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.
	     * 
	     * @param {Object|string} [opts] - Options object or error message string
	     * @param {string} [opts.message] - The error message
	     * @param {any} [opts.data] - Error data
	     * @returns {EthereumRpcError} The error
	     */
	    transactionRejected: (opts) => getEthJsonRpcError(
	      ERROR_CODES.rpc.transactionRejected, opts
	    ),

	    /**
	     * Get an Ethereum JSON RPC Method Not Supported (-32004) error.
	     * 
	     * @param {Object|string} [opts] - Options object or error message string
	     * @param {string} [opts.message] - The error message
	     * @param {any} [opts.data] - Error data
	     * @returns {EthereumRpcError} The error
	     */
	    methodNotSupported: (opts) => getEthJsonRpcError(
	      ERROR_CODES.rpc.methodNotSupported, opts
	    ),
	  },

	  provider: {
	    /**
	     * Get an Ethereum Provider User Rejected Request (4001) error.
	     * 
	     * @param {Object|string} [opts] - Options object or error message string
	     * @param {string} [opts.message] - The error message
	     * @param {any} [opts.data] - Error data
	     * @returns {EthereumProviderError} The error
	     */
	    userRejectedRequest: (opts) => {
	      return getEthProviderError(
	        ERROR_CODES.provider.userRejectedRequest, opts
	      )
	    },

	    /**
	     * Get an Ethereum Provider Unauthorized (4100) error.
	     * 
	     * @param {Object|string} [opts] - Options object or error message string
	     * @param {string} [opts.message] - The error message
	     * @param {any} [opts.data] - Error data
	     * @returns {EthereumProviderError} The error
	     */
	    unauthorized: (opts) => {
	      return getEthProviderError(
	        ERROR_CODES.provider.unauthorized, opts
	      )
	    },

	    /**
	     * Get an Ethereum Provider Unsupported Method (4200) error.
	     * 
	     * @param {Object|string} [opts] - Options object or error message string
	     * @param {string} [opts.message] - The error message
	     * @param {any} [opts.data] - Error data
	     * @returns {EthereumProviderError} The error
	     */
	    unsupportedMethod: (opts) => {
	      return getEthProviderError(
	        ERROR_CODES.provider.unsupportedMethod, opts
	      )
	    },

	    /**
	     * Get a custom Ethereum Provider error.
	     * 
	     * @param {Object|string} opts - Options object
	     * @param {number} opts.code - The error code
	     * @param {string} opts.message - The error message
	     * @param {any} [opts.data] - Error data
	     * @returns {EthereumProviderError} The error
	     */
	    custom: (opts) => {
	      if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {
	        throw new Error('Ethereum Provider custom errors must provide single object argument.')
	      }
	      const { code, message, data } = opts
	      if (!message || typeof message !== 'string') throw new Error(
	        '"message" must be a nonempty string'
	      )
	      return new EthereumProviderError(code, message, data)
	    },
	  },
	}

	// Internal

	function getEthJsonRpcError(code, opts) {
	  const [ message, data ] = validateOpts(opts)
	  return new EthereumRpcError(
	    code,
	    message || getMessageFromCode(code),
	    data
	  )
	}

	function getEthProviderError(code, opts) {
	  const [ message, data ] = validateOpts(opts)
	  return new EthereumProviderError(
	    code,
	    message || getMessageFromCode(code),
	    data
	  )
	}

	function validateOpts (opts) {
	  let message, data
	  if (opts) {
	    if (typeof opts === 'string') {
	      message = opts
	    } else if (typeof opts === 'object' && !Array.isArray(opts)) {
	      message = opts.message
	      data = opts.data
	    }
	  }
	  return [ message, data ]
	}


/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	// for backwards compat
	module.exports = __webpack_require__(203)


/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _require = __webpack_require__(63),
	    keccak224 = _require.keccak224,
	    keccak384 = _require.keccak384,
	    k256 = _require.keccak256,
	    keccak512 = _require.keccak512;

	var secp256k1 = __webpack_require__(276);
	var assert = __webpack_require__(5);
	var rlp = __webpack_require__(22);
	var BN = __webpack_require__(4);
	var createHash = __webpack_require__(25);
	var Buffer = __webpack_require__(6).Buffer;
	Object.assign(exports, __webpack_require__(18));

	/**
	 * the max integer that this VM can handle (a ```BN```)
	 * @var {BN} MAX_INTEGER
	 */
	exports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);

	/**
	 * 2^256 (a ```BN```)
	 * @var {BN} TWO_POW256
	 */
	exports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16);

	/**
	 * Keccak-256 hash of null (a ```String```)
	 * @var {String} KECCAK256_NULL_S
	 */
	exports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
	exports.SHA3_NULL_S = exports.KECCAK256_NULL_S;

	/**
	 * Keccak-256 hash of null (a ```Buffer```)
	 * @var {Buffer} KECCAK256_NULL
	 */
	exports.KECCAK256_NULL = Buffer.from(exports.KECCAK256_NULL_S, 'hex');
	exports.SHA3_NULL = exports.KECCAK256_NULL;

	/**
	 * Keccak-256 of an RLP of an empty array (a ```String```)
	 * @var {String} KECCAK256_RLP_ARRAY_S
	 */
	exports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';
	exports.SHA3_RLP_ARRAY_S = exports.KECCAK256_RLP_ARRAY_S;

	/**
	 * Keccak-256 of an RLP of an empty array (a ```Buffer```)
	 * @var {Buffer} KECCAK256_RLP_ARRAY
	 */
	exports.KECCAK256_RLP_ARRAY = Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');
	exports.SHA3_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY;

	/**
	 * Keccak-256 hash of the RLP of null  (a ```String```)
	 * @var {String} KECCAK256_RLP_S
	 */
	exports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';
	exports.SHA3_RLP_S = exports.KECCAK256_RLP_S;

	/**
	 * Keccak-256 hash of the RLP of null (a ```Buffer```)
	 * @var {Buffer} KECCAK256_RLP
	 */
	exports.KECCAK256_RLP = Buffer.from(exports.KECCAK256_RLP_S, 'hex');
	exports.SHA3_RLP = exports.KECCAK256_RLP;

	/**
	 * [`BN`](https://github.com/indutny/bn.js)
	 * @var {Function}
	 */
	exports.BN = BN;

	/**
	 * [`rlp`](https://github.com/ethereumjs/rlp)
	 * @var {Function}
	 */
	exports.rlp = rlp;

	/**
	 * [`secp256k1`](https://github.com/cryptocoinjs/secp256k1-node/)
	 * @var {Object}
	 */
	exports.secp256k1 = secp256k1;

	/**
	 * Returns a buffer filled with 0s
	 * @method zeros
	 * @param {Number} bytes  the number of bytes the buffer should be
	 * @return {Buffer}
	 */
	exports.zeros = function (bytes) {
	  return Buffer.allocUnsafe(bytes).fill(0);
	};

	/**
	  * Returns a zero address
	  * @method zeroAddress
	  * @return {String}
	  */
	exports.zeroAddress = function () {
	  var addressLength = 20;
	  var zeroAddress = exports.zeros(addressLength);
	  return exports.bufferToHex(zeroAddress);
	};

	/**
	 * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
	 * Or it truncates the beginning if it exceeds.
	 * @method lsetLength
	 * @param {Buffer|Array} msg the value to pad
	 * @param {Number} length the number of bytes the output should be
	 * @param {Boolean} [right=false] whether to start padding form the left or right
	 * @return {Buffer|Array}
	 */
	exports.setLengthLeft = exports.setLength = function (msg, length, right) {
	  var buf = exports.zeros(length);
	  msg = exports.toBuffer(msg);
	  if (right) {
	    if (msg.length < length) {
	      msg.copy(buf);
	      return buf;
	    }
	    return msg.slice(0, length);
	  } else {
	    if (msg.length < length) {
	      msg.copy(buf, length - msg.length);
	      return buf;
	    }
	    return msg.slice(-length);
	  }
	};

	/**
	 * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
	 * Or it truncates the beginning if it exceeds.
	 * @param {Buffer|Array} msg the value to pad
	 * @param {Number} length the number of bytes the output should be
	 * @return {Buffer|Array}
	 */
	exports.setLengthRight = function (msg, length) {
	  return exports.setLength(msg, length, true);
	};

	/**
	 * Trims leading zeros from a `Buffer` or an `Array`
	 * @param {Buffer|Array|String} a
	 * @return {Buffer|Array|String}
	 */
	exports.unpad = exports.stripZeros = function (a) {
	  a = exports.stripHexPrefix(a);
	  var first = a[0];
	  while (a.length > 0 && first.toString() === '0') {
	    a = a.slice(1);
	    first = a[0];
	  }
	  return a;
	};
	/**
	 * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.
	 * @param {*} v the value
	 */
	exports.toBuffer = function (v) {
	  if (!Buffer.isBuffer(v)) {
	    if (Array.isArray(v)) {
	      v = Buffer.from(v);
	    } else if (typeof v === 'string') {
	      if (exports.isHexString(v)) {
	        v = Buffer.from(exports.padToEven(exports.stripHexPrefix(v)), 'hex');
	      } else {
	        v = Buffer.from(v);
	      }
	    } else if (typeof v === 'number') {
	      v = exports.intToBuffer(v);
	    } else if (v === null || v === undefined) {
	      v = Buffer.allocUnsafe(0);
	    } else if (BN.isBN(v)) {
	      v = v.toArrayLike(Buffer);
	    } else if (v.toArray) {
	      // converts a BN to a Buffer
	      v = Buffer.from(v.toArray());
	    } else {
	      throw new Error('invalid type');
	    }
	  }
	  return v;
	};

	/**
	 * Converts a `Buffer` to a `Number`
	 * @param {Buffer} buf
	 * @return {Number}
	 * @throws If the input number exceeds 53 bits.
	 */
	exports.bufferToInt = function (buf) {
	  return new BN(exports.toBuffer(buf)).toNumber();
	};

	/**
	 * Converts a `Buffer` into a hex `String`
	 * @param {Buffer} buf
	 * @return {String}
	 */
	exports.bufferToHex = function (buf) {
	  buf = exports.toBuffer(buf);
	  return '0x' + buf.toString('hex');
	};

	/**
	 * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.
	 * @param {Buffer} num
	 * @return {BN}
	 */
	exports.fromSigned = function (num) {
	  return new BN(num).fromTwos(256);
	};

	/**
	 * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.
	 * @param {BN} num
	 * @return {Buffer}
	 */
	exports.toUnsigned = function (num) {
	  return Buffer.from(num.toTwos(256).toArray());
	};

	/**
	 * Creates Keccak hash of the input
	 * @param {Buffer|Array|String|Number} a the input data
	 * @param {Number} [bits=256] the Keccak width
	 * @return {Buffer}
	 */
	exports.keccak = function (a, bits) {
	  a = exports.toBuffer(a);
	  if (!bits) bits = 256;

	  switch (bits) {
	    case 224:
	      {
	        return keccak224(a);
	      }
	    case 256:
	      {
	        return k256(a);
	      }
	    case 384:
	      {
	        return keccak384(a);
	      }
	    case 512:
	      {
	        return keccak512(a);
	      }
	    default:
	      {
	        throw new Error('Invald algorithm: keccak' + bits);
	      }
	  }
	};

	/**
	 * Creates Keccak-256 hash of the input, alias for keccak(a, 256)
	 * @param {Buffer|Array|String|Number} a the input data
	 * @return {Buffer}
	 */
	exports.keccak256 = function (a) {
	  return exports.keccak(a);
	};

	/**
	 * Creates SHA-3 (Keccak) hash of the input [OBSOLETE]
	 * @param {Buffer|Array|String|Number} a the input data
	 * @param {Number} [bits=256] the SHA-3 width
	 * @return {Buffer}
	 */
	exports.sha3 = exports.keccak;

	/**
	 * Creates SHA256 hash of the input
	 * @param {Buffer|Array|String|Number} a the input data
	 * @return {Buffer}
	 */
	exports.sha256 = function (a) {
	  a = exports.toBuffer(a);
	  return createHash('sha256').update(a).digest();
	};

	/**
	 * Creates RIPEMD160 hash of the input
	 * @param {Buffer|Array|String|Number} a the input data
	 * @param {Boolean} padded whether it should be padded to 256 bits or not
	 * @return {Buffer}
	 */
	exports.ripemd160 = function (a, padded) {
	  a = exports.toBuffer(a);
	  var hash = createHash('rmd160').update(a).digest();
	  if (padded === true) {
	    return exports.setLength(hash, 32);
	  } else {
	    return hash;
	  }
	};

	/**
	 * Creates SHA-3 hash of the RLP encoded version of the input
	 * @param {Buffer|Array|String|Number} a the input data
	 * @return {Buffer}
	 */
	exports.rlphash = function (a) {
	  return exports.keccak(rlp.encode(a));
	};

	/**
	 * Checks if the private key satisfies the rules of the curve secp256k1.
	 * @param {Buffer} privateKey
	 * @return {Boolean}
	 */
	exports.isValidPrivate = function (privateKey) {
	  return secp256k1.privateKeyVerify(privateKey);
	};

	/**
	 * Checks if the public key satisfies the rules of the curve secp256k1
	 * and the requirements of Ethereum.
	 * @param {Buffer} publicKey The two points of an uncompressed key, unless sanitize is enabled
	 * @param {Boolean} [sanitize=false] Accept public keys in other formats
	 * @return {Boolean}
	 */
	exports.isValidPublic = function (publicKey, sanitize) {
	  if (publicKey.length === 64) {
	    // Convert to SEC1 for secp256k1
	    return secp256k1.publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]));
	  }

	  if (!sanitize) {
	    return false;
	  }

	  return secp256k1.publicKeyVerify(publicKey);
	};

	/**
	 * Returns the ethereum address of a given public key.
	 * Accepts "Ethereum public keys" and SEC1 encoded keys.
	 * @param {Buffer} pubKey The two points of an uncompressed key, unless sanitize is enabled
	 * @param {Boolean} [sanitize=false] Accept public keys in other formats
	 * @return {Buffer}
	 */
	exports.pubToAddress = exports.publicToAddress = function (pubKey, sanitize) {
	  pubKey = exports.toBuffer(pubKey);
	  if (sanitize && pubKey.length !== 64) {
	    pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);
	  }
	  assert(pubKey.length === 64);
	  // Only take the lower 160bits of the hash
	  return exports.keccak(pubKey).slice(-20);
	};

	/**
	 * Returns the ethereum public key of a given private key
	 * @param {Buffer} privateKey A private key must be 256 bits wide
	 * @return {Buffer}
	 */
	var privateToPublic = exports.privateToPublic = function (privateKey) {
	  privateKey = exports.toBuffer(privateKey);
	  // skip the type flag and use the X, Y points
	  return secp256k1.publicKeyCreate(privateKey, false).slice(1);
	};

	/**
	 * Converts a public key to the Ethereum format.
	 * @param {Buffer} publicKey
	 * @return {Buffer}
	 */
	exports.importPublic = function (publicKey) {
	  publicKey = exports.toBuffer(publicKey);
	  if (publicKey.length !== 64) {
	    publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);
	  }
	  return publicKey;
	};

	/**
	 * ECDSA sign
	 * @param {Buffer} msgHash
	 * @param {Buffer} privateKey
	 * @return {Object}
	 */
	exports.ecsign = function (msgHash, privateKey) {
	  var sig = secp256k1.sign(msgHash, privateKey);

	  var ret = {};
	  ret.r = sig.signature.slice(0, 32);
	  ret.s = sig.signature.slice(32, 64);
	  ret.v = sig.recovery + 27;
	  return ret;
	};

	/**
	 * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.
	 * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`
	 * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key
	 * used to produce the signature.
	 * @param message
	 * @returns {Buffer} hash
	 */
	exports.hashPersonalMessage = function (message) {
	  var prefix = exports.toBuffer('\x19Ethereum Signed Message:\n' + message.length.toString());
	  return exports.keccak(Buffer.concat([prefix, message]));
	};

	/**
	 * ECDSA public key recovery from signature
	 * @param {Buffer} msgHash
	 * @param {Number} v
	 * @param {Buffer} r
	 * @param {Buffer} s
	 * @return {Buffer} publicKey
	 */
	exports.ecrecover = function (msgHash, v, r, s) {
	  var signature = Buffer.concat([exports.setLength(r, 32), exports.setLength(s, 32)], 64);
	  var recovery = v - 27;
	  if (recovery !== 0 && recovery !== 1) {
	    throw new Error('Invalid signature v value');
	  }
	  var senderPubKey = secp256k1.recover(msgHash, signature, recovery);
	  return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);
	};

	/**
	 * Convert signature parameters into the format of `eth_sign` RPC method
	 * @param {Number} v
	 * @param {Buffer} r
	 * @param {Buffer} s
	 * @return {String} sig
	 */
	exports.toRpcSig = function (v, r, s) {
	  // NOTE: with potential introduction of chainId this might need to be updated
	  if (v !== 27 && v !== 28) {
	    throw new Error('Invalid recovery id');
	  }

	  // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin
	  // FIXME: this might change in the future - https://github.com/ethereum/go-ethereum/issues/2053
	  return exports.bufferToHex(Buffer.concat([exports.setLengthLeft(r, 32), exports.setLengthLeft(s, 32), exports.toBuffer(v - 27)]));
	};

	/**
	 * Convert signature format of the `eth_sign` RPC method to signature parameters
	 * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053
	 * @param {String} sig
	 * @return {Object}
	 */
	exports.fromRpcSig = function (sig) {
	  sig = exports.toBuffer(sig);

	  // NOTE: with potential introduction of chainId this might need to be updated
	  if (sig.length !== 65) {
	    throw new Error('Invalid signature length');
	  }

	  var v = sig[64];
	  // support both versions of `eth_sign` responses
	  if (v < 27) {
	    v += 27;
	  }

	  return {
	    v: v,
	    r: sig.slice(0, 32),
	    s: sig.slice(32, 64)
	  };
	};

	/**
	 * Returns the ethereum address of a given private key
	 * @param {Buffer} privateKey A private key must be 256 bits wide
	 * @return {Buffer}
	 */
	exports.privateToAddress = function (privateKey) {
	  return exports.publicToAddress(privateToPublic(privateKey));
	};

	/**
	 * Checks if the address is a valid. Accepts checksummed addresses too
	 * @param {String} address
	 * @return {Boolean}
	 */
	exports.isValidAddress = function (address) {
	  return (/^0x[0-9a-fA-F]{40}$/.test(address)
	  );
	};

	/**
	  * Checks if a given address is a zero address
	  * @method isZeroAddress
	  * @param {String} address
	  * @return {Boolean}
	  */
	exports.isZeroAddress = function (address) {
	  var zeroAddress = exports.zeroAddress();
	  return zeroAddress === exports.addHexPrefix(address);
	};

	/**
	 * Returns a checksummed address
	 * @param {String} address
	 * @return {String}
	 */
	exports.toChecksumAddress = function (address) {
	  address = exports.stripHexPrefix(address).toLowerCase();
	  var hash = exports.keccak(address).toString('hex');
	  var ret = '0x';

	  for (var i = 0; i < address.length; i++) {
	    if (parseInt(hash[i], 16) >= 8) {
	      ret += address[i].toUpperCase();
	    } else {
	      ret += address[i];
	    }
	  }

	  return ret;
	};

	/**
	 * Checks if the address is a valid checksummed address
	 * @param {Buffer} address
	 * @return {Boolean}
	 */
	exports.isValidChecksumAddress = function (address) {
	  return exports.isValidAddress(address) && exports.toChecksumAddress(address) === address;
	};

	/**
	 * Generates an address of a newly created contract
	 * @param {Buffer} from the address which is creating this new address
	 * @param {Buffer} nonce the nonce of the from account
	 * @return {Buffer}
	 */
	exports.generateAddress = function (from, nonce) {
	  from = exports.toBuffer(from);
	  nonce = new BN(nonce);

	  if (nonce.isZero()) {
	    // in RLP we want to encode null in the case of zero nonce
	    // read the RLP documentation for an answer if you dare
	    nonce = null;
	  } else {
	    nonce = Buffer.from(nonce.toArray());
	  }

	  // Only take the lower 160bits of the hash
	  return exports.rlphash([from, nonce]).slice(-20);
	};

	/**
	 * Returns true if the supplied address belongs to a precompiled account (Byzantium)
	 * @param {Buffer|String} address
	 * @return {Boolean}
	 */
	exports.isPrecompiled = function (address) {
	  var a = exports.unpad(address);
	  return a.length === 1 && a[0] >= 1 && a[0] <= 8;
	};

	/**
	 * Adds "0x" to a given `String` if it does not already start with "0x"
	 * @param {String} str
	 * @return {String}
	 */
	exports.addHexPrefix = function (str) {
	  if (typeof str !== 'string') {
	    return str;
	  }

	  return exports.isHexPrefixed(str) ? str : '0x' + str;
	};

	/**
	 * Validate ECDSA signature
	 * @method isValidSignature
	 * @param {Buffer} v
	 * @param {Buffer} r
	 * @param {Buffer} s
	 * @param {Boolean} [homestead=true]
	 * @return {Boolean}
	 */

	exports.isValidSignature = function (v, r, s, homestead) {
	  var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
	  var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);

	  if (r.length !== 32 || s.length !== 32) {
	    return false;
	  }

	  if (v !== 27 && v !== 28) {
	    return false;
	  }

	  r = new BN(r);
	  s = new BN(s);

	  if (r.isZero() || r.gt(SECP256K1_N) || s.isZero() || s.gt(SECP256K1_N)) {
	    return false;
	  }

	  if (homestead === false && new BN(s).cmp(SECP256K1_N_DIV_2) === 1) {
	    return false;
	  }

	  return true;
	};

	/**
	 * Converts a `Buffer` or `Array` to JSON
	 * @param {Buffer|Array} ba
	 * @return {Array|String|null}
	 */
	exports.baToJSON = function (ba) {
	  if (Buffer.isBuffer(ba)) {
	    return '0x' + ba.toString('hex');
	  } else if (ba instanceof Array) {
	    var array = [];
	    for (var i = 0; i < ba.length; i++) {
	      array.push(exports.baToJSON(ba[i]));
	    }
	    return array;
	  }
	};

	/**
	 * Defines properties on a `Object`. It make the assumption that underlying data is binary.
	 * @param {Object} self the `Object` to define properties on
	 * @param {Array} fields an array fields to define. Fields can contain:
	 * * `name` - the name of the properties
	 * * `length` - the number of bytes the field can have
	 * * `allowLess` - if the field can be less than the length
	 * * `allowEmpty`
	 * @param {*} data data to be validated against the definitions
	 */
	exports.defineProperties = function (self, fields, data) {
	  self.raw = [];
	  self._fields = [];

	  // attach the `toJSON`
	  self.toJSON = function (label) {
	    if (label) {
	      var obj = {};
	      self._fields.forEach(function (field) {
	        obj[field] = '0x' + self[field].toString('hex');
	      });
	      return obj;
	    }
	    return exports.baToJSON(this.raw);
	  };

	  self.serialize = function serialize() {
	    return rlp.encode(self.raw);
	  };

	  fields.forEach(function (field, i) {
	    self._fields.push(field.name);
	    function getter() {
	      return self.raw[i];
	    }
	    function setter(v) {
	      v = exports.toBuffer(v);

	      if (v.toString('hex') === '00' && !field.allowZero) {
	        v = Buffer.allocUnsafe(0);
	      }

	      if (field.allowLess && field.length) {
	        v = exports.stripZeros(v);
	        assert(field.length >= v.length, 'The field ' + field.name + ' must not have more ' + field.length + ' bytes');
	      } else if (!(field.allowZero && v.length === 0) && field.length) {
	        assert(field.length === v.length, 'The field ' + field.name + ' must have byte length of ' + field.length);
	      }

	      self.raw[i] = v;
	    }

	    Object.defineProperty(self, field.name, {
	      enumerable: true,
	      configurable: true,
	      get: getter,
	      set: setter
	    });

	    if (field.default) {
	      self[field.name] = field.default;
	    }

	    // attach alias
	    if (field.alias) {
	      Object.defineProperty(self, field.alias, {
	        enumerable: false,
	        configurable: true,
	        set: setter,
	        get: getter
	      });
	    }
	  });

	  // if the constuctor is passed data
	  if (data) {
	    if (typeof data === 'string') {
	      data = Buffer.from(exports.stripHexPrefix(data), 'hex');
	    }

	    if (Buffer.isBuffer(data)) {
	      data = rlp.decode(data);
	    }

	    if (Array.isArray(data)) {
	      if (data.length > self._fields.length) {
	        throw new Error('wrong number of fields in data');
	      }

	      // make sure all the items are buffers
	      data.forEach(function (d, i) {
	        self[self._fields[i]] = exports.toBuffer(d);
	      });
	    } else if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
	      var keys = Object.keys(data);
	      fields.forEach(function (field) {
	        if (keys.indexOf(field.name) !== -1) self[field.name] = data[field.name];
	        if (keys.indexOf(field.alias) !== -1) self[field.alias] = data[field.alias];
	      });
	    } else {
	      throw new Error('invalid data');
	    }
	  }
	};

/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

	var secp256k1 = __webpack_require__(64);

	var secp256k1v3 = __webpack_require__(278);
	var der = __webpack_require__(277);

	/**
	 * Verify an ECDSA privateKey
	 * @method privateKeyVerify
	 * @param {Buffer} privateKey
	 * @return {boolean}
	 */
	var privateKeyVerify = function privateKeyVerify(privateKey) {
	  // secp256k1 v4 version throws when privateKey length is not 32
	  if (privateKey.length !== 32) {
	    return false;
	  }

	  return secp256k1.privateKeyVerify(Uint8Array.from(privateKey));
	};

	/**
	 * Export a privateKey in DER format
	 * @method privateKeyExport
	 * @param {Buffer} privateKey
	 * @param {boolean} compressed
	 * @return {boolean}
	 */
	var privateKeyExport = function privateKeyExport(privateKey, compressed) {
	  // privateKeyExport method is not part of secp256k1 v4 package
	  // this implementation is based on v3
	  if (privateKey.length !== 32) {
	    throw new RangeError('private key length is invalid');
	  }

	  var publicKey = secp256k1v3.privateKeyExport(privateKey, compressed);

	  return der.privateKeyExport(privateKey, publicKey, compressed);
	};

	/**
	 * Import a privateKey in DER format
	 * @method privateKeyImport
	 * @param {Buffer} privateKey
	 * @return {Buffer}
	 */

	var privateKeyImport = function privateKeyImport(privateKey) {
	  // privateKeyImport method is not part of secp256k1 v4 package
	  // this implementation is based on v3
	  privateKey = der.privateKeyImport(privateKey);
	  if (privateKey !== null && privateKey.length === 32 && privateKeyVerify(privateKey)) {
	    return privateKey;
	  }

	  throw new Error("couldn't import from DER format");
	};

	/**
	 * Negate a privateKey by subtracting it from the order of the curve's base point
	 * @method privateKeyNegate
	 * @param {Buffer} privateKey
	 * @return {Buffer}
	 */
	var privateKeyNegate = function privateKeyNegate(privateKey) {
	  return Buffer.from(secp256k1.privateKeyNegate(Uint8Array.from(privateKey)));
	};

	/**
	 * Compute the inverse of a privateKey (modulo the order of the curve's base point).
	 * @method privateKeyModInverse
	 * @param {Buffer} privateKey
	 * @return {Buffer}
	 */
	var privateKeyModInverse = function privateKeyModInverse(privateKey) {
	  if (privateKey.length !== 32) {
	    throw new Error('private key length is invalid');
	  }

	  return Buffer.from(secp256k1v3.privateKeyModInverse(Uint8Array.from(privateKey)));
	};

	/**
	 * Tweak a privateKey by adding tweak to it.
	 * @method privateKeyTweakAdd
	 * @param {Buffer} privateKey
	 * @param {Buffer} tweak
	 * @return {Buffer}
	 */
	var privateKeyTweakAdd = function privateKeyTweakAdd(privateKey, tweak) {
	  return Buffer.from(secp256k1.privateKeyTweakAdd(Uint8Array.from(privateKey), tweak));
	};

	/**
	 * Tweak a privateKey by multiplying it by a tweak.
	 * @method privateKeyTweakMul
	 * @param {Buffer} privateKey
	 * @param {Buffer} tweak
	 * @return {Buffer}
	 */
	var privateKeyTweakMul = function privateKeyTweakMul(privateKey, tweak) {
	  return Buffer.from(secp256k1.privateKeyTweakMul(Uint8Array.from(privateKey), Uint8Array.from(tweak)));
	};

	/**
	 * Compute the public key for a privateKey.
	 * @method publicKeyCreate
	 * @param {Buffer} privateKey
	 * @param {boolean} compressed
	 * @return {Buffer}
	 */
	var publicKeyCreate = function publicKeyCreate(privateKey, compressed) {
	  return Buffer.from(secp256k1.publicKeyCreate(Uint8Array.from(privateKey), compressed));
	};

	/**
	 * Convert a publicKey to compressed or uncompressed form.
	 * @method publicKeyConvert
	 * @param {Buffer} publicKey
	 * @param {boolean} compressed
	 * @return {Buffer}
	 */
	var publicKeyConvert = function publicKeyConvert(publicKey, compressed) {
	  return Buffer.from(secp256k1.publicKeyConvert(Uint8Array.from(publicKey), compressed));
	};

	/**
	 * Verify an ECDSA publicKey.
	 * @method publicKeyVerify
	 * @param {Buffer} publicKey
	 * @return {boolean}
	 */
	var publicKeyVerify = function publicKeyVerify(publicKey) {
	  // secp256k1 v4 version throws when publicKey length is not 33 or 65
	  if (publicKey.length !== 33 && publicKey.length !== 65) {
	    return false;
	  }

	  return secp256k1.publicKeyVerify(Uint8Array.from(publicKey));
	};

	/**
	 * Tweak a publicKey by adding tweak times the generator to it.
	 * @method publicKeyTweakAdd
	 * @param {Buffer} publicKey
	 * @param {Buffer} tweak
	 * @param {boolean} compressed
	 * @return {Buffer}
	 */
	var publicKeyTweakAdd = function publicKeyTweakAdd(publicKey, tweak, compressed) {
	  return Buffer.from(secp256k1.publicKeyTweakAdd(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
	};

	/**
	 * Tweak a publicKey by multiplying it by a tweak value
	 * @method publicKeyTweakMul
	 * @param {Buffer} publicKey
	 * @param {Buffer} tweak
	 * @param {boolean} compressed
	 * @return {Buffer}
	 */
	var publicKeyTweakMul = function publicKeyTweakMul(publicKey, tweak, compressed) {
	  return Buffer.from(secp256k1.publicKeyTweakMul(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
	};

	/**
	 * Add a given publicKeys together.
	 * @method publicKeyCombine
	 * @param {Array<Buffer>} publicKeys
	 * @param {boolean} compressed
	 * @return {Buffer}
	 */
	var publicKeyCombine = function publicKeyCombine(publicKeys, compressed) {
	  var keys = [];
	  publicKeys.forEach(function (publicKey) {
	    keys.push(Uint8Array.from(publicKey));
	  });

	  return Buffer.from(secp256k1.publicKeyCombine(keys, compressed));
	};

	/**
	 * Convert a signature to a normalized lower-S form.
	 * @method signatureNormalize
	 * @param {Buffer} signature
	 * @return {Buffer}
	 */
	var signatureNormalize = function signatureNormalize(signature) {
	  return Buffer.from(secp256k1.signatureNormalize(Uint8Array.from(signature)));
	};

	/**
	 * Serialize an ECDSA signature in DER format.
	 * @method signatureExport
	 * @param {Buffer} signature
	 * @return {Buffer}
	 */
	var signatureExport = function signatureExport(signature) {
	  return Buffer.from(secp256k1.signatureExport(Uint8Array.from(signature)));
	};

	/**
	 * Parse a DER ECDSA signature (follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
	 * @method signatureImport
	 * @param {Buffer} signature
	 * @return {Buffer}
	 */
	var signatureImport = function signatureImport(signature) {
	  return Buffer.from(secp256k1.signatureImport(Uint8Array.from(signature)));
	};

	/**
	 * Parse a DER ECDSA signature (not follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
	 * @method signatureImportLax
	 * @param {Buffer} signature
	 * @return {Buffer}
	 */
	var signatureImportLax = function signatureImportLax(signature) {
	  // signatureImportLax method is not part of secp256k1 v4 package
	  // this implementation is based on v3
	  // ensure that signature is greater than 0
	  if (signature.length === 0) {
	    throw new RangeError('signature length is invalid');
	  }

	  var sigObj = der.signatureImportLax(signature);
	  if (sigObj === null) {
	    throw new Error("couldn't parse DER signature");
	  }

	  return secp256k1v3.signatureImport(sigObj);
	};

	/**
	 * Create an ECDSA signature. Always return low-S signature.
	 * @method sign
	 * @param {Buffer} message
	 * @param {Buffer} privateKey
	 * @param {Object} options
	 * @return {Buffer}
	 */
	var sign = function sign(message, privateKey, options) {
	  if (options === null) {
	    throw new TypeError('options should be an Object');
	  }

	  var signOptions = void 0;

	  if (options) {
	    signOptions = {};

	    if (options.data === null) {
	      throw new TypeError('options.data should be a Buffer');
	    }

	    if (options.data) {
	      // validate option.data length
	      if (options.data.length !== 32) {
	        throw new RangeError('options.data length is invalid');
	      }

	      signOptions.data = new Uint8Array(options.data);
	    }

	    if (options.noncefn === null) {
	      throw new TypeError('options.noncefn should be a Function');
	    }

	    if (options.noncefn) {
	      //  convert option.noncefn function signature
	      signOptions.noncefn = function (message, privateKey, algo, data, attempt) {
	        var bufferAlgo = algo != null ? Buffer.from(algo) : null;
	        var bufferData = data != null ? Buffer.from(data) : null;

	        var buffer = Buffer.from('');

	        if (options.noncefn) {
	          buffer = options.noncefn(Buffer.from(message), Buffer.from(privateKey), bufferAlgo, bufferData, attempt);
	        }

	        return Uint8Array.from(buffer);
	      };
	    }
	  }

	  var sig = secp256k1.ecdsaSign(Uint8Array.from(message), Uint8Array.from(privateKey), signOptions);

	  return {
	    signature: Buffer.from(sig.signature),
	    recovery: sig.recid
	  };
	};

	/**
	 * Verify an ECDSA signature.
	 * @method verify
	 * @param {Buffer} message
	 * @param {Buffer} signature
	 * @param {Buffer} publicKey
	 * @return {boolean}
	 */
	var verify = function verify(message, signature, publicKey) {
	  // note: secp256k1 v4 verify method has a different argument order
	  return secp256k1.ecdsaVerify(Uint8Array.from(signature), Uint8Array.from(message), publicKey);
	};

	/**
	 * Recover an ECDSA public key from a signature.
	 * @method recover
	 * @param {Buffer} message
	 * @param {Buffer} signature
	 * @param {Number} recid
	 * @param {boolean} compressed
	 * @return {Buffer}
	 */
	var recover = function recover(message, signature, recid, compressed) {
	  // note: secp256k1 v4 recover method has a different argument order
	  return Buffer.from(secp256k1.ecdsaRecover(Uint8Array.from(signature), recid, Uint8Array.from(message), compressed));
	};

	/**
	 * Compute an EC Diffie-Hellman secret and applied sha256 to compressed public key.
	 * @method ecdh
	 * @param {Buffer} publicKey
	 * @param {Buffer} privateKey
	 * @return {Buffer}
	 */
	var ecdh = function ecdh(publicKey, privateKey) {
	  // note: secp256k1 v3 doesn't allow optional parameter
	  return Buffer.from(secp256k1.ecdh(Uint8Array.from(publicKey), Uint8Array.from(privateKey), {}));
	};

	/**
	 * Compute an EC Diffie-Hellman secret and return public key as result
	 * @method ecdhUnsafe
	 * @param {Buffer} publicKey
	 * @param {Buffer} privateKey
	 * @param {boolean} compressed
	 * @return {Buffer}
	 */
	var ecdhUnsafe = function ecdhUnsafe(publicKey, privateKey, compressed) {
	  // ecdhUnsafe method is not part of secp256k1 v4 package
	  // this implementation is based on v3
	  // ensure valid publicKey length
	  if (publicKey.length !== 33 && publicKey.length !== 65) {
	    throw new RangeError('public key length is invalid');
	  }

	  // ensure valid privateKey length
	  if (privateKey.length !== 32) {
	    throw new RangeError('private key length is invalid');
	  }

	  return Buffer.from(secp256k1v3.ecdhUnsafe(Uint8Array.from(publicKey), Uint8Array.from(privateKey), compressed));
	};

	module.exports = {
	  privateKeyVerify: privateKeyVerify,
	  privateKeyExport: privateKeyExport,
	  privateKeyImport: privateKeyImport,
	  privateKeyNegate: privateKeyNegate,
	  privateKeyModInverse: privateKeyModInverse,
	  privateKeyTweakAdd: privateKeyTweakAdd,
	  privateKeyTweakMul: privateKeyTweakMul,

	  publicKeyCreate: publicKeyCreate,
	  publicKeyConvert: publicKeyConvert,
	  publicKeyVerify: publicKeyVerify,
	  publicKeyTweakAdd: publicKeyTweakAdd,
	  publicKeyTweakMul: publicKeyTweakMul,
	  publicKeyCombine: publicKeyCombine,

	  signatureNormalize: signatureNormalize,
	  signatureExport: signatureExport,
	  signatureImport: signatureImport,
	  signatureImportLax: signatureImportLax,

	  sign: sign,
	  verify: verify,
	  recover: recover,

	  ecdh: ecdh,
	  ecdhUnsafe: ecdhUnsafe
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict";

	// This file is imported from secp256k1 v3
	// https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE

	var EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer.from([
	// begin
	0x30, 0x81, 0xd3, 0x02, 0x01, 0x01, 0x04, 0x20,
	// private key
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	// middle
	0xa0, 0x81, 0x85, 0x30, 0x81, 0x82, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04, 0x21, 0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xba, 0xae, 0xdc, 0xe6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5e, 0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x24, 0x03, 0x22, 0x00,
	// public key
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);

	var EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer.from([
	// begin
	0x30, 0x82, 0x01, 0x13, 0x02, 0x01, 0x01, 0x04, 0x20,
	// private key
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	// middle
	0xa0, 0x81, 0xa5, 0x30, 0x81, 0xa2, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04, 0x41, 0x04, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x48, 0x3a, 0xda, 0x77, 0x26, 0xa3, 0xc4, 0x65, 0x5d, 0xa4, 0xfb, 0xfc, 0x0e, 0x11, 0x08, 0xa8, 0xfd, 0x17, 0xb4, 0x48, 0xa6, 0x85, 0x54, 0x19, 0x9c, 0x47, 0xd0, 0x8f, 0xfb, 0x10, 0xd4, 0xb8, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xba, 0xae, 0xdc, 0xe6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5e, 0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x44, 0x03, 0x42, 0x00,
	// public key
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);

	exports.privateKeyExport = function (privateKey, publicKey, compressed) {
	  var result = Buffer.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED);
	  privateKey.copy(result, compressed ? 8 : 9);
	  publicKey.copy(result, compressed ? 181 : 214);
	  return result;
	};

	exports.privateKeyImport = function (privateKey) {
	  var length = privateKey.length;

	  // sequence header
	  var index = 0;
	  if (length < index + 1 || privateKey[index] !== 0x30) return null;
	  index += 1;

	  // sequence length constructor
	  if (length < index + 1 || !(privateKey[index] & 0x80)) return null;

	  var lenb = privateKey[index] & 0x7f;
	  index += 1;
	  if (lenb < 1 || lenb > 2) return null;
	  if (length < index + lenb) return null;

	  // sequence length
	  var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0);
	  index += lenb;
	  if (length < index + len) return null;

	  // sequence element 0: version number (=1)
	  if (length < index + 3 || privateKey[index] !== 0x02 || privateKey[index + 1] !== 0x01 || privateKey[index + 2] !== 0x01) {
	    return null;
	  }
	  index += 3;

	  // sequence element 1: octet string, up to 32 bytes
	  if (length < index + 2 || privateKey[index] !== 0x04 || privateKey[index + 1] > 0x20 || length < index + 2 + privateKey[index + 1]) {
	    return null;
	  }

	  return privateKey.slice(index + 2, index + 2 + privateKey[index + 1]);
	};

	exports.signatureImportLax = function (signature) {
	  var r = Buffer.alloc(32, 0);
	  var s = Buffer.alloc(32, 0);

	  var length = signature.length;
	  var index = 0;

	  // sequence tag byte
	  if (signature[index++] !== 0x30) {
	    return null;
	  }

	  // sequence length byte
	  var lenbyte = signature[index++];
	  if (lenbyte & 0x80) {
	    index += lenbyte - 0x80;
	    if (index > length) {
	      return null;
	    }
	  }

	  // sequence tag byte for r
	  if (signature[index++] !== 0x02) {
	    return null;
	  }

	  // length for r
	  var rlen = signature[index++];
	  if (rlen & 0x80) {
	    lenbyte = rlen - 0x80;
	    if (index + lenbyte > length) {
	      return null;
	    }
	    for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1) {}
	    for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1) {
	      rlen = (rlen << 8) + signature[index];
	    }
	  }
	  if (rlen > length - index) {
	    return null;
	  }
	  var rindex = index;
	  index += rlen;

	  // sequence tag byte for s
	  if (signature[index++] !== 0x02) {
	    return null;
	  }

	  // length for s
	  var slen = signature[index++];
	  if (slen & 0x80) {
	    lenbyte = slen - 0x80;
	    if (index + lenbyte > length) {
	      return null;
	    }
	    for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1) {}
	    for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1) {
	      slen = (slen << 8) + signature[index];
	    }
	  }
	  if (slen > length - index) {
	    return null;
	  }
	  var sindex = index;
	  index += slen;

	  // ignore leading zeros in r
	  for (; rlen > 0 && signature[rindex] === 0x00; rlen -= 1, rindex += 1) {}
	  // copy r value
	  if (rlen > 32) {
	    return null;
	  }
	  var rvalue = signature.slice(rindex, rindex + rlen);
	  rvalue.copy(r, 32 - rvalue.length);

	  // ignore leading zeros in s
	  for (; slen > 0 && signature[sindex] === 0x00; slen -= 1, sindex += 1) {}
	  // copy s value
	  if (slen > 32) {
	    return null;
	  }
	  var svalue = signature.slice(sindex, sindex + slen);
	  svalue.copy(s, 32 - svalue.length);

	  return { r: r, s: s };
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

	// This file is imported from secp256k1 v3
	// https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE

	var BN = __webpack_require__(4);
	var EC = __webpack_require__(35).ec;

	var ec = new EC('secp256k1');
	var ecparams = ec.curve;

	exports.privateKeyExport = function (privateKey, compressed) {
	  var d = new BN(privateKey);
	  if (d.ucmp(ecparams.n) >= 0) {
	    throw new Error('couldn\'t export to DER format');
	  }

	  var point = ec.g.mul(d);
	  return toPublicKey(point.getX(), point.getY(), compressed);
	};

	exports.privateKeyModInverse = function (privateKey) {
	  var bn = new BN(privateKey);
	  if (bn.ucmp(ecparams.n) >= 0 || bn.isZero()) {
	    throw new Error('private key range is invalid');
	  }

	  return bn.invm(ecparams.n).toArrayLike(Buffer, 'be', 32);
	};

	exports.signatureImport = function (sigObj) {
	  var r = new BN(sigObj.r);
	  if (r.ucmp(ecparams.n) >= 0) {
	    r = new BN(0);
	  }

	  var s = new BN(sigObj.s);
	  if (s.ucmp(ecparams.n) >= 0) {
	    s = new BN(0);
	  }

	  return Buffer.concat([r.toArrayLike(Buffer, 'be', 32), s.toArrayLike(Buffer, 'be', 32)]);
	};

	exports.ecdhUnsafe = function (publicKey, privateKey, compressed) {
	  var point = ec.keyFromPublic(publicKey);

	  var scalar = new BN(privateKey);
	  if (scalar.ucmp(ecparams.n) >= 0 || scalar.isZero()) {
	    throw new Error('scalar was invalid (zero or overflow)');
	  }

	  var shared = point.pub.mul(scalar);
	  return toPublicKey(shared.getX(), shared.getY(), compressed);
	};

	var toPublicKey = function toPublicKey(x, y, compressed) {
	  var publicKey = void 0;

	  if (compressed) {
	    publicKey = Buffer.alloc(33);
	    publicKey[0] = y.isOdd() ? 0x03 : 0x02;
	    x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);
	  } else {
	    publicKey = Buffer.alloc(65);
	    publicKey[0] = 0x04;
	    x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);
	    y.toArrayLike(Buffer, 'be', 32).copy(publicKey, 33);
	  }

	  return publicKey;
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	function createHashFunction(hashConstructor) {
	    return function (msg) {
	        var hash = hashConstructor();
	        hash.update(msg);
	        return Buffer.from(hash.digest());
	    };
	}
	exports.createHashFunction = createHashFunction;
	//# sourceMappingURL=hash-utils.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var randombytes = __webpack_require__(91);
	function getRandomBytes(bytes) {
	    return new Promise(function (resolve, reject) {
	        randombytes(bytes, function (err, resp) {
	            if (err) {
	                reject(err);
	                return;
	            }
	            resolve(resp);
	        });
	    });
	}
	exports.getRandomBytes = getRandomBytes;
	function getRandomBytesSync(bytes) {
	    return randombytes(bytes);
	}
	exports.getRandomBytesSync = getRandomBytesSync;
	//# sourceMappingURL=random.js.map

/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(282)


/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/* eslint-disable no-useless-escape */
	const utils = __webpack_require__(285)
	const BN = __webpack_require__(4)

	var ABI = function () {
	}

	// Convert from short to canonical names
	// FIXME: optimise or make this nicer?
	function elementaryName (name) {
	  if (name.startsWith('int[')) {
	    return 'int256' + name.slice(3)
	  } else if (name === 'int') {
	    return 'int256'
	  } else if (name.startsWith('uint[')) {
	    return 'uint256' + name.slice(4)
	  } else if (name === 'uint') {
	    return 'uint256'
	  } else if (name.startsWith('fixed[')) {
	    return 'fixed128x128' + name.slice(5)
	  } else if (name === 'fixed') {
	    return 'fixed128x128'
	  } else if (name.startsWith('ufixed[')) {
	    return 'ufixed128x128' + name.slice(6)
	  } else if (name === 'ufixed') {
	    return 'ufixed128x128'
	  }
	  return name
	}

	ABI.eventID = function (name, types) {
	  // FIXME: use node.js util.format?
	  var sig = name + '(' + types.map(elementaryName).join(',') + ')'
	  return utils.keccak256(Buffer.from(sig))
	}

	ABI.methodID = function (name, types) {
	  return ABI.eventID(name, types).slice(0, 4)
	}

	// Parse N from type<N>
	function parseTypeN (type) {
	  return parseInt(/^\D+(\d+)$/.exec(type)[1], 10)
	}

	// Parse N,M from type<N>x<M>
	function parseTypeNxM (type) {
	  var tmp = /^\D+(\d+)x(\d+)$/.exec(type)
	  return [ parseInt(tmp[1], 10), parseInt(tmp[2], 10) ]
	}

	// Parse N in type[<N>] where "type" can itself be an array type.
	function parseTypeArray (type) {
	  var tmp = type.match(/(.*)\[(.*?)\]$/)
	  if (tmp) {
	    return tmp[2] === '' ? 'dynamic' : parseInt(tmp[2], 10)
	  }
	  return null
	}

	function parseNumber (arg) {
	  var type = typeof arg
	  if (type === 'string') {
	    if (utils.isHexPrefixed(arg)) {
	      return new BN(utils.stripHexPrefix(arg), 16)
	    } else {
	      return new BN(arg, 10)
	    }
	  } else if (type === 'number') {
	    return new BN(arg)
	  } else if (arg.toArray) {
	    // assume this is a BN for the moment, replace with BN.isBN soon
	    return arg
	  } else {
	    throw new Error('Argument is not a number')
	  }
	}

	// someMethod(bytes,uint)
	// someMethod(bytes,uint):(boolean)
	function parseSignature (sig) {
	  var tmp = /^(\w+)\((.*)\)$/.exec(sig)

	  if (tmp.length !== 3) {
	    throw new Error('Invalid method signature')
	  }

	  var args = /^(.+)\):\((.+)$/.exec(tmp[2])

	  if (args !== null && args.length === 3) {
	    return {
	      method: tmp[1],
	      args: args[1].split(','),
	      retargs: args[2].split(',')
	    }
	  } else {
	    var params = tmp[2].split(',')
	    if (params.length === 1 && params[0] === '') {
	      // Special-case (possibly naive) fixup for functions that take no arguments.
	      // TODO: special cases are always bad, but this makes the function return
	      // match what the calling functions expect
	      params = []
	    }
	    return {
	      method: tmp[1],
	      args: params
	    }
	  }
	}

	// Encodes a single item (can be dynamic array)
	// @returns: Buffer
	function encodeSingle (type, arg) {
	  var size, num, ret, i

	  if (type === 'address') {
	    return encodeSingle('uint160', parseNumber(arg))
	  } else if (type === 'bool') {
	    return encodeSingle('uint8', arg ? 1 : 0)
	  } else if (type === 'string') {
	    return encodeSingle('bytes', Buffer.from(arg, 'utf8'))
	  } else if (isArray(type)) {
	    // this part handles fixed-length ([2]) and variable length ([]) arrays
	    // NOTE: we catch here all calls to arrays, that simplifies the rest
	    if (typeof arg.length === 'undefined') {
	      throw new Error('Not an array?')
	    }
	    size = parseTypeArray(type)
	    if (size !== 'dynamic' && size !== 0 && arg.length > size) {
	      throw new Error('Elements exceed array size: ' + size)
	    }
	    ret = []
	    type = type.slice(0, type.lastIndexOf('['))
	    if (typeof arg === 'string') {
	      arg = JSON.parse(arg)
	    }
	    for (i in arg) {
	      ret.push(encodeSingle(type, arg[i]))
	    }
	    if (size === 'dynamic') {
	      var length = encodeSingle('uint256', arg.length)
	      ret.unshift(length)
	    }
	    return Buffer.concat(ret)
	  } else if (type === 'bytes') {
	    arg = Buffer.from(arg)

	    ret = Buffer.concat([ encodeSingle('uint256', arg.length), arg ])

	    if ((arg.length % 32) !== 0) {
	      ret = Buffer.concat([ ret, utils.zeros(32 - (arg.length % 32)) ])
	    }

	    return ret
	  } else if (type.startsWith('bytes')) {
	    size = parseTypeN(type)
	    if (size < 1 || size > 32) {
	      throw new Error('Invalid bytes<N> width: ' + size)
	    }

	    return utils.setLengthRight(arg, 32)
	  } else if (type.startsWith('uint')) {
	    size = parseTypeN(type)
	    if ((size % 8) || (size < 8) || (size > 256)) {
	      throw new Error('Invalid uint<N> width: ' + size)
	    }

	    num = parseNumber(arg)
	    if (num.bitLength() > size) {
	      throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength())
	    }

	    if (num < 0) {
	      throw new Error('Supplied uint is negative')
	    }

	    return num.toArrayLike(Buffer, 'be', 32)
	  } else if (type.startsWith('int')) {
	    size = parseTypeN(type)
	    if ((size % 8) || (size < 8) || (size > 256)) {
	      throw new Error('Invalid int<N> width: ' + size)
	    }

	    num = parseNumber(arg)
	    if (num.bitLength() > size) {
	      throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength())
	    }

	    return num.toTwos(256).toArrayLike(Buffer, 'be', 32)
	  } else if (type.startsWith('ufixed')) {
	    size = parseTypeNxM(type)

	    num = parseNumber(arg)

	    if (num < 0) {
	      throw new Error('Supplied ufixed is negative')
	    }

	    return encodeSingle('uint256', num.mul(new BN(2).pow(new BN(size[1]))))
	  } else if (type.startsWith('fixed')) {
	    size = parseTypeNxM(type)

	    return encodeSingle('int256', parseNumber(arg).mul(new BN(2).pow(new BN(size[1]))))
	  }

	  throw new Error('Unsupported or invalid type: ' + type)
	}

	// Decodes a single item (can be dynamic array)
	// @returns: array
	// FIXME: this method will need a lot of attention at checking limits and validation
	function decodeSingle (parsedType, data, offset) {
	  if (typeof parsedType === 'string') {
	    parsedType = parseType(parsedType)
	  }
	  var size, num, ret, i

	  if (parsedType.name === 'address') {
	    return decodeSingle(parsedType.rawType, data, offset).toArrayLike(Buffer, 'be', 20).toString('hex')
	  } else if (parsedType.name === 'bool') {
	    return decodeSingle(parsedType.rawType, data, offset).toString() === new BN(1).toString()
	  } else if (parsedType.name === 'string') {
	    var bytes = decodeSingle(parsedType.rawType, data, offset)
	    return Buffer.from(bytes, 'utf8').toString()
	  } else if (parsedType.isArray) {
	    // this part handles fixed-length arrays ([2]) and variable length ([]) arrays
	    // NOTE: we catch here all calls to arrays, that simplifies the rest
	    ret = []
	    size = parsedType.size

	    if (parsedType.size === 'dynamic') {
	      offset = decodeSingle('uint256', data, offset).toNumber()
	      size = decodeSingle('uint256', data, offset).toNumber()
	      offset = offset + 32
	    }
	    for (i = 0; i < size; i++) {
	      var decoded = decodeSingle(parsedType.subArray, data, offset)
	      ret.push(decoded)
	      offset += parsedType.subArray.memoryUsage
	    }
	    return ret
	  } else if (parsedType.name === 'bytes') {
	    offset = decodeSingle('uint256', data, offset).toNumber()
	    size = decodeSingle('uint256', data, offset).toNumber()
	    return data.slice(offset + 32, offset + 32 + size)
	  } else if (parsedType.name.startsWith('bytes')) {
	    return data.slice(offset, offset + parsedType.size)
	  } else if (parsedType.name.startsWith('uint')) {
	    num = new BN(data.slice(offset, offset + 32), 16, 'be')
	    if (num.bitLength() > parsedType.size) {
	      throw new Error('Decoded int exceeds width: ' + parsedType.size + ' vs ' + num.bitLength())
	    }
	    return num
	  } else if (parsedType.name.startsWith('int')) {
	    num = new BN(data.slice(offset, offset + 32), 16, 'be').fromTwos(256)
	    if (num.bitLength() > parsedType.size) {
	      throw new Error('Decoded uint exceeds width: ' + parsedType.size + ' vs ' + num.bitLength())
	    }

	    return num
	  } else if (parsedType.name.startsWith('ufixed')) {
	    size = new BN(2).pow(new BN(parsedType.size[1]))
	    num = decodeSingle('uint256', data, offset)
	    if (!num.mod(size).isZero()) {
	      throw new Error('Decimals not supported yet')
	    }
	    return num.div(size)
	  } else if (parsedType.name.startsWith('fixed')) {
	    size = new BN(2).pow(new BN(parsedType.size[1]))
	    num = decodeSingle('int256', data, offset)
	    if (!num.mod(size).isZero()) {
	      throw new Error('Decimals not supported yet')
	    }
	    return num.div(size)
	  }
	  throw new Error('Unsupported or invalid type: ' + parsedType.name)
	}

	// Parse the given type
	// @returns: {} containing the type itself, memory usage and (including size and subArray if applicable)
	function parseType (type) {
	  var size
	  var ret
	  if (isArray(type)) {
	    size = parseTypeArray(type)
	    var subArray = type.slice(0, type.lastIndexOf('['))
	    subArray = parseType(subArray)
	    ret = {
	      isArray: true,
	      name: type,
	      size: size,
	      memoryUsage: size === 'dynamic' ? 32 : subArray.memoryUsage * size,
	      subArray: subArray
	    }
	    return ret
	  } else {
	    var rawType
	    switch (type) {
	      case 'address':
	        rawType = 'uint160'
	        break
	      case 'bool':
	        rawType = 'uint8'
	        break
	      case 'string':
	        rawType = 'bytes'
	        break
	    }
	    ret = {
	      rawType: rawType,
	      name: type,
	      memoryUsage: 32
	    }

	    if ((type.startsWith('bytes') && type !== 'bytes') || type.startsWith('uint') || type.startsWith('int')) {
	      ret.size = parseTypeN(type)
	    } else if (type.startsWith('ufixed') || type.startsWith('fixed')) {
	      ret.size = parseTypeNxM(type)
	    }

	    if (type.startsWith('bytes') && type !== 'bytes' && (ret.size < 1 || ret.size > 32)) {
	      throw new Error('Invalid bytes<N> width: ' + ret.size)
	    }
	    if ((type.startsWith('uint') || type.startsWith('int')) && (ret.size % 8 || ret.size < 8 || ret.size > 256)) {
	      throw new Error('Invalid int/uint<N> width: ' + ret.size)
	    }
	    return ret
	  }
	}

	// Is a type dynamic?
	function isDynamic (type) {
	  // FIXME: handle all types? I don't think anything is missing now
	  return (type === 'string') || (type === 'bytes') || (parseTypeArray(type) === 'dynamic')
	}

	// Is a type an array?
	function isArray (type) {
	  return type.lastIndexOf(']') === type.length - 1
	}

	// Encode a method/event with arguments
	// @types an array of string type names
	// @args  an array of the appropriate values
	ABI.rawEncode = function (types, values) {
	  var output = []
	  var data = []

	  var headLength = 0

	  types.forEach(function (type) {
	    if (isArray(type)) {
	      var size = parseTypeArray(type)

	      if (size !== 'dynamic') {
	        headLength += 32 * size
	      } else {
	        headLength += 32
	      }
	    } else {
	      headLength += 32
	    }
	  })

	  for (var i = 0; i < types.length; i++) {
	    var type = elementaryName(types[i])
	    var value = values[i]
	    var cur = encodeSingle(type, value)

	    // Use the head/tail method for storing dynamic data
	    if (isDynamic(type)) {
	      output.push(encodeSingle('uint256', headLength))
	      data.push(cur)
	      headLength += cur.length
	    } else {
	      output.push(cur)
	    }
	  }

	  return Buffer.concat(output.concat(data))
	}

	ABI.rawDecode = function (types, data) {
	  var ret = []
	  data = Buffer.from(data)
	  var offset = 0
	  for (var i = 0; i < types.length; i++) {
	    var type = elementaryName(types[i])
	    var parsed = parseType(type, data, offset)
	    var decoded = decodeSingle(parsed, data, offset)
	    offset += parsed.memoryUsage
	    ret.push(decoded)
	  }
	  return ret
	}

	ABI.simpleEncode = function (method) {
	  var args = Array.prototype.slice.call(arguments).slice(1)
	  var sig = parseSignature(method)

	  // FIXME: validate/convert arguments
	  if (args.length !== sig.args.length) {
	    throw new Error('Argument count mismatch')
	  }

	  return Buffer.concat([ ABI.methodID(sig.method, sig.args), ABI.rawEncode(sig.args, args) ])
	}

	ABI.simpleDecode = function (method, data) {
	  var sig = parseSignature(method)

	  // FIXME: validate/convert arguments
	  if (!sig.retargs) {
	    throw new Error('No return values in method')
	  }

	  return ABI.rawDecode(sig.retargs, data)
	}

	function stringify (type, value) {
	  if (type.startsWith('address') || type.startsWith('bytes')) {
	    return '0x' + value.toString('hex')
	  } else {
	    return value.toString()
	  }
	}

	ABI.stringify = function (types, values) {
	  var ret = []

	  for (var i in types) {
	    var type = types[i]
	    var value = values[i]

	    // if it is an array type, concat the items
	    if (/^[^\[]+\[.*\]$/.test(type)) {
	      value = value.map(function (item) {
	        return stringify(type, item)
	      }).join(', ')
	    } else {
	      value = stringify(type, value)
	    }

	    ret.push(value)
	  }

	  return ret
	}

	ABI.solidityHexValue = function (type, value, bitsize) {
	  // pass in bitsize = null if use default bitsize
	  var size, num
	  if (isArray(type)) {
	    var subType = type.replace(/\[.*?\]/, '')
	    if (!isArray(subType)) {
	      var arraySize = parseTypeArray(type)
	      if (arraySize !== 'dynamic' && arraySize !== 0 && value.length > arraySize) {
	        throw new Error('Elements exceed array size: ' + arraySize)
	      }
	    }
	    var arrayValues = value.map(function (v) {
	      return ABI.solidityHexValue(subType, v, 256)
	    })
	    return Buffer.concat(arrayValues)
	  } else if (type === 'bytes') {
	    return value
	  } else if (type === 'string') {
	    return Buffer.from(value, 'utf8')
	  } else if (type === 'bool') {
	    bitsize = bitsize || 8
	    var padding = Array((bitsize) / 4).join('0')
	    return Buffer.from(value ? padding + '1' : padding + '0', 'hex')
	  } else if (type === 'address') {
	    var bytesize = 20
	    if (bitsize) {
	      bytesize = bitsize / 8
	    }
	    return utils.setLengthLeft(value, bytesize)
	  } else if (type.startsWith('bytes')) {
	    size = parseTypeN(type)
	    if (size < 1 || size > 32) {
	      throw new Error('Invalid bytes<N> width: ' + size)
	    }

	    return utils.setLengthRight(value, size)
	  } else if (type.startsWith('uint')) {
	    size = parseTypeN(type)
	    if ((size % 8) || (size < 8) || (size > 256)) {
	      throw new Error('Invalid uint<N> width: ' + size)
	    }

	    num = parseNumber(value)
	    if (num.bitLength() > size) {
	      throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength())
	    }

	    bitsize = bitsize || size
	    return num.toArrayLike(Buffer, 'be', bitsize / 8)
	  } else if (type.startsWith('int')) {
	    size = parseTypeN(type)
	    if ((size % 8) || (size < 8) || (size > 256)) {
	      throw new Error('Invalid int<N> width: ' + size)
	    }

	    num = parseNumber(value)
	    if (num.bitLength() > size) {
	      throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength())
	    }

	    bitsize = bitsize || size
	    return num.toTwos(size).toArrayLike(Buffer, 'be', bitsize / 8)
	  } else {
	    // FIXME: support all other types
	    throw new Error('Unsupported or invalid type: ' + type)
	  }
	}

	ABI.solidityPack = function (types, values) {
	  if (types.length !== values.length) {
	    throw new Error('Number of types are not matching the values')
	  }

	  var ret = []

	  for (var i = 0; i < types.length; i++) {
	    var type = elementaryName(types[i])
	    var value = values[i]
	    ret.push(ABI.solidityHexValue(type, value, null))
	  }

	  return Buffer.concat(ret)
	}

	ABI.soliditySHA3 = function (types, values) {
	  return utils.keccak256(ABI.solidityPack(types, values))
	}

	ABI.soliditySHA256 = function (types, values) {
	  return utils.sha256(ABI.solidityPack(types, values))
	}

	ABI.solidityRIPEMD160 = function (types, values) {
	  return utils.ripemd160(ABI.solidityPack(types, values), true)
	}

	// Serpent's users are familiar with this encoding
	// - s: string
	// - b: bytes
	// - b<N>: bytes<N>
	// - i: int256
	// - a: int256[]

	function isNumeric (c) {
	  // FIXME: is this correct? Seems to work
	  return (c >= '0') && (c <= '9')
	}

	// For a "documentation" refer to https://github.com/ethereum/serpent/blob/develop/preprocess.cpp
	ABI.fromSerpent = function (sig) {
	  var ret = []
	  for (var i = 0; i < sig.length; i++) {
	    var type = sig[i]
	    if (type === 's') {
	      ret.push('bytes')
	    } else if (type === 'b') {
	      var tmp = 'bytes'
	      var j = i + 1
	      while ((j < sig.length) && isNumeric(sig[j])) {
	        tmp += sig[j] - '0'
	        j++
	      }
	      i = j - 1
	      ret.push(tmp)
	    } else if (type === 'i') {
	      ret.push('int256')
	    } else if (type === 'a') {
	      ret.push('int256[]')
	    } else {
	      throw new Error('Unsupported or invalid type: ' + type)
	    }
	  }
	  return ret
	}

	ABI.toSerpent = function (types) {
	  var ret = []
	  for (var i = 0; i < types.length; i++) {
	    var type = types[i]
	    if (type === 'bytes') {
	      ret.push('s')
	    } else if (type.startsWith('bytes')) {
	      ret.push('b' + parseTypeN(type))
	    } else if (type === 'int256') {
	      ret.push('i')
	    } else if (type === 'int256[]') {
	      ret.push('a')
	    } else {
	      throw new Error('Unsupported or invalid type: ' + type)
	    }
	  }
	  return ret.join('')
	}

	module.exports = ABI

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.importPublic = exports.privateToPublic = exports.privateToAddress = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.isPrecompiled = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isZeroAddress = exports.isValidAddress = exports.zeroAddress = void 0;
	var assert = __webpack_require__(5);
	var ethjsUtil = __webpack_require__(18);
	var secp256k1 = __webpack_require__(85);
	var BN = __webpack_require__(4);
	var bytes_1 = __webpack_require__(47);
	var hash_1 = __webpack_require__(84);
	/**
	 * Returns a zero address.
	 */
	exports.zeroAddress = function () {
	    var addressLength = 20;
	    var addr = bytes_1.zeros(addressLength);
	    return bytes_1.bufferToHex(addr);
	};
	/**
	 * Checks if the address is a valid. Accepts checksummed addresses too.
	 */
	exports.isValidAddress = function (address) {
	    return /^0x[0-9a-fA-F]{40}$/.test(address);
	};
	/**
	 * Checks if a given address is a zero address.
	 */
	exports.isZeroAddress = function (address) {
	    var zeroAddr = exports.zeroAddress();
	    return zeroAddr === bytes_1.addHexPrefix(address);
	};
	/**
	 * Returns a checksummed address.
	 *
	 * If a eip1191ChainId is provided, the chainId will be included in the checksum calculation. This
	 * has the effect of checksummed addresses for one chain having invalid checksums for others.
	 * For more details, consult EIP-1191.
	 *
	 * WARNING: Checksums with and without the chainId will differ. As of 2019-06-26, the most commonly
	 * used variation in Ethereum was without the chainId. This may change in the future.
	 */
	exports.toChecksumAddress = function (address, eip1191ChainId) {
	    address = ethjsUtil.stripHexPrefix(address).toLowerCase();
	    var prefix = eip1191ChainId !== undefined ? eip1191ChainId.toString() + '0x' : '';
	    var hash = hash_1.keccak(prefix + address).toString('hex');
	    var ret = '0x';
	    for (var i = 0; i < address.length; i++) {
	        if (parseInt(hash[i], 16) >= 8) {
	            ret += address[i].toUpperCase();
	        }
	        else {
	            ret += address[i];
	        }
	    }
	    return ret;
	};
	/**
	 * Checks if the address is a valid checksummed address.
	 *
	 * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.
	 */
	exports.isValidChecksumAddress = function (address, eip1191ChainId) {
	    return exports.isValidAddress(address) && exports.toChecksumAddress(address, eip1191ChainId) === address;
	};
	/**
	 * Generates an address of a newly created contract.
	 * @param from The address which is creating this new address
	 * @param nonce The nonce of the from account
	 */
	exports.generateAddress = function (from, nonce) {
	    from = bytes_1.toBuffer(from);
	    var nonceBN = new BN(nonce);
	    if (nonceBN.isZero()) {
	        // in RLP we want to encode null in the case of zero nonce
	        // read the RLP documentation for an answer if you dare
	        return hash_1.rlphash([from, null]).slice(-20);
	    }
	    // Only take the lower 160bits of the hash
	    return hash_1.rlphash([from, Buffer.from(nonceBN.toArray())]).slice(-20);
	};
	/**
	 * Generates an address for a contract created using CREATE2.
	 * @param from The address which is creating this new address
	 * @param salt A salt
	 * @param initCode The init code of the contract being created
	 */
	exports.generateAddress2 = function (from, salt, initCode) {
	    var fromBuf = bytes_1.toBuffer(from);
	    var saltBuf = bytes_1.toBuffer(salt);
	    var initCodeBuf = bytes_1.toBuffer(initCode);
	    assert(fromBuf.length === 20);
	    assert(saltBuf.length === 32);
	    var address = hash_1.keccak256(Buffer.concat([Buffer.from('ff', 'hex'), fromBuf, saltBuf, hash_1.keccak256(initCodeBuf)]));
	    return address.slice(-20);
	};
	/**
	 * Returns true if the supplied address belongs to a precompiled account (Byzantium).
	 */
	exports.isPrecompiled = function (address) {
	    var a = bytes_1.unpad(address);
	    return a.length === 1 && a[0] >= 1 && a[0] <= 8;
	};
	/**
	 * Checks if the private key satisfies the rules of the curve secp256k1.
	 */
	exports.isValidPrivate = function (privateKey) {
	    return secp256k1.privateKeyVerify(privateKey);
	};
	/**
	 * Checks if the public key satisfies the rules of the curve secp256k1
	 * and the requirements of Ethereum.
	 * @param publicKey The two points of an uncompressed key, unless sanitize is enabled
	 * @param sanitize Accept public keys in other formats
	 */
	exports.isValidPublic = function (publicKey, sanitize) {
	    if (sanitize === void 0) { sanitize = false; }
	    if (publicKey.length === 64) {
	        // Convert to SEC1 for secp256k1
	        return secp256k1.publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]));
	    }
	    if (!sanitize) {
	        return false;
	    }
	    return secp256k1.publicKeyVerify(publicKey);
	};
	/**
	 * Returns the ethereum address of a given public key.
	 * Accepts "Ethereum public keys" and SEC1 encoded keys.
	 * @param pubKey The two points of an uncompressed key, unless sanitize is enabled
	 * @param sanitize Accept public keys in other formats
	 */
	exports.pubToAddress = function (pubKey, sanitize) {
	    if (sanitize === void 0) { sanitize = false; }
	    pubKey = bytes_1.toBuffer(pubKey);
	    if (sanitize && pubKey.length !== 64) {
	        pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);
	    }
	    assert(pubKey.length === 64);
	    // Only take the lower 160bits of the hash
	    return hash_1.keccak(pubKey).slice(-20);
	};
	exports.publicToAddress = exports.pubToAddress;
	/**
	 * Returns the ethereum address of a given private key.
	 * @param privateKey A private key must be 256 bits wide
	 */
	exports.privateToAddress = function (privateKey) {
	    return exports.publicToAddress(exports.privateToPublic(privateKey));
	};
	/**
	 * Returns the ethereum public key of a given private key.
	 * @param privateKey A private key must be 256 bits wide
	 */
	exports.privateToPublic = function (privateKey) {
	    privateKey = bytes_1.toBuffer(privateKey);
	    // skip the type flag and use the X, Y points
	    return secp256k1.publicKeyCreate(privateKey, false).slice(1);
	};
	/**
	 * Converts a public key to the Ethereum format.
	 */
	exports.importPublic = function (publicKey) {
	    publicKey = bytes_1.toBuffer(publicKey);
	    if (publicKey.length !== 64) {
	        publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);
	    }
	    return publicKey;
	};
	//# sourceMappingURL=account.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.KECCAK256_RLP = exports.KECCAK256_RLP_S = exports.KECCAK256_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY_S = exports.KECCAK256_NULL = exports.KECCAK256_NULL_S = exports.TWO_POW256 = exports.MAX_INTEGER = void 0;
	var BN = __webpack_require__(4);
	/**
	 * The max integer that this VM can handle
	 */
	exports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);
	/**
	 * 2^256
	 */
	exports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16);
	/**
	 * Keccak-256 hash of null
	 */
	exports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
	/**
	 * Keccak-256 hash of null
	 */
	exports.KECCAK256_NULL = Buffer.from(exports.KECCAK256_NULL_S, 'hex');
	/**
	 * Keccak-256 of an RLP of an empty array
	 */
	exports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';
	/**
	 * Keccak-256 of an RLP of an empty array
	 */
	exports.KECCAK256_RLP_ARRAY = Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');
	/**
	 * Keccak-256 hash of the RLP of null
	 */
	exports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';
	/**
	 * Keccak-256 hash of the RLP of null
	 */
	exports.KECCAK256_RLP = Buffer.from(exports.KECCAK256_RLP_S, 'hex');
	//# sourceMappingURL=constants.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (this && this.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.secp256k1 = exports.rlp = exports.BN = void 0;
	var secp256k1 = __webpack_require__(85);
	exports.secp256k1 = secp256k1;
	var ethjsUtil = __webpack_require__(18);
	var BN = __webpack_require__(4);
	exports.BN = BN;
	var rlp = __webpack_require__(22);
	exports.rlp = rlp;
	Object.assign(exports, ethjsUtil);
	/**
	 * Constants
	 */
	__exportStar(__webpack_require__(284), exports);
	/**
	 * Public-key cryptography (secp256k1) and addresses
	 */
	__exportStar(__webpack_require__(283), exports);
	/**
	 * Hash functions
	 */
	__exportStar(__webpack_require__(84), exports);
	/**
	 * ECDSA signature
	 */
	__exportStar(__webpack_require__(289), exports);
	/**
	 * Utilities for manipulating Buffers, byte arrays, etc.
	 */
	__exportStar(__webpack_require__(47), exports);
	/**
	 * Function for definining properties on an object
	 */
	__exportStar(__webpack_require__(286), exports);
	//# sourceMappingURL=index.js.map

/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.defineProperties = void 0;
	var assert = __webpack_require__(5);
	var ethjsUtil = __webpack_require__(18);
	var rlp = __webpack_require__(22);
	var bytes_1 = __webpack_require__(47);
	/**
	 * Defines properties on a `Object`. It make the assumption that underlying data is binary.
	 * @param self the `Object` to define properties on
	 * @param fields an array fields to define. Fields can contain:
	 * * `name` - the name of the properties
	 * * `length` - the number of bytes the field can have
	 * * `allowLess` - if the field can be less than the length
	 * * `allowEmpty`
	 * @param data data to be validated against the definitions
	 * @deprecated
	 */
	exports.defineProperties = function (self, fields, data) {
	    self.raw = [];
	    self._fields = [];
	    // attach the `toJSON`
	    self.toJSON = function (label) {
	        if (label === void 0) { label = false; }
	        if (label) {
	            var obj_1 = {};
	            self._fields.forEach(function (field) {
	                obj_1[field] = "0x" + self[field].toString('hex');
	            });
	            return obj_1;
	        }
	        return bytes_1.baToJSON(self.raw);
	    };
	    self.serialize = function serialize() {
	        return rlp.encode(self.raw);
	    };
	    fields.forEach(function (field, i) {
	        self._fields.push(field.name);
	        function getter() {
	            return self.raw[i];
	        }
	        function setter(v) {
	            v = bytes_1.toBuffer(v);
	            if (v.toString('hex') === '00' && !field.allowZero) {
	                v = Buffer.allocUnsafe(0);
	            }
	            if (field.allowLess && field.length) {
	                v = bytes_1.stripZeros(v);
	                assert(field.length >= v.length, "The field " + field.name + " must not have more " + field.length + " bytes");
	            }
	            else if (!(field.allowZero && v.length === 0) && field.length) {
	                assert(field.length === v.length, "The field " + field.name + " must have byte length of " + field.length);
	            }
	            self.raw[i] = v;
	        }
	        Object.defineProperty(self, field.name, {
	            enumerable: true,
	            configurable: true,
	            get: getter,
	            set: setter,
	        });
	        if (field.default) {
	            self[field.name] = field.default;
	        }
	        // attach alias
	        if (field.alias) {
	            Object.defineProperty(self, field.alias, {
	                enumerable: false,
	                configurable: true,
	                set: setter,
	                get: getter,
	            });
	        }
	    });
	    // if the constuctor is passed data
	    if (data) {
	        if (typeof data === 'string') {
	            data = Buffer.from(ethjsUtil.stripHexPrefix(data), 'hex');
	        }
	        if (Buffer.isBuffer(data)) {
	            data = rlp.decode(data);
	        }
	        if (Array.isArray(data)) {
	            if (data.length > self._fields.length) {
	                throw new Error('wrong number of fields in data');
	            }
	            // make sure all the items are buffers
	            data.forEach(function (d, i) {
	                self[self._fields[i]] = bytes_1.toBuffer(d);
	            });
	        }
	        else if (typeof data === 'object') {
	            var keys_1 = Object.keys(data);
	            fields.forEach(function (field) {
	                if (keys_1.indexOf(field.name) !== -1)
	                    self[field.name] = data[field.name];
	                if (keys_1.indexOf(field.alias) !== -1)
	                    self[field.alias] = data[field.alias];
	            });
	        }
	        else {
	            throw new Error('invalid data');
	        }
	    }
	};
	//# sourceMappingURL=object.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict";
	// This file is imported from secp256k1 v3
	// https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE
	Object.defineProperty(exports, "__esModule", { value: true });
	var EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer.from([
	    // begin
	    0x30,
	    0x81,
	    0xd3,
	    0x02,
	    0x01,
	    0x01,
	    0x04,
	    0x20,
	    // private key
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    // middle
	    0xa0,
	    0x81,
	    0x85,
	    0x30,
	    0x81,
	    0x82,
	    0x02,
	    0x01,
	    0x01,
	    0x30,
	    0x2c,
	    0x06,
	    0x07,
	    0x2a,
	    0x86,
	    0x48,
	    0xce,
	    0x3d,
	    0x01,
	    0x01,
	    0x02,
	    0x21,
	    0x00,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xfe,
	    0xff,
	    0xff,
	    0xfc,
	    0x2f,
	    0x30,
	    0x06,
	    0x04,
	    0x01,
	    0x00,
	    0x04,
	    0x01,
	    0x07,
	    0x04,
	    0x21,
	    0x02,
	    0x79,
	    0xbe,
	    0x66,
	    0x7e,
	    0xf9,
	    0xdc,
	    0xbb,
	    0xac,
	    0x55,
	    0xa0,
	    0x62,
	    0x95,
	    0xce,
	    0x87,
	    0x0b,
	    0x07,
	    0x02,
	    0x9b,
	    0xfc,
	    0xdb,
	    0x2d,
	    0xce,
	    0x28,
	    0xd9,
	    0x59,
	    0xf2,
	    0x81,
	    0x5b,
	    0x16,
	    0xf8,
	    0x17,
	    0x98,
	    0x02,
	    0x21,
	    0x00,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xfe,
	    0xba,
	    0xae,
	    0xdc,
	    0xe6,
	    0xaf,
	    0x48,
	    0xa0,
	    0x3b,
	    0xbf,
	    0xd2,
	    0x5e,
	    0x8c,
	    0xd0,
	    0x36,
	    0x41,
	    0x41,
	    0x02,
	    0x01,
	    0x01,
	    0xa1,
	    0x24,
	    0x03,
	    0x22,
	    0x00,
	    // public key
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	]);
	var EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer.from([
	    // begin
	    0x30,
	    0x82,
	    0x01,
	    0x13,
	    0x02,
	    0x01,
	    0x01,
	    0x04,
	    0x20,
	    // private key
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    // middle
	    0xa0,
	    0x81,
	    0xa5,
	    0x30,
	    0x81,
	    0xa2,
	    0x02,
	    0x01,
	    0x01,
	    0x30,
	    0x2c,
	    0x06,
	    0x07,
	    0x2a,
	    0x86,
	    0x48,
	    0xce,
	    0x3d,
	    0x01,
	    0x01,
	    0x02,
	    0x21,
	    0x00,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xfe,
	    0xff,
	    0xff,
	    0xfc,
	    0x2f,
	    0x30,
	    0x06,
	    0x04,
	    0x01,
	    0x00,
	    0x04,
	    0x01,
	    0x07,
	    0x04,
	    0x41,
	    0x04,
	    0x79,
	    0xbe,
	    0x66,
	    0x7e,
	    0xf9,
	    0xdc,
	    0xbb,
	    0xac,
	    0x55,
	    0xa0,
	    0x62,
	    0x95,
	    0xce,
	    0x87,
	    0x0b,
	    0x07,
	    0x02,
	    0x9b,
	    0xfc,
	    0xdb,
	    0x2d,
	    0xce,
	    0x28,
	    0xd9,
	    0x59,
	    0xf2,
	    0x81,
	    0x5b,
	    0x16,
	    0xf8,
	    0x17,
	    0x98,
	    0x48,
	    0x3a,
	    0xda,
	    0x77,
	    0x26,
	    0xa3,
	    0xc4,
	    0x65,
	    0x5d,
	    0xa4,
	    0xfb,
	    0xfc,
	    0x0e,
	    0x11,
	    0x08,
	    0xa8,
	    0xfd,
	    0x17,
	    0xb4,
	    0x48,
	    0xa6,
	    0x85,
	    0x54,
	    0x19,
	    0x9c,
	    0x47,
	    0xd0,
	    0x8f,
	    0xfb,
	    0x10,
	    0xd4,
	    0xb8,
	    0x02,
	    0x21,
	    0x00,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xff,
	    0xfe,
	    0xba,
	    0xae,
	    0xdc,
	    0xe6,
	    0xaf,
	    0x48,
	    0xa0,
	    0x3b,
	    0xbf,
	    0xd2,
	    0x5e,
	    0x8c,
	    0xd0,
	    0x36,
	    0x41,
	    0x41,
	    0x02,
	    0x01,
	    0x01,
	    0xa1,
	    0x44,
	    0x03,
	    0x42,
	    0x00,
	    // public key
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	    0x00,
	]);
	exports.privateKeyExport = function (privateKey, publicKey, compressed) {
	    if (compressed === void 0) { compressed = true; }
	    var result = Buffer.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED);
	    privateKey.copy(result, compressed ? 8 : 9);
	    publicKey.copy(result, compressed ? 181 : 214);
	    return result;
	};
	exports.privateKeyImport = function (privateKey) {
	    var length = privateKey.length;
	    // sequence header
	    var index = 0;
	    if (length < index + 1 || privateKey[index] !== 0x30)
	        return null;
	    index += 1;
	    // sequence length constructor
	    if (length < index + 1 || !(privateKey[index] & 0x80))
	        return null;
	    var lenb = privateKey[index] & 0x7f;
	    index += 1;
	    if (lenb < 1 || lenb > 2)
	        return null;
	    if (length < index + lenb)
	        return null;
	    // sequence length
	    var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0);
	    index += lenb;
	    if (length < index + len)
	        return null;
	    // sequence element 0: version number (=1)
	    if (length < index + 3 ||
	        privateKey[index] !== 0x02 ||
	        privateKey[index + 1] !== 0x01 ||
	        privateKey[index + 2] !== 0x01) {
	        return null;
	    }
	    index += 3;
	    // sequence element 1: octet string, up to 32 bytes
	    if (length < index + 2 ||
	        privateKey[index] !== 0x04 ||
	        privateKey[index + 1] > 0x20 ||
	        length < index + 2 + privateKey[index + 1]) {
	        return null;
	    }
	    return privateKey.slice(index + 2, index + 2 + privateKey[index + 1]);
	};
	exports.signatureImportLax = function (signature) {
	    var r = Buffer.alloc(32, 0);
	    var s = Buffer.alloc(32, 0);
	    var length = signature.length;
	    var index = 0;
	    // sequence tag byte
	    if (signature[index++] !== 0x30) {
	        return null;
	    }
	    // sequence length byte
	    var lenbyte = signature[index++];
	    if (lenbyte & 0x80) {
	        index += lenbyte - 0x80;
	        if (index > length) {
	            return null;
	        }
	    }
	    // sequence tag byte for r
	    if (signature[index++] !== 0x02) {
	        return null;
	    }
	    // length for r
	    var rlen = signature[index++];
	    if (rlen & 0x80) {
	        lenbyte = rlen - 0x80;
	        if (index + lenbyte > length) {
	            return null;
	        }
	        for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1)
	            ;
	        for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1)
	            rlen = (rlen << 8) + signature[index];
	    }
	    if (rlen > length - index) {
	        return null;
	    }
	    var rindex = index;
	    index += rlen;
	    // sequence tag byte for s
	    if (signature[index++] !== 0x02) {
	        return null;
	    }
	    // length for s
	    var slen = signature[index++];
	    if (slen & 0x80) {
	        lenbyte = slen - 0x80;
	        if (index + lenbyte > length) {
	            return null;
	        }
	        for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1)
	            ;
	        for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1)
	            slen = (slen << 8) + signature[index];
	    }
	    if (slen > length - index) {
	        return null;
	    }
	    var sindex = index;
	    index += slen;
	    // ignore leading zeros in r
	    for (; rlen > 0 && signature[rindex] === 0x00; rlen -= 1, rindex += 1)
	        ;
	    // copy r value
	    if (rlen > 32) {
	        return null;
	    }
	    var rvalue = signature.slice(rindex, rindex + rlen);
	    rvalue.copy(r, 32 - rvalue.length);
	    // ignore leading zeros in s
	    for (; slen > 0 && signature[sindex] === 0x00; slen -= 1, sindex += 1)
	        ;
	    // copy s value
	    if (slen > 32) {
	        return null;
	    }
	    var svalue = signature.slice(sindex, sindex + slen);
	    svalue.copy(s, 32 - svalue.length);
	    return { r: r, s: s };
	};
	//# sourceMappingURL=der.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict";
	// This file is imported from secp256k1 v3
	// https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE
	Object.defineProperty(exports, "__esModule", { value: true });
	var BN = __webpack_require__(4);
	var EC = __webpack_require__(35).ec;
	var ec = new EC('secp256k1');
	var ecparams = ec.curve;
	exports.privateKeyExport = function (privateKey, compressed) {
	    if (compressed === void 0) { compressed = true; }
	    var d = new BN(privateKey);
	    if (d.ucmp(ecparams.n) >= 0) {
	        throw new Error("couldn't export to DER format");
	    }
	    var point = ec.g.mul(d);
	    return toPublicKey(point.getX(), point.getY(), compressed);
	};
	exports.privateKeyModInverse = function (privateKey) {
	    var bn = new BN(privateKey);
	    if (bn.ucmp(ecparams.n) >= 0 || bn.isZero()) {
	        throw new Error('private key range is invalid');
	    }
	    return bn.invm(ecparams.n).toArrayLike(Buffer, 'be', 32);
	};
	exports.signatureImport = function (sigObj) {
	    var r = new BN(sigObj.r);
	    if (r.ucmp(ecparams.n) >= 0) {
	        r = new BN(0);
	    }
	    var s = new BN(sigObj.s);
	    if (s.ucmp(ecparams.n) >= 0) {
	        s = new BN(0);
	    }
	    return Buffer.concat([r.toArrayLike(Buffer, 'be', 32), s.toArrayLike(Buffer, 'be', 32)]);
	};
	exports.ecdhUnsafe = function (publicKey, privateKey, compressed) {
	    if (compressed === void 0) { compressed = true; }
	    var point = ec.keyFromPublic(publicKey);
	    var scalar = new BN(privateKey);
	    if (scalar.ucmp(ecparams.n) >= 0 || scalar.isZero()) {
	        throw new Error('scalar was invalid (zero or overflow)');
	    }
	    var shared = point.pub.mul(scalar);
	    return toPublicKey(shared.getX(), shared.getY(), compressed);
	};
	var toPublicKey = function (x, y, compressed) {
	    var publicKey;
	    if (compressed) {
	        publicKey = Buffer.alloc(33);
	        publicKey[0] = y.isOdd() ? 0x03 : 0x02;
	        x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);
	    }
	    else {
	        publicKey = Buffer.alloc(65);
	        publicKey[0] = 0x04;
	        x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);
	        y.toArrayLike(Buffer, 'be', 32).copy(publicKey, 33);
	    }
	    return publicKey;
	};
	//# sourceMappingURL=index.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;
	var secp256k1 = __webpack_require__(85);
	var BN = __webpack_require__(4);
	var bytes_1 = __webpack_require__(47);
	var hash_1 = __webpack_require__(84);
	/**
	 * Returns the ECDSA signature of a message hash.
	 */
	exports.ecsign = function (msgHash, privateKey, chainId) {
	    var sig = secp256k1.sign(msgHash, privateKey);
	    var recovery = sig.recovery;
	    var ret = {
	        r: sig.signature.slice(0, 32),
	        s: sig.signature.slice(32, 64),
	        v: chainId ? recovery + (chainId * 2 + 35) : recovery + 27,
	    };
	    return ret;
	};
	/**
	 * ECDSA public key recovery from signature.
	 * @returns Recovered public key
	 */
	exports.ecrecover = function (msgHash, v, r, s, chainId) {
	    var signature = Buffer.concat([bytes_1.setLength(r, 32), bytes_1.setLength(s, 32)], 64);
	    var recovery = calculateSigRecovery(v, chainId);
	    if (!isValidSigRecovery(recovery)) {
	        throw new Error('Invalid signature v value');
	    }
	    var senderPubKey = secp256k1.recover(msgHash, signature, recovery);
	    return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);
	};
	/**
	 * Convert signature parameters into the format of `eth_sign` RPC method.
	 * @returns Signature
	 */
	exports.toRpcSig = function (v, r, s, chainId) {
	    var recovery = calculateSigRecovery(v, chainId);
	    if (!isValidSigRecovery(recovery)) {
	        throw new Error('Invalid signature v value');
	    }
	    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin
	    return bytes_1.bufferToHex(Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(s, 32), bytes_1.toBuffer(v)]));
	};
	/**
	 * Convert signature format of the `eth_sign` RPC method to signature parameters
	 * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053
	 */
	exports.fromRpcSig = function (sig) {
	    var buf = bytes_1.toBuffer(sig);
	    // NOTE: with potential introduction of chainId this might need to be updated
	    if (buf.length !== 65) {
	        throw new Error('Invalid signature length');
	    }
	    var v = buf[64];
	    // support both versions of `eth_sign` responses
	    if (v < 27) {
	        v += 27;
	    }
	    return {
	        v: v,
	        r: buf.slice(0, 32),
	        s: buf.slice(32, 64),
	    };
	};
	/**
	 * Validate a ECDSA signature.
	 * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one
	 */
	exports.isValidSignature = function (v, r, s, homesteadOrLater, chainId) {
	    if (homesteadOrLater === void 0) { homesteadOrLater = true; }
	    var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
	    var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);
	    if (r.length !== 32 || s.length !== 32) {
	        return false;
	    }
	    if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {
	        return false;
	    }
	    var rBN = new BN(r);
	    var sBN = new BN(s);
	    if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {
	        return false;
	    }
	    if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {
	        return false;
	    }
	    return true;
	};
	/**
	 * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.
	 * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`
	 * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key
	 * used to produce the signature.
	 */
	exports.hashPersonalMessage = function (message) {
	    var prefix = Buffer.from("\u0019Ethereum Signed Message:\n" + message.length.toString(), 'utf-8');
	    return hash_1.keccak(Buffer.concat([prefix, message]));
	};
	function calculateSigRecovery(v, chainId) {
	    return chainId ? v - (2 * chainId + 35) : v - 27;
	}
	function isValidSigRecovery(recovery) {
	    return recovery === 0 || recovery === 1;
	}
	//# sourceMappingURL=signature.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	module.exports = __webpack_require__(294)(__webpack_require__(293))


/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict'
	var toString = Object.prototype.toString

	// TypeError
	exports.isArray = function (value, message) {
	  if (!Array.isArray(value)) throw TypeError(message)
	}

	exports.isBoolean = function (value, message) {
	  if (toString.call(value) !== '[object Boolean]') throw TypeError(message)
	}

	exports.isBuffer = function (value, message) {
	  if (!Buffer.isBuffer(value)) throw TypeError(message)
	}

	exports.isFunction = function (value, message) {
	  if (toString.call(value) !== '[object Function]') throw TypeError(message)
	}

	exports.isNumber = function (value, message) {
	  if (toString.call(value) !== '[object Number]') throw TypeError(message)
	}

	exports.isObject = function (value, message) {
	  if (toString.call(value) !== '[object Object]') throw TypeError(message)
	}

	// RangeError
	exports.isBufferLength = function (buffer, length, message) {
	  if (buffer.length !== length) throw RangeError(message)
	}

	exports.isBufferLength2 = function (buffer, length1, length2, message) {
	  if (buffer.length !== length1 && buffer.length !== length2) throw RangeError(message)
	}

	exports.isLengthGTZero = function (value, message) {
	  if (value.length === 0) throw RangeError(message)
	}

	exports.isNumberInInterval = function (number, x, y, message) {
	  if (number <= x || number >= y) throw RangeError(message)
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	var Buffer = __webpack_require__(6).Buffer
	var bip66 = __webpack_require__(217)

	var EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer.from([
	  // begin
	  0x30, 0x81, 0xd3, 0x02, 0x01, 0x01, 0x04, 0x20,
	  // private key
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  // middle
	  0xa0, 0x81, 0x85, 0x30, 0x81, 0x82, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48,
	  0xcE, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xfE, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04,
	  0x21, 0x02, 0x79, 0xbE, 0x66, 0x7E, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xcE, 0x87,
	  0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xcE, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8,
	  0x17, 0x98, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xff, 0xff, 0xfE, 0xba, 0xaE, 0xdc, 0xE6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5E,
	  0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x24, 0x03, 0x22, 0x00,
	  // public key
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00
	])

	var EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer.from([
	  // begin
	  0x30, 0x82, 0x01, 0x13, 0x02, 0x01, 0x01, 0x04, 0x20,
	  // private key
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  // middle
	  0xa0, 0x81, 0xa5, 0x30, 0x81, 0xa2, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48,
	  0xcE, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xfE, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04,
	  0x41, 0x04, 0x79, 0xbE, 0x66, 0x7E, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xcE, 0x87,
	  0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xcE, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8,
	  0x17, 0x98, 0x48, 0x3a, 0xda, 0x77, 0x26, 0xa3, 0xc4, 0x65, 0x5d, 0xa4, 0xfb, 0xfc, 0x0E, 0x11,
	  0x08, 0xa8, 0xfd, 0x17, 0xb4, 0x48, 0xa6, 0x85, 0x54, 0x19, 0x9c, 0x47, 0xd0, 0x8f, 0xfb, 0x10,
	  0xd4, 0xb8, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xff, 0xff, 0xfE, 0xba, 0xaE, 0xdc, 0xE6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5E,
	  0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x44, 0x03, 0x42, 0x00,
	  // public key
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00
	])

	exports.privateKeyExport = function (privateKey, publicKey, compressed) {
	  var result = Buffer.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED)
	  privateKey.copy(result, compressed ? 8 : 9)
	  publicKey.copy(result, compressed ? 181 : 214)
	  return result
	}

	exports.privateKeyImport = function (privateKey) {
	  var length = privateKey.length

	  // sequence header
	  var index = 0
	  if (length < index + 1 || privateKey[index] !== 0x30) return
	  index += 1

	  // sequence length constructor
	  if (length < index + 1 || !(privateKey[index] & 0x80)) return

	  var lenb = privateKey[index] & 0x7f
	  index += 1
	  if (lenb < 1 || lenb > 2) return
	  if (length < index + lenb) return

	  // sequence length
	  var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0)
	  index += lenb
	  if (length < index + len) return

	  // sequence element 0: version number (=1)
	  if (length < index + 3 ||
	      privateKey[index] !== 0x02 ||
	      privateKey[index + 1] !== 0x01 ||
	      privateKey[index + 2] !== 0x01) {
	    return
	  }
	  index += 3

	  // sequence element 1: octet string, up to 32 bytes
	  if (length < index + 2 ||
	      privateKey[index] !== 0x04 ||
	      privateKey[index + 1] > 0x20 ||
	      length < index + 2 + privateKey[index + 1]) {
	    return
	  }

	  return privateKey.slice(index + 2, index + 2 + privateKey[index + 1])
	}

	exports.signatureExport = function (sigObj) {
	  var r = Buffer.concat([Buffer.from([0]), sigObj.r])
	  for (var lenR = 33, posR = 0; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);

	  var s = Buffer.concat([Buffer.from([0]), sigObj.s])
	  for (var lenS = 33, posS = 0; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);

	  return bip66.encode(r.slice(posR), s.slice(posS))
	}

	exports.signatureImport = function (sig) {
	  var r = Buffer.alloc(32, 0)
	  var s = Buffer.alloc(32, 0)

	  try {
	    var sigObj = bip66.decode(sig)
	    if (sigObj.r.length === 33 && sigObj.r[0] === 0x00) sigObj.r = sigObj.r.slice(1)
	    if (sigObj.r.length > 32) throw new Error('R length is too long')
	    if (sigObj.s.length === 33 && sigObj.s[0] === 0x00) sigObj.s = sigObj.s.slice(1)
	    if (sigObj.s.length > 32) throw new Error('S length is too long')
	  } catch (err) {
	    return
	  }

	  sigObj.r.copy(r, 32 - sigObj.r.length)
	  sigObj.s.copy(s, 32 - sigObj.s.length)

	  return { r: r, s: s }
	}

	exports.signatureImportLax = function (sig) {
	  var r = Buffer.alloc(32, 0)
	  var s = Buffer.alloc(32, 0)

	  var length = sig.length
	  var index = 0

	  // sequence tag byte
	  if (sig[index++] !== 0x30) return

	  // sequence length byte
	  var lenbyte = sig[index++]
	  if (lenbyte & 0x80) {
	    index += lenbyte - 0x80
	    if (index > length) return
	  }

	  // sequence tag byte for r
	  if (sig[index++] !== 0x02) return

	  // length for r
	  var rlen = sig[index++]
	  if (rlen & 0x80) {
	    lenbyte = rlen - 0x80
	    if (index + lenbyte > length) return
	    for (; lenbyte > 0 && sig[index] === 0x00; index += 1, lenbyte -= 1);
	    for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1) rlen = (rlen << 8) + sig[index]
	  }
	  if (rlen > length - index) return
	  var rindex = index
	  index += rlen

	  // sequence tag byte for s
	  if (sig[index++] !== 0x02) return

	  // length for s
	  var slen = sig[index++]
	  if (slen & 0x80) {
	    lenbyte = slen - 0x80
	    if (index + lenbyte > length) return
	    for (; lenbyte > 0 && sig[index] === 0x00; index += 1, lenbyte -= 1);
	    for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1) slen = (slen << 8) + sig[index]
	  }
	  if (slen > length - index) return
	  var sindex = index
	  index += slen

	  // ignore leading zeros in r
	  for (; rlen > 0 && sig[rindex] === 0x00; rlen -= 1, rindex += 1);
	  // copy r value
	  if (rlen > 32) return
	  var rvalue = sig.slice(rindex, rindex + rlen)
	  rvalue.copy(r, 32 - rvalue.length)

	  // ignore leading zeros in s
	  for (; slen > 0 && sig[sindex] === 0x00; slen -= 1, sindex += 1);
	  // copy s value
	  if (slen > 32) return
	  var svalue = sig.slice(sindex, sindex + slen)
	  svalue.copy(s, 32 - svalue.length)

	  return { r: r, s: s }
	}


/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	var Buffer = __webpack_require__(6).Buffer
	var createHash = __webpack_require__(25)
	var BN = __webpack_require__(4)
	var EC = __webpack_require__(35).ec

	var messages = __webpack_require__(131)

	var ec = new EC('secp256k1')
	var ecparams = ec.curve

	function loadCompressedPublicKey (first, xBuffer) {
	  var x = new BN(xBuffer)

	  // overflow
	  if (x.cmp(ecparams.p) >= 0) return null
	  x = x.toRed(ecparams.red)

	  // compute corresponding Y
	  var y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()
	  if ((first === 0x03) !== y.isOdd()) y = y.redNeg()

	  return ec.keyPair({ pub: { x: x, y: y } })
	}

	function loadUncompressedPublicKey (first, xBuffer, yBuffer) {
	  var x = new BN(xBuffer)
	  var y = new BN(yBuffer)

	  // overflow
	  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null

	  x = x.toRed(ecparams.red)
	  y = y.toRed(ecparams.red)

	  // is odd flag
	  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null

	  // x*x*x + b = y*y
	  var x3 = x.redSqr().redIMul(x)
	  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null

	  return ec.keyPair({ pub: { x: x, y: y } })
	}

	function loadPublicKey (publicKey) {
	  var first = publicKey[0]
	  switch (first) {
	    case 0x02:
	    case 0x03:
	      if (publicKey.length !== 33) return null
	      return loadCompressedPublicKey(first, publicKey.slice(1, 33))
	    case 0x04:
	    case 0x06:
	    case 0x07:
	      if (publicKey.length !== 65) return null
	      return loadUncompressedPublicKey(first, publicKey.slice(1, 33), publicKey.slice(33, 65))
	    default:
	      return null
	  }
	}

	exports.privateKeyVerify = function (privateKey) {
	  var bn = new BN(privateKey)
	  return bn.cmp(ecparams.n) < 0 && !bn.isZero()
	}

	exports.privateKeyExport = function (privateKey, compressed) {
	  var d = new BN(privateKey)
	  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PRIVATE_KEY_EXPORT_DER_FAIL)

	  return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true))
	}

	exports.privateKeyNegate = function (privateKey) {
	  var bn = new BN(privateKey)
	  return bn.isZero() ? Buffer.alloc(32) : ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Buffer, 'be', 32)
	}

	exports.privateKeyModInverse = function (privateKey) {
	  var bn = new BN(privateKey)
	  if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_RANGE_INVALID)

	  return bn.invm(ecparams.n).toArrayLike(Buffer, 'be', 32)
	}

	exports.privateKeyTweakAdd = function (privateKey, tweak) {
	  var bn = new BN(tweak)
	  if (bn.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL)

	  bn.iadd(new BN(privateKey))
	  if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)
	  if (bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL)

	  return bn.toArrayLike(Buffer, 'be', 32)
	}

	exports.privateKeyTweakMul = function (privateKey, tweak) {
	  var bn = new BN(tweak)
	  if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_MUL_FAIL)

	  bn.imul(new BN(privateKey))
	  if (bn.cmp(ecparams.n)) bn = bn.umod(ecparams.n)

	  return bn.toArrayLike(Buffer, 'be', 32)
	}

	exports.publicKeyCreate = function (privateKey, compressed) {
	  var d = new BN(privateKey)
	  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PUBLIC_KEY_CREATE_FAIL)

	  return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true))
	}

	exports.publicKeyConvert = function (publicKey, compressed) {
	  var pair = loadPublicKey(publicKey)
	  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)

	  return Buffer.from(pair.getPublic(compressed, true))
	}

	exports.publicKeyVerify = function (publicKey) {
	  return loadPublicKey(publicKey) !== null
	}

	exports.publicKeyTweakAdd = function (publicKey, tweak, compressed) {
	  var pair = loadPublicKey(publicKey)
	  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)

	  tweak = new BN(tweak)
	  if (tweak.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL)

	  var point = ecparams.g.mul(tweak).add(pair.pub)
	  if (point.isInfinity()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL)

	  return Buffer.from(point.encode(true, compressed))
	}

	exports.publicKeyTweakMul = function (publicKey, tweak, compressed) {
	  var pair = loadPublicKey(publicKey)
	  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)

	  tweak = new BN(tweak)
	  if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_MUL_FAIL)

	  return Buffer.from(pair.pub.mul(tweak).encode(true, compressed))
	}

	exports.publicKeyCombine = function (publicKeys, compressed) {
	  var pairs = new Array(publicKeys.length)
	  for (var i = 0; i < publicKeys.length; ++i) {
	    pairs[i] = loadPublicKey(publicKeys[i])
	    if (pairs[i] === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)
	  }

	  var point = pairs[0].pub
	  for (var j = 1; j < pairs.length; ++j) point = point.add(pairs[j].pub)
	  if (point.isInfinity()) throw new Error(messages.EC_PUBLIC_KEY_COMBINE_FAIL)

	  return Buffer.from(point.encode(true, compressed))
	}

	exports.signatureNormalize = function (signature) {
	  var r = new BN(signature.slice(0, 32))
	  var s = new BN(signature.slice(32, 64))
	  if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)

	  var result = Buffer.from(signature)
	  if (s.cmp(ec.nh) === 1) ecparams.n.sub(s).toArrayLike(Buffer, 'be', 32).copy(result, 32)

	  return result
	}

	exports.signatureExport = function (signature) {
	  var r = signature.slice(0, 32)
	  var s = signature.slice(32, 64)
	  if (new BN(r).cmp(ecparams.n) >= 0 || new BN(s).cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)

	  return { r: r, s: s }
	}

	exports.signatureImport = function (sigObj) {
	  var r = new BN(sigObj.r)
	  if (r.cmp(ecparams.n) >= 0) r = new BN(0)

	  var s = new BN(sigObj.s)
	  if (s.cmp(ecparams.n) >= 0) s = new BN(0)

	  return Buffer.concat([
	    r.toArrayLike(Buffer, 'be', 32),
	    s.toArrayLike(Buffer, 'be', 32)
	  ])
	}

	exports.sign = function (message, privateKey, noncefn, data) {
	  if (typeof noncefn === 'function') {
	    var getNonce = noncefn
	    noncefn = function (counter) {
	      var nonce = getNonce(message, privateKey, null, data, counter)
	      if (!Buffer.isBuffer(nonce) || nonce.length !== 32) throw new Error(messages.ECDSA_SIGN_FAIL)

	      return new BN(nonce)
	    }
	  }

	  var d = new BN(privateKey)
	  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.ECDSA_SIGN_FAIL)

	  var result = ec.sign(message, privateKey, { canonical: true, k: noncefn, pers: data })
	  return {
	    signature: Buffer.concat([
	      result.r.toArrayLike(Buffer, 'be', 32),
	      result.s.toArrayLike(Buffer, 'be', 32)
	    ]),
	    recovery: result.recoveryParam
	  }
	}

	exports.verify = function (message, signature, publicKey) {
	  var sigObj = { r: signature.slice(0, 32), s: signature.slice(32, 64) }

	  var sigr = new BN(sigObj.r)
	  var sigs = new BN(sigObj.s)
	  if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)
	  if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return false

	  var pair = loadPublicKey(publicKey)
	  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)

	  return ec.verify(message, sigObj, { x: pair.pub.x, y: pair.pub.y })
	}

	exports.recover = function (message, signature, recovery, compressed) {
	  var sigObj = { r: signature.slice(0, 32), s: signature.slice(32, 64) }

	  var sigr = new BN(sigObj.r)
	  var sigs = new BN(sigObj.s)
	  if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)

	  try {
	    if (sigr.isZero() || sigs.isZero()) throw new Error()

	    var point = ec.recoverPubKey(message, sigObj, recovery)
	    return Buffer.from(point.encode(true, compressed))
	  } catch (err) {
	    throw new Error(messages.ECDSA_RECOVER_FAIL)
	  }
	}

	exports.ecdh = function (publicKey, privateKey) {
	  var shared = exports.ecdhUnsafe(publicKey, privateKey, true)
	  return createHash('sha256').update(shared).digest()
	}

	exports.ecdhUnsafe = function (publicKey, privateKey, compressed) {
	  var pair = loadPublicKey(publicKey)
	  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)

	  var scalar = new BN(privateKey)
	  if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) throw new Error(messages.ECDH_FAIL)

	  return Buffer.from(pair.pub.mul(scalar).encode(true, compressed))
	}


/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	var assert = __webpack_require__(291)
	var der = __webpack_require__(292)
	var messages = __webpack_require__(131)

	function initCompressedValue (value, defaultValue) {
	  if (value === undefined) return defaultValue

	  assert.isBoolean(value, messages.COMPRESSED_TYPE_INVALID)
	  return value
	}

	module.exports = function (secp256k1) {
	  return {
	    privateKeyVerify: function (privateKey) {
	      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
	      return privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)
	    },

	    privateKeyExport: function (privateKey, compressed) {
	      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
	      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

	      compressed = initCompressedValue(compressed, true)
	      var publicKey = secp256k1.privateKeyExport(privateKey, compressed)

	      return der.privateKeyExport(privateKey, publicKey, compressed)
	    },

	    privateKeyImport: function (privateKey) {
	      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)

	      privateKey = der.privateKeyImport(privateKey)
	      if (privateKey && privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)) return privateKey

	      throw new Error(messages.EC_PRIVATE_KEY_IMPORT_DER_FAIL)
	    },

	    privateKeyNegate: function (privateKey) {
	      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
	      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

	      return secp256k1.privateKeyNegate(privateKey)
	    },

	    privateKeyModInverse: function (privateKey) {
	      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
	      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

	      return secp256k1.privateKeyModInverse(privateKey)
	    },

	    privateKeyTweakAdd: function (privateKey, tweak) {
	      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
	      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

	      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)
	      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)

	      return secp256k1.privateKeyTweakAdd(privateKey, tweak)
	    },

	    privateKeyTweakMul: function (privateKey, tweak) {
	      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
	      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

	      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)
	      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)

	      return secp256k1.privateKeyTweakMul(privateKey, tweak)
	    },

	    publicKeyCreate: function (privateKey, compressed) {
	      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
	      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

	      compressed = initCompressedValue(compressed, true)

	      return secp256k1.publicKeyCreate(privateKey, compressed)
	    },

	    publicKeyConvert: function (publicKey, compressed) {
	      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
	      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)

	      compressed = initCompressedValue(compressed, true)

	      return secp256k1.publicKeyConvert(publicKey, compressed)
	    },

	    publicKeyVerify: function (publicKey) {
	      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
	      return secp256k1.publicKeyVerify(publicKey)
	    },

	    publicKeyTweakAdd: function (publicKey, tweak, compressed) {
	      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
	      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)

	      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)
	      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)

	      compressed = initCompressedValue(compressed, true)

	      return secp256k1.publicKeyTweakAdd(publicKey, tweak, compressed)
	    },

	    publicKeyTweakMul: function (publicKey, tweak, compressed) {
	      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
	      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)

	      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)
	      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)

	      compressed = initCompressedValue(compressed, true)

	      return secp256k1.publicKeyTweakMul(publicKey, tweak, compressed)
	    },

	    publicKeyCombine: function (publicKeys, compressed) {
	      assert.isArray(publicKeys, messages.EC_PUBLIC_KEYS_TYPE_INVALID)
	      assert.isLengthGTZero(publicKeys, messages.EC_PUBLIC_KEYS_LENGTH_INVALID)
	      for (var i = 0; i < publicKeys.length; ++i) {
	        assert.isBuffer(publicKeys[i], messages.EC_PUBLIC_KEY_TYPE_INVALID)
	        assert.isBufferLength2(publicKeys[i], 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)
	      }

	      compressed = initCompressedValue(compressed, true)

	      return secp256k1.publicKeyCombine(publicKeys, compressed)
	    },

	    signatureNormalize: function (signature) {
	      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)
	      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)

	      return secp256k1.signatureNormalize(signature)
	    },

	    signatureExport: function (signature) {
	      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)
	      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)

	      var sigObj = secp256k1.signatureExport(signature)
	      return der.signatureExport(sigObj)
	    },

	    signatureImport: function (sig) {
	      assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID)
	      assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID)

	      var sigObj = der.signatureImport(sig)
	      if (sigObj) return secp256k1.signatureImport(sigObj)

	      throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL)
	    },

	    signatureImportLax: function (sig) {
	      assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID)
	      assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID)

	      var sigObj = der.signatureImportLax(sig)
	      if (sigObj) return secp256k1.signatureImport(sigObj)

	      throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL)
	    },

	    sign: function (message, privateKey, options) {
	      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)
	      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)

	      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
	      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

	      var data = null
	      var noncefn = null
	      if (options !== undefined) {
	        assert.isObject(options, messages.OPTIONS_TYPE_INVALID)

	        if (options.data !== undefined) {
	          assert.isBuffer(options.data, messages.OPTIONS_DATA_TYPE_INVALID)
	          assert.isBufferLength(options.data, 32, messages.OPTIONS_DATA_LENGTH_INVALID)
	          data = options.data
	        }

	        if (options.noncefn !== undefined) {
	          assert.isFunction(options.noncefn, messages.OPTIONS_NONCEFN_TYPE_INVALID)
	          noncefn = options.noncefn
	        }
	      }

	      return secp256k1.sign(message, privateKey, noncefn, data)
	    },

	    verify: function (message, signature, publicKey) {
	      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)
	      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)

	      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)
	      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)

	      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
	      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)

	      return secp256k1.verify(message, signature, publicKey)
	    },

	    recover: function (message, signature, recovery, compressed) {
	      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)
	      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)

	      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)
	      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)

	      assert.isNumber(recovery, messages.RECOVERY_ID_TYPE_INVALID)
	      assert.isNumberInInterval(recovery, -1, 4, messages.RECOVERY_ID_VALUE_INVALID)

	      compressed = initCompressedValue(compressed, true)

	      return secp256k1.recover(message, signature, recovery, compressed)
	    },

	    ecdh: function (publicKey, privateKey) {
	      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
	      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)

	      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
	      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

	      return secp256k1.ecdh(publicKey, privateKey)
	    },

	    ecdhUnsafe: function (publicKey, privateKey, compressed) {
	      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
	      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)

	      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
	      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

	      compressed = initCompressedValue(compressed, true)

	      return secp256k1.ecdhUnsafe(publicKey, privateKey, compressed)
	    }
	  }
	}


/***/ },
/* 295 */
/***/ function(module, exports) {

	module.exports = stringify
	stringify.default = stringify
	stringify.stable = deterministicStringify
	stringify.stableStringify = deterministicStringify

	var arr = []
	var replacerStack = []

	// Regular stringify
	function stringify (obj, replacer, spacer) {
	  decirc(obj, '', [], undefined)
	  var res
	  if (replacerStack.length === 0) {
	    res = JSON.stringify(obj, replacer, spacer)
	  } else {
	    res = JSON.stringify(obj, replaceGetterValues(replacer), spacer)
	  }
	  while (arr.length !== 0) {
	    var part = arr.pop()
	    if (part.length === 4) {
	      Object.defineProperty(part[0], part[1], part[3])
	    } else {
	      part[0][part[1]] = part[2]
	    }
	  }
	  return res
	}
	function decirc (val, k, stack, parent) {
	  var i
	  if (typeof val === 'object' && val !== null) {
	    for (i = 0; i < stack.length; i++) {
	      if (stack[i] === val) {
	        var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k)
	        if (propertyDescriptor.get !== undefined) {
	          if (propertyDescriptor.configurable) {
	            Object.defineProperty(parent, k, { value: '[Circular]' })
	            arr.push([parent, k, val, propertyDescriptor])
	          } else {
	            replacerStack.push([val, k])
	          }
	        } else {
	          parent[k] = '[Circular]'
	          arr.push([parent, k, val])
	        }
	        return
	      }
	    }
	    stack.push(val)
	    // Optimize for Arrays. Big arrays could kill the performance otherwise!
	    if (Array.isArray(val)) {
	      for (i = 0; i < val.length; i++) {
	        decirc(val[i], i, stack, val)
	      }
	    } else {
	      var keys = Object.keys(val)
	      for (i = 0; i < keys.length; i++) {
	        var key = keys[i]
	        decirc(val[key], key, stack, val)
	      }
	    }
	    stack.pop()
	  }
	}

	// Stable-stringify
	function compareFunction (a, b) {
	  if (a < b) {
	    return -1
	  }
	  if (a > b) {
	    return 1
	  }
	  return 0
	}

	function deterministicStringify (obj, replacer, spacer) {
	  var tmp = deterministicDecirc(obj, '', [], undefined) || obj
	  var res
	  if (replacerStack.length === 0) {
	    res = JSON.stringify(tmp, replacer, spacer)
	  } else {
	    res = JSON.stringify(tmp, replaceGetterValues(replacer), spacer)
	  }
	  while (arr.length !== 0) {
	    var part = arr.pop()
	    if (part.length === 4) {
	      Object.defineProperty(part[0], part[1], part[3])
	    } else {
	      part[0][part[1]] = part[2]
	    }
	  }
	  return res
	}

	function deterministicDecirc (val, k, stack, parent) {
	  var i
	  if (typeof val === 'object' && val !== null) {
	    for (i = 0; i < stack.length; i++) {
	      if (stack[i] === val) {
	        var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k)
	        if (propertyDescriptor.get !== undefined) {
	          if (propertyDescriptor.configurable) {
	            Object.defineProperty(parent, k, { value: '[Circular]' })
	            arr.push([parent, k, val, propertyDescriptor])
	          } else {
	            replacerStack.push([val, k])
	          }
	        } else {
	          parent[k] = '[Circular]'
	          arr.push([parent, k, val])
	        }
	        return
	      }
	    }
	    if (typeof val.toJSON === 'function') {
	      return
	    }
	    stack.push(val)
	    // Optimize for Arrays. Big arrays could kill the performance otherwise!
	    if (Array.isArray(val)) {
	      for (i = 0; i < val.length; i++) {
	        deterministicDecirc(val[i], i, stack, val)
	      }
	    } else {
	      // Create a temporary object in the required way
	      var tmp = {}
	      var keys = Object.keys(val).sort(compareFunction)
	      for (i = 0; i < keys.length; i++) {
	        var key = keys[i]
	        deterministicDecirc(val[key], key, stack, val)
	        tmp[key] = val[key]
	      }
	      if (parent !== undefined) {
	        arr.push([parent, k, val])
	        parent[k] = tmp
	      } else {
	        return tmp
	      }
	    }
	    stack.pop()
	  }
	}

	// wraps replacer function to handle values we couldn't replace
	// and mark them as [Circular]
	function replaceGetterValues (replacer) {
	  replacer = replacer !== undefined ? replacer : function (k, v) { return v }
	  return function (key, val) {
	    if (replacerStack.length > 0) {
	      for (var i = 0; i < replacerStack.length; i++) {
	        var part = replacerStack[i]
	        if (part[1] === key && part[0] === val) {
	          val = '[Circular]'
	          replacerStack.splice(i, 1)
	          break
	        }
	      }
	    }
	    return replacer.call(this, key, val)
	  }
	}


/***/ },
/* 296 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {var win;

	if (typeof window !== "undefined") {
	    win = window;
	} else if (typeof global !== "undefined") {
	    win = global;
	} else if (typeof self !== "undefined"){
	    win = self;
	} else {
	    win = {};
	}

	module.exports = win;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(13);
	var assert = __webpack_require__(27);

	function Hmac(hash, key, enc) {
	  if (!(this instanceof Hmac))
	    return new Hmac(hash, key, enc);
	  this.Hash = hash;
	  this.blockSize = hash.blockSize / 8;
	  this.outSize = hash.outSize / 8;
	  this.inner = null;
	  this.outer = null;

	  this._init(utils.toArray(key, enc));
	}
	module.exports = Hmac;

	Hmac.prototype._init = function init(key) {
	  // Shorten key, if needed
	  if (key.length > this.blockSize)
	    key = new this.Hash().update(key).digest();
	  assert(key.length <= this.blockSize);

	  // Add padding to key
	  for (var i = key.length; i < this.blockSize; i++)
	    key.push(0);

	  for (i = 0; i < key.length; i++)
	    key[i] ^= 0x36;
	  this.inner = new this.Hash().update(key);

	  // 0x36 ^ 0x5c = 0x6a
	  for (i = 0; i < key.length; i++)
	    key[i] ^= 0x6a;
	  this.outer = new this.Hash().update(key);
	};

	Hmac.prototype.update = function update(msg, enc) {
	  this.inner.update(msg, enc);
	  return this;
	};

	Hmac.prototype.digest = function digest(enc) {
	  this.outer.update(this.inner.digest());
	  return this.outer.digest(enc);
	};


/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(13);
	var common = __webpack_require__(48);

	var rotl32 = utils.rotl32;
	var sum32 = utils.sum32;
	var sum32_3 = utils.sum32_3;
	var sum32_4 = utils.sum32_4;
	var BlockHash = common.BlockHash;

	function RIPEMD160() {
	  if (!(this instanceof RIPEMD160))
	    return new RIPEMD160();

	  BlockHash.call(this);

	  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
	  this.endian = 'little';
	}
	utils.inherits(RIPEMD160, BlockHash);
	exports.ripemd160 = RIPEMD160;

	RIPEMD160.blockSize = 512;
	RIPEMD160.outSize = 160;
	RIPEMD160.hmacStrength = 192;
	RIPEMD160.padLength = 64;

	RIPEMD160.prototype._update = function update(msg, start) {
	  var A = this.h[0];
	  var B = this.h[1];
	  var C = this.h[2];
	  var D = this.h[3];
	  var E = this.h[4];
	  var Ah = A;
	  var Bh = B;
	  var Ch = C;
	  var Dh = D;
	  var Eh = E;
	  for (var j = 0; j < 80; j++) {
	    var T = sum32(
	      rotl32(
	        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
	        s[j]),
	      E);
	    A = E;
	    E = D;
	    D = rotl32(C, 10);
	    C = B;
	    B = T;
	    T = sum32(
	      rotl32(
	        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
	        sh[j]),
	      Eh);
	    Ah = Eh;
	    Eh = Dh;
	    Dh = rotl32(Ch, 10);
	    Ch = Bh;
	    Bh = T;
	  }
	  T = sum32_3(this.h[1], C, Dh);
	  this.h[1] = sum32_3(this.h[2], D, Eh);
	  this.h[2] = sum32_3(this.h[3], E, Ah);
	  this.h[3] = sum32_3(this.h[4], A, Bh);
	  this.h[4] = sum32_3(this.h[0], B, Ch);
	  this.h[0] = T;
	};

	RIPEMD160.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils.toHex32(this.h, 'little');
	  else
	    return utils.split32(this.h, 'little');
	};

	function f(j, x, y, z) {
	  if (j <= 15)
	    return x ^ y ^ z;
	  else if (j <= 31)
	    return (x & y) | ((~x) & z);
	  else if (j <= 47)
	    return (x | (~y)) ^ z;
	  else if (j <= 63)
	    return (x & z) | (y & (~z));
	  else
	    return x ^ (y | (~z));
	}

	function K(j) {
	  if (j <= 15)
	    return 0x00000000;
	  else if (j <= 31)
	    return 0x5a827999;
	  else if (j <= 47)
	    return 0x6ed9eba1;
	  else if (j <= 63)
	    return 0x8f1bbcdc;
	  else
	    return 0xa953fd4e;
	}

	function Kh(j) {
	  if (j <= 15)
	    return 0x50a28be6;
	  else if (j <= 31)
	    return 0x5c4dd124;
	  else if (j <= 47)
	    return 0x6d703ef3;
	  else if (j <= 63)
	    return 0x7a6d76e9;
	  else
	    return 0x00000000;
	}

	var r = [
	  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
	  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
	  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
	  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
	  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
	];

	var rh = [
	  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
	  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
	  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
	  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
	  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
	];

	var s = [
	  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
	  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
	  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
	  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
	  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
	];

	var sh = [
	  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
	  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
	  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
	  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
	  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
	];


/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.sha1 = __webpack_require__(300);
	exports.sha224 = __webpack_require__(301);
	exports.sha256 = __webpack_require__(126);
	exports.sha384 = __webpack_require__(302);
	exports.sha512 = __webpack_require__(127);


/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(13);
	var common = __webpack_require__(48);
	var shaCommon = __webpack_require__(128);

	var rotl32 = utils.rotl32;
	var sum32 = utils.sum32;
	var sum32_5 = utils.sum32_5;
	var ft_1 = shaCommon.ft_1;
	var BlockHash = common.BlockHash;

	var sha1_K = [
	  0x5A827999, 0x6ED9EBA1,
	  0x8F1BBCDC, 0xCA62C1D6
	];

	function SHA1() {
	  if (!(this instanceof SHA1))
	    return new SHA1();

	  BlockHash.call(this);
	  this.h = [
	    0x67452301, 0xefcdab89, 0x98badcfe,
	    0x10325476, 0xc3d2e1f0 ];
	  this.W = new Array(80);
	}

	utils.inherits(SHA1, BlockHash);
	module.exports = SHA1;

	SHA1.blockSize = 512;
	SHA1.outSize = 160;
	SHA1.hmacStrength = 80;
	SHA1.padLength = 64;

	SHA1.prototype._update = function _update(msg, start) {
	  var W = this.W;

	  for (var i = 0; i < 16; i++)
	    W[i] = msg[start + i];

	  for(; i < W.length; i++)
	    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

	  var a = this.h[0];
	  var b = this.h[1];
	  var c = this.h[2];
	  var d = this.h[3];
	  var e = this.h[4];

	  for (i = 0; i < W.length; i++) {
	    var s = ~~(i / 20);
	    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
	    e = d;
	    d = c;
	    c = rotl32(b, 30);
	    b = a;
	    a = t;
	  }

	  this.h[0] = sum32(this.h[0], a);
	  this.h[1] = sum32(this.h[1], b);
	  this.h[2] = sum32(this.h[2], c);
	  this.h[3] = sum32(this.h[3], d);
	  this.h[4] = sum32(this.h[4], e);
	};

	SHA1.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils.toHex32(this.h, 'big');
	  else
	    return utils.split32(this.h, 'big');
	};


/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(13);
	var SHA256 = __webpack_require__(126);

	function SHA224() {
	  if (!(this instanceof SHA224))
	    return new SHA224();

	  SHA256.call(this);
	  this.h = [
	    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
	    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
	}
	utils.inherits(SHA224, SHA256);
	module.exports = SHA224;

	SHA224.blockSize = 512;
	SHA224.outSize = 224;
	SHA224.hmacStrength = 192;
	SHA224.padLength = 64;

	SHA224.prototype._digest = function digest(enc) {
	  // Just truncate output
	  if (enc === 'hex')
	    return utils.toHex32(this.h.slice(0, 7), 'big');
	  else
	    return utils.split32(this.h.slice(0, 7), 'big');
	};



/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(13);

	var SHA512 = __webpack_require__(127);

	function SHA384() {
	  if (!(this instanceof SHA384))
	    return new SHA384();

	  SHA512.call(this);
	  this.h = [
	    0xcbbb9d5d, 0xc1059ed8,
	    0x629a292a, 0x367cd507,
	    0x9159015a, 0x3070dd17,
	    0x152fecd8, 0xf70e5939,
	    0x67332667, 0xffc00b31,
	    0x8eb44a87, 0x68581511,
	    0xdb0c2e0d, 0x64f98fa7,
	    0x47b5481d, 0xbefa4fa4 ];
	}
	utils.inherits(SHA384, SHA512);
	module.exports = SHA384;

	SHA384.blockSize = 1024;
	SHA384.outSize = 384;
	SHA384.hmacStrength = 192;
	SHA384.padLength = 128;

	SHA384.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils.toHex32(this.h.slice(0, 12), 'big');
	  else
	    return utils.split32(this.h.slice(0, 12), 'big');
	};


/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var hash = __webpack_require__(86);
	var utils = __webpack_require__(139);
	var assert = __webpack_require__(27);

	function HmacDRBG(options) {
	  if (!(this instanceof HmacDRBG))
	    return new HmacDRBG(options);
	  this.hash = options.hash;
	  this.predResist = !!options.predResist;

	  this.outLen = this.hash.outSize;
	  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

	  this._reseed = null;
	  this.reseedInterval = null;
	  this.K = null;
	  this.V = null;

	  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
	  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
	  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
	  assert(entropy.length >= (this.minEntropy / 8),
	         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
	  this._init(entropy, nonce, pers);
	}
	module.exports = HmacDRBG;

	HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
	  var seed = entropy.concat(nonce).concat(pers);

	  this.K = new Array(this.outLen / 8);
	  this.V = new Array(this.outLen / 8);
	  for (var i = 0; i < this.V.length; i++) {
	    this.K[i] = 0x00;
	    this.V[i] = 0x01;
	  }

	  this._update(seed);
	  this._reseed = 1;
	  this.reseedInterval = 0x1000000000000;  // 2^48
	};

	HmacDRBG.prototype._hmac = function hmac() {
	  return new hash.hmac(this.hash, this.K);
	};

	HmacDRBG.prototype._update = function update(seed) {
	  var kmac = this._hmac()
	                 .update(this.V)
	                 .update([ 0x00 ]);
	  if (seed)
	    kmac = kmac.update(seed);
	  this.K = kmac.digest();
	  this.V = this._hmac().update(this.V).digest();
	  if (!seed)
	    return;

	  this.K = this._hmac()
	               .update(this.V)
	               .update([ 0x01 ])
	               .update(seed)
	               .digest();
	  this.V = this._hmac().update(this.V).digest();
	};

	HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
	  // Optional entropy enc
	  if (typeof entropyEnc !== 'string') {
	    addEnc = add;
	    add = entropyEnc;
	    entropyEnc = null;
	  }

	  entropy = utils.toArray(entropy, entropyEnc);
	  add = utils.toArray(add, addEnc);

	  assert(entropy.length >= (this.minEntropy / 8),
	         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

	  this._update(entropy.concat(add || []));
	  this._reseed = 1;
	};

	HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
	  if (this._reseed > this.reseedInterval)
	    throw new Error('Reseed is required');

	  // Optional encoding
	  if (typeof enc !== 'string') {
	    addEnc = add;
	    add = enc;
	    enc = null;
	  }

	  // Optional additional data
	  if (add) {
	    add = utils.toArray(add, addEnc || 'hex');
	    this._update(add);
	  }

	  var temp = [];
	  while (temp.length < len) {
	    this.V = this._hmac().update(this.V).digest();
	    temp = temp.concat(this.V);
	  }

	  var res = temp.slice(0, len);
	  this._update(add);
	  this._reseed++;
	  return utils.encode(res, enc);
	};


/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	var Stream = __webpack_require__(16);
	var Response = __webpack_require__(305);
	var Base64 = __webpack_require__(161);
	var inherits = __webpack_require__(3);

	var Request = module.exports = function (xhr, params) {
	    var self = this;
	    self.writable = true;
	    self.xhr = xhr;
	    self.body = [];
	    
	    self.uri = (params.protocol || 'http:') + '//'
	        + params.host
	        + (params.port ? ':' + params.port : '')
	        + (params.path || '/')
	    ;
	    
	    if (typeof params.withCredentials === 'undefined') {
	        params.withCredentials = true;
	    }

	    try { xhr.withCredentials = params.withCredentials }
	    catch (e) {}
	    
	    if (params.responseType) try { xhr.responseType = params.responseType }
	    catch (e) {}
	    
	    xhr.open(
	        params.method || 'GET',
	        self.uri,
	        true
	    );

	    xhr.onerror = function(event) {
	        self.emit('error', new Error('Network error'));
	    };

	    self._headers = {};
	    
	    if (params.headers) {
	        var keys = objectKeys(params.headers);
	        for (var i = 0; i < keys.length; i++) {
	            var key = keys[i];
	            if (!self.isSafeRequestHeader(key)) continue;
	            var value = params.headers[key];
	            self.setHeader(key, value);
	        }
	    }
	    
	    if (params.auth) {
	        //basic auth
	        this.setHeader('Authorization', 'Basic ' + Base64.btoa(params.auth));
	    }

	    var res = new Response;
	    res.on('close', function () {
	        self.emit('close');
	    });
	    
	    res.on('ready', function () {
	        self.emit('response', res);
	    });

	    res.on('error', function (err) {
	        self.emit('error', err);
	    });
	    
	    xhr.onreadystatechange = function () {
	        // Fix for IE9 bug
	        // SCRIPT575: Could not complete the operation due to error c00c023f
	        // It happens when a request is aborted, calling the success callback anyway with readyState === 4
	        if (xhr.__aborted) return;
	        res.handle(xhr);
	    };
	};

	inherits(Request, Stream);

	Request.prototype.setHeader = function (key, value) {
	    this._headers[key.toLowerCase()] = value
	};

	Request.prototype.getHeader = function (key) {
	    return this._headers[key.toLowerCase()]
	};

	Request.prototype.removeHeader = function (key) {
	    delete this._headers[key.toLowerCase()]
	};

	Request.prototype.write = function (s) {
	    this.body.push(s);
	};

	Request.prototype.destroy = function (s) {
	    this.xhr.__aborted = true;
	    this.xhr.abort();
	    this.emit('close');
	};

	Request.prototype.end = function (s) {
	    if (s !== undefined) this.body.push(s);

	    var keys = objectKeys(this._headers);
	    for (var i = 0; i < keys.length; i++) {
	        var key = keys[i];
	        var value = this._headers[key];
	        if (isArray(value)) {
	            for (var j = 0; j < value.length; j++) {
	                this.xhr.setRequestHeader(key, value[j]);
	            }
	        }
	        else this.xhr.setRequestHeader(key, value)
	    }

	    if (this.body.length === 0) {
	        this.xhr.send('');
	    }
	    else if (typeof this.body[0] === 'string') {
	        this.xhr.send(this.body.join(''));
	    }
	    else if (isArray(this.body[0])) {
	        var body = [];
	        for (var i = 0; i < this.body.length; i++) {
	            body.push.apply(body, this.body[i]);
	        }
	        this.xhr.send(body);
	    }
	    else if (/Array/.test(Object.prototype.toString.call(this.body[0]))) {
	        var len = 0;
	        for (var i = 0; i < this.body.length; i++) {
	            len += this.body[i].length;
	        }
	        var body = new(this.body[0].constructor)(len);
	        var k = 0;
	        
	        for (var i = 0; i < this.body.length; i++) {
	            var b = this.body[i];
	            for (var j = 0; j < b.length; j++) {
	                body[k++] = b[j];
	            }
	        }
	        this.xhr.send(body);
	    }
	    else if (isXHR2Compatible(this.body[0])) {
	        this.xhr.send(this.body[0]);
	    }
	    else {
	        var body = '';
	        for (var i = 0; i < this.body.length; i++) {
	            body += this.body[i].toString();
	        }
	        this.xhr.send(body);
	    }
	};

	// Taken from http://dxr.mozilla.org/mozilla/mozilla-central/content/base/src/nsXMLHttpRequest.cpp.html
	Request.unsafeHeaders = [
	    "accept-charset",
	    "accept-encoding",
	    "access-control-request-headers",
	    "access-control-request-method",
	    "connection",
	    "content-length",
	    "cookie",
	    "cookie2",
	    "content-transfer-encoding",
	    "date",
	    "expect",
	    "host",
	    "keep-alive",
	    "origin",
	    "referer",
	    "te",
	    "trailer",
	    "transfer-encoding",
	    "upgrade",
	    "user-agent",
	    "via"
	];

	Request.prototype.isSafeRequestHeader = function (headerName) {
	    if (!headerName) return false;
	    return indexOf(Request.unsafeHeaders, headerName.toLowerCase()) === -1;
	};

	var objectKeys = Object.keys || function (obj) {
	    var keys = [];
	    for (var key in obj) keys.push(key);
	    return keys;
	};

	var isArray = Array.isArray || function (xs) {
	    return Object.prototype.toString.call(xs) === '[object Array]';
	};

	var indexOf = function (xs, x) {
	    if (xs.indexOf) return xs.indexOf(x);
	    for (var i = 0; i < xs.length; i++) {
	        if (xs[i] === x) return i;
	    }
	    return -1;
	};

	var isXHR2Compatible = function (obj) {
	    if (typeof Blob !== 'undefined' && obj instanceof Blob) return true;
	    if (typeof ArrayBuffer !== 'undefined' && obj instanceof ArrayBuffer) return true;
	    if (typeof FormData !== 'undefined' && obj instanceof FormData) return true;
	};


/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	var Stream = __webpack_require__(16);
	var util = __webpack_require__(11);

	var Response = module.exports = function (res) {
	    this.offset = 0;
	    this.readable = true;
	};

	util.inherits(Response, Stream);

	var capable = {
	    streaming : true,
	    status2 : true
	};

	function parseHeaders (res) {
	    var lines = res.getAllResponseHeaders().split(/\r?\n/);
	    var headers = {};
	    for (var i = 0; i < lines.length; i++) {
	        var line = lines[i];
	        if (line === '') continue;
	        
	        var m = line.match(/^([^:]+):\s*(.*)/);
	        if (m) {
	            var key = m[1].toLowerCase(), value = m[2];
	            
	            if (headers[key] !== undefined) {
	            
	                if (isArray(headers[key])) {
	                    headers[key].push(value);
	                }
	                else {
	                    headers[key] = [ headers[key], value ];
	                }
	            }
	            else {
	                headers[key] = value;
	            }
	        }
	        else {
	            headers[line] = true;
	        }
	    }
	    return headers;
	}

	Response.prototype.getResponse = function (xhr) {
	    var respType = String(xhr.responseType).toLowerCase();
	    if (respType === 'blob') return xhr.responseBlob || xhr.response;
	    if (respType === 'arraybuffer') return xhr.response;
	    return xhr.responseText;
	}

	Response.prototype.getHeader = function (key) {
	    return this.headers[key.toLowerCase()];
	};

	Response.prototype.handle = function (res) {
	    if (res.readyState === 2 && capable.status2) {
	        try {
	            this.statusCode = res.status;
	            this.headers = parseHeaders(res);
	        }
	        catch (err) {
	            capable.status2 = false;
	        }
	        
	        if (capable.status2) {
	            this.emit('ready');
	        }
	    }
	    else if (capable.streaming && res.readyState === 3) {
	        try {
	            if (!this.statusCode) {
	                this.statusCode = res.status;
	                this.headers = parseHeaders(res);
	                this.emit('ready');
	            }
	        }
	        catch (err) {}
	        
	        try {
	            this._emitData(res);
	        }
	        catch (err) {
	            capable.streaming = false;
	        }
	    }
	    else if (res.readyState === 4) {
	        if (!this.statusCode) {
	            this.statusCode = res.status;
	            this.emit('ready');
	        }
	        this._emitData(res);
	        
	        if (res.error) {
	            this.emit('error', this.getResponse(res));
	        }
	        else this.emit('end');
	        
	        this.emit('close');
	    }
	};

	Response.prototype._emitData = function (res) {
	    var respBody = this.getResponse(res);
	    if (respBody.toString().match(/ArrayBuffer/)) {
	        this.emit('data', new Uint8Array(respBody, this.offset));
	        this.offset = respBody.byteLength;
	        return;
	    }
	    if (respBody.length > this.offset) {
	        this.emit('data', respBody.slice(this.offset));
	        this.offset = respBody.length;
	    }
	};

	var isArray = Array.isArray || function (xs) {
	    return Object.prototype.toString.call(xs) === '[object Array]';
	};


/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	var http = __webpack_require__(129);

	var https = module.exports;

	for (var key in http) {
	    if (http.hasOwnProperty(key)) https[key] = http[key];
	};

	https.request = function (params, cb) {
	    if (!params) params = {};
	    params.scheme = 'https';
	    return http.request.call(this, params, cb);
	}


/***/ },
/* 307 */
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = (nBytes * 8) - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = (nBytes * 8) - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = ((value * c) - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 308 */
/***/ function(module, exports) {

	module.exports = isFunction

	var toString = Object.prototype.toString

	function isFunction (fn) {
	  if (!fn) {
	    return false
	  }
	  var string = toString.call(fn)
	  return string === '[object Function]' ||
	    (typeof fn === 'function' && string !== '[object RegExp]') ||
	    (typeof window !== 'undefined' &&
	     // IE8 and below
	     (fn === window.setTimeout ||
	      fn === window.alert ||
	      fn === window.confirm ||
	      fn === window.prompt))
	};


/***/ },
/* 309 */
/***/ function(module, exports) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 310 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/*
	 * js-sha3 v0.3.1
	 * https://github.com/emn178/js-sha3
	 *
	 * Copyright 2015, emn178@gmail.com
	 *
	 * Licensed under the MIT license:
	 * http://www.opensource.org/licenses/MIT
	 */
	;(function(root, undefined) {
	  'use strict';

	  var NODE_JS = typeof(module) != 'undefined';
	  if(NODE_JS) {
	    root = global;
	    if(root.JS_SHA3_TEST) {
	      root.navigator = { userAgent: 'Chrome'};
	    }
	  }
	  var CHROME = (root.JS_SHA3_TEST || !NODE_JS) && navigator.userAgent.indexOf('Chrome') != -1;
	  var HEX_CHARS = '0123456789abcdef'.split('');
	  var KECCAK_PADDING = [1, 256, 65536, 16777216];
	  var PADDING = [6, 1536, 393216, 100663296];
	  var SHIFT = [0, 8, 16, 24];
	  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
	            0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 
	            2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 
	            2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
	            2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];

	  var blocks = [], s = [];

	  var keccak_224 = function(message) {
	    return keccak(message, 224, KECCAK_PADDING);
	  };

	  var keccak_256 = function(message) {
	    return keccak(message, 256, KECCAK_PADDING);
	  };

	  var keccak_384 = function(message) {
	    return keccak(message, 384, KECCAK_PADDING);
	  };

	  var sha3_224 = function(message) {
	    return keccak(message, 224, PADDING);
	  };

	  var sha3_256 = function(message) {
	    return keccak(message, 256, PADDING);
	  };

	  var sha3_384 = function(message) {
	    return keccak(message, 384, PADDING);
	  };

	  var sha3_512 = function(message) {
	    return keccak(message, 512, PADDING);
	  };

	  var keccak = function(message, bits, padding) {
	    var notString = typeof(message) != 'string';
	    if(notString && message.constructor == root.ArrayBuffer) {
	      message = new Uint8Array(message);
	    }

	    if(bits === undefined) {
	      bits = 512;
	      padding = KECCAK_PADDING;
	    }

	    var block, code, end = false, index = 0, start = 0, length = message.length,
	        n, i, h, l, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, 
	        b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, 
	        b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, 
	        b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
	    var blockCount = (1600 - bits * 2) / 32;
	    var byteCount = blockCount * 4;

	    for(i = 0;i < 50;++i) {
	      s[i] = 0;
	    }

	    block = 0;
	    do {
	      blocks[0] = block;
	      for(i = 1;i < blockCount + 1;++i) {
	        blocks[i] = 0;
	      }
	      if(notString) {
	        for (i = start;index < length && i < byteCount; ++index) {
	          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
	        }
	      } else {
	        for (i = start;index < length && i < byteCount; ++index) {
	          code = message.charCodeAt(index);
	          if (code < 0x80) {
	            blocks[i >> 2] |= code << SHIFT[i++ & 3];
	          } else if (code < 0x800) {
	            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
	          } else if (code < 0xd800 || code >= 0xe000) {
	            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
	          } else {
	            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
	            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
	          }
	        }
	      }
	      start = i - byteCount;
	      if(index == length) {
	        blocks[i >> 2] |= padding[i & 3];
	        ++index;
	      }
	      block = blocks[blockCount];
	      if(index > length && i < byteCount) {
	        blocks[blockCount - 1] |= 0x80000000;
	        end = true;
	      }

	      for(i = 0;i < blockCount;++i) {
	        s[i] ^= blocks[i];
	      }

	      for(n = 0; n < 48; n += 2) {
	        c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
	        c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
	        c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
	        c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
	        c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
	        c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
	        c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
	        c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
	        c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
	        c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

	        h = c8 ^ ((c2 << 1) | (c3 >>> 31));
	        l = c9 ^ ((c3 << 1) | (c2 >>> 31));
	        s[0] ^= h;
	        s[1] ^= l;
	        s[10] ^= h;
	        s[11] ^= l;
	        s[20] ^= h;
	        s[21] ^= l;
	        s[30] ^= h;
	        s[31] ^= l;
	        s[40] ^= h;
	        s[41] ^= l;
	        h = c0 ^ ((c4 << 1) | (c5 >>> 31));
	        l = c1 ^ ((c5 << 1) | (c4 >>> 31));
	        s[2] ^= h;
	        s[3] ^= l;
	        s[12] ^= h;
	        s[13] ^= l;
	        s[22] ^= h;
	        s[23] ^= l;
	        s[32] ^= h;
	        s[33] ^= l;
	        s[42] ^= h;
	        s[43] ^= l;
	        h = c2 ^ ((c6 << 1) | (c7 >>> 31));
	        l = c3 ^ ((c7 << 1) | (c6 >>> 31));
	        s[4] ^= h;
	        s[5] ^= l;
	        s[14] ^= h;
	        s[15] ^= l;
	        s[24] ^= h;
	        s[25] ^= l;
	        s[34] ^= h;
	        s[35] ^= l;
	        s[44] ^= h;
	        s[45] ^= l;
	        h = c4 ^ ((c8 << 1) | (c9 >>> 31));
	        l = c5 ^ ((c9 << 1) | (c8 >>> 31));
	        s[6] ^= h;
	        s[7] ^= l;
	        s[16] ^= h;
	        s[17] ^= l;
	        s[26] ^= h;
	        s[27] ^= l;
	        s[36] ^= h;
	        s[37] ^= l;
	        s[46] ^= h;
	        s[47] ^= l;
	        h = c6 ^ ((c0 << 1) | (c1 >>> 31));
	        l = c7 ^ ((c1 << 1) | (c0 >>> 31));
	        s[8] ^= h;
	        s[9] ^= l;
	        s[18] ^= h;
	        s[19] ^= l;
	        s[28] ^= h;
	        s[29] ^= l;
	        s[38] ^= h;
	        s[39] ^= l;
	        s[48] ^= h;
	        s[49] ^= l;

	        b0 = s[0];
	        b1 = s[1];
	        b32 = (s[11] << 4) | (s[10] >>> 28);
	        b33 = (s[10] << 4) | (s[11] >>> 28);
	        b14 = (s[20] << 3) | (s[21] >>> 29);
	        b15 = (s[21] << 3) | (s[20] >>> 29);
	        b46 = (s[31] << 9) | (s[30] >>> 23);
	        b47 = (s[30] << 9) | (s[31] >>> 23);
	        b28 = (s[40] << 18) | (s[41] >>> 14);
	        b29 = (s[41] << 18) | (s[40] >>> 14);
	        b20 = (s[2] << 1) | (s[3] >>> 31);
	        b21 = (s[3] << 1) | (s[2] >>> 31);
	        b2 = (s[13] << 12) | (s[12] >>> 20);
	        b3 = (s[12] << 12) | (s[13] >>> 20);
	        b34 = (s[22] << 10) | (s[23] >>> 22);
	        b35 = (s[23] << 10) | (s[22] >>> 22);
	        b16 = (s[33] << 13) | (s[32] >>> 19);
	        b17 = (s[32] << 13) | (s[33] >>> 19);
	        b48 = (s[42] << 2) | (s[43] >>> 30);
	        b49 = (s[43] << 2) | (s[42] >>> 30);
	        b40 = (s[5] << 30) | (s[4] >>> 2);
	        b41 = (s[4] << 30) | (s[5] >>> 2);
	        b22 = (s[14] << 6) | (s[15] >>> 26);
	        b23 = (s[15] << 6) | (s[14] >>> 26);
	        b4 = (s[25] << 11) | (s[24] >>> 21);
	        b5 = (s[24] << 11) | (s[25] >>> 21);
	        b36 = (s[34] << 15) | (s[35] >>> 17);
	        b37 = (s[35] << 15) | (s[34] >>> 17);
	        b18 = (s[45] << 29) | (s[44] >>> 3);
	        b19 = (s[44] << 29) | (s[45] >>> 3);
	        b10 = (s[6] << 28) | (s[7] >>> 4);
	        b11 = (s[7] << 28) | (s[6] >>> 4);
	        b42 = (s[17] << 23) | (s[16] >>> 9);
	        b43 = (s[16] << 23) | (s[17] >>> 9);
	        b24 = (s[26] << 25) | (s[27] >>> 7);
	        b25 = (s[27] << 25) | (s[26] >>> 7);
	        b6 = (s[36] << 21) | (s[37] >>> 11);
	        b7 = (s[37] << 21) | (s[36] >>> 11);
	        b38 = (s[47] << 24) | (s[46] >>> 8);
	        b39 = (s[46] << 24) | (s[47] >>> 8);
	        b30 = (s[8] << 27) | (s[9] >>> 5);
	        b31 = (s[9] << 27) | (s[8] >>> 5);
	        b12 = (s[18] << 20) | (s[19] >>> 12);
	        b13 = (s[19] << 20) | (s[18] >>> 12);
	        b44 = (s[29] << 7) | (s[28] >>> 25);
	        b45 = (s[28] << 7) | (s[29] >>> 25);
	        b26 = (s[38] << 8) | (s[39] >>> 24);
	        b27 = (s[39] << 8) | (s[38] >>> 24);
	        b8 = (s[48] << 14) | (s[49] >>> 18);
	        b9 = (s[49] << 14) | (s[48] >>> 18);

	        s[0] = b0 ^ (~b2 & b4);
	        s[1] = b1 ^ (~b3 & b5);
	        s[10] = b10 ^ (~b12 & b14);
	        s[11] = b11 ^ (~b13 & b15);
	        s[20] = b20 ^ (~b22 & b24);
	        s[21] = b21 ^ (~b23 & b25);
	        s[30] = b30 ^ (~b32 & b34);
	        s[31] = b31 ^ (~b33 & b35);
	        s[40] = b40 ^ (~b42 & b44);
	        s[41] = b41 ^ (~b43 & b45);
	        s[2] = b2 ^ (~b4 & b6);
	        s[3] = b3 ^ (~b5 & b7);
	        s[12] = b12 ^ (~b14 & b16);
	        s[13] = b13 ^ (~b15 & b17);
	        s[22] = b22 ^ (~b24 & b26);
	        s[23] = b23 ^ (~b25 & b27);
	        s[32] = b32 ^ (~b34 & b36);
	        s[33] = b33 ^ (~b35 & b37);
	        s[42] = b42 ^ (~b44 & b46);
	        s[43] = b43 ^ (~b45 & b47);
	        s[4] = b4 ^ (~b6 & b8);
	        s[5] = b5 ^ (~b7 & b9);
	        s[14] = b14 ^ (~b16 & b18);
	        s[15] = b15 ^ (~b17 & b19);
	        s[24] = b24 ^ (~b26 & b28);
	        s[25] = b25 ^ (~b27 & b29);
	        s[34] = b34 ^ (~b36 & b38);
	        s[35] = b35 ^ (~b37 & b39);
	        s[44] = b44 ^ (~b46 & b48);
	        s[45] = b45 ^ (~b47 & b49);
	        s[6] = b6 ^ (~b8 & b0);
	        s[7] = b7 ^ (~b9 & b1);
	        s[16] = b16 ^ (~b18 & b10);
	        s[17] = b17 ^ (~b19 & b11);
	        s[26] = b26 ^ (~b28 & b20);
	        s[27] = b27 ^ (~b29 & b21);
	        s[36] = b36 ^ (~b38 & b30);
	        s[37] = b37 ^ (~b39 & b31);
	        s[46] = b46 ^ (~b48 & b40);
	        s[47] = b47 ^ (~b49 & b41);
	        s[8] = b8 ^ (~b0 & b2);
	        s[9] = b9 ^ (~b1 & b3);
	        s[18] = b18 ^ (~b10 & b12);
	        s[19] = b19 ^ (~b11 & b13);
	        s[28] = b28 ^ (~b20 & b22);
	        s[29] = b29 ^ (~b21 & b23);
	        s[38] = b38 ^ (~b30 & b32);
	        s[39] = b39 ^ (~b31 & b33);
	        s[48] = b48 ^ (~b40 & b42);
	        s[49] = b49 ^ (~b41 & b43);

	        s[0] ^= RC[n];
	        s[1] ^= RC[n + 1];
	      }
	    } while(!end);

	    var hex = '';
	    if(CHROME) {
	      b0 = s[0];
	      b1 = s[1];
	      b2 = s[2];
	      b3 = s[3];
	      b4 = s[4];
	      b5 = s[5];
	      b6 = s[6];
	      b7 = s[7];
	      b8 = s[8];
	      b9 = s[9];
	      b10 = s[10];
	      b11 = s[11];
	      b12 = s[12];
	      b13 = s[13];
	      b14 = s[14];
	      b15 = s[15];
	      hex += HEX_CHARS[(b0 >> 4) & 0x0F] + HEX_CHARS[b0 & 0x0F] +
	             HEX_CHARS[(b0 >> 12) & 0x0F] + HEX_CHARS[(b0 >> 8) & 0x0F] +
	             HEX_CHARS[(b0 >> 20) & 0x0F] + HEX_CHARS[(b0 >> 16) & 0x0F] +
	             HEX_CHARS[(b0 >> 28) & 0x0F] + HEX_CHARS[(b0 >> 24) & 0x0F] +
	             HEX_CHARS[(b1 >> 4) & 0x0F] + HEX_CHARS[b1 & 0x0F] +
	             HEX_CHARS[(b1 >> 12) & 0x0F] + HEX_CHARS[(b1 >> 8) & 0x0F] +
	             HEX_CHARS[(b1 >> 20) & 0x0F] + HEX_CHARS[(b1 >> 16) & 0x0F] +
	             HEX_CHARS[(b1 >> 28) & 0x0F] + HEX_CHARS[(b1 >> 24) & 0x0F] +
	             HEX_CHARS[(b2 >> 4) & 0x0F] + HEX_CHARS[b2 & 0x0F] +
	             HEX_CHARS[(b2 >> 12) & 0x0F] + HEX_CHARS[(b2 >> 8) & 0x0F] +
	             HEX_CHARS[(b2 >> 20) & 0x0F] + HEX_CHARS[(b2 >> 16) & 0x0F] +
	             HEX_CHARS[(b2 >> 28) & 0x0F] + HEX_CHARS[(b2 >> 24) & 0x0F] +
	             HEX_CHARS[(b3 >> 4) & 0x0F] + HEX_CHARS[b3 & 0x0F] +
	             HEX_CHARS[(b3 >> 12) & 0x0F] + HEX_CHARS[(b3 >> 8) & 0x0F] +
	             HEX_CHARS[(b3 >> 20) & 0x0F] + HEX_CHARS[(b3 >> 16) & 0x0F] +
	             HEX_CHARS[(b3 >> 28) & 0x0F] + HEX_CHARS[(b3 >> 24) & 0x0F] +
	             HEX_CHARS[(b4 >> 4) & 0x0F] + HEX_CHARS[b4 & 0x0F] +
	             HEX_CHARS[(b4 >> 12) & 0x0F] + HEX_CHARS[(b4 >> 8) & 0x0F] +
	             HEX_CHARS[(b4 >> 20) & 0x0F] + HEX_CHARS[(b4 >> 16) & 0x0F] +
	             HEX_CHARS[(b4 >> 28) & 0x0F] + HEX_CHARS[(b4 >> 24) & 0x0F] +
	             HEX_CHARS[(b5 >> 4) & 0x0F] + HEX_CHARS[b5 & 0x0F] +
	             HEX_CHARS[(b5 >> 12) & 0x0F] + HEX_CHARS[(b5 >> 8) & 0x0F] +
	             HEX_CHARS[(b5 >> 20) & 0x0F] + HEX_CHARS[(b5 >> 16) & 0x0F] +
	             HEX_CHARS[(b5 >> 28) & 0x0F] + HEX_CHARS[(b5 >> 24) & 0x0F] +
	             HEX_CHARS[(b6 >> 4) & 0x0F] + HEX_CHARS[b6 & 0x0F] +
	             HEX_CHARS[(b6 >> 12) & 0x0F] + HEX_CHARS[(b6 >> 8) & 0x0F] +
	             HEX_CHARS[(b6 >> 20) & 0x0F] + HEX_CHARS[(b6 >> 16) & 0x0F] +
	             HEX_CHARS[(b6 >> 28) & 0x0F] + HEX_CHARS[(b6 >> 24) & 0x0F];

	      if(bits >= 256) {
	        hex += HEX_CHARS[(b7 >> 4) & 0x0F] + HEX_CHARS[b7 & 0x0F] +
	               HEX_CHARS[(b7 >> 12) & 0x0F] + HEX_CHARS[(b7 >> 8) & 0x0F] +
	               HEX_CHARS[(b7 >> 20) & 0x0F] + HEX_CHARS[(b7 >> 16) & 0x0F] +
	               HEX_CHARS[(b7 >> 28) & 0x0F] + HEX_CHARS[(b7 >> 24) & 0x0F];
	      }
	      if(bits >= 384) {
	        hex += HEX_CHARS[(b8 >> 4) & 0x0F] + HEX_CHARS[b8 & 0x0F] +
	               HEX_CHARS[(b8 >> 12) & 0x0F] + HEX_CHARS[(b8 >> 8) & 0x0F] +
	               HEX_CHARS[(b8 >> 20) & 0x0F] + HEX_CHARS[(b8 >> 16) & 0x0F] +
	               HEX_CHARS[(b8 >> 28) & 0x0F] + HEX_CHARS[(b8 >> 24) & 0x0F] +
	               HEX_CHARS[(b9 >> 4) & 0x0F] + HEX_CHARS[b9 & 0x0F] +
	               HEX_CHARS[(b9 >> 12) & 0x0F] + HEX_CHARS[(b9 >> 8) & 0x0F] +
	               HEX_CHARS[(b9 >> 20) & 0x0F] + HEX_CHARS[(b9 >> 16) & 0x0F] +
	               HEX_CHARS[(b9 >> 28) & 0x0F] + HEX_CHARS[(b9 >> 24) & 0x0F] +
	               HEX_CHARS[(b10 >> 4) & 0x0F] + HEX_CHARS[b10 & 0x0F] +
	               HEX_CHARS[(b10 >> 12) & 0x0F] + HEX_CHARS[(b10 >> 8) & 0x0F] +
	               HEX_CHARS[(b10 >> 20) & 0x0F] + HEX_CHARS[(b10 >> 16) & 0x0F] +
	               HEX_CHARS[(b10 >> 28) & 0x0F] + HEX_CHARS[(b10 >> 24) & 0x0F] +
	               HEX_CHARS[(b11 >> 4) & 0x0F] + HEX_CHARS[b11 & 0x0F] +
	               HEX_CHARS[(b11 >> 12) & 0x0F] + HEX_CHARS[(b11 >> 8) & 0x0F] +
	               HEX_CHARS[(b11 >> 20) & 0x0F] + HEX_CHARS[(b11 >> 16) & 0x0F] +
	               HEX_CHARS[(b11 >> 28) & 0x0F] + HEX_CHARS[(b11 >> 24) & 0x0F];
	      }
	      if(bits == 512) {
	        hex += HEX_CHARS[(b12 >> 4) & 0x0F] + HEX_CHARS[b12 & 0x0F] +
	               HEX_CHARS[(b12 >> 12) & 0x0F] + HEX_CHARS[(b12 >> 8) & 0x0F] +
	               HEX_CHARS[(b12 >> 20) & 0x0F] + HEX_CHARS[(b12 >> 16) & 0x0F] +
	               HEX_CHARS[(b12 >> 28) & 0x0F] + HEX_CHARS[(b12 >> 24) & 0x0F] +
	               HEX_CHARS[(b13 >> 4) & 0x0F] + HEX_CHARS[b13 & 0x0F] +
	               HEX_CHARS[(b13 >> 12) & 0x0F] + HEX_CHARS[(b13 >> 8) & 0x0F] +
	               HEX_CHARS[(b13 >> 20) & 0x0F] + HEX_CHARS[(b13 >> 16) & 0x0F] +
	               HEX_CHARS[(b13 >> 28) & 0x0F] + HEX_CHARS[(b13 >> 24) & 0x0F] +
	               HEX_CHARS[(b14 >> 4) & 0x0F] + HEX_CHARS[b14 & 0x0F] +
	               HEX_CHARS[(b14 >> 12) & 0x0F] + HEX_CHARS[(b14 >> 8) & 0x0F] +
	               HEX_CHARS[(b14 >> 20) & 0x0F] + HEX_CHARS[(b14 >> 16) & 0x0F] +
	               HEX_CHARS[(b14 >> 28) & 0x0F] + HEX_CHARS[(b14 >> 24) & 0x0F] +
	               HEX_CHARS[(b15 >> 4) & 0x0F] + HEX_CHARS[b15 & 0x0F] +
	               HEX_CHARS[(b15 >> 12) & 0x0F] + HEX_CHARS[(b15 >> 8) & 0x0F] +
	               HEX_CHARS[(b15 >> 20) & 0x0F] + HEX_CHARS[(b15 >> 16) & 0x0F] +
	               HEX_CHARS[(b15 >> 28) & 0x0F] + HEX_CHARS[(b15 >> 24) & 0x0F];
	      }
	    } else {
	      for(i = 0, n = bits / 32;i < n;++i) {
	        h = s[i];
	        hex += HEX_CHARS[(h >> 4) & 0x0F] + HEX_CHARS[h & 0x0F] +
	               HEX_CHARS[(h >> 12) & 0x0F] + HEX_CHARS[(h >> 8) & 0x0F] +
	               HEX_CHARS[(h >> 20) & 0x0F] + HEX_CHARS[(h >> 16) & 0x0F] +
	               HEX_CHARS[(h >> 28) & 0x0F] + HEX_CHARS[(h >> 24) & 0x0F];
	      }
	    }
	    return hex;
	  };
	  
	  if(!root.JS_SHA3_TEST && NODE_JS) {
	    module.exports = {
	      sha3_512: sha3_512,
	      sha3_384: sha3_384,
	      sha3_256: sha3_256,
	      sha3_224: sha3_224,
	      keccak_512: keccak,
	      keccak_384: keccak_384,
	      keccak_256: keccak_256,
	      keccak_224: keccak_224
	    };
	  } else if(root) {
	    root.sha3_512 = sha3_512;
	    root.sha3_384 = sha3_384;
	    root.sha3_256 = sha3_256;
	    root.sha3_224 = sha3_224;
	    root.keccak_512 = keccak;
	    root.keccak_384 = keccak_384;
	    root.keccak_256 = keccak_256;
	    root.keccak_224 = keccak_224;
	  }
	}(this));

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 311 */
/***/ function(module, exports) {

	module.exports = {
		"name": "bigi",
		"version": "1.4.1",
		"description": "Big integers.",
		"keywords": [
			"cryptography",
			"math",
			"bitcoin",
			"arbitrary",
			"precision",
			"arithmetic",
			"big",
			"integer",
			"int",
			"number",
			"biginteger",
			"bigint",
			"bignumber",
			"decimal",
			"float"
		],
		"devDependencies": {
			"coveralls": "^2.11.2",
			"istanbul": "^0.3.5",
			"jshint": "^2.5.1",
			"mocha": "^2.1.0",
			"mochify": "^2.1.0"
		},
		"repository": {
			"url": "https://github.com/cryptocoinjs/bigi",
			"type": "git"
		},
		"main": "./lib/index.js",
		"scripts": {
			"browser-test": "./node_modules/.bin/mochify --wd -R spec",
			"test": "./node_modules/.bin/_mocha -- test/*.js",
			"jshint": "./node_modules/.bin/jshint --config jshint.json lib/*.js ; true",
			"unit": "./node_modules/.bin/mocha",
			"coverage": "./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- --reporter list test/*.js",
			"coveralls": "npm run-script coverage && node ./node_modules/.bin/coveralls < coverage/lcov.info"
		},
		"dependencies": {},
		"testling": {
			"files": "test/*.js",
			"harness": "mocha",
			"browsers": [
				"ie/9..latest",
				"firefox/latest",
				"chrome/latest",
				"safari/6.0..latest",
				"iphone/6.0..latest",
				"android-browser/4.2..latest"
			]
		}
	};

/***/ },
/* 312 */
/***/ function(module, exports) {

	module.exports = {
		"secp128r1": {
			"p": "fffffffdffffffffffffffffffffffff",
			"a": "fffffffdfffffffffffffffffffffffc",
			"b": "e87579c11079f43dd824993c2cee5ed3",
			"n": "fffffffe0000000075a30d1b9038a115",
			"h": "01",
			"Gx": "161ff7528b899b2d0c28607ca52c5b86",
			"Gy": "cf5ac8395bafeb13c02da292dded7a83"
		},
		"secp160k1": {
			"p": "fffffffffffffffffffffffffffffffeffffac73",
			"a": "00",
			"b": "07",
			"n": "0100000000000000000001b8fa16dfab9aca16b6b3",
			"h": "01",
			"Gx": "3b4c382ce37aa192a4019e763036f4f5dd4d7ebb",
			"Gy": "938cf935318fdced6bc28286531733c3f03c4fee"
		},
		"secp160r1": {
			"p": "ffffffffffffffffffffffffffffffff7fffffff",
			"a": "ffffffffffffffffffffffffffffffff7ffffffc",
			"b": "1c97befc54bd7a8b65acf89f81d4d4adc565fa45",
			"n": "0100000000000000000001f4c8f927aed3ca752257",
			"h": "01",
			"Gx": "4a96b5688ef573284664698968c38bb913cbfc82",
			"Gy": "23a628553168947d59dcc912042351377ac5fb32"
		},
		"secp192k1": {
			"p": "fffffffffffffffffffffffffffffffffffffffeffffee37",
			"a": "00",
			"b": "03",
			"n": "fffffffffffffffffffffffe26f2fc170f69466a74defd8d",
			"h": "01",
			"Gx": "db4ff10ec057e9ae26b07d0280b7f4341da5d1b1eae06c7d",
			"Gy": "9b2f2f6d9c5628a7844163d015be86344082aa88d95e2f9d"
		},
		"secp192r1": {
			"p": "fffffffffffffffffffffffffffffffeffffffffffffffff",
			"a": "fffffffffffffffffffffffffffffffefffffffffffffffc",
			"b": "64210519e59c80e70fa7e9ab72243049feb8deecc146b9b1",
			"n": "ffffffffffffffffffffffff99def836146bc9b1b4d22831",
			"h": "01",
			"Gx": "188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012",
			"Gy": "07192b95ffc8da78631011ed6b24cdd573f977a11e794811"
		},
		"secp256k1": {
			"p": "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f",
			"a": "00",
			"b": "07",
			"n": "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141",
			"h": "01",
			"Gx": "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
			"Gy": "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8"
		},
		"secp256r1": {
			"p": "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff",
			"a": "ffffffff00000001000000000000000000000000fffffffffffffffffffffffc",
			"b": "5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b",
			"n": "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551",
			"h": "01",
			"Gx": "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296",
			"Gy": "4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5"
		}
	};

/***/ },
/* 313 */
/***/ function(module, exports) {

	module.exports = {
		"name": "elliptic",
		"version": "6.5.3",
		"description": "EC cryptography",
		"main": "lib/elliptic.js",
		"files": [
			"lib"
		],
		"scripts": {
			"jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
			"jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
			"lint": "npm run jscs && npm run jshint",
			"unit": "istanbul test _mocha --reporter=spec test/index.js",
			"test": "npm run lint && npm run unit",
			"version": "grunt dist && git add dist/"
		},
		"repository": {
			"type": "git",
			"url": "git@github.com:indutny/elliptic"
		},
		"keywords": [
			"EC",
			"Elliptic",
			"curve",
			"Cryptography"
		],
		"author": "Fedor Indutny <fedor@indutny.com>",
		"license": "MIT",
		"bugs": {
			"url": "https://github.com/indutny/elliptic/issues"
		},
		"homepage": "https://github.com/indutny/elliptic",
		"devDependencies": {
			"brfs": "^1.4.3",
			"coveralls": "^3.0.8",
			"grunt": "^1.0.4",
			"grunt-browserify": "^5.0.0",
			"grunt-cli": "^1.2.0",
			"grunt-contrib-connect": "^1.0.0",
			"grunt-contrib-copy": "^1.0.0",
			"grunt-contrib-uglify": "^1.0.1",
			"grunt-mocha-istanbul": "^3.0.1",
			"grunt-saucelabs": "^9.0.1",
			"istanbul": "^0.4.2",
			"jscs": "^3.0.7",
			"jshint": "^2.10.3",
			"mocha": "^6.2.2"
		},
		"dependencies": {
			"bn.js": "^4.4.0",
			"brorand": "^1.0.1",
			"hash.js": "^1.0.0",
			"hmac-drbg": "^1.0.0",
			"inherits": "^2.0.1",
			"minimalistic-assert": "^1.0.0",
			"minimalistic-crypto-utils": "^1.0.0"
		}
	};

/***/ },
/* 314 */
/***/ function(module, exports) {

	module.exports = {
		"4001": {
			"standard": "EIP 1193",
			"message": "User rejected the request."
		},
		"4100": {
			"standard": "EIP 1193",
			"message": "The requested account and/or method has not been authorized by the user."
		},
		"4200": {
			"standard": "EIP 1193",
			"message": "The requested method is not supported by this Ethereum provider."
		},
		"-32700": {
			"standard": "JSON RPC 2.0",
			"message": "Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text."
		},
		"-32600": {
			"standard": "JSON RPC 2.0",
			"message": "The JSON sent is not a valid Request object."
		},
		"-32601": {
			"standard": "JSON RPC 2.0",
			"message": "The method does not exist / is not available."
		},
		"-32602": {
			"standard": "JSON RPC 2.0",
			"message": "Invalid method parameter(s)."
		},
		"-32603": {
			"standard": "JSON RPC 2.0",
			"message": "Internal JSON-RPC error."
		},
		"-32000": {
			"standard": "EIP 1474",
			"message": "Invalid input."
		},
		"-32001": {
			"standard": "EIP 1474",
			"message": "Resource not found."
		},
		"-32002": {
			"standard": "EIP 1474",
			"message": "Resource unavailable."
		},
		"-32003": {
			"standard": "EIP 1474",
			"message": "Transaction rejected."
		},
		"-32004": {
			"standard": "EIP 1474",
			"message": "Method not supported."
		}
	};

/***/ },
/* 315 */
/***/ function(module, exports) {

	module.exports = {
		"genesisGasLimit": {
			"v": 5000,
			"d": "Gas limit of the Genesis block."
		},
		"genesisDifficulty": {
			"v": 17179869184,
			"d": "Difficulty of the Genesis block."
		},
		"genesisNonce": {
			"v": "0x0000000000000042",
			"d": "the geneis nonce"
		},
		"genesisExtraData": {
			"v": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
			"d": "extra data "
		},
		"genesisHash": {
			"v": "0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3",
			"d": "genesis hash"
		},
		"genesisStateRoot": {
			"v": "0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544",
			"d": "the genesis state root"
		},
		"minGasLimit": {
			"v": 5000,
			"d": "Minimum the gas limit may ever be."
		},
		"gasLimitBoundDivisor": {
			"v": 1024,
			"d": "The bound divisor of the gas limit, used in update calculations."
		},
		"minimumDifficulty": {
			"v": 131072,
			"d": "The minimum that the difficulty may ever be."
		},
		"difficultyBoundDivisor": {
			"v": 2048,
			"d": "The bound divisor of the difficulty, used in the update calculations."
		},
		"durationLimit": {
			"v": 13,
			"d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not."
		},
		"maximumExtraDataSize": {
			"v": 32,
			"d": "Maximum size extra data may be after Genesis."
		},
		"epochDuration": {
			"v": 30000,
			"d": "Duration between proof-of-work epochs."
		},
		"stackLimit": {
			"v": 1024,
			"d": "Maximum size of VM stack allowed."
		},
		"callCreateDepth": {
			"v": 1024,
			"d": "Maximum depth of call/create stack."
		},
		"tierStepGas": {
			"v": [
				0,
				2,
				3,
				5,
				8,
				10,
				20
			],
			"d": "Once per operation, for a selection of them."
		},
		"expGas": {
			"v": 10,
			"d": "Once per EXP instuction."
		},
		"expByteGas": {
			"v": 10,
			"d": "Times ceil(log256(exponent)) for the EXP instruction."
		},
		"sha3Gas": {
			"v": 30,
			"d": "Once per SHA3 operation."
		},
		"sha3WordGas": {
			"v": 6,
			"d": "Once per word of the SHA3 operation's data."
		},
		"sloadGas": {
			"v": 50,
			"d": "Once per SLOAD operation."
		},
		"sstoreSetGas": {
			"v": 20000,
			"d": "Once per SSTORE operation if the zeroness changes from zero."
		},
		"sstoreResetGas": {
			"v": 5000,
			"d": "Once per SSTORE operation if the zeroness does not change from zero."
		},
		"sstoreRefundGas": {
			"v": 15000,
			"d": "Once per SSTORE operation if the zeroness changes to zero."
		},
		"jumpdestGas": {
			"v": 1,
			"d": "Refunded gas, once per SSTORE operation if the zeroness changes to zero."
		},
		"logGas": {
			"v": 375,
			"d": "Per LOG* operation."
		},
		"logDataGas": {
			"v": 8,
			"d": "Per byte in a LOG* operation's data."
		},
		"logTopicGas": {
			"v": 375,
			"d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas."
		},
		"createGas": {
			"v": 32000,
			"d": "Once per CREATE operation & contract-creation transaction."
		},
		"callGas": {
			"v": 40,
			"d": "Once per CALL operation & message call transaction."
		},
		"callStipend": {
			"v": 2300,
			"d": "Free gas given at beginning of call."
		},
		"callValueTransferGas": {
			"v": 9000,
			"d": "Paid for CALL when the value transfor is non-zero."
		},
		"callNewAccountGas": {
			"v": 25000,
			"d": "Paid for CALL when the destination address didn't exist prior."
		},
		"suicideRefundGas": {
			"v": 24000,
			"d": "Refunded following a suicide operation."
		},
		"memoryGas": {
			"v": 3,
			"d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL."
		},
		"quadCoeffDiv": {
			"v": 512,
			"d": "Divisor for the quadratic particle of the memory cost equation."
		},
		"createDataGas": {
			"v": 200,
			"d": ""
		},
		"txGas": {
			"v": 21000,
			"d": "Per transaction. NOTE: Not payable on data of calls between transactions."
		},
		"txCreation": {
			"v": 32000,
			"d": "the cost of creating a contract via tx"
		},
		"txDataZeroGas": {
			"v": 4,
			"d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions."
		},
		"txDataNonZeroGas": {
			"v": 68,
			"d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions."
		},
		"copyGas": {
			"v": 3,
			"d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added."
		},
		"ecrecoverGas": {
			"v": 3000,
			"d": ""
		},
		"sha256Gas": {
			"v": 60,
			"d": ""
		},
		"sha256WordGas": {
			"v": 12,
			"d": ""
		},
		"ripemd160Gas": {
			"v": 600,
			"d": ""
		},
		"ripemd160WordGas": {
			"v": 120,
			"d": ""
		},
		"identityGas": {
			"v": 15,
			"d": ""
		},
		"identityWordGas": {
			"v": 3,
			"d": ""
		},
		"minerReward": {
			"v": "5000000000000000000",
			"d": "the amount a miner get rewarded for mining a block"
		},
		"ommerReward": {
			"v": "625000000000000000",
			"d": "The amount of wei a miner of an uncle block gets for being inculded in the blockchain"
		},
		"niblingReward": {
			"v": "156250000000000000",
			"d": "the amount a miner gets for inculding a uncle"
		},
		"homeSteadForkNumber": {
			"v": 1150000,
			"d": "the block that the Homestead fork started at"
		},
		"homesteadRepriceForkNumber": {
			"v": 2463000,
			"d": "the block that the Homestead Reprice (EIP150) fork started at"
		},
		"timebombPeriod": {
			"v": 100000,
			"d": "Exponential difficulty timebomb period"
		},
		"freeBlockPeriod": {
			"v": 2
		}
	};

/***/ },
/* 316 */
/***/ function(module, exports) {

	module.exports = [
		{
			"constant": true,
			"inputs": [
				{
					"name": "_owner",
					"type": "address"
				}
			],
			"name": "name",
			"outputs": [
				{
					"name": "o_name",
					"type": "bytes32"
				}
			],
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [
				{
					"name": "_name",
					"type": "bytes32"
				}
			],
			"name": "owner",
			"outputs": [
				{
					"name": "",
					"type": "address"
				}
			],
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [
				{
					"name": "_name",
					"type": "bytes32"
				}
			],
			"name": "content",
			"outputs": [
				{
					"name": "",
					"type": "bytes32"
				}
			],
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [
				{
					"name": "_name",
					"type": "bytes32"
				}
			],
			"name": "addr",
			"outputs": [
				{
					"name": "",
					"type": "address"
				}
			],
			"type": "function"
		},
		{
			"constant": false,
			"inputs": [
				{
					"name": "_name",
					"type": "bytes32"
				}
			],
			"name": "reserve",
			"outputs": [],
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [
				{
					"name": "_name",
					"type": "bytes32"
				}
			],
			"name": "subRegistrar",
			"outputs": [
				{
					"name": "",
					"type": "address"
				}
			],
			"type": "function"
		},
		{
			"constant": false,
			"inputs": [
				{
					"name": "_name",
					"type": "bytes32"
				},
				{
					"name": "_newOwner",
					"type": "address"
				}
			],
			"name": "transfer",
			"outputs": [],
			"type": "function"
		},
		{
			"constant": false,
			"inputs": [
				{
					"name": "_name",
					"type": "bytes32"
				},
				{
					"name": "_registrar",
					"type": "address"
				}
			],
			"name": "setSubRegistrar",
			"outputs": [],
			"type": "function"
		},
		{
			"constant": false,
			"inputs": [],
			"name": "Registrar",
			"outputs": [],
			"type": "function"
		},
		{
			"constant": false,
			"inputs": [
				{
					"name": "_name",
					"type": "bytes32"
				},
				{
					"name": "_a",
					"type": "address"
				},
				{
					"name": "_primary",
					"type": "bool"
				}
			],
			"name": "setAddress",
			"outputs": [],
			"type": "function"
		},
		{
			"constant": false,
			"inputs": [
				{
					"name": "_name",
					"type": "bytes32"
				},
				{
					"name": "_content",
					"type": "bytes32"
				}
			],
			"name": "setContent",
			"outputs": [],
			"type": "function"
		},
		{
			"constant": false,
			"inputs": [
				{
					"name": "_name",
					"type": "bytes32"
				}
			],
			"name": "disown",
			"outputs": [],
			"type": "function"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"name": "_name",
					"type": "bytes32"
				},
				{
					"indexed": false,
					"name": "_winner",
					"type": "address"
				}
			],
			"name": "AuctionEnded",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"name": "_name",
					"type": "bytes32"
				},
				{
					"indexed": false,
					"name": "_bidder",
					"type": "address"
				},
				{
					"indexed": false,
					"name": "_value",
					"type": "uint256"
				}
			],
			"name": "NewBid",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"name": "name",
					"type": "bytes32"
				}
			],
			"name": "Changed",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"name": "name",
					"type": "bytes32"
				},
				{
					"indexed": true,
					"name": "addr",
					"type": "address"
				}
			],
			"name": "PrimaryChanged",
			"type": "event"
		}
	];

/***/ },
/* 317 */
/***/ function(module, exports) {

	module.exports = [
		{
			"constant": true,
			"inputs": [
				{
					"name": "_name",
					"type": "bytes32"
				}
			],
			"name": "owner",
			"outputs": [
				{
					"name": "",
					"type": "address"
				}
			],
			"type": "function"
		},
		{
			"constant": false,
			"inputs": [
				{
					"name": "_name",
					"type": "bytes32"
				},
				{
					"name": "_refund",
					"type": "address"
				}
			],
			"name": "disown",
			"outputs": [],
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [
				{
					"name": "_name",
					"type": "bytes32"
				}
			],
			"name": "addr",
			"outputs": [
				{
					"name": "",
					"type": "address"
				}
			],
			"type": "function"
		},
		{
			"constant": false,
			"inputs": [
				{
					"name": "_name",
					"type": "bytes32"
				}
			],
			"name": "reserve",
			"outputs": [],
			"type": "function"
		},
		{
			"constant": false,
			"inputs": [
				{
					"name": "_name",
					"type": "bytes32"
				},
				{
					"name": "_newOwner",
					"type": "address"
				}
			],
			"name": "transfer",
			"outputs": [],
			"type": "function"
		},
		{
			"constant": false,
			"inputs": [
				{
					"name": "_name",
					"type": "bytes32"
				},
				{
					"name": "_a",
					"type": "address"
				}
			],
			"name": "setAddr",
			"outputs": [],
			"type": "function"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"name": "name",
					"type": "bytes32"
				}
			],
			"name": "Changed",
			"type": "event"
		}
	];

/***/ },
/* 318 */
/***/ function(module, exports) {

	module.exports = [
		{
			"constant": false,
			"inputs": [
				{
					"name": "from",
					"type": "bytes32"
				},
				{
					"name": "to",
					"type": "address"
				},
				{
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "transfer",
			"outputs": [],
			"type": "function"
		},
		{
			"constant": false,
			"inputs": [
				{
					"name": "from",
					"type": "bytes32"
				},
				{
					"name": "to",
					"type": "address"
				},
				{
					"name": "indirectId",
					"type": "bytes32"
				},
				{
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "icapTransfer",
			"outputs": [],
			"type": "function"
		},
		{
			"constant": false,
			"inputs": [
				{
					"name": "to",
					"type": "bytes32"
				}
			],
			"name": "deposit",
			"outputs": [],
			"payable": true,
			"type": "function"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"name": "from",
					"type": "address"
				},
				{
					"indexed": false,
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "AnonymousDeposit",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"name": "from",
					"type": "address"
				},
				{
					"indexed": true,
					"name": "to",
					"type": "bytes32"
				},
				{
					"indexed": false,
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "Deposit",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"name": "from",
					"type": "bytes32"
				},
				{
					"indexed": true,
					"name": "to",
					"type": "address"
				},
				{
					"indexed": false,
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "Transfer",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"name": "from",
					"type": "bytes32"
				},
				{
					"indexed": true,
					"name": "to",
					"type": "address"
				},
				{
					"indexed": false,
					"name": "indirectId",
					"type": "bytes32"
				},
				{
					"indexed": false,
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "IcapTransfer",
			"type": "event"
		}
	];

/***/ },
/* 319 */
/***/ function(module, exports) {

	module.exports = {
		"version": "0.20.7"
	};

/***/ },
/* 320 */
/***/ function(module, exports) {

	module.exports = IdIterator

	function IdIterator(opts){
	  opts = opts || {}
	  var max = opts.max || Number.MAX_SAFE_INTEGER
	  var idCounter = typeof opts.start !== 'undefined' ? opts.start : Math.floor(Math.random() * max)

	  return function createRandomId () {
	    idCounter = idCounter % max
	    return idCounter++
	  }

	}

/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	var json = typeof JSON !== 'undefined' ? JSON : __webpack_require__(322);

	module.exports = function (obj, opts) {
	    if (!opts) opts = {};
	    if (typeof opts === 'function') opts = { cmp: opts };
	    var space = opts.space || '';
	    if (typeof space === 'number') space = Array(space+1).join(' ');
	    var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;
	    var replacer = opts.replacer || function(key, value) { return value; };

	    var cmp = opts.cmp && (function (f) {
	        return function (node) {
	            return function (a, b) {
	                var aobj = { key: a, value: node[a] };
	                var bobj = { key: b, value: node[b] };
	                return f(aobj, bobj);
	            };
	        };
	    })(opts.cmp);

	    var seen = [];
	    return (function stringify (parent, key, node, level) {
	        var indent = space ? ('\n' + new Array(level + 1).join(space)) : '';
	        var colonSeparator = space ? ': ' : ':';

	        if (node && node.toJSON && typeof node.toJSON === 'function') {
	            node = node.toJSON();
	        }

	        node = replacer.call(parent, key, node);

	        if (node === undefined) {
	            return;
	        }
	        if (typeof node !== 'object' || node === null) {
	            return json.stringify(node);
	        }
	        if (isArray(node)) {
	            var out = [];
	            for (var i = 0; i < node.length; i++) {
	                var item = stringify(node, i, node[i], level+1) || json.stringify(null);
	                out.push(indent + space + item);
	            }
	            return '[' + out.join(',') + indent + ']';
	        }
	        else {
	            if (seen.indexOf(node) !== -1) {
	                if (cycles) return json.stringify('__cycle__');
	                throw new TypeError('Converting circular structure to JSON');
	            }
	            else seen.push(node);

	            var keys = objectKeys(node).sort(cmp && cmp(node));
	            var out = [];
	            for (var i = 0; i < keys.length; i++) {
	                var key = keys[i];
	                var value = stringify(node, key, node[key], level+1);

	                if(!value) continue;

	                var keyValue = json.stringify(key)
	                    + colonSeparator
	                    + value;
	                ;
	                out.push(indent + space + keyValue);
	            }
	            seen.splice(seen.indexOf(node), 1);
	            return '{' + out.join(',') + indent + '}';
	        }
	    })({ '': obj }, '', obj, 0);
	};

	var isArray = Array.isArray || function (x) {
	    return {}.toString.call(x) === '[object Array]';
	};

	var objectKeys = Object.keys || function (obj) {
	    var has = Object.prototype.hasOwnProperty || function () { return true };
	    var keys = [];
	    for (var key in obj) {
	        if (has.call(obj, key)) keys.push(key);
	    }
	    return keys;
	};


/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	exports.parse = __webpack_require__(323);
	exports.stringify = __webpack_require__(324);


/***/ },
/* 323 */
/***/ function(module, exports) {

	var at, // The index of the current character
	    ch, // The current character
	    escapee = {
	        '"':  '"',
	        '\\': '\\',
	        '/':  '/',
	        b:    '\b',
	        f:    '\f',
	        n:    '\n',
	        r:    '\r',
	        t:    '\t'
	    },
	    text,

	    error = function (m) {
	        // Call error when something is wrong.
	        throw {
	            name:    'SyntaxError',
	            message: m,
	            at:      at,
	            text:    text
	        };
	    },
	    
	    next = function (c) {
	        // If a c parameter is provided, verify that it matches the current character.
	        if (c && c !== ch) {
	            error("Expected '" + c + "' instead of '" + ch + "'");
	        }
	        
	        // Get the next character. When there are no more characters,
	        // return the empty string.
	        
	        ch = text.charAt(at);
	        at += 1;
	        return ch;
	    },
	    
	    number = function () {
	        // Parse a number value.
	        var number,
	            string = '';
	        
	        if (ch === '-') {
	            string = '-';
	            next('-');
	        }
	        while (ch >= '0' && ch <= '9') {
	            string += ch;
	            next();
	        }
	        if (ch === '.') {
	            string += '.';
	            while (next() && ch >= '0' && ch <= '9') {
	                string += ch;
	            }
	        }
	        if (ch === 'e' || ch === 'E') {
	            string += ch;
	            next();
	            if (ch === '-' || ch === '+') {
	                string += ch;
	                next();
	            }
	            while (ch >= '0' && ch <= '9') {
	                string += ch;
	                next();
	            }
	        }
	        number = +string;
	        if (!isFinite(number)) {
	            error("Bad number");
	        } else {
	            return number;
	        }
	    },
	    
	    string = function () {
	        // Parse a string value.
	        var hex,
	            i,
	            string = '',
	            uffff;
	        
	        // When parsing for string values, we must look for " and \ characters.
	        if (ch === '"') {
	            while (next()) {
	                if (ch === '"') {
	                    next();
	                    return string;
	                } else if (ch === '\\') {
	                    next();
	                    if (ch === 'u') {
	                        uffff = 0;
	                        for (i = 0; i < 4; i += 1) {
	                            hex = parseInt(next(), 16);
	                            if (!isFinite(hex)) {
	                                break;
	                            }
	                            uffff = uffff * 16 + hex;
	                        }
	                        string += String.fromCharCode(uffff);
	                    } else if (typeof escapee[ch] === 'string') {
	                        string += escapee[ch];
	                    } else {
	                        break;
	                    }
	                } else {
	                    string += ch;
	                }
	            }
	        }
	        error("Bad string");
	    },

	    white = function () {

	// Skip whitespace.

	        while (ch && ch <= ' ') {
	            next();
	        }
	    },

	    word = function () {

	// true, false, or null.

	        switch (ch) {
	        case 't':
	            next('t');
	            next('r');
	            next('u');
	            next('e');
	            return true;
	        case 'f':
	            next('f');
	            next('a');
	            next('l');
	            next('s');
	            next('e');
	            return false;
	        case 'n':
	            next('n');
	            next('u');
	            next('l');
	            next('l');
	            return null;
	        }
	        error("Unexpected '" + ch + "'");
	    },

	    value,  // Place holder for the value function.

	    array = function () {

	// Parse an array value.

	        var array = [];

	        if (ch === '[') {
	            next('[');
	            white();
	            if (ch === ']') {
	                next(']');
	                return array;   // empty array
	            }
	            while (ch) {
	                array.push(value());
	                white();
	                if (ch === ']') {
	                    next(']');
	                    return array;
	                }
	                next(',');
	                white();
	            }
	        }
	        error("Bad array");
	    },

	    object = function () {

	// Parse an object value.

	        var key,
	            object = {};

	        if (ch === '{') {
	            next('{');
	            white();
	            if (ch === '}') {
	                next('}');
	                return object;   // empty object
	            }
	            while (ch) {
	                key = string();
	                white();
	                next(':');
	                if (Object.hasOwnProperty.call(object, key)) {
	                    error('Duplicate key "' + key + '"');
	                }
	                object[key] = value();
	                white();
	                if (ch === '}') {
	                    next('}');
	                    return object;
	                }
	                next(',');
	                white();
	            }
	        }
	        error("Bad object");
	    };

	value = function () {

	// Parse a JSON value. It could be an object, an array, a string, a number,
	// or a word.

	    white();
	    switch (ch) {
	    case '{':
	        return object();
	    case '[':
	        return array();
	    case '"':
	        return string();
	    case '-':
	        return number();
	    default:
	        return ch >= '0' && ch <= '9' ? number() : word();
	    }
	};

	// Return the json_parse function. It will have access to all of the above
	// functions and variables.

	module.exports = function (source, reviver) {
	    var result;
	    
	    text = source;
	    at = 0;
	    ch = ' ';
	    result = value();
	    white();
	    if (ch) {
	        error("Syntax error");
	    }

	    // If there is a reviver function, we recursively walk the new structure,
	    // passing each name/value pair to the reviver function for possible
	    // transformation, starting with a temporary root object that holds the result
	    // in an empty key. If there is not a reviver function, we simply return the
	    // result.

	    return typeof reviver === 'function' ? (function walk(holder, key) {
	        var k, v, value = holder[key];
	        if (value && typeof value === 'object') {
	            for (k in value) {
	                if (Object.prototype.hasOwnProperty.call(value, k)) {
	                    v = walk(value, k);
	                    if (v !== undefined) {
	                        value[k] = v;
	                    } else {
	                        delete value[k];
	                    }
	                }
	            }
	        }
	        return reviver.call(holder, key, value);
	    }({'': result}, '')) : result;
	};


/***/ },
/* 324 */
/***/ function(module, exports) {

	var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
	    escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
	    gap,
	    indent,
	    meta = {    // table of character substitutions
	        '\b': '\\b',
	        '\t': '\\t',
	        '\n': '\\n',
	        '\f': '\\f',
	        '\r': '\\r',
	        '"' : '\\"',
	        '\\': '\\\\'
	    },
	    rep;

	function quote(string) {
	    // If the string contains no control characters, no quote characters, and no
	    // backslash characters, then we can safely slap some quotes around it.
	    // Otherwise we must also replace the offending characters with safe escape
	    // sequences.
	    
	    escapable.lastIndex = 0;
	    return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
	        var c = meta[a];
	        return typeof c === 'string' ? c :
	            '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
	    }) + '"' : '"' + string + '"';
	}

	function str(key, holder) {
	    // Produce a string from holder[key].
	    var i,          // The loop counter.
	        k,          // The member key.
	        v,          // The member value.
	        length,
	        mind = gap,
	        partial,
	        value = holder[key];
	    
	    // If the value has a toJSON method, call it to obtain a replacement value.
	    if (value && typeof value === 'object' &&
	            typeof value.toJSON === 'function') {
	        value = value.toJSON(key);
	    }
	    
	    // If we were called with a replacer function, then call the replacer to
	    // obtain a replacement value.
	    if (typeof rep === 'function') {
	        value = rep.call(holder, key, value);
	    }
	    
	    // What happens next depends on the value's type.
	    switch (typeof value) {
	        case 'string':
	            return quote(value);
	        
	        case 'number':
	            // JSON numbers must be finite. Encode non-finite numbers as null.
	            return isFinite(value) ? String(value) : 'null';
	        
	        case 'boolean':
	        case 'null':
	            // If the value is a boolean or null, convert it to a string. Note:
	            // typeof null does not produce 'null'. The case is included here in
	            // the remote chance that this gets fixed someday.
	            return String(value);
	            
	        case 'object':
	            if (!value) return 'null';
	            gap += indent;
	            partial = [];
	            
	            // Array.isArray
	            if (Object.prototype.toString.apply(value) === '[object Array]') {
	                length = value.length;
	                for (i = 0; i < length; i += 1) {
	                    partial[i] = str(i, value) || 'null';
	                }
	                
	                // Join all of the elements together, separated with commas, and
	                // wrap them in brackets.
	                v = partial.length === 0 ? '[]' : gap ?
	                    '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' :
	                    '[' + partial.join(',') + ']';
	                gap = mind;
	                return v;
	            }
	            
	            // If the replacer is an array, use it to select the members to be
	            // stringified.
	            if (rep && typeof rep === 'object') {
	                length = rep.length;
	                for (i = 0; i < length; i += 1) {
	                    k = rep[i];
	                    if (typeof k === 'string') {
	                        v = str(k, value);
	                        if (v) {
	                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
	                        }
	                    }
	                }
	            }
	            else {
	                // Otherwise, iterate through all of the keys in the object.
	                for (k in value) {
	                    if (Object.prototype.hasOwnProperty.call(value, k)) {
	                        v = str(k, value);
	                        if (v) {
	                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
	                        }
	                    }
	                }
	            }
	            
	        // Join all of the member texts together, separated with commas,
	        // and wrap them in braces.

	        v = partial.length === 0 ? '{}' : gap ?
	            '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' :
	            '{' + partial.join(',') + '}';
	        gap = mind;
	        return v;
	    }
	}

	module.exports = function (value, replacer, space) {
	    var i;
	    gap = '';
	    indent = '';
	    
	    // If the space parameter is a number, make an indent string containing that
	    // many spaces.
	    if (typeof space === 'number') {
	        for (i = 0; i < space; i += 1) {
	            indent += ' ';
	        }
	    }
	    // If the space parameter is a string, it will be used as the indent string.
	    else if (typeof space === 'string') {
	        indent = space;
	    }

	    // If there is a replacer, it must be a function or an array.
	    // Otherwise, throw an error.
	    rep = replacer;
	    if (replacer && typeof replacer !== 'function'
	    && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {
	        throw new Error('JSON.stringify');
	    }
	    
	    // Make a fake root object containing our value under the key of ''.
	    // Return the result of stringifying the value.
	    return str('', {'': value});
	};


/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(326)(__webpack_require__(330))


/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	const createKeccak = __webpack_require__(327)
	const createShake = __webpack_require__(328)

	module.exports = function (KeccakState) {
	  const Keccak = createKeccak(KeccakState)
	  const Shake = createShake(KeccakState)

	  return function (algorithm, options) {
	    const hash = typeof algorithm === 'string' ? algorithm.toLowerCase() : algorithm
	    switch (hash) {
	      case 'keccak224': return new Keccak(1152, 448, null, 224, options)
	      case 'keccak256': return new Keccak(1088, 512, null, 256, options)
	      case 'keccak384': return new Keccak(832, 768, null, 384, options)
	      case 'keccak512': return new Keccak(576, 1024, null, 512, options)

	      case 'sha3-224': return new Keccak(1152, 448, 0x06, 224, options)
	      case 'sha3-256': return new Keccak(1088, 512, 0x06, 256, options)
	      case 'sha3-384': return new Keccak(832, 768, 0x06, 384, options)
	      case 'sha3-512': return new Keccak(576, 1024, 0x06, 512, options)

	      case 'shake128': return new Shake(1344, 256, 0x1f, options)
	      case 'shake256': return new Shake(1088, 512, 0x1f, options)

	      default: throw new Error('Invald algorithm: ' + algorithm)
	    }
	  }
	}


/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {const { Transform } = __webpack_require__(16)

	module.exports = (KeccakState) => class Keccak extends Transform {
	  constructor (rate, capacity, delimitedSuffix, hashBitLength, options) {
	    super(options)

	    this._rate = rate
	    this._capacity = capacity
	    this._delimitedSuffix = delimitedSuffix
	    this._hashBitLength = hashBitLength
	    this._options = options

	    this._state = new KeccakState()
	    this._state.initialize(rate, capacity)
	    this._finalized = false
	  }

	  _transform (chunk, encoding, callback) {
	    let error = null
	    try {
	      this.update(chunk, encoding)
	    } catch (err) {
	      error = err
	    }

	    callback(error)
	  }

	  _flush (callback) {
	    let error = null
	    try {
	      this.push(this.digest())
	    } catch (err) {
	      error = err
	    }

	    callback(error)
	  }

	  update (data, encoding) {
	    if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')
	    if (this._finalized) throw new Error('Digest already called')
	    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

	    this._state.absorb(data)

	    return this
	  }

	  digest (encoding) {
	    if (this._finalized) throw new Error('Digest already called')
	    this._finalized = true

	    if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix)
	    let digest = this._state.squeeze(this._hashBitLength / 8)
	    if (encoding !== undefined) digest = digest.toString(encoding)

	    this._resetState()

	    return digest
	  }

	  // remove result from memory
	  _resetState () {
	    this._state.initialize(this._rate, this._capacity)
	    return this
	  }

	  // because sometimes we need hash right now and little later
	  _clone () {
	    const clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options)
	    this._state.copy(clone._state)
	    clone._finalized = this._finalized

	    return clone
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {const { Transform } = __webpack_require__(16)

	module.exports = (KeccakState) => class Shake extends Transform {
	  constructor (rate, capacity, delimitedSuffix, options) {
	    super(options)

	    this._rate = rate
	    this._capacity = capacity
	    this._delimitedSuffix = delimitedSuffix
	    this._options = options

	    this._state = new KeccakState()
	    this._state.initialize(rate, capacity)
	    this._finalized = false
	  }

	  _transform (chunk, encoding, callback) {
	    let error = null
	    try {
	      this.update(chunk, encoding)
	    } catch (err) {
	      error = err
	    }

	    callback(error)
	  }

	  _flush () {}

	  _read (size) {
	    this.push(this.squeeze(size))
	  }

	  update (data, encoding) {
	    if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')
	    if (this._finalized) throw new Error('Squeeze already called')
	    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

	    this._state.absorb(data)

	    return this
	  }

	  squeeze (dataByteLength, encoding) {
	    if (!this._finalized) {
	      this._finalized = true
	      this._state.absorbLastFewBits(this._delimitedSuffix)
	    }

	    let data = this._state.squeeze(dataByteLength)
	    if (encoding !== undefined) data = data.toString(encoding)

	    return data
	  }

	  _resetState () {
	    this._state.initialize(this._rate, this._capacity)
	    return this
	  }

	  _clone () {
	    const clone = new Shake(this._rate, this._capacity, this._delimitedSuffix, this._options)
	    this._state.copy(clone._state)
	    clone._finalized = this._finalized

	    return clone
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 329 */
/***/ function(module, exports) {

	const P1600_ROUND_CONSTANTS = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648]

	exports.p1600 = function (s) {
	  for (let round = 0; round < 24; ++round) {
	    // theta
	    const lo0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40]
	    const hi0 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41]
	    const lo1 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42]
	    const hi1 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43]
	    const lo2 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44]
	    const hi2 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45]
	    const lo3 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46]
	    const hi3 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47]
	    const lo4 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48]
	    const hi4 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49]

	    let lo = lo4 ^ (lo1 << 1 | hi1 >>> 31)
	    let hi = hi4 ^ (hi1 << 1 | lo1 >>> 31)
	    const t1slo0 = s[0] ^ lo
	    const t1shi0 = s[1] ^ hi
	    const t1slo5 = s[10] ^ lo
	    const t1shi5 = s[11] ^ hi
	    const t1slo10 = s[20] ^ lo
	    const t1shi10 = s[21] ^ hi
	    const t1slo15 = s[30] ^ lo
	    const t1shi15 = s[31] ^ hi
	    const t1slo20 = s[40] ^ lo
	    const t1shi20 = s[41] ^ hi
	    lo = lo0 ^ (lo2 << 1 | hi2 >>> 31)
	    hi = hi0 ^ (hi2 << 1 | lo2 >>> 31)
	    const t1slo1 = s[2] ^ lo
	    const t1shi1 = s[3] ^ hi
	    const t1slo6 = s[12] ^ lo
	    const t1shi6 = s[13] ^ hi
	    const t1slo11 = s[22] ^ lo
	    const t1shi11 = s[23] ^ hi
	    const t1slo16 = s[32] ^ lo
	    const t1shi16 = s[33] ^ hi
	    const t1slo21 = s[42] ^ lo
	    const t1shi21 = s[43] ^ hi
	    lo = lo1 ^ (lo3 << 1 | hi3 >>> 31)
	    hi = hi1 ^ (hi3 << 1 | lo3 >>> 31)
	    const t1slo2 = s[4] ^ lo
	    const t1shi2 = s[5] ^ hi
	    const t1slo7 = s[14] ^ lo
	    const t1shi7 = s[15] ^ hi
	    const t1slo12 = s[24] ^ lo
	    const t1shi12 = s[25] ^ hi
	    const t1slo17 = s[34] ^ lo
	    const t1shi17 = s[35] ^ hi
	    const t1slo22 = s[44] ^ lo
	    const t1shi22 = s[45] ^ hi
	    lo = lo2 ^ (lo4 << 1 | hi4 >>> 31)
	    hi = hi2 ^ (hi4 << 1 | lo4 >>> 31)
	    const t1slo3 = s[6] ^ lo
	    const t1shi3 = s[7] ^ hi
	    const t1slo8 = s[16] ^ lo
	    const t1shi8 = s[17] ^ hi
	    const t1slo13 = s[26] ^ lo
	    const t1shi13 = s[27] ^ hi
	    const t1slo18 = s[36] ^ lo
	    const t1shi18 = s[37] ^ hi
	    const t1slo23 = s[46] ^ lo
	    const t1shi23 = s[47] ^ hi
	    lo = lo3 ^ (lo0 << 1 | hi0 >>> 31)
	    hi = hi3 ^ (hi0 << 1 | lo0 >>> 31)
	    const t1slo4 = s[8] ^ lo
	    const t1shi4 = s[9] ^ hi
	    const t1slo9 = s[18] ^ lo
	    const t1shi9 = s[19] ^ hi
	    const t1slo14 = s[28] ^ lo
	    const t1shi14 = s[29] ^ hi
	    const t1slo19 = s[38] ^ lo
	    const t1shi19 = s[39] ^ hi
	    const t1slo24 = s[48] ^ lo
	    const t1shi24 = s[49] ^ hi

	    // rho & pi
	    const t2slo0 = t1slo0
	    const t2shi0 = t1shi0
	    const t2slo16 = (t1shi5 << 4 | t1slo5 >>> 28)
	    const t2shi16 = (t1slo5 << 4 | t1shi5 >>> 28)
	    const t2slo7 = (t1slo10 << 3 | t1shi10 >>> 29)
	    const t2shi7 = (t1shi10 << 3 | t1slo10 >>> 29)
	    const t2slo23 = (t1shi15 << 9 | t1slo15 >>> 23)
	    const t2shi23 = (t1slo15 << 9 | t1shi15 >>> 23)
	    const t2slo14 = (t1slo20 << 18 | t1shi20 >>> 14)
	    const t2shi14 = (t1shi20 << 18 | t1slo20 >>> 14)
	    const t2slo10 = (t1slo1 << 1 | t1shi1 >>> 31)
	    const t2shi10 = (t1shi1 << 1 | t1slo1 >>> 31)
	    const t2slo1 = (t1shi6 << 12 | t1slo6 >>> 20)
	    const t2shi1 = (t1slo6 << 12 | t1shi6 >>> 20)
	    const t2slo17 = (t1slo11 << 10 | t1shi11 >>> 22)
	    const t2shi17 = (t1shi11 << 10 | t1slo11 >>> 22)
	    const t2slo8 = (t1shi16 << 13 | t1slo16 >>> 19)
	    const t2shi8 = (t1slo16 << 13 | t1shi16 >>> 19)
	    const t2slo24 = (t1slo21 << 2 | t1shi21 >>> 30)
	    const t2shi24 = (t1shi21 << 2 | t1slo21 >>> 30)
	    const t2slo20 = (t1shi2 << 30 | t1slo2 >>> 2)
	    const t2shi20 = (t1slo2 << 30 | t1shi2 >>> 2)
	    const t2slo11 = (t1slo7 << 6 | t1shi7 >>> 26)
	    const t2shi11 = (t1shi7 << 6 | t1slo7 >>> 26)
	    const t2slo2 = (t1shi12 << 11 | t1slo12 >>> 21)
	    const t2shi2 = (t1slo12 << 11 | t1shi12 >>> 21)
	    const t2slo18 = (t1slo17 << 15 | t1shi17 >>> 17)
	    const t2shi18 = (t1shi17 << 15 | t1slo17 >>> 17)
	    const t2slo9 = (t1shi22 << 29 | t1slo22 >>> 3)
	    const t2shi9 = (t1slo22 << 29 | t1shi22 >>> 3)
	    const t2slo5 = (t1slo3 << 28 | t1shi3 >>> 4)
	    const t2shi5 = (t1shi3 << 28 | t1slo3 >>> 4)
	    const t2slo21 = (t1shi8 << 23 | t1slo8 >>> 9)
	    const t2shi21 = (t1slo8 << 23 | t1shi8 >>> 9)
	    const t2slo12 = (t1slo13 << 25 | t1shi13 >>> 7)
	    const t2shi12 = (t1shi13 << 25 | t1slo13 >>> 7)
	    const t2slo3 = (t1slo18 << 21 | t1shi18 >>> 11)
	    const t2shi3 = (t1shi18 << 21 | t1slo18 >>> 11)
	    const t2slo19 = (t1shi23 << 24 | t1slo23 >>> 8)
	    const t2shi19 = (t1slo23 << 24 | t1shi23 >>> 8)
	    const t2slo15 = (t1slo4 << 27 | t1shi4 >>> 5)
	    const t2shi15 = (t1shi4 << 27 | t1slo4 >>> 5)
	    const t2slo6 = (t1slo9 << 20 | t1shi9 >>> 12)
	    const t2shi6 = (t1shi9 << 20 | t1slo9 >>> 12)
	    const t2slo22 = (t1shi14 << 7 | t1slo14 >>> 25)
	    const t2shi22 = (t1slo14 << 7 | t1shi14 >>> 25)
	    const t2slo13 = (t1slo19 << 8 | t1shi19 >>> 24)
	    const t2shi13 = (t1shi19 << 8 | t1slo19 >>> 24)
	    const t2slo4 = (t1slo24 << 14 | t1shi24 >>> 18)
	    const t2shi4 = (t1shi24 << 14 | t1slo24 >>> 18)

	    // chi
	    s[0] = t2slo0 ^ (~t2slo1 & t2slo2)
	    s[1] = t2shi0 ^ (~t2shi1 & t2shi2)
	    s[10] = t2slo5 ^ (~t2slo6 & t2slo7)
	    s[11] = t2shi5 ^ (~t2shi6 & t2shi7)
	    s[20] = t2slo10 ^ (~t2slo11 & t2slo12)
	    s[21] = t2shi10 ^ (~t2shi11 & t2shi12)
	    s[30] = t2slo15 ^ (~t2slo16 & t2slo17)
	    s[31] = t2shi15 ^ (~t2shi16 & t2shi17)
	    s[40] = t2slo20 ^ (~t2slo21 & t2slo22)
	    s[41] = t2shi20 ^ (~t2shi21 & t2shi22)
	    s[2] = t2slo1 ^ (~t2slo2 & t2slo3)
	    s[3] = t2shi1 ^ (~t2shi2 & t2shi3)
	    s[12] = t2slo6 ^ (~t2slo7 & t2slo8)
	    s[13] = t2shi6 ^ (~t2shi7 & t2shi8)
	    s[22] = t2slo11 ^ (~t2slo12 & t2slo13)
	    s[23] = t2shi11 ^ (~t2shi12 & t2shi13)
	    s[32] = t2slo16 ^ (~t2slo17 & t2slo18)
	    s[33] = t2shi16 ^ (~t2shi17 & t2shi18)
	    s[42] = t2slo21 ^ (~t2slo22 & t2slo23)
	    s[43] = t2shi21 ^ (~t2shi22 & t2shi23)
	    s[4] = t2slo2 ^ (~t2slo3 & t2slo4)
	    s[5] = t2shi2 ^ (~t2shi3 & t2shi4)
	    s[14] = t2slo7 ^ (~t2slo8 & t2slo9)
	    s[15] = t2shi7 ^ (~t2shi8 & t2shi9)
	    s[24] = t2slo12 ^ (~t2slo13 & t2slo14)
	    s[25] = t2shi12 ^ (~t2shi13 & t2shi14)
	    s[34] = t2slo17 ^ (~t2slo18 & t2slo19)
	    s[35] = t2shi17 ^ (~t2shi18 & t2shi19)
	    s[44] = t2slo22 ^ (~t2slo23 & t2slo24)
	    s[45] = t2shi22 ^ (~t2shi23 & t2shi24)
	    s[6] = t2slo3 ^ (~t2slo4 & t2slo0)
	    s[7] = t2shi3 ^ (~t2shi4 & t2shi0)
	    s[16] = t2slo8 ^ (~t2slo9 & t2slo5)
	    s[17] = t2shi8 ^ (~t2shi9 & t2shi5)
	    s[26] = t2slo13 ^ (~t2slo14 & t2slo10)
	    s[27] = t2shi13 ^ (~t2shi14 & t2shi10)
	    s[36] = t2slo18 ^ (~t2slo19 & t2slo15)
	    s[37] = t2shi18 ^ (~t2shi19 & t2shi15)
	    s[46] = t2slo23 ^ (~t2slo24 & t2slo20)
	    s[47] = t2shi23 ^ (~t2shi24 & t2shi20)
	    s[8] = t2slo4 ^ (~t2slo0 & t2slo1)
	    s[9] = t2shi4 ^ (~t2shi0 & t2shi1)
	    s[18] = t2slo9 ^ (~t2slo5 & t2slo6)
	    s[19] = t2shi9 ^ (~t2shi5 & t2shi6)
	    s[28] = t2slo14 ^ (~t2slo10 & t2slo11)
	    s[29] = t2shi14 ^ (~t2shi10 & t2shi11)
	    s[38] = t2slo19 ^ (~t2slo15 & t2slo16)
	    s[39] = t2shi19 ^ (~t2shi15 & t2shi16)
	    s[48] = t2slo24 ^ (~t2slo20 & t2slo21)
	    s[49] = t2shi24 ^ (~t2shi20 & t2shi21)

	    // iota
	    s[0] ^= P1600_ROUND_CONSTANTS[round * 2]
	    s[1] ^= P1600_ROUND_CONSTANTS[round * 2 + 1]
	  }
	}


/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {const keccakState = __webpack_require__(329)

	function Keccak () {
	  // much faster than `new Array(50)`
	  this.state = [
	    0, 0, 0, 0, 0,
	    0, 0, 0, 0, 0,
	    0, 0, 0, 0, 0,
	    0, 0, 0, 0, 0,
	    0, 0, 0, 0, 0
	  ]

	  this.blockSize = null
	  this.count = 0
	  this.squeezing = false
	}

	Keccak.prototype.initialize = function (rate, capacity) {
	  for (let i = 0; i < 50; ++i) this.state[i] = 0
	  this.blockSize = rate / 8
	  this.count = 0
	  this.squeezing = false
	}

	Keccak.prototype.absorb = function (data) {
	  for (let i = 0; i < data.length; ++i) {
	    this.state[~~(this.count / 4)] ^= data[i] << (8 * (this.count % 4))
	    this.count += 1
	    if (this.count === this.blockSize) {
	      keccakState.p1600(this.state)
	      this.count = 0
	    }
	  }
	}

	Keccak.prototype.absorbLastFewBits = function (bits) {
	  this.state[~~(this.count / 4)] ^= bits << (8 * (this.count % 4))
	  if ((bits & 0x80) !== 0 && this.count === (this.blockSize - 1)) keccakState.p1600(this.state)
	  this.state[~~((this.blockSize - 1) / 4)] ^= 0x80 << (8 * ((this.blockSize - 1) % 4))
	  keccakState.p1600(this.state)
	  this.count = 0
	  this.squeezing = true
	}

	Keccak.prototype.squeeze = function (length) {
	  if (!this.squeezing) this.absorbLastFewBits(0x01)

	  const output = Buffer.alloc(length)
	  for (let i = 0; i < length; ++i) {
	    output[i] = (this.state[~~(this.count / 4)] >>> (8 * (this.count % 4))) & 0xff
	    this.count += 1
	    if (this.count === this.blockSize) {
	      keccakState.p1600(this.state)
	      this.count = 0
	    }
	  }

	  return output
	}

	Keccak.prototype.copy = function (dest) {
	  for (let i = 0; i < 50; ++i) dest.state[i] = this.state[i]
	  dest.blockSize = this.blockSize
	  dest.count = this.count
	  dest.squeezing = this.squeezing
	}

	module.exports = Keccak

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(190).SHA3Hash


/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, module) {/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/** Used to compose bitmasks for comparison styles. */
	var UNORDERED_COMPARE_FLAG = 1,
	    PARTIAL_COMPARE_FLAG = 2;

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0,
	    MAX_SAFE_INTEGER = 9007199254740991;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    promiseTag = '[object Promise]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to match property names within property paths. */
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	    reIsPlainProp = /^\w*$/,
	    reLeadingDot = /^\./,
	    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	typedArrayTags[setTag] = typedArrayTags[stringTag] =
	typedArrayTags[weakMapTag] = false;

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	/** Detect free variable `exports`. */
	var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Detect free variable `process` from Node.js. */
	var freeProcess = moduleExports && freeGlobal.process;

	/** Used to access faster Node.js helpers. */
	var nodeUtil = (function() {
	  try {
	    return freeProcess && freeProcess.binding('util');
	  } catch (e) {}
	}());

	/* Node.js helper references. */
	var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

	/**
	 * A specialized version of `_.map` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array ? array.length : 0,
	      result = Array(length);

	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }
	  return result;
	}

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;

	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}

	/**
	 * A specialized version of `_.some` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */
	function arraySome(array, predicate) {
	  var index = -1,
	      length = array ? array.length : 0;

	  while (++index < length) {
	    if (predicate(array[index], index, array)) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);

	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}

	/**
	 * The base implementation of `_.unary` without support for storing metadata.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new capped function.
	 */
	function baseUnary(func) {
	  return function(value) {
	    return func(value);
	  };
	}

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}

	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	function isHostObject(value) {
	  // Many host objects are `Object` objects that can coerce to strings
	  // despite having improperly defined `toString` methods.
	  var result = false;
	  if (value != null && typeof value.toString != 'function') {
	    try {
	      result = !!(value + '');
	    } catch (e) {}
	  }
	  return result;
	}

	/**
	 * Converts `map` to its key-value pairs.
	 *
	 * @private
	 * @param {Object} map The map to convert.
	 * @returns {Array} Returns the key-value pairs.
	 */
	function mapToArray(map) {
	  var index = -1,
	      result = Array(map.size);

	  map.forEach(function(value, key) {
	    result[++index] = [key, value];
	  });
	  return result;
	}

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}

	/**
	 * Converts `set` to an array of its values.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the values.
	 */
	function setToArray(set) {
	  var index = -1,
	      result = Array(set.size);

	  set.forEach(function(value) {
	    result[++index] = value;
	  });
	  return result;
	}

	/** Used for built-in method references. */
	var arrayProto = Array.prototype,
	    funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to detect overreaching core-js shims. */
	var coreJsData = root['__core-js_shared__'];

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/** Built-in value references. */
	var Symbol = root.Symbol,
	    Uint8Array = root.Uint8Array,
	    propertyIsEnumerable = objectProto.propertyIsEnumerable,
	    splice = arrayProto.splice,
	    spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeKeys = overArg(Object.keys, Object);

	/* Built-in method references that are verified to be native. */
	var DataView = getNative(root, 'DataView'),
	    Map = getNative(root, 'Map'),
	    Promise = getNative(root, 'Promise'),
	    Set = getNative(root, 'Set'),
	    WeakMap = getNative(root, 'WeakMap'),
	    nativeCreate = getNative(Object, 'create');

	/** Used to detect maps, sets, and weakmaps. */
	var dataViewCtorString = toSource(DataView),
	    mapCtorString = toSource(Map),
	    promiseCtorString = toSource(Promise),
	    setCtorString = toSource(Set),
	    weakMapCtorString = toSource(WeakMap);

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
	    symbolToString = symbolProto ? symbolProto.toString : undefined;

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
	}

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  return this.has(key) && delete this.__data__[key];
	}

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
	}

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
	}

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	  return this;
	}

	// Add methods to `Hash`.
	Hash.prototype.clear = hashClear;
	Hash.prototype['delete'] = hashDelete;
	Hash.prototype.get = hashGet;
	Hash.prototype.has = hashHas;
	Hash.prototype.set = hashSet;

	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	}

	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  return true;
	}

	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  return index < 0 ? undefined : data[index][1];
	}

	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return assocIndexOf(this.__data__, key) > -1;
	}

	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}

	// Add methods to `ListCache`.
	ListCache.prototype.clear = listCacheClear;
	ListCache.prototype['delete'] = listCacheDelete;
	ListCache.prototype.get = listCacheGet;
	ListCache.prototype.has = listCacheHas;
	ListCache.prototype.set = listCacheSet;

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.__data__ = {
	    'hash': new Hash,
	    'map': new (Map || ListCache),
	    'string': new Hash
	  };
	}

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  return getMapData(this, key)['delete'](key);
	}

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return getMapData(this, key).get(key);
	}

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return getMapData(this, key).has(key);
	}

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  getMapData(this, key).set(key, value);
	  return this;
	}

	// Add methods to `MapCache`.
	MapCache.prototype.clear = mapCacheClear;
	MapCache.prototype['delete'] = mapCacheDelete;
	MapCache.prototype.get = mapCacheGet;
	MapCache.prototype.has = mapCacheHas;
	MapCache.prototype.set = mapCacheSet;

	/**
	 *
	 * Creates an array cache object to store unique values.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [values] The values to cache.
	 */
	function SetCache(values) {
	  var index = -1,
	      length = values ? values.length : 0;

	  this.__data__ = new MapCache;
	  while (++index < length) {
	    this.add(values[index]);
	  }
	}

	/**
	 * Adds `value` to the array cache.
	 *
	 * @private
	 * @name add
	 * @memberOf SetCache
	 * @alias push
	 * @param {*} value The value to cache.
	 * @returns {Object} Returns the cache instance.
	 */
	function setCacheAdd(value) {
	  this.__data__.set(value, HASH_UNDEFINED);
	  return this;
	}

	/**
	 * Checks if `value` is in the array cache.
	 *
	 * @private
	 * @name has
	 * @memberOf SetCache
	 * @param {*} value The value to search for.
	 * @returns {number} Returns `true` if `value` is found, else `false`.
	 */
	function setCacheHas(value) {
	  return this.__data__.has(value);
	}

	// Add methods to `SetCache`.
	SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	SetCache.prototype.has = setCacheHas;

	/**
	 * Creates a stack cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Stack(entries) {
	  this.__data__ = new ListCache(entries);
	}

	/**
	 * Removes all key-value entries from the stack.
	 *
	 * @private
	 * @name clear
	 * @memberOf Stack
	 */
	function stackClear() {
	  this.__data__ = new ListCache;
	}

	/**
	 * Removes `key` and its value from the stack.
	 *
	 * @private
	 * @name delete
	 * @memberOf Stack
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function stackDelete(key) {
	  return this.__data__['delete'](key);
	}

	/**
	 * Gets the stack value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Stack
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function stackGet(key) {
	  return this.__data__.get(key);
	}

	/**
	 * Checks if a stack value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Stack
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function stackHas(key) {
	  return this.__data__.has(key);
	}

	/**
	 * Sets the stack `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Stack
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the stack cache instance.
	 */
	function stackSet(key, value) {
	  var cache = this.__data__;
	  if (cache instanceof ListCache) {
	    var pairs = cache.__data__;
	    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	      pairs.push([key, value]);
	      return this;
	    }
	    cache = this.__data__ = new MapCache(pairs);
	  }
	  cache.set(key, value);
	  return this;
	}

	// Add methods to `Stack`.
	Stack.prototype.clear = stackClear;
	Stack.prototype['delete'] = stackDelete;
	Stack.prototype.get = stackGet;
	Stack.prototype.has = stackHas;
	Stack.prototype.set = stackSet;

	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys(value, inherited) {
	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
	  // Safari 9 makes `arguments.length` enumerable in strict mode.
	  var result = (isArray(value) || isArguments(value))
	    ? baseTimes(value.length, String)
	    : [];

	  var length = result.length,
	      skipIndexes = !!length;

	  for (var key in value) {
	    if ((inherited || hasOwnProperty.call(value, key)) &&
	        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}

	/**
	 * The base implementation of `_.forEach` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array|Object} Returns `collection`.
	 */
	var baseEach = createBaseEach(baseForOwn);

	/**
	 * The base implementation of `_.flatten` with support for restricting flattening.
	 *
	 * @private
	 * @param {Array} array The array to flatten.
	 * @param {number} depth The maximum recursion depth.
	 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	 * @param {Array} [result=[]] The initial result value.
	 * @returns {Array} Returns the new flattened array.
	 */
	function baseFlatten(array, depth, predicate, isStrict, result) {
	  var index = -1,
	      length = array.length;

	  predicate || (predicate = isFlattenable);
	  result || (result = []);

	  while (++index < length) {
	    var value = array[index];
	    if (depth > 0 && predicate(value)) {
	      if (depth > 1) {
	        // Recursively flatten arrays (susceptible to call stack limits).
	        baseFlatten(value, depth - 1, predicate, isStrict, result);
	      } else {
	        arrayPush(result, value);
	      }
	    } else if (!isStrict) {
	      result[result.length] = value;
	    }
	  }
	  return result;
	}

	/**
	 * The base implementation of `baseForOwn` which iterates over `object`
	 * properties returned by `keysFunc` and invokes `iteratee` for each property.
	 * Iteratee functions may exit iteration early by explicitly returning `false`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseFor = createBaseFor();

	/**
	 * The base implementation of `_.forOwn` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForOwn(object, iteratee) {
	  return object && baseFor(object, iteratee, keys);
	}

	/**
	 * The base implementation of `_.get` without support for default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet(object, path) {
	  path = isKey(path, object) ? [path] : castPath(path);

	  var index = 0,
	      length = path.length;

	  while (object != null && index < length) {
	    object = object[toKey(path[index++])];
	  }
	  return (index && index == length) ? object : undefined;
	}

	/**
	 * The base implementation of `getTag`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  return objectToString.call(value);
	}

	/**
	 * The base implementation of `_.hasIn` without support for deep paths.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {Array|string} key The key to check.
	 * @returns {boolean} Returns `true` if `key` exists, else `false`.
	 */
	function baseHasIn(object, key) {
	  return object != null && key in Object(object);
	}

	/**
	 * The base implementation of `_.isEqual` which supports partial comparisons
	 * and tracks traversed objects.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {boolean} [bitmask] The bitmask of comparison flags.
	 *  The bitmask may be composed of the following flags:
	 *     1 - Unordered comparison
	 *     2 - Partial comparison
	 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 */
	function baseIsEqual(value, other, customizer, bitmask, stack) {
	  if (value === other) {
	    return true;
	  }
	  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	    return value !== value && other !== other;
	  }
	  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
	}

	/**
	 * A specialized version of `baseIsEqual` for arrays and objects which performs
	 * deep comparisons and tracks traversed objects enabling objects with circular
	 * references to be compared.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
	 *  for more details.
	 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
	  var objIsArr = isArray(object),
	      othIsArr = isArray(other),
	      objTag = arrayTag,
	      othTag = arrayTag;

	  if (!objIsArr) {
	    objTag = getTag(object);
	    objTag = objTag == argsTag ? objectTag : objTag;
	  }
	  if (!othIsArr) {
	    othTag = getTag(other);
	    othTag = othTag == argsTag ? objectTag : othTag;
	  }
	  var objIsObj = objTag == objectTag && !isHostObject(object),
	      othIsObj = othTag == objectTag && !isHostObject(other),
	      isSameTag = objTag == othTag;

	  if (isSameTag && !objIsObj) {
	    stack || (stack = new Stack);
	    return (objIsArr || isTypedArray(object))
	      ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
	      : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
	  }
	  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
	    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	    if (objIsWrapped || othIsWrapped) {
	      var objUnwrapped = objIsWrapped ? object.value() : object,
	          othUnwrapped = othIsWrapped ? other.value() : other;

	      stack || (stack = new Stack);
	      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
	    }
	  }
	  if (!isSameTag) {
	    return false;
	  }
	  stack || (stack = new Stack);
	  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
	}

	/**
	 * The base implementation of `_.isMatch` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to inspect.
	 * @param {Object} source The object of property values to match.
	 * @param {Array} matchData The property names, values, and compare flags to match.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	 */
	function baseIsMatch(object, source, matchData, customizer) {
	  var index = matchData.length,
	      length = index,
	      noCustomizer = !customizer;

	  if (object == null) {
	    return !length;
	  }
	  object = Object(object);
	  while (index--) {
	    var data = matchData[index];
	    if ((noCustomizer && data[2])
	          ? data[1] !== object[data[0]]
	          : !(data[0] in object)
	        ) {
	      return false;
	    }
	  }
	  while (++index < length) {
	    data = matchData[index];
	    var key = data[0],
	        objValue = object[key],
	        srcValue = data[1];

	    if (noCustomizer && data[2]) {
	      if (objValue === undefined && !(key in object)) {
	        return false;
	      }
	    } else {
	      var stack = new Stack;
	      if (customizer) {
	        var result = customizer(objValue, srcValue, key, object, source, stack);
	      }
	      if (!(result === undefined
	            ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
	            : result
	          )) {
	        return false;
	      }
	    }
	  }
	  return true;
	}

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}

	/**
	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 */
	function baseIsTypedArray(value) {
	  return isObjectLike(value) &&
	    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
	}

	/**
	 * The base implementation of `_.iteratee`.
	 *
	 * @private
	 * @param {*} [value=_.identity] The value to convert to an iteratee.
	 * @returns {Function} Returns the iteratee.
	 */
	function baseIteratee(value) {
	  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	  if (typeof value == 'function') {
	    return value;
	  }
	  if (value == null) {
	    return identity;
	  }
	  if (typeof value == 'object') {
	    return isArray(value)
	      ? baseMatchesProperty(value[0], value[1])
	      : baseMatches(value);
	  }
	  return property(value);
	}

	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  if (!isPrototype(object)) {
	    return nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * The base implementation of `_.map` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function baseMap(collection, iteratee) {
	  var index = -1,
	      result = isArrayLike(collection) ? Array(collection.length) : [];

	  baseEach(collection, function(value, key, collection) {
	    result[++index] = iteratee(value, key, collection);
	  });
	  return result;
	}

	/**
	 * The base implementation of `_.matches` which doesn't clone `source`.
	 *
	 * @private
	 * @param {Object} source The object of property values to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function baseMatches(source) {
	  var matchData = getMatchData(source);
	  if (matchData.length == 1 && matchData[0][2]) {
	    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
	  }
	  return function(object) {
	    return object === source || baseIsMatch(object, source, matchData);
	  };
	}

	/**
	 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	 *
	 * @private
	 * @param {string} path The path of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function baseMatchesProperty(path, srcValue) {
	  if (isKey(path) && isStrictComparable(srcValue)) {
	    return matchesStrictComparable(toKey(path), srcValue);
	  }
	  return function(object) {
	    var objValue = get(object, path);
	    return (objValue === undefined && objValue === srcValue)
	      ? hasIn(object, path)
	      : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
	  };
	}

	/**
	 * A specialized version of `baseProperty` which supports deep paths.
	 *
	 * @private
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	function basePropertyDeep(path) {
	  return function(object) {
	    return baseGet(object, path);
	  };
	}

	/**
	 * The base implementation of `_.toString` which doesn't convert nullish
	 * values to empty strings.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	/**
	 * Casts `value` to a path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {Array} Returns the cast property path array.
	 */
	function castPath(value) {
	  return isArray(value) ? value : stringToPath(value);
	}

	/**
	 * Creates a `baseEach` or `baseEachRight` function.
	 *
	 * @private
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseEach(eachFunc, fromRight) {
	  return function(collection, iteratee) {
	    if (collection == null) {
	      return collection;
	    }
	    if (!isArrayLike(collection)) {
	      return eachFunc(collection, iteratee);
	    }
	    var length = collection.length,
	        index = fromRight ? length : -1,
	        iterable = Object(collection);

	    while ((fromRight ? index-- : ++index < length)) {
	      if (iteratee(iterable[index], index, iterable) === false) {
	        break;
	      }
	    }
	    return collection;
	  };
	}

	/**
	 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseFor(fromRight) {
	  return function(object, iteratee, keysFunc) {
	    var index = -1,
	        iterable = Object(object),
	        props = keysFunc(object),
	        length = props.length;

	    while (length--) {
	      var key = props[fromRight ? length : ++index];
	      if (iteratee(iterable[key], key, iterable) === false) {
	        break;
	      }
	    }
	    return object;
	  };
	}

	/**
	 * A specialized version of `baseIsEqualDeep` for arrays with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Array} array The array to compare.
	 * @param {Array} other The other array to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	 *  for more details.
	 * @param {Object} stack Tracks traversed `array` and `other` objects.
	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	 */
	function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
	  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
	      arrLength = array.length,
	      othLength = other.length;

	  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	    return false;
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(array);
	  if (stacked && stack.get(other)) {
	    return stacked == other;
	  }
	  var index = -1,
	      result = true,
	      seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;

	  stack.set(array, other);
	  stack.set(other, array);

	  // Ignore non-index properties.
	  while (++index < arrLength) {
	    var arrValue = array[index],
	        othValue = other[index];

	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, arrValue, index, other, array, stack)
	        : customizer(arrValue, othValue, index, array, other, stack);
	    }
	    if (compared !== undefined) {
	      if (compared) {
	        continue;
	      }
	      result = false;
	      break;
	    }
	    // Recursively compare arrays (susceptible to call stack limits).
	    if (seen) {
	      if (!arraySome(other, function(othValue, othIndex) {
	            if (!seen.has(othIndex) &&
	                (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
	              return seen.add(othIndex);
	            }
	          })) {
	        result = false;
	        break;
	      }
	    } else if (!(
	          arrValue === othValue ||
	            equalFunc(arrValue, othValue, customizer, bitmask, stack)
	        )) {
	      result = false;
	      break;
	    }
	  }
	  stack['delete'](array);
	  stack['delete'](other);
	  return result;
	}

	/**
	 * A specialized version of `baseIsEqualDeep` for comparing objects of
	 * the same `toStringTag`.
	 *
	 * **Note:** This function only supports comparing values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {string} tag The `toStringTag` of the objects to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	 *  for more details.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
	  switch (tag) {
	    case dataViewTag:
	      if ((object.byteLength != other.byteLength) ||
	          (object.byteOffset != other.byteOffset)) {
	        return false;
	      }
	      object = object.buffer;
	      other = other.buffer;

	    case arrayBufferTag:
	      if ((object.byteLength != other.byteLength) ||
	          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	        return false;
	      }
	      return true;

	    case boolTag:
	    case dateTag:
	    case numberTag:
	      // Coerce booleans to `1` or `0` and dates to milliseconds.
	      // Invalid dates are coerced to `NaN`.
	      return eq(+object, +other);

	    case errorTag:
	      return object.name == other.name && object.message == other.message;

	    case regexpTag:
	    case stringTag:
	      // Coerce regexes to strings and treat strings, primitives and objects,
	      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	      // for more details.
	      return object == (other + '');

	    case mapTag:
	      var convert = mapToArray;

	    case setTag:
	      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
	      convert || (convert = setToArray);

	      if (object.size != other.size && !isPartial) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(object);
	      if (stacked) {
	        return stacked == other;
	      }
	      bitmask |= UNORDERED_COMPARE_FLAG;

	      // Recursively compare objects (susceptible to call stack limits).
	      stack.set(object, other);
	      var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
	      stack['delete'](object);
	      return result;

	    case symbolTag:
	      if (symbolValueOf) {
	        return symbolValueOf.call(object) == symbolValueOf.call(other);
	      }
	  }
	  return false;
	}

	/**
	 * A specialized version of `baseIsEqualDeep` for objects with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	 *  for more details.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
	  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
	      objProps = keys(object),
	      objLength = objProps.length,
	      othProps = keys(other),
	      othLength = othProps.length;

	  if (objLength != othLength && !isPartial) {
	    return false;
	  }
	  var index = objLength;
	  while (index--) {
	    var key = objProps[index];
	    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
	      return false;
	    }
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(object);
	  if (stacked && stack.get(other)) {
	    return stacked == other;
	  }
	  var result = true;
	  stack.set(object, other);
	  stack.set(other, object);

	  var skipCtor = isPartial;
	  while (++index < objLength) {
	    key = objProps[index];
	    var objValue = object[key],
	        othValue = other[key];

	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, objValue, key, other, object, stack)
	        : customizer(objValue, othValue, key, object, other, stack);
	    }
	    // Recursively compare objects (susceptible to call stack limits).
	    if (!(compared === undefined
	          ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
	          : compared
	        )) {
	      result = false;
	      break;
	    }
	    skipCtor || (skipCtor = key == 'constructor');
	  }
	  if (result && !skipCtor) {
	    var objCtor = object.constructor,
	        othCtor = other.constructor;

	    // Non `Object` object instances with different constructors are not equal.
	    if (objCtor != othCtor &&
	        ('constructor' in object && 'constructor' in other) &&
	        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	      result = false;
	    }
	  }
	  stack['delete'](object);
	  stack['delete'](other);
	  return result;
	}

	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return isKeyable(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}

	/**
	 * Gets the property names, values, and compare flags of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the match data of `object`.
	 */
	function getMatchData(object) {
	  var result = keys(object),
	      length = result.length;

	  while (length--) {
	    var key = result[length],
	        value = object[key];

	    result[length] = [key, value, isStrictComparable(value)];
	  }
	  return result;
	}

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}

	/**
	 * Gets the `toStringTag` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	var getTag = baseGetTag;

	// Fallback for data views, maps, sets, and weak maps in IE 11,
	// for data views in Edge < 14, and promises in Node.js.
	if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	    (Map && getTag(new Map) != mapTag) ||
	    (Promise && getTag(Promise.resolve()) != promiseTag) ||
	    (Set && getTag(new Set) != setTag) ||
	    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	  getTag = function(value) {
	    var result = objectToString.call(value),
	        Ctor = result == objectTag ? value.constructor : undefined,
	        ctorString = Ctor ? toSource(Ctor) : undefined;

	    if (ctorString) {
	      switch (ctorString) {
	        case dataViewCtorString: return dataViewTag;
	        case mapCtorString: return mapTag;
	        case promiseCtorString: return promiseTag;
	        case setCtorString: return setTag;
	        case weakMapCtorString: return weakMapTag;
	      }
	    }
	    return result;
	  };
	}

	/**
	 * Checks if `path` exists on `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @param {Function} hasFunc The function to check properties.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 */
	function hasPath(object, path, hasFunc) {
	  path = isKey(path, object) ? [path] : castPath(path);

	  var result,
	      index = -1,
	      length = path.length;

	  while (++index < length) {
	    var key = toKey(path[index]);
	    if (!(result = object != null && hasFunc(object, key))) {
	      break;
	    }
	    object = object[key];
	  }
	  if (result) {
	    return result;
	  }
	  var length = object ? object.length : 0;
	  return !!length && isLength(length) && isIndex(key, length) &&
	    (isArray(object) || isArguments(object));
	}

	/**
	 * Checks if `value` is a flattenable `arguments` object or array.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	 */
	function isFlattenable(value) {
	  return isArray(value) || isArguments(value) ||
	    !!(spreadableSymbol && value && value[spreadableSymbol]);
	}

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return !!length &&
	    (typeof value == 'number' || reIsUint.test(value)) &&
	    (value > -1 && value % 1 == 0 && value < length);
	}

	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	function isKey(value, object) {
	  if (isArray(value)) {
	    return false;
	  }
	  var type = typeof value;
	  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
	      value == null || isSymbol(value)) {
	    return true;
	  }
	  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	    (object != null && value in Object(object));
	}

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}

	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	  return value === proto;
	}

	/**
	 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` if suitable for strict
	 *  equality comparisons, else `false`.
	 */
	function isStrictComparable(value) {
	  return value === value && !isObject(value);
	}

	/**
	 * A specialized version of `matchesProperty` for source values suitable
	 * for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function matchesStrictComparable(key, srcValue) {
	  return function(object) {
	    if (object == null) {
	      return false;
	    }
	    return object[key] === srcValue &&
	      (srcValue !== undefined || (key in Object(object)));
	  };
	}

	/**
	 * Converts `string` to a property path array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the property path array.
	 */
	var stringToPath = memoize(function(string) {
	  string = toString(string);

	  var result = [];
	  if (reLeadingDot.test(string)) {
	    result.push('');
	  }
	  string.replace(rePropName, function(match, number, quote, string) {
	    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	  });
	  return result;
	});

	/**
	 * Converts `value` to a string key if it's not a string or symbol.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {string|symbol} Returns the key.
	 */
	function toKey(value) {
	  if (typeof value == 'string' || isSymbol(value)) {
	    return value;
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to process.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}

	/**
	 * Creates a flattened array of values by running each element in `collection`
	 * thru `iteratee` and flattening the mapped results. The iteratee is invoked
	 * with three arguments: (value, index|key, collection).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity]
	 *  The function invoked per iteration.
	 * @returns {Array} Returns the new flattened array.
	 * @example
	 *
	 * function duplicate(n) {
	 *   return [n, n];
	 * }
	 *
	 * _.flatMap([1, 2], duplicate);
	 * // => [1, 1, 2, 2]
	 */
	function flatMap(collection, iteratee) {
	  return baseFlatten(map(collection, iteratee), 1);
	}

	/**
	 * Creates an array of values by running each element in `collection` thru
	 * `iteratee`. The iteratee is invoked with three arguments:
	 * (value, index|key, collection).
	 *
	 * Many lodash methods are guarded to work as iteratees for methods like
	 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	 *
	 * The guarded methods are:
	 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
	 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
	 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
	 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 * @example
	 *
	 * function square(n) {
	 *   return n * n;
	 * }
	 *
	 * _.map([4, 8], square);
	 * // => [16, 64]
	 *
	 * _.map({ 'a': 4, 'b': 8 }, square);
	 * // => [16, 64] (iteration order is not guaranteed)
	 *
	 * var users = [
	 *   { 'user': 'barney' },
	 *   { 'user': 'fred' }
	 * ];
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.map(users, 'user');
	 * // => ['barney', 'fred']
	 */
	function map(collection, iteratee) {
	  var func = isArray(collection) ? arrayMap : baseMap;
	  return func(collection, baseIteratee(iteratee, 3));
	}

	/**
	 * Creates a function that memoizes the result of `func`. If `resolver` is
	 * provided, it determines the cache key for storing the result based on the
	 * arguments provided to the memoized function. By default, the first argument
	 * provided to the memoized function is used as the map cache key. The `func`
	 * is invoked with the `this` binding of the memoized function.
	 *
	 * **Note:** The cache is exposed as the `cache` property on the memoized
	 * function. Its creation may be customized by replacing the `_.memoize.Cache`
	 * constructor with one whose instances implement the
	 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	 * method interface of `delete`, `get`, `has`, and `set`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to have its output memoized.
	 * @param {Function} [resolver] The function to resolve the cache key.
	 * @returns {Function} Returns the new memoized function.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': 2 };
	 * var other = { 'c': 3, 'd': 4 };
	 *
	 * var values = _.memoize(_.values);
	 * values(object);
	 * // => [1, 2]
	 *
	 * values(other);
	 * // => [3, 4]
	 *
	 * object.a = 2;
	 * values(object);
	 * // => [1, 2]
	 *
	 * // Modify the result cache.
	 * values.cache.set(object, ['a', 'b']);
	 * values(object);
	 * // => ['a', 'b']
	 *
	 * // Replace `_.memoize.Cache`.
	 * _.memoize.Cache = WeakMap;
	 */
	function memoize(func, resolver) {
	  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  var memoized = function() {
	    var args = arguments,
	        key = resolver ? resolver.apply(this, args) : args[0],
	        cache = memoized.cache;

	    if (cache.has(key)) {
	      return cache.get(key);
	    }
	    var result = func.apply(this, args);
	    memoized.cache = cache.set(key, result);
	    return result;
	  };
	  memoized.cache = new (memoize.Cache || MapCache);
	  return memoized;
	}

	// Assign cache to `_.memoize`.
	memoize.Cache = MapCache;

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
	  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
	    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
	}

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}

	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike(value) && isArrayLike(value);
	}

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8-9 which returns 'object' for typed array and other constructors.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && objectToString.call(value) == symbolTag);
	}

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

	/**
	 * Converts `value` to a string. An empty string is returned for `null`
	 * and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString(value) {
	  return value == null ? '' : baseToString(value);
	}

	/**
	 * Gets the value at `path` of `object`. If the resolved value is
	 * `undefined`, the `defaultValue` is returned in its place.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.7.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	 * @returns {*} Returns the resolved value.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.get(object, 'a[0].b.c');
	 * // => 3
	 *
	 * _.get(object, ['a', '0', 'b', 'c']);
	 * // => 3
	 *
	 * _.get(object, 'a.b.c', 'default');
	 * // => 'default'
	 */
	function get(object, path, defaultValue) {
	  var result = object == null ? undefined : baseGet(object, path);
	  return result === undefined ? defaultValue : result;
	}

	/**
	 * Checks if `path` is a direct or inherited property of `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 * @example
	 *
	 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	 *
	 * _.hasIn(object, 'a');
	 * // => true
	 *
	 * _.hasIn(object, 'a.b');
	 * // => true
	 *
	 * _.hasIn(object, ['a', 'b']);
	 * // => true
	 *
	 * _.hasIn(object, 'b');
	 * // => false
	 */
	function hasIn(object, path) {
	  return object != null && hasPath(object, path, baseHasIn);
	}

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	}

	/**
	 * This method returns the first argument it receives.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 *
	 * console.log(_.identity(object) === object);
	 * // => true
	 */
	function identity(value) {
	  return value;
	}

	/**
	 * Creates a function that returns the value at `path` of a given object.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 * @example
	 *
	 * var objects = [
	 *   { 'a': { 'b': 2 } },
	 *   { 'a': { 'b': 1 } }
	 * ];
	 *
	 * _.map(objects, _.property('a.b'));
	 * // => [2, 1]
	 *
	 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	 * // => [1, 2]
	 */
	function property(path) {
	  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
	}

	module.exports = flatMap;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(41)(module)))

/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	var baseTimes = __webpack_require__(337),
	    isArguments = __webpack_require__(346),
	    isArray = __webpack_require__(135),
	    isBuffer = __webpack_require__(347),
	    isIndex = __webpack_require__(340),
	    isTypedArray = __webpack_require__(349);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys(value, inherited) {
	  var isArr = isArray(value),
	      isArg = !isArr && isArguments(value),
	      isBuff = !isArr && !isArg && isBuffer(value),
	      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
	      skipIndexes = isArr || isArg || isBuff || isType,
	      result = skipIndexes ? baseTimes(value.length, String) : [],
	      length = result.length;

	  for (var key in value) {
	    if ((inherited || hasOwnProperty.call(value, key)) &&
	        !(skipIndexes && (
	           // Safari 9 has enumerable `arguments.length` in strict mode.
	           key == 'length' ||
	           // Node.js 0.10 has enumerable non-index properties on buffers.
	           (isBuff && (key == 'offset' || key == 'parent')) ||
	           // PhantomJS 2 has enumerable non-index properties on typed arrays.
	           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
	           // Skip index properties.
	           isIndex(key, length)
	        ))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = arrayLikeKeys;


/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(88),
	    isObjectLike = __webpack_require__(89);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]';

	/**
	 * The base implementation of `_.isArguments`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 */
	function baseIsArguments(value) {
	  return isObjectLike(value) && baseGetTag(value) == argsTag;
	}

	module.exports = baseIsArguments;


/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(88),
	    isLength = __webpack_require__(136),
	    isObjectLike = __webpack_require__(89);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	typedArrayTags[setTag] = typedArrayTags[stringTag] =
	typedArrayTags[weakMapTag] = false;

	/**
	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 */
	function baseIsTypedArray(value) {
	  return isObjectLike(value) &&
	    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
	}

	module.exports = baseIsTypedArray;


/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	var isPrototype = __webpack_require__(341),
	    nativeKeys = __webpack_require__(342);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  if (!isPrototype(object)) {
	    return nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = baseKeys;


/***/ },
/* 337 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);

	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}

	module.exports = baseTimes;


/***/ },
/* 338 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.unary` without support for storing metadata.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new capped function.
	 */
	function baseUnary(func) {
	  return function(value) {
	    return func(value);
	  };
	}

	module.exports = baseUnary;


/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(132);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty.call(value, symToStringTag),
	      tag = value[symToStringTag];

	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}

	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }
	  return result;
	}

	module.exports = getRawTag;


/***/ },
/* 340 */
/***/ function(module, exports) {

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  var type = typeof value;
	  length = length == null ? MAX_SAFE_INTEGER : length;

	  return !!length &&
	    (type == 'number' ||
	      (type != 'symbol' && reIsUint.test(value))) &&
	        (value > -1 && value % 1 == 0 && value < length);
	}

	module.exports = isIndex;


/***/ },
/* 341 */
/***/ function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	  return value === proto;
	}

	module.exports = isPrototype;


/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	var overArg = __webpack_require__(345);

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeKeys = overArg(Object.keys, Object);

	module.exports = nativeKeys;


/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var freeGlobal = __webpack_require__(133);

	/** Detect free variable `exports`. */
	var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Detect free variable `process` from Node.js. */
	var freeProcess = moduleExports && freeGlobal.process;

	/** Used to access faster Node.js helpers. */
	var nodeUtil = (function() {
	  try {
	    // Use `util.types` for Node.js 10+.
	    var types = freeModule && freeModule.require && freeModule.require('util').types;

	    if (types) {
	      return types;
	    }

	    // Legacy `process.binding('util')` for Node.js < 10.
	    return freeProcess && freeProcess.binding && freeProcess.binding('util');
	  } catch (e) {}
	}());

	module.exports = nodeUtil;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(41)(module)))

/***/ },
/* 344 */
/***/ function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString.call(value);
	}

	module.exports = objectToString;


/***/ },
/* 345 */
/***/ function(module, exports) {

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}

	module.exports = overArg;


/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsArguments = __webpack_require__(334),
	    isObjectLike = __webpack_require__(89);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Built-in value references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
	  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
	    !propertyIsEnumerable.call(value, 'callee');
	};

	module.exports = isArguments;


/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(134),
	    stubFalse = __webpack_require__(351);

	/** Detect free variable `exports`. */
	var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

	/**
	 * Checks if `value` is a buffer.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	 * @example
	 *
	 * _.isBuffer(new Buffer(2));
	 * // => true
	 *
	 * _.isBuffer(new Uint8Array(2));
	 * // => false
	 */
	var isBuffer = nativeIsBuffer || stubFalse;

	module.exports = isBuffer;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(41)(module)))

/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(88),
	    isObject = __webpack_require__(137);

	/** `Object#toString` result references. */
	var asyncTag = '[object AsyncFunction]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    proxyTag = '[object Proxy]';

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  if (!isObject(value)) {
	    return false;
	  }
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 9 which returns 'object' for typed arrays and other constructors.
	  var tag = baseGetTag(value);
	  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	}

	module.exports = isFunction;


/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsTypedArray = __webpack_require__(335),
	    baseUnary = __webpack_require__(338),
	    nodeUtil = __webpack_require__(343);

	/* Node.js helper references. */
	var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

	module.exports = isTypedArray;


/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	var arrayLikeKeys = __webpack_require__(333),
	    baseKeys = __webpack_require__(336),
	    isArrayLike = __webpack_require__(65);

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	}

	module.exports = keys;


/***/ },
/* 351 */
/***/ function(module, exports) {

	/**
	 * This method returns `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `false`.
	 * @example
	 *
	 * _.times(2, _.stubFalse);
	 * // => [false, false]
	 */
	function stubFalse() {
	  return false;
	}

	module.exports = stubFalse;


/***/ },
/* 352 */
/***/ function(module, exports) {

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/

	'use strict';
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};


/***/ },
/* 353 */
/***/ function(module, exports) {

	exports.endianness = function () { return 'LE' };

	exports.hostname = function () {
	    if (typeof location !== 'undefined') {
	        return location.hostname
	    }
	    else return '';
	};

	exports.loadavg = function () { return [] };

	exports.uptime = function () { return 0 };

	exports.freemem = function () {
	    return Number.MAX_VALUE;
	};

	exports.totalmem = function () {
	    return Number.MAX_VALUE;
	};

	exports.cpus = function () { return [] };

	exports.type = function () { return 'Browser' };

	exports.release = function () {
	    if (typeof navigator !== 'undefined') {
	        return navigator.appVersion;
	    }
	    return '';
	};

	exports.networkInterfaces
	= exports.getNetworkInterfaces
	= function () { return {} };

	exports.arch = function () { return 'javascript' };

	exports.platform = function () { return 'browser' };

	exports.tmpdir = exports.tmpDir = function () {
	    return '/tmp';
	};

	exports.EOL = '\n';


/***/ },
/* 354 */
/***/ function(module, exports) {

	var trim = function(string) {
	  return string.replace(/^\s+|\s+$/g, '');
	}
	  , isArray = function(arg) {
	      return Object.prototype.toString.call(arg) === '[object Array]';
	    }

	module.exports = function (headers) {
	  if (!headers)
	    return {}

	  var result = {}

	  var headersArr = trim(headers).split('\n')

	  for (var i = 0; i < headersArr.length; i++) {
	    var row = headersArr[i]
	    var index = row.indexOf(':')
	    , key = trim(row.slice(0, index)).toLowerCase()
	    , value = trim(row.slice(index + 1))

	    if (typeof(result[key]) === 'undefined') {
	      result[key] = value
	    } else if (isArray(result[key])) {
	      result[key].push(value)
	    } else {
	      result[key] = [ result[key], value ]
	    }
	  }

	  return result
	}


/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function(crypto) {
	  function pbkdf2(password, salt, iterations, keylen, digest, callback) {
	    if ('function' === typeof digest) {
	      callback = digest
	      digest = undefined
	    }

	    if ('function' !== typeof callback)
	      throw new Error('No callback provided to pbkdf2')

	    setTimeout(function() {
	      var result

	      try {
	        result = pbkdf2Sync(password, salt, iterations, keylen, digest)
	      } catch (e) {
	        return callback(e)
	      }

	      callback(undefined, result)
	    })
	  }

	  function pbkdf2Sync(password, salt, iterations, keylen, digest) {
	    if ('number' !== typeof iterations)
	      throw new TypeError('Iterations not a number')

	    if (iterations < 0)
	      throw new TypeError('Bad iterations')

	    if ('number' !== typeof keylen)
	      throw new TypeError('Key length not a number')

	    if (keylen < 0)
	      throw new TypeError('Bad key length')

	    digest = digest || 'sha1'

	    if (!Buffer.isBuffer(password)) password = new Buffer(password)
	    if (!Buffer.isBuffer(salt)) salt = new Buffer(salt)

	    var hLen, l = 1, r, T
	    var DK = new Buffer(keylen)
	    var block1 = new Buffer(salt.length + 4)
	    salt.copy(block1, 0, 0, salt.length)

	    for (var i = 1; i <= l; i++) {
	      block1.writeUInt32BE(i, salt.length)

	      var U = crypto.createHmac(digest, password).update(block1).digest()

	      if (!hLen) {
	        hLen = U.length
	        T = new Buffer(hLen)
	        l = Math.ceil(keylen / hLen)
	        r = keylen - (l - 1) * hLen

	        if (keylen > (Math.pow(2, 32) - 1) * hLen)
	          throw new TypeError('keylen exceeds maximum length')
	      }

	      U.copy(T, 0, 0, hLen)

	      for (var j = 1; j < iterations; j++) {
	        U = crypto.createHmac(digest, password).update(U).digest()

	        for (var k = 0; k < hLen; k++) {
	          T[k] ^= U[k]
	        }
	      }

	      var destPos = (i - 1) * hLen
	      var len = (i == l ? r : hLen)
	      T.copy(DK, destPos, 0, len)
	    }

	    return DK
	  }

	  return {
	    pbkdf2: pbkdf2,
	    pbkdf2Sync: pbkdf2Sync
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 356 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};

	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }

	  var regexp = /\+/g;
	  qs = qs.split(sep);

	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }

	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }

	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;

	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }

	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);

	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (Array.isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }

	  return obj;
	};


/***/ },
/* 357 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;

	    case 'boolean':
	      return v ? 'true' : 'false';

	    case 'number':
	      return isFinite(v) ? v : '';

	    default:
	      return '';
	  }
	};

	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }

	  if (typeof obj === 'object') {
	    return Object.keys(obj).map(function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (Array.isArray(obj[k])) {
	        return obj[k].map(function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);

	  }

	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};


/***/ },
/* 358 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.decode = exports.parse = __webpack_require__(356);
	exports.encode = exports.stringify = __webpack_require__(357);


/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.
	'use strict';

	module.exports = PassThrough;

	var Transform = __webpack_require__(141);

	__webpack_require__(3)(PassThrough, Transform);

	function PassThrough(options) {
	  if (!(this instanceof PassThrough)) return new PassThrough(options);
	  Transform.call(this, options);
	}

	PassThrough.prototype._transform = function (chunk, encoding, cb) {
	  cb(null, chunk);
	};

/***/ },
/* 360 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _Object$setPrototypeO;

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var finished = __webpack_require__(92);

	var kLastResolve = Symbol('lastResolve');
	var kLastReject = Symbol('lastReject');
	var kError = Symbol('error');
	var kEnded = Symbol('ended');
	var kLastPromise = Symbol('lastPromise');
	var kHandlePromise = Symbol('handlePromise');
	var kStream = Symbol('stream');

	function createIterResult(value, done) {
	  return {
	    value: value,
	    done: done
	  };
	}

	function readAndResolve(iter) {
	  var resolve = iter[kLastResolve];

	  if (resolve !== null) {
	    var data = iter[kStream].read(); // we defer if data is null
	    // we can be expecting either 'end' or
	    // 'error'

	    if (data !== null) {
	      iter[kLastPromise] = null;
	      iter[kLastResolve] = null;
	      iter[kLastReject] = null;
	      resolve(createIterResult(data, false));
	    }
	  }
	}

	function onReadable(iter) {
	  // we wait for the next tick, because it might
	  // emit an error with process.nextTick
	  process.nextTick(readAndResolve, iter);
	}

	function wrapForNext(lastPromise, iter) {
	  return function (resolve, reject) {
	    lastPromise.then(function () {
	      if (iter[kEnded]) {
	        resolve(createIterResult(undefined, true));
	        return;
	      }

	      iter[kHandlePromise](resolve, reject);
	    }, reject);
	  };
	}

	var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
	var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
	  get stream() {
	    return this[kStream];
	  },

	  next: function next() {
	    var _this = this;

	    // if we have detected an error in the meanwhile
	    // reject straight away
	    var error = this[kError];

	    if (error !== null) {
	      return Promise.reject(error);
	    }

	    if (this[kEnded]) {
	      return Promise.resolve(createIterResult(undefined, true));
	    }

	    if (this[kStream].destroyed) {
	      // We need to defer via nextTick because if .destroy(err) is
	      // called, the error will be emitted via nextTick, and
	      // we cannot guarantee that there is no error lingering around
	      // waiting to be emitted.
	      return new Promise(function (resolve, reject) {
	        process.nextTick(function () {
	          if (_this[kError]) {
	            reject(_this[kError]);
	          } else {
	            resolve(createIterResult(undefined, true));
	          }
	        });
	      });
	    } // if we have multiple next() calls
	    // we will wait for the previous Promise to finish
	    // this logic is optimized to support for await loops,
	    // where next() is only called once at a time


	    var lastPromise = this[kLastPromise];
	    var promise;

	    if (lastPromise) {
	      promise = new Promise(wrapForNext(lastPromise, this));
	    } else {
	      // fast path needed to support multiple this.push()
	      // without triggering the next() queue
	      var data = this[kStream].read();

	      if (data !== null) {
	        return Promise.resolve(createIterResult(data, false));
	      }

	      promise = new Promise(this[kHandlePromise]);
	    }

	    this[kLastPromise] = promise;
	    return promise;
	  }
	}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
	  return this;
	}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
	  var _this2 = this;

	  // destroy(err, cb) is a private API
	  // we can guarantee we have that here, because we control the
	  // Readable class this is attached to
	  return new Promise(function (resolve, reject) {
	    _this2[kStream].destroy(null, function (err) {
	      if (err) {
	        reject(err);
	        return;
	      }

	      resolve(createIterResult(undefined, true));
	    });
	  });
	}), _Object$setPrototypeO), AsyncIteratorPrototype);

	var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
	  var _Object$create;

	  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
	    value: stream,
	    writable: true
	  }), _defineProperty(_Object$create, kLastResolve, {
	    value: null,
	    writable: true
	  }), _defineProperty(_Object$create, kLastReject, {
	    value: null,
	    writable: true
	  }), _defineProperty(_Object$create, kError, {
	    value: null,
	    writable: true
	  }), _defineProperty(_Object$create, kEnded, {
	    value: stream._readableState.endEmitted,
	    writable: true
	  }), _defineProperty(_Object$create, kHandlePromise, {
	    value: function value(resolve, reject) {
	      var data = iterator[kStream].read();

	      if (data) {
	        iterator[kLastPromise] = null;
	        iterator[kLastResolve] = null;
	        iterator[kLastReject] = null;
	        resolve(createIterResult(data, false));
	      } else {
	        iterator[kLastResolve] = resolve;
	        iterator[kLastReject] = reject;
	      }
	    },
	    writable: true
	  }), _Object$create));
	  iterator[kLastPromise] = null;
	  finished(stream, function (err) {
	    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
	      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
	      // returned by next() and store the error

	      if (reject !== null) {
	        iterator[kLastPromise] = null;
	        iterator[kLastResolve] = null;
	        iterator[kLastReject] = null;
	        reject(err);
	      }

	      iterator[kError] = err;
	      return;
	    }

	    var resolve = iterator[kLastResolve];

	    if (resolve !== null) {
	      iterator[kLastPromise] = null;
	      iterator[kLastResolve] = null;
	      iterator[kLastReject] = null;
	      resolve(createIterResult(undefined, true));
	    }

	    iterator[kEnded] = true;
	  });
	  stream.on('readable', onReadable.bind(null, iterator));
	  return iterator;
	};

	module.exports = createReadableStreamAsyncIterator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

	var _require = __webpack_require__(1),
	    Buffer = _require.Buffer;

	var _require2 = __webpack_require__(425),
	    inspect = _require2.inspect;

	var custom = inspect && inspect.custom || 'inspect';

	function copyBuffer(src, target, offset) {
	  Buffer.prototype.copy.call(src, target, offset);
	}

	module.exports =
	/*#__PURE__*/
	function () {
	  function BufferList() {
	    _classCallCheck(this, BufferList);

	    this.head = null;
	    this.tail = null;
	    this.length = 0;
	  }

	  _createClass(BufferList, [{
	    key: "push",
	    value: function push(v) {
	      var entry = {
	        data: v,
	        next: null
	      };
	      if (this.length > 0) this.tail.next = entry;else this.head = entry;
	      this.tail = entry;
	      ++this.length;
	    }
	  }, {
	    key: "unshift",
	    value: function unshift(v) {
	      var entry = {
	        data: v,
	        next: this.head
	      };
	      if (this.length === 0) this.tail = entry;
	      this.head = entry;
	      ++this.length;
	    }
	  }, {
	    key: "shift",
	    value: function shift() {
	      if (this.length === 0) return;
	      var ret = this.head.data;
	      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
	      --this.length;
	      return ret;
	    }
	  }, {
	    key: "clear",
	    value: function clear() {
	      this.head = this.tail = null;
	      this.length = 0;
	    }
	  }, {
	    key: "join",
	    value: function join(s) {
	      if (this.length === 0) return '';
	      var p = this.head;
	      var ret = '' + p.data;

	      while (p = p.next) {
	        ret += s + p.data;
	      }

	      return ret;
	    }
	  }, {
	    key: "concat",
	    value: function concat(n) {
	      if (this.length === 0) return Buffer.alloc(0);
	      var ret = Buffer.allocUnsafe(n >>> 0);
	      var p = this.head;
	      var i = 0;

	      while (p) {
	        copyBuffer(p.data, ret, i);
	        i += p.data.length;
	        p = p.next;
	      }

	      return ret;
	    } // Consumes a specified amount of bytes or characters from the buffered data.

	  }, {
	    key: "consume",
	    value: function consume(n, hasStrings) {
	      var ret;

	      if (n < this.head.data.length) {
	        // `slice` is the same for buffers and strings.
	        ret = this.head.data.slice(0, n);
	        this.head.data = this.head.data.slice(n);
	      } else if (n === this.head.data.length) {
	        // First chunk is a perfect match.
	        ret = this.shift();
	      } else {
	        // Result spans more than one buffer.
	        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
	      }

	      return ret;
	    }
	  }, {
	    key: "first",
	    value: function first() {
	      return this.head.data;
	    } // Consumes a specified amount of characters from the buffered data.

	  }, {
	    key: "_getString",
	    value: function _getString(n) {
	      var p = this.head;
	      var c = 1;
	      var ret = p.data;
	      n -= ret.length;

	      while (p = p.next) {
	        var str = p.data;
	        var nb = n > str.length ? str.length : n;
	        if (nb === str.length) ret += str;else ret += str.slice(0, n);
	        n -= nb;

	        if (n === 0) {
	          if (nb === str.length) {
	            ++c;
	            if (p.next) this.head = p.next;else this.head = this.tail = null;
	          } else {
	            this.head = p;
	            p.data = str.slice(nb);
	          }

	          break;
	        }

	        ++c;
	      }

	      this.length -= c;
	      return ret;
	    } // Consumes a specified amount of bytes from the buffered data.

	  }, {
	    key: "_getBuffer",
	    value: function _getBuffer(n) {
	      var ret = Buffer.allocUnsafe(n);
	      var p = this.head;
	      var c = 1;
	      p.data.copy(ret);
	      n -= p.data.length;

	      while (p = p.next) {
	        var buf = p.data;
	        var nb = n > buf.length ? buf.length : n;
	        buf.copy(ret, ret.length - n, 0, nb);
	        n -= nb;

	        if (n === 0) {
	          if (nb === buf.length) {
	            ++c;
	            if (p.next) this.head = p.next;else this.head = this.tail = null;
	          } else {
	            this.head = p;
	            p.data = buf.slice(nb);
	          }

	          break;
	        }

	        ++c;
	      }

	      this.length -= c;
	      return ret;
	    } // Make sure the linked list only shows the minimal necessary information.

	  }, {
	    key: custom,
	    value: function value(_, options) {
	      return inspect(this, _objectSpread({}, options, {
	        // Only inspect one level.
	        depth: 0,
	        // It should not recurse.
	        customInspect: false
	      }));
	    }
	  }]);

	  return BufferList;
	}();

/***/ },
/* 362 */
/***/ function(module, exports) {

	module.exports = function () {
	  throw new Error('Readable.from is not available in the browser')
	};


/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	// Ported from https://github.com/mafintosh/pump with
	// permission from the author, Mathias Buus (@mafintosh).
	'use strict';

	var eos;

	function once(callback) {
	  var called = false;
	  return function () {
	    if (called) return;
	    called = true;
	    callback.apply(void 0, arguments);
	  };
	}

	var _require$codes = __webpack_require__(36).codes,
	    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
	    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

	function noop(err) {
	  // Rethrow the error if it exists to avoid swallowing it
	  if (err) throw err;
	}

	function isRequest(stream) {
	  return stream.setHeader && typeof stream.abort === 'function';
	}

	function destroyer(stream, reading, writing, callback) {
	  callback = once(callback);
	  var closed = false;
	  stream.on('close', function () {
	    closed = true;
	  });
	  if (eos === undefined) eos = __webpack_require__(92);
	  eos(stream, {
	    readable: reading,
	    writable: writing
	  }, function (err) {
	    if (err) return callback(err);
	    closed = true;
	    callback();
	  });
	  var destroyed = false;
	  return function (err) {
	    if (closed) return;
	    if (destroyed) return;
	    destroyed = true; // request.destroy just do .end - .abort is what we want

	    if (isRequest(stream)) return stream.abort();
	    if (typeof stream.destroy === 'function') return stream.destroy();
	    callback(err || new ERR_STREAM_DESTROYED('pipe'));
	  };
	}

	function call(fn) {
	  fn();
	}

	function pipe(from, to) {
	  return from.pipe(to);
	}

	function popCallback(streams) {
	  if (!streams.length) return noop;
	  if (typeof streams[streams.length - 1] !== 'function') return noop;
	  return streams.pop();
	}

	function pipeline() {
	  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
	    streams[_key] = arguments[_key];
	  }

	  var callback = popCallback(streams);
	  if (Array.isArray(streams[0])) streams = streams[0];

	  if (streams.length < 2) {
	    throw new ERR_MISSING_ARGS('streams');
	  }

	  var error;
	  var destroys = streams.map(function (stream, i) {
	    var reading = i < streams.length - 1;
	    var writing = i > 0;
	    return destroyer(stream, reading, writing, function (err) {
	      if (!error) error = err;
	      if (err) destroys.forEach(call);
	      if (reading) return;
	      destroys.forEach(call);
	      callback(error);
	    });
	  });
	  return streams.reduce(pipe);
	}

	module.exports = pipeline;

/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(140);
	exports.Stream = exports;
	exports.Readable = exports;
	exports.Writable = __webpack_require__(142);
	exports.Duplex = __webpack_require__(37);
	exports.Transform = __webpack_require__(141);
	exports.PassThrough = __webpack_require__(359);
	exports.finished = __webpack_require__(92);
	exports.pipeline = __webpack_require__(363);


/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	const EC = __webpack_require__(35).ec

	const ec = new EC('secp256k1')
	const ecparams = ec.curve

	// Hack, we can not use bn.js@5, while elliptic uses bn.js@4
	// See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758
	const BN = ecparams.n.constructor

	function loadCompressedPublicKey (first, xbuf) {
	  let x = new BN(xbuf)

	  // overflow
	  if (x.cmp(ecparams.p) >= 0) return null
	  x = x.toRed(ecparams.red)

	  // compute corresponding Y
	  let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()
	  if ((first === 0x03) !== y.isOdd()) y = y.redNeg()

	  return ec.keyPair({ pub: { x: x, y: y } })
	}

	function loadUncompressedPublicKey (first, xbuf, ybuf) {
	  let x = new BN(xbuf)
	  let y = new BN(ybuf)

	  // overflow
	  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null

	  x = x.toRed(ecparams.red)
	  y = y.toRed(ecparams.red)

	  // is odd flag
	  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null

	  // x*x*x + b = y*y
	  const x3 = x.redSqr().redIMul(x)
	  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null

	  return ec.keyPair({ pub: { x: x, y: y } })
	}

	function loadPublicKey (pubkey) {
	  // length should be validated in interface
	  const first = pubkey[0]
	  switch (first) {
	    case 0x02:
	    case 0x03:
	      if (pubkey.length !== 33) return null
	      return loadCompressedPublicKey(first, pubkey.subarray(1, 33))
	    case 0x04:
	    case 0x06:
	    case 0x07:
	      if (pubkey.length !== 65) return null
	      return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65))
	    default:
	      return null
	  }
	}

	function savePublicKey (output, point) {
	  const pubkey = point.encode(null, output.length === 33)
	  // Loop should be faster because we do not need create extra Uint8Array
	  // output.set(new Uint8Array(pubkey))
	  for (let i = 0; i < output.length; ++i) output[i] = pubkey[i]
	}

	module.exports = {
	  contextRandomize () {
	    return 0
	  },

	  privateKeyVerify (seckey) {
	    const bn = new BN(seckey)
	    return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1
	  },

	  privateKeyNegate (seckey) {
	    const bn = new BN(seckey)
	    const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, 'be', 32)
	    seckey.set(negate)
	    return 0
	  },

	  privateKeyTweakAdd (seckey, tweak) {
	    const bn = new BN(tweak)
	    if (bn.cmp(ecparams.n) >= 0) return 1

	    bn.iadd(new BN(seckey))
	    if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)
	    if (bn.isZero()) return 1

	    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)
	    seckey.set(tweaked)

	    return 0
	  },

	  privateKeyTweakMul (seckey, tweak) {
	    let bn = new BN(tweak)
	    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1

	    bn.imul(new BN(seckey))
	    if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n)

	    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)
	    seckey.set(tweaked)

	    return 0
	  },

	  publicKeyVerify (pubkey) {
	    const pair = loadPublicKey(pubkey)
	    return pair === null ? 1 : 0
	  },

	  publicKeyCreate (output, seckey) {
	    const bn = new BN(seckey)
	    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1

	    const point = ec.keyFromPrivate(seckey).getPublic()
	    savePublicKey(output, point)

	    return 0
	  },

	  publicKeyConvert (output, pubkey) {
	    const pair = loadPublicKey(pubkey)
	    if (pair === null) return 1

	    const point = pair.getPublic()
	    savePublicKey(output, point)

	    return 0
	  },

	  publicKeyNegate (output, pubkey) {
	    const pair = loadPublicKey(pubkey)
	    if (pair === null) return 1

	    const point = pair.getPublic()
	    point.y = point.y.redNeg()
	    savePublicKey(output, point)

	    return 0
	  },

	  publicKeyCombine (output, pubkeys) {
	    const pairs = new Array(pubkeys.length)
	    for (let i = 0; i < pubkeys.length; ++i) {
	      pairs[i] = loadPublicKey(pubkeys[i])
	      if (pairs[i] === null) return 1
	    }

	    let point = pairs[0].getPublic()
	    for (let i = 1; i < pairs.length; ++i) point = point.add(pairs[i].pub)
	    if (point.isInfinity()) return 2

	    savePublicKey(output, point)

	    return 0
	  },

	  publicKeyTweakAdd (output, pubkey, tweak) {
	    const pair = loadPublicKey(pubkey)
	    if (pair === null) return 1

	    tweak = new BN(tweak)
	    if (tweak.cmp(ecparams.n) >= 0) return 2

	    const point = pair.getPublic().add(ecparams.g.mul(tweak))
	    if (point.isInfinity()) return 2

	    savePublicKey(output, point)

	    return 0
	  },

	  publicKeyTweakMul (output, pubkey, tweak) {
	    const pair = loadPublicKey(pubkey)
	    if (pair === null) return 1

	    tweak = new BN(tweak)
	    if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2

	    const point = pair.getPublic().mul(tweak)
	    savePublicKey(output, point)

	    return 0
	  },

	  signatureNormalize (sig) {
	    const r = new BN(sig.subarray(0, 32))
	    const s = new BN(sig.subarray(32, 64))
	    if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1

	    if (s.cmp(ec.nh) === 1) {
	      sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32)
	    }

	    return 0
	  },

	  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
	  // Adapted for Uint8Array instead Buffer
	  signatureExport (obj, sig) {
	    const sigR = sig.subarray(0, 32)
	    const sigS = sig.subarray(32, 64)
	    if (new BN(sigR).cmp(ecparams.n) >= 0) return 1
	    if (new BN(sigS).cmp(ecparams.n) >= 0) return 1

	    const { output } = obj

	    // Prepare R
	    let r = output.subarray(4, 4 + 33)
	    r[0] = 0x00
	    r.set(sigR, 1)

	    let lenR = 33
	    let posR = 0
	    for (; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);

	    r = r.subarray(posR)
	    if (r[0] & 0x80) return 1
	    if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) return 1

	    // Prepare S
	    let s = output.subarray(6 + 33, 6 + 33 + 33)
	    s[0] = 0x00
	    s.set(sigS, 1)

	    let lenS = 33
	    let posS = 0
	    for (; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);

	    s = s.subarray(posS)
	    if (s[0] & 0x80) return 1
	    if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) return 1

	    // Set output length for return
	    obj.outputlen = 6 + lenR + lenS

	    // Output in specified format
	    // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
	    output[0] = 0x30
	    output[1] = obj.outputlen - 2
	    output[2] = 0x02
	    output[3] = r.length
	    output.set(r, 4)
	    output[4 + lenR] = 0x02
	    output[5 + lenR] = s.length
	    output.set(s, 6 + lenR)

	    return 0
	  },

	  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
	  // Adapted for Uint8Array instead Buffer
	  signatureImport (output, sig) {
	    if (sig.length < 8) return 1
	    if (sig.length > 72) return 1
	    if (sig[0] !== 0x30) return 1
	    if (sig[1] !== sig.length - 2) return 1
	    if (sig[2] !== 0x02) return 1

	    const lenR = sig[3]
	    if (lenR === 0) return 1
	    if (5 + lenR >= sig.length) return 1
	    if (sig[4 + lenR] !== 0x02) return 1

	    const lenS = sig[5 + lenR]
	    if (lenS === 0) return 1
	    if ((6 + lenR + lenS) !== sig.length) return 1

	    if (sig[4] & 0x80) return 1
	    if (lenR > 1 && (sig[4] === 0x00) && !(sig[5] & 0x80)) return 1

	    if (sig[lenR + 6] & 0x80) return 1
	    if (lenS > 1 && (sig[lenR + 6] === 0x00) && !(sig[lenR + 7] & 0x80)) return 1

	    let sigR = sig.subarray(4, 4 + lenR)
	    if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1)
	    if (sigR.length > 32) return 1

	    let sigS = sig.subarray(6 + lenR)
	    if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1)
	    if (sigS.length > 32) throw new Error('S length is too long')

	    let r = new BN(sigR)
	    if (r.cmp(ecparams.n) >= 0) r = new BN(0)

	    let s = new BN(sig.subarray(6 + lenR))
	    if (s.cmp(ecparams.n) >= 0) s = new BN(0)

	    output.set(r.toArrayLike(Uint8Array, 'be', 32), 0)
	    output.set(s.toArrayLike(Uint8Array, 'be', 32), 32)

	    return 0
	  },

	  ecdsaSign (obj, message, seckey, data, noncefn) {
	    if (noncefn) {
	      const _noncefn = noncefn
	      noncefn = (counter) => {
	        const nonce = _noncefn(message, seckey, null, data, counter)

	        const isValid = nonce instanceof Uint8Array && nonce.length === 32
	        if (!isValid) throw new Error('This is the way')

	        return new BN(nonce)
	      }
	    }

	    const d = new BN(seckey)
	    if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1

	    let sig
	    try {
	      sig = ec.sign(message, seckey, { canonical: true, k: noncefn, pers: data })
	    } catch (err) {
	      return 1
	    }

	    obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0)
	    obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32)
	    obj.recid = sig.recoveryParam

	    return 0
	  },

	  ecdsaVerify (sig, msg32, pubkey) {
	    const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) }

	    const sigr = new BN(sigObj.r)
	    const sigs = new BN(sigObj.s)
	    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1
	    if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3

	    const pair = loadPublicKey(pubkey)
	    if (pair === null) return 2

	    const point = pair.getPublic()
	    const isValid = ec.verify(msg32, sigObj, point)
	    return isValid ? 0 : 3
	  },

	  ecdsaRecover (output, sig, recid, msg32) {
	    const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) }

	    const sigr = new BN(sigObj.r)
	    const sigs = new BN(sigObj.s)
	    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1

	    if (sigr.isZero() || sigs.isZero()) return 2

	    // Can throw `throw new Error('Unable to find sencond key candinate');`
	    let point
	    try {
	      point = ec.recoverPubKey(msg32, sigObj, recid)
	    } catch (err) {
	      return 2
	    }

	    savePublicKey(output, point)

	    return 0
	  },

	  ecdh (output, pubkey, seckey, data, hashfn, xbuf, ybuf) {
	    const pair = loadPublicKey(pubkey)
	    if (pair === null) return 1

	    const scalar = new BN(seckey)
	    if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2

	    const point = pair.getPublic().mul(scalar)

	    if (hashfn === undefined) {
	      const data = point.encode(null, true)
	      const sha256 = ec.hash().update(data).digest()
	      for (let i = 0; i < 32; ++i) output[i] = sha256[i]
	    } else {
	      if (!xbuf) xbuf = new Uint8Array(32)
	      const x = point.getX().toArray('be', 32)
	      for (let i = 0; i < 32; ++i) xbuf[i] = x[i]

	      if (!ybuf) ybuf = new Uint8Array(32)
	      const y = point.getY().toArray('be', 32)
	      for (let i = 0; i < 32; ++i) ybuf[i] = y[i]

	      const hash = hashfn(xbuf, ybuf, data)

	      const isValid = hash instanceof Uint8Array && hash.length === output.length
	      if (!isValid) return 2

	      output.set(hash)
	    }

	    return 0
	  }
	}


/***/ },
/* 366 */
/***/ function(module, exports) {

	const errors = {
	  IMPOSSIBLE_CASE: 'Impossible case. Please create issue.',
	  TWEAK_ADD:
	    'The tweak was out of range or the resulted private key is invalid',
	  TWEAK_MUL: 'The tweak was out of range or equal to zero',
	  CONTEXT_RANDOMIZE_UNKNOW: 'Unknow error on context randomization',
	  SECKEY_INVALID: 'Private Key is invalid',
	  PUBKEY_PARSE: 'Public Key could not be parsed',
	  PUBKEY_SERIALIZE: 'Public Key serialization error',
	  PUBKEY_COMBINE: 'The sum of the public keys is not valid',
	  SIG_PARSE: 'Signature could not be parsed',
	  SIGN: 'The nonce generation function failed, or the private key was invalid',
	  RECOVER: 'Public key could not be recover',
	  ECDH: 'Scalar was invalid (zero or overflow)'
	}

	function assert (cond, msg) {
	  if (!cond) throw new Error(msg)
	}

	function isUint8Array (name, value, length) {
	  assert(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`)

	  if (length !== undefined) {
	    if (Array.isArray(length)) {
	      const numbers = length.join(', ')
	      const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`
	      assert(length.includes(value.length), msg)
	    } else {
	      const msg = `Expected ${name} to be an Uint8Array with length ${length}`
	      assert(value.length === length, msg)
	    }
	  }
	}

	function isCompressed (value) {
	  assert(toTypeString(value) === 'Boolean', 'Expected compressed to be a Boolean')
	}

	function getAssertedOutput (output = (len) => new Uint8Array(len), length) {
	  if (typeof output === 'function') output = output(length)
	  isUint8Array('output', output, length)
	  return output
	}

	function toTypeString (value) {
	  return Object.prototype.toString.call(value).slice(8, -1)
	}

	module.exports = (secp256k1) => {
	  return {
	    contextRandomize (seed) {
	      assert(
	        seed === null || seed instanceof Uint8Array,
	        'Expected seed to be an Uint8Array or null'
	      )
	      if (seed !== null) isUint8Array('seed', seed, 32)

	      switch (secp256k1.contextRandomize(seed)) {
	        case 1:
	          throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW)
	      }
	    },

	    privateKeyVerify (seckey) {
	      isUint8Array('private key', seckey, 32)

	      return secp256k1.privateKeyVerify(seckey) === 0
	    },

	    privateKeyNegate (seckey) {
	      isUint8Array('private key', seckey, 32)

	      switch (secp256k1.privateKeyNegate(seckey)) {
	        case 0:
	          return seckey
	        case 1:
	          throw new Error(errors.IMPOSSIBLE_CASE)
	      }
	    },

	    privateKeyTweakAdd (seckey, tweak) {
	      isUint8Array('private key', seckey, 32)
	      isUint8Array('tweak', tweak, 32)

	      switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {
	        case 0:
	          return seckey
	        case 1:
	          throw new Error(errors.TWEAK_ADD)
	      }
	    },

	    privateKeyTweakMul (seckey, tweak) {
	      isUint8Array('private key', seckey, 32)
	      isUint8Array('tweak', tweak, 32)

	      switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {
	        case 0:
	          return seckey
	        case 1:
	          throw new Error(errors.TWEAK_MUL)
	      }
	    },

	    publicKeyVerify (pubkey) {
	      isUint8Array('public key', pubkey, [33, 65])

	      return secp256k1.publicKeyVerify(pubkey) === 0
	    },

	    publicKeyCreate (seckey, compressed = true, output) {
	      isUint8Array('private key', seckey, 32)
	      isCompressed(compressed)
	      output = getAssertedOutput(output, compressed ? 33 : 65)

	      switch (secp256k1.publicKeyCreate(output, seckey)) {
	        case 0:
	          return output
	        case 1:
	          throw new Error(errors.SECKEY_INVALID)
	        case 2:
	          throw new Error(errors.PUBKEY_SERIALIZE)
	      }
	    },

	    publicKeyConvert (pubkey, compressed = true, output) {
	      isUint8Array('public key', pubkey, [33, 65])
	      isCompressed(compressed)
	      output = getAssertedOutput(output, compressed ? 33 : 65)

	      switch (secp256k1.publicKeyConvert(output, pubkey)) {
	        case 0:
	          return output
	        case 1:
	          throw new Error(errors.PUBKEY_PARSE)
	        case 2:
	          throw new Error(errors.PUBKEY_SERIALIZE)
	      }
	    },

	    publicKeyNegate (pubkey, compressed = true, output) {
	      isUint8Array('public key', pubkey, [33, 65])
	      isCompressed(compressed)
	      output = getAssertedOutput(output, compressed ? 33 : 65)

	      switch (secp256k1.publicKeyNegate(output, pubkey)) {
	        case 0:
	          return output
	        case 1:
	          throw new Error(errors.PUBKEY_PARSE)
	        case 2:
	          throw new Error(errors.IMPOSSIBLE_CASE)
	        case 3:
	          throw new Error(errors.PUBKEY_SERIALIZE)
	      }
	    },

	    publicKeyCombine (pubkeys, compressed = true, output) {
	      assert(Array.isArray(pubkeys), 'Expected public keys to be an Array')
	      assert(pubkeys.length > 0, 'Expected public keys array will have more than zero items')
	      for (const pubkey of pubkeys) {
	        isUint8Array('public key', pubkey, [33, 65])
	      }
	      isCompressed(compressed)
	      output = getAssertedOutput(output, compressed ? 33 : 65)

	      switch (secp256k1.publicKeyCombine(output, pubkeys)) {
	        case 0:
	          return output
	        case 1:
	          throw new Error(errors.PUBKEY_PARSE)
	        case 2:
	          throw new Error(errors.PUBKEY_COMBINE)
	        case 3:
	          throw new Error(errors.PUBKEY_SERIALIZE)
	      }
	    },

	    publicKeyTweakAdd (pubkey, tweak, compressed = true, output) {
	      isUint8Array('public key', pubkey, [33, 65])
	      isUint8Array('tweak', tweak, 32)
	      isCompressed(compressed)
	      output = getAssertedOutput(output, compressed ? 33 : 65)

	      switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {
	        case 0:
	          return output
	        case 1:
	          throw new Error(errors.PUBKEY_PARSE)
	        case 2:
	          throw new Error(errors.TWEAK_ADD)
	      }
	    },

	    publicKeyTweakMul (pubkey, tweak, compressed = true, output) {
	      isUint8Array('public key', pubkey, [33, 65])
	      isUint8Array('tweak', tweak, 32)
	      isCompressed(compressed)
	      output = getAssertedOutput(output, compressed ? 33 : 65)

	      switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {
	        case 0:
	          return output
	        case 1:
	          throw new Error(errors.PUBKEY_PARSE)
	        case 2:
	          throw new Error(errors.TWEAK_MUL)
	      }
	    },

	    signatureNormalize (sig) {
	      isUint8Array('signature', sig, 64)

	      switch (secp256k1.signatureNormalize(sig)) {
	        case 0:
	          return sig
	        case 1:
	          throw new Error(errors.SIG_PARSE)
	      }
	    },

	    signatureExport (sig, output) {
	      isUint8Array('signature', sig, 64)
	      output = getAssertedOutput(output, 72)

	      const obj = { output, outputlen: 72 }
	      switch (secp256k1.signatureExport(obj, sig)) {
	        case 0:
	          return output.slice(0, obj.outputlen)
	        case 1:
	          throw new Error(errors.SIG_PARSE)
	        case 2:
	          throw new Error(errors.IMPOSSIBLE_CASE)
	      }
	    },

	    signatureImport (sig, output) {
	      isUint8Array('signature', sig)
	      output = getAssertedOutput(output, 64)

	      switch (secp256k1.signatureImport(output, sig)) {
	        case 0:
	          return output
	        case 1:
	          throw new Error(errors.SIG_PARSE)
	        case 2:
	          throw new Error(errors.IMPOSSIBLE_CASE)
	      }
	    },

	    ecdsaSign (msg32, seckey, options = {}, output) {
	      isUint8Array('message', msg32, 32)
	      isUint8Array('private key', seckey, 32)
	      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')
	      if (options.data !== undefined) isUint8Array('options.data', options.data)
	      if (options.noncefn !== undefined) assert(toTypeString(options.noncefn) === 'Function', 'Expected options.noncefn to be a Function')
	      output = getAssertedOutput(output, 64)

	      const obj = { signature: output, recid: null }
	      switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {
	        case 0:
	          return obj
	        case 1:
	          throw new Error(errors.SIGN)
	        case 2:
	          throw new Error(errors.IMPOSSIBLE_CASE)
	      }
	    },

	    ecdsaVerify (sig, msg32, pubkey) {
	      isUint8Array('signature', sig, 64)
	      isUint8Array('message', msg32, 32)
	      isUint8Array('public key', pubkey, [33, 65])

	      switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {
	        case 0:
	          return true
	        case 3:
	          return false
	        case 1:
	          throw new Error(errors.SIG_PARSE)
	        case 2:
	          throw new Error(errors.PUBKEY_PARSE)
	      }
	    },

	    ecdsaRecover (sig, recid, msg32, compressed = true, output) {
	      isUint8Array('signature', sig, 64)
	      assert(
	        toTypeString(recid) === 'Number' &&
	          recid >= 0 &&
	          recid <= 3,
	        'Expected recovery id to be a Number within interval [0, 3]'
	      )
	      isUint8Array('message', msg32, 32)
	      isCompressed(compressed)
	      output = getAssertedOutput(output, compressed ? 33 : 65)

	      switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {
	        case 0:
	          return output
	        case 1:
	          throw new Error(errors.SIG_PARSE)
	        case 2:
	          throw new Error(errors.RECOVER)
	        case 3:
	          throw new Error(errors.IMPOSSIBLE_CASE)
	      }
	    },

	    ecdh (pubkey, seckey, options = {}, output) {
	      isUint8Array('public key', pubkey, [33, 65])
	      isUint8Array('private key', seckey, 32)
	      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')
	      if (options.data !== undefined) isUint8Array('options.data', options.data)
	      if (options.hashfn !== undefined) {
	        assert(toTypeString(options.hashfn) === 'Function', 'Expected options.hashfn to be a Function')
	        if (options.xbuf !== undefined) isUint8Array('options.xbuf', options.xbuf, 32)
	        if (options.ybuf !== undefined) isUint8Array('options.ybuf', options.ybuf, 32)
	        isUint8Array('output', output)
	      } else {
	        output = getAssertedOutput(output, 32)
	      }

	      switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {
	        case 0:
	          return output
	        case 1:
	          throw new Error(errors.PUBKEY_PARSE)
	        case 2:
	          throw new Error(errors.ECDH)
	      }
	    }
	  }
	}


/***/ },
/* 367 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {;(function(global) {

	'use strict';

	var nextTick = function (fn) { setTimeout(fn, 0); }
	if (typeof process != 'undefined' && process && typeof process.nextTick == 'function') {
		// node.js and the like
		nextTick = process.nextTick;
	}

	function semaphore(capacity) {
		var semaphore = {
			capacity: capacity || 1,
			current: 0,
			queue: [],
			firstHere: false,

			take: function() {
				if (semaphore.firstHere === false) {
	        			semaphore.current++;
	        			semaphore.firstHere = true;
	        			var isFirst = 1;
	      			} else {
	        			var isFirst = 0;
	      			}
				var item = { n: 1 };

				if (typeof arguments[0] == 'function') {
					item.task = arguments[0];
				} else {
					item.n = arguments[0];
				}

				if (arguments.length >= 2)  {
					if (typeof arguments[1] == 'function') item.task = arguments[1];
					else item.n = arguments[1];
				}

				var task = item.task;
				item.task = function() { task(semaphore.leave); };

				if (semaphore.current + item.n - isFirst > semaphore.capacity) {
	        			if (isFirst === 1) {
	        				semaphore.current--;
	        				semaphore.firstHere = false;
	        			}
					return semaphore.queue.push(item);
				}

				semaphore.current += item.n - isFirst;
				item.task(semaphore.leave);
	      			if (isFirst === 1) semaphore.firstHere = false;
			},

			leave: function(n) {
				n = n || 1;

				semaphore.current -= n;

				if (!semaphore.queue.length) {
					if (semaphore.current < 0) {
						throw new Error('leave called too many times.');
					}

					return;
				}

				var item = semaphore.queue[0];

				if (item.n + semaphore.current > semaphore.capacity) {
					return;
				}

				semaphore.queue.shift();
				semaphore.current += item.n;

				nextTick(item.task);
			},

			available: function(n) {
				n = n || 1;
				return(semaphore.current + n <= semaphore.capacity);
			}
		};

		return semaphore;
	};

	if (true) {
	    // node export
	    module.exports = semaphore;
	} else if (typeof define === 'function' && define.amd) {
	    // amd export
	    define(function () {
	        return semaphore;
	    });
	} else {
	    // browser global
	    global.semaphore = semaphore;
	}
	}(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 368 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
	 * in FIPS PUB 180-1
	 * This source code is derived from sha1.js of the same repository.
	 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
	 * operation was added.
	 */

	var inherits = __webpack_require__(3)
	var Hash = __webpack_require__(38)
	var Buffer = __webpack_require__(6).Buffer

	var K = [
	  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
	]

	var W = new Array(80)

	function Sha () {
	  this.init()
	  this._w = W

	  Hash.call(this, 64, 56)
	}

	inherits(Sha, Hash)

	Sha.prototype.init = function () {
	  this._a = 0x67452301
	  this._b = 0xefcdab89
	  this._c = 0x98badcfe
	  this._d = 0x10325476
	  this._e = 0xc3d2e1f0

	  return this
	}

	function rotl5 (num) {
	  return (num << 5) | (num >>> 27)
	}

	function rotl30 (num) {
	  return (num << 30) | (num >>> 2)
	}

	function ft (s, b, c, d) {
	  if (s === 0) return (b & c) | ((~b) & d)
	  if (s === 2) return (b & c) | (b & d) | (c & d)
	  return b ^ c ^ d
	}

	Sha.prototype._update = function (M) {
	  var W = this._w

	  var a = this._a | 0
	  var b = this._b | 0
	  var c = this._c | 0
	  var d = this._d | 0
	  var e = this._e | 0

	  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
	  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

	  for (var j = 0; j < 80; ++j) {
	    var s = ~~(j / 20)
	    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

	    e = d
	    d = c
	    c = rotl30(b)
	    b = a
	    a = t
	  }

	  this._a = (a + this._a) | 0
	  this._b = (b + this._b) | 0
	  this._c = (c + this._c) | 0
	  this._d = (d + this._d) | 0
	  this._e = (e + this._e) | 0
	}

	Sha.prototype._hash = function () {
	  var H = Buffer.allocUnsafe(20)

	  H.writeInt32BE(this._a | 0, 0)
	  H.writeInt32BE(this._b | 0, 4)
	  H.writeInt32BE(this._c | 0, 8)
	  H.writeInt32BE(this._d | 0, 12)
	  H.writeInt32BE(this._e | 0, 16)

	  return H
	}

	module.exports = Sha


/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
	 * in FIPS PUB 180-1
	 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for details.
	 */

	var inherits = __webpack_require__(3)
	var Hash = __webpack_require__(38)
	var Buffer = __webpack_require__(6).Buffer

	var K = [
	  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
	]

	var W = new Array(80)

	function Sha1 () {
	  this.init()
	  this._w = W

	  Hash.call(this, 64, 56)
	}

	inherits(Sha1, Hash)

	Sha1.prototype.init = function () {
	  this._a = 0x67452301
	  this._b = 0xefcdab89
	  this._c = 0x98badcfe
	  this._d = 0x10325476
	  this._e = 0xc3d2e1f0

	  return this
	}

	function rotl1 (num) {
	  return (num << 1) | (num >>> 31)
	}

	function rotl5 (num) {
	  return (num << 5) | (num >>> 27)
	}

	function rotl30 (num) {
	  return (num << 30) | (num >>> 2)
	}

	function ft (s, b, c, d) {
	  if (s === 0) return (b & c) | ((~b) & d)
	  if (s === 2) return (b & c) | (b & d) | (c & d)
	  return b ^ c ^ d
	}

	Sha1.prototype._update = function (M) {
	  var W = this._w

	  var a = this._a | 0
	  var b = this._b | 0
	  var c = this._c | 0
	  var d = this._d | 0
	  var e = this._e | 0

	  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
	  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

	  for (var j = 0; j < 80; ++j) {
	    var s = ~~(j / 20)
	    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

	    e = d
	    d = c
	    c = rotl30(b)
	    b = a
	    a = t
	  }

	  this._a = (a + this._a) | 0
	  this._b = (b + this._b) | 0
	  this._c = (c + this._c) | 0
	  this._d = (d + this._d) | 0
	  this._e = (e + this._e) | 0
	}

	Sha1.prototype._hash = function () {
	  var H = Buffer.allocUnsafe(20)

	  H.writeInt32BE(this._a | 0, 0)
	  H.writeInt32BE(this._b | 0, 4)
	  H.writeInt32BE(this._c | 0, 8)
	  H.writeInt32BE(this._d | 0, 12)
	  H.writeInt32BE(this._e | 0, 16)

	  return H
	}

	module.exports = Sha1


/***/ },
/* 370 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */

	var inherits = __webpack_require__(3)
	var Sha256 = __webpack_require__(150)
	var Hash = __webpack_require__(38)
	var Buffer = __webpack_require__(6).Buffer

	var W = new Array(64)

	function Sha224 () {
	  this.init()

	  this._w = W // new Array(64)

	  Hash.call(this, 64, 56)
	}

	inherits(Sha224, Sha256)

	Sha224.prototype.init = function () {
	  this._a = 0xc1059ed8
	  this._b = 0x367cd507
	  this._c = 0x3070dd17
	  this._d = 0xf70e5939
	  this._e = 0xffc00b31
	  this._f = 0x68581511
	  this._g = 0x64f98fa7
	  this._h = 0xbefa4fa4

	  return this
	}

	Sha224.prototype._hash = function () {
	  var H = Buffer.allocUnsafe(28)

	  H.writeInt32BE(this._a, 0)
	  H.writeInt32BE(this._b, 4)
	  H.writeInt32BE(this._c, 8)
	  H.writeInt32BE(this._d, 12)
	  H.writeInt32BE(this._e, 16)
	  H.writeInt32BE(this._f, 20)
	  H.writeInt32BE(this._g, 24)

	  return H
	}

	module.exports = Sha224


/***/ },
/* 371 */
/***/ function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(3)
	var SHA512 = __webpack_require__(151)
	var Hash = __webpack_require__(38)
	var Buffer = __webpack_require__(6).Buffer

	var W = new Array(160)

	function Sha384 () {
	  this.init()
	  this._w = W

	  Hash.call(this, 128, 112)
	}

	inherits(Sha384, SHA512)

	Sha384.prototype.init = function () {
	  this._ah = 0xcbbb9d5d
	  this._bh = 0x629a292a
	  this._ch = 0x9159015a
	  this._dh = 0x152fecd8
	  this._eh = 0x67332667
	  this._fh = 0x8eb44a87
	  this._gh = 0xdb0c2e0d
	  this._hh = 0x47b5481d

	  this._al = 0xc1059ed8
	  this._bl = 0x367cd507
	  this._cl = 0x3070dd17
	  this._dl = 0xf70e5939
	  this._el = 0xffc00b31
	  this._fl = 0x68581511
	  this._gl = 0x64f98fa7
	  this._hl = 0xbefa4fa4

	  return this
	}

	Sha384.prototype._hash = function () {
	  var H = Buffer.allocUnsafe(48)

	  function writeInt64BE (h, l, offset) {
	    H.writeInt32BE(h, offset)
	    H.writeInt32BE(l, offset + 4)
	  }

	  writeInt64BE(this._ah, this._al, 0)
	  writeInt64BE(this._bh, this._bl, 8)
	  writeInt64BE(this._ch, this._cl, 16)
	  writeInt64BE(this._dh, this._dl, 24)
	  writeInt64BE(this._eh, this._el, 32)
	  writeInt64BE(this._fh, this._fl, 40)

	  return H
	}

	module.exports = Sha384


/***/ },
/* 372 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(28)


/***/ },
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(152)


/***/ },
/* 374 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {exports = module.exports = __webpack_require__(153);
	exports.Stream = __webpack_require__(16);
	exports.Readable = exports;
	exports.Writable = __webpack_require__(94);
	exports.Duplex = __webpack_require__(28);
	exports.Transform = __webpack_require__(93);
	exports.PassThrough = __webpack_require__(152);
	if (!process.browser && process.env.READABLE_STREAM === 'disable') {
	  module.exports = __webpack_require__(16);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 375 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(93)


/***/ },
/* 376 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(94)


/***/ },
/* 377 */
/***/ function(module, exports, __webpack_require__) {

	var isHexPrefixed = __webpack_require__(130);

	/**
	 * Removes '0x' from a given `String` is present
	 * @param {String} str the string value
	 * @return {String|Optional} a string by pass if necessary
	 */
	module.exports = function stripHexPrefix(str) {
	  if (typeof str !== 'string') {
	    return str;
	  }

	  return isHexPrefixed(str) ? str.slice(2) : str;
	}


/***/ },
/* 378 */
8,
/* 379 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var NATIVE = __webpack_require__(96)
	var ERRORS = __webpack_require__(155)

	function _Buffer (value) {
	  return Buffer.isBuffer(value)
	}

	function Hex (value) {
	  return typeof value === 'string' && /^([0-9a-f]{2})+$/i.test(value)
	}

	function _LengthN (type, length) {
	  var name = type.toJSON()

	  function Length (value) {
	    if (!type(value)) return false
	    if (value.length === length) return true

	    throw ERRORS.tfCustomError(name + '(Length: ' + length + ')', name + '(Length: ' + value.length + ')')
	  }
	  Length.toJSON = function () { return name }

	  return Length
	}

	var _ArrayN = _LengthN.bind(null, NATIVE.Array)
	var _BufferN = _LengthN.bind(null, _Buffer)
	var _HexN = _LengthN.bind(null, Hex)
	var _StringN = _LengthN.bind(null, NATIVE.String)

	function Range (a, b, f) {
	  f = f || NATIVE.Number
	  function _range (value, strict) {
	    return f(value, strict) && (value > a) && (value < b)
	  }
	  _range.toJSON = function () {
	    return `${f.toJSON()} between [${a}, ${b}]`
	  }
	  return _range
	}

	var INT53_MAX = Math.pow(2, 53) - 1

	function Finite (value) {
	  return typeof value === 'number' && isFinite(value)
	}
	function Int8 (value) { return ((value << 24) >> 24) === value }
	function Int16 (value) { return ((value << 16) >> 16) === value }
	function Int32 (value) { return (value | 0) === value }
	function Int53 (value) {
	  return typeof value === 'number' &&
	    value >= -INT53_MAX &&
	    value <= INT53_MAX &&
	    Math.floor(value) === value
	}
	function UInt8 (value) { return (value & 0xff) === value }
	function UInt16 (value) { return (value & 0xffff) === value }
	function UInt32 (value) { return (value >>> 0) === value }
	function UInt53 (value) {
	  return typeof value === 'number' &&
	    value >= 0 &&
	    value <= INT53_MAX &&
	    Math.floor(value) === value
	}

	var types = {
	  ArrayN: _ArrayN,
	  Buffer: _Buffer,
	  BufferN: _BufferN,
	  Finite: Finite,
	  Hex: Hex,
	  HexN: _HexN,
	  Int8: Int8,
	  Int16: Int16,
	  Int32: Int32,
	  Int53: Int53,
	  Range: Range,
	  StringN: _StringN,
	  UInt8: UInt8,
	  UInt16: UInt16,
	  UInt32: UInt32,
	  UInt53: UInt53
	}

	for (var typeName in types) {
	  types[typeName].toJSON = function (t) {
	    return t
	  }.bind(null, typeName)
	}

	module.exports = types

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 380 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/punycode v1.3.2 by @mathias */
	;(function(root) {

		/** Detect free variables */
		var freeExports = typeof exports == 'object' && exports &&
			!exports.nodeType && exports;
		var freeModule = typeof module == 'object' && module &&
			!module.nodeType && module;
		var freeGlobal = typeof global == 'object' && global;
		if (
			freeGlobal.global === freeGlobal ||
			freeGlobal.window === freeGlobal ||
			freeGlobal.self === freeGlobal
		) {
			root = freeGlobal;
		}

		/**
		 * The `punycode` object.
		 * @name punycode
		 * @type Object
		 */
		var punycode,

		/** Highest positive signed 32-bit float value */
		maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

		/** Bootstring parameters */
		base = 36,
		tMin = 1,
		tMax = 26,
		skew = 38,
		damp = 700,
		initialBias = 72,
		initialN = 128, // 0x80
		delimiter = '-', // '\x2D'

		/** Regular expressions */
		regexPunycode = /^xn--/,
		regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
		regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

		/** Error messages */
		errors = {
			'overflow': 'Overflow: input needs wider integers to process',
			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
			'invalid-input': 'Invalid input'
		},

		/** Convenience shortcuts */
		baseMinusTMin = base - tMin,
		floor = Math.floor,
		stringFromCharCode = String.fromCharCode,

		/** Temporary variable */
		key;

		/*--------------------------------------------------------------------------*/

		/**
		 * A generic error utility function.
		 * @private
		 * @param {String} type The error type.
		 * @returns {Error} Throws a `RangeError` with the applicable error message.
		 */
		function error(type) {
			throw RangeError(errors[type]);
		}

		/**
		 * A generic `Array#map` utility function.
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} callback The function that gets called for every array
		 * item.
		 * @returns {Array} A new array of values returned by the callback function.
		 */
		function map(array, fn) {
			var length = array.length;
			var result = [];
			while (length--) {
				result[length] = fn(array[length]);
			}
			return result;
		}

		/**
		 * A simple `Array#map`-like wrapper to work with domain name strings or email
		 * addresses.
		 * @private
		 * @param {String} domain The domain name or email address.
		 * @param {Function} callback The function that gets called for every
		 * character.
		 * @returns {Array} A new string of characters returned by the callback
		 * function.
		 */
		function mapDomain(string, fn) {
			var parts = string.split('@');
			var result = '';
			if (parts.length > 1) {
				// In email addresses, only the domain name should be punycoded. Leave
				// the local part (i.e. everything up to `@`) intact.
				result = parts[0] + '@';
				string = parts[1];
			}
			// Avoid `split(regex)` for IE8 compatibility. See #17.
			string = string.replace(regexSeparators, '\x2E');
			var labels = string.split('.');
			var encoded = map(labels, fn).join('.');
			return result + encoded;
		}

		/**
		 * Creates an array containing the numeric code points of each Unicode
		 * character in the string. While JavaScript uses UCS-2 internally,
		 * this function will convert a pair of surrogate halves (each of which
		 * UCS-2 exposes as separate characters) into a single code point,
		 * matching UTF-16.
		 * @see `punycode.ucs2.encode`
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode.ucs2
		 * @name decode
		 * @param {String} string The Unicode input string (UCS-2).
		 * @returns {Array} The new array of code points.
		 */
		function ucs2decode(string) {
			var output = [],
			    counter = 0,
			    length = string.length,
			    value,
			    extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}

		/**
		 * Creates a string based on an array of numeric code points.
		 * @see `punycode.ucs2.decode`
		 * @memberOf punycode.ucs2
		 * @name encode
		 * @param {Array} codePoints The array of numeric code points.
		 * @returns {String} The new Unicode string (UCS-2).
		 */
		function ucs2encode(array) {
			return map(array, function(value) {
				var output = '';
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
				return output;
			}).join('');
		}

		/**
		 * Converts a basic code point into a digit/integer.
		 * @see `digitToBasic()`
		 * @private
		 * @param {Number} codePoint The basic numeric code point value.
		 * @returns {Number} The numeric value of a basic code point (for use in
		 * representing integers) in the range `0` to `base - 1`, or `base` if
		 * the code point does not represent a value.
		 */
		function basicToDigit(codePoint) {
			if (codePoint - 48 < 10) {
				return codePoint - 22;
			}
			if (codePoint - 65 < 26) {
				return codePoint - 65;
			}
			if (codePoint - 97 < 26) {
				return codePoint - 97;
			}
			return base;
		}

		/**
		 * Converts a digit/integer into a basic code point.
		 * @see `basicToDigit()`
		 * @private
		 * @param {Number} digit The numeric value of a basic code point.
		 * @returns {Number} The basic code point whose value (when used for
		 * representing integers) is `digit`, which needs to be in the range
		 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
		 * used; else, the lowercase form is used. The behavior is undefined
		 * if `flag` is non-zero and `digit` has no uppercase form.
		 */
		function digitToBasic(digit, flag) {
			//  0..25 map to ASCII a..z or A..Z
			// 26..35 map to ASCII 0..9
			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		}

		/**
		 * Bias adaptation function as per section 3.4 of RFC 3492.
		 * http://tools.ietf.org/html/rfc3492#section-3.4
		 * @private
		 */
		function adapt(delta, numPoints, firstTime) {
			var k = 0;
			delta = firstTime ? floor(delta / damp) : delta >> 1;
			delta += floor(delta / numPoints);
			for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
				delta = floor(delta / baseMinusTMin);
			}
			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		}

		/**
		 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
		 * symbols.
		 * @memberOf punycode
		 * @param {String} input The Punycode string of ASCII-only symbols.
		 * @returns {String} The resulting string of Unicode symbols.
		 */
		function decode(input) {
			// Don't use UCS-2
			var output = [],
			    inputLength = input.length,
			    out,
			    i = 0,
			    n = initialN,
			    bias = initialBias,
			    basic,
			    j,
			    index,
			    oldi,
			    w,
			    k,
			    digit,
			    t,
			    /** Cached calculation results */
			    baseMinusT;

			// Handle the basic code points: let `basic` be the number of input code
			// points before the last delimiter, or `0` if there is none, then copy
			// the first basic code points to the output.

			basic = input.lastIndexOf(delimiter);
			if (basic < 0) {
				basic = 0;
			}

			for (j = 0; j < basic; ++j) {
				// if it's not a basic code point
				if (input.charCodeAt(j) >= 0x80) {
					error('not-basic');
				}
				output.push(input.charCodeAt(j));
			}

			// Main decoding loop: start just after the last delimiter if any basic code
			// points were copied; start at the beginning otherwise.

			for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

				// `index` is the index of the next character to be consumed.
				// Decode a generalized variable-length integer into `delta`,
				// which gets added to `i`. The overflow checking is easier
				// if we increase `i` as we go, then subtract off its starting
				// value at the end to obtain `delta`.
				for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

					if (index >= inputLength) {
						error('invalid-input');
					}

					digit = basicToDigit(input.charCodeAt(index++));

					if (digit >= base || digit > floor((maxInt - i) / w)) {
						error('overflow');
					}

					i += digit * w;
					t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

					if (digit < t) {
						break;
					}

					baseMinusT = base - t;
					if (w > floor(maxInt / baseMinusT)) {
						error('overflow');
					}

					w *= baseMinusT;

				}

				out = output.length + 1;
				bias = adapt(i - oldi, out, oldi == 0);

				// `i` was supposed to wrap around from `out` to `0`,
				// incrementing `n` each time, so we'll fix that now:
				if (floor(i / out) > maxInt - n) {
					error('overflow');
				}

				n += floor(i / out);
				i %= out;

				// Insert `n` at position `i` of the output
				output.splice(i++, 0, n);

			}

			return ucs2encode(output);
		}

		/**
		 * Converts a string of Unicode symbols (e.g. a domain name label) to a
		 * Punycode string of ASCII-only symbols.
		 * @memberOf punycode
		 * @param {String} input The string of Unicode symbols.
		 * @returns {String} The resulting Punycode string of ASCII-only symbols.
		 */
		function encode(input) {
			var n,
			    delta,
			    handledCPCount,
			    basicLength,
			    bias,
			    j,
			    m,
			    q,
			    k,
			    t,
			    currentValue,
			    output = [],
			    /** `inputLength` will hold the number of code points in `input`. */
			    inputLength,
			    /** Cached calculation results */
			    handledCPCountPlusOne,
			    baseMinusT,
			    qMinusT;

			// Convert the input in UCS-2 to Unicode
			input = ucs2decode(input);

			// Cache the length
			inputLength = input.length;

			// Initialize the state
			n = initialN;
			delta = 0;
			bias = initialBias;

			// Handle the basic code points
			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue < 0x80) {
					output.push(stringFromCharCode(currentValue));
				}
			}

			handledCPCount = basicLength = output.length;

			// `handledCPCount` is the number of code points that have been handled;
			// `basicLength` is the number of basic code points.

			// Finish the basic string - if it is not empty - with a delimiter
			if (basicLength) {
				output.push(delimiter);
			}

			// Main encoding loop:
			while (handledCPCount < inputLength) {

				// All non-basic code points < n have been handled already. Find the next
				// larger one:
				for (m = maxInt, j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}

				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
				// but guard against overflow
				handledCPCountPlusOne = handledCPCount + 1;
				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
					error('overflow');
				}

				delta += (m - n) * handledCPCountPlusOne;
				n = m;

				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];

					if (currentValue < n && ++delta > maxInt) {
						error('overflow');
					}

					if (currentValue == n) {
						// Represent delta as a generalized variable-length integer
						for (q = delta, k = base; /* no condition */; k += base) {
							t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
							if (q < t) {
								break;
							}
							qMinusT = q - t;
							baseMinusT = base - t;
							output.push(
								stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
							);
							q = floor(qMinusT / baseMinusT);
						}

						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}

				++delta;
				++n;

			}
			return output.join('');
		}

		/**
		 * Converts a Punycode string representing a domain name or an email address
		 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
		 * it doesn't matter if you call it on a string that has already been
		 * converted to Unicode.
		 * @memberOf punycode
		 * @param {String} input The Punycoded domain name or email address to
		 * convert to Unicode.
		 * @returns {String} The Unicode representation of the given Punycode
		 * string.
		 */
		function toUnicode(input) {
			return mapDomain(input, function(string) {
				return regexPunycode.test(string)
					? decode(string.slice(4).toLowerCase())
					: string;
			});
		}

		/**
		 * Converts a Unicode string representing a domain name or an email address to
		 * Punycode. Only the non-ASCII parts of the domain name will be converted,
		 * i.e. it doesn't matter if you call it with a domain that's already in
		 * ASCII.
		 * @memberOf punycode
		 * @param {String} input The domain name or email address to convert, as a
		 * Unicode string.
		 * @returns {String} The Punycode representation of the given domain name or
		 * email address.
		 */
		function toASCII(input) {
			return mapDomain(input, function(string) {
				return regexNonASCII.test(string)
					? 'xn--' + encode(string)
					: string;
			});
		}

		/*--------------------------------------------------------------------------*/

		/** Define the public API */
		punycode = {
			/**
			 * A string representing the current Punycode.js version number.
			 * @memberOf punycode
			 * @type String
			 */
			'version': '1.3.2',
			/**
			 * An object of methods to convert from JavaScript's internal character
			 * representation (UCS-2) to Unicode code points, and back.
			 * @see <https://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode
			 * @type Object
			 */
			'ucs2': {
				'decode': ucs2decode,
				'encode': ucs2encode
			},
			'decode': decode,
			'encode': encode,
			'toASCII': toASCII,
			'toUnicode': toUnicode
		};

		/** Expose `punycode` */
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return punycode;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (freeExports && freeModule) {
			if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = punycode;
			} else { // in Narwhal or RingoJS v0.7.0-
				for (key in punycode) {
					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.punycode = punycode;
		}

	}(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(41)(module), (function() { return this; }())))

/***/ },
/* 381 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/utf8js v2.1.2 by @mathias */
	;(function(root) {

		// Detect free variables `exports`
		var freeExports = typeof exports == 'object' && exports;

		// Detect free variable `module`
		var freeModule = typeof module == 'object' && module &&
			module.exports == freeExports && module;

		// Detect free variable `global`, from Node.js or Browserified code,
		// and use it as `root`
		var freeGlobal = typeof global == 'object' && global;
		if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
			root = freeGlobal;
		}

		/*--------------------------------------------------------------------------*/

		var stringFromCharCode = String.fromCharCode;

		// Taken from https://mths.be/punycode
		function ucs2decode(string) {
			var output = [];
			var counter = 0;
			var length = string.length;
			var value;
			var extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}

		// Taken from https://mths.be/punycode
		function ucs2encode(array) {
			var length = array.length;
			var index = -1;
			var value;
			var output = '';
			while (++index < length) {
				value = array[index];
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
			}
			return output;
		}

		function checkScalarValue(codePoint) {
			if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
				throw Error(
					'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
					' is not a scalar value'
				);
			}
		}
		/*--------------------------------------------------------------------------*/

		function createByte(codePoint, shift) {
			return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
		}

		function encodeCodePoint(codePoint) {
			if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
				return stringFromCharCode(codePoint);
			}
			var symbol = '';
			if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
				symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
			}
			else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
				checkScalarValue(codePoint);
				symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
				symbol += createByte(codePoint, 6);
			}
			else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
				symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
				symbol += createByte(codePoint, 12);
				symbol += createByte(codePoint, 6);
			}
			symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
			return symbol;
		}

		function utf8encode(string) {
			var codePoints = ucs2decode(string);
			var length = codePoints.length;
			var index = -1;
			var codePoint;
			var byteString = '';
			while (++index < length) {
				codePoint = codePoints[index];
				byteString += encodeCodePoint(codePoint);
			}
			return byteString;
		}

		/*--------------------------------------------------------------------------*/

		function readContinuationByte() {
			if (byteIndex >= byteCount) {
				throw Error('Invalid byte index');
			}

			var continuationByte = byteArray[byteIndex] & 0xFF;
			byteIndex++;

			if ((continuationByte & 0xC0) == 0x80) {
				return continuationByte & 0x3F;
			}

			// If we end up here, it’s not a continuation byte
			throw Error('Invalid continuation byte');
		}

		function decodeSymbol() {
			var byte1;
			var byte2;
			var byte3;
			var byte4;
			var codePoint;

			if (byteIndex > byteCount) {
				throw Error('Invalid byte index');
			}

			if (byteIndex == byteCount) {
				return false;
			}

			// Read first byte
			byte1 = byteArray[byteIndex] & 0xFF;
			byteIndex++;

			// 1-byte sequence (no continuation bytes)
			if ((byte1 & 0x80) == 0) {
				return byte1;
			}

			// 2-byte sequence
			if ((byte1 & 0xE0) == 0xC0) {
				byte2 = readContinuationByte();
				codePoint = ((byte1 & 0x1F) << 6) | byte2;
				if (codePoint >= 0x80) {
					return codePoint;
				} else {
					throw Error('Invalid continuation byte');
				}
			}

			// 3-byte sequence (may include unpaired surrogates)
			if ((byte1 & 0xF0) == 0xE0) {
				byte2 = readContinuationByte();
				byte3 = readContinuationByte();
				codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
				if (codePoint >= 0x0800) {
					checkScalarValue(codePoint);
					return codePoint;
				} else {
					throw Error('Invalid continuation byte');
				}
			}

			// 4-byte sequence
			if ((byte1 & 0xF8) == 0xF0) {
				byte2 = readContinuationByte();
				byte3 = readContinuationByte();
				byte4 = readContinuationByte();
				codePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |
					(byte3 << 0x06) | byte4;
				if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
					return codePoint;
				}
			}

			throw Error('Invalid UTF-8 detected');
		}

		var byteArray;
		var byteCount;
		var byteIndex;
		function utf8decode(byteString) {
			byteArray = ucs2decode(byteString);
			byteCount = byteArray.length;
			byteIndex = 0;
			var codePoints = [];
			var tmp;
			while ((tmp = decodeSymbol()) !== false) {
				codePoints.push(tmp);
			}
			return ucs2encode(codePoints);
		}

		/*--------------------------------------------------------------------------*/

		var utf8 = {
			'version': '2.1.2',
			'encode': utf8encode,
			'decode': utf8decode
		};

		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return utf8;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		}	else if (freeExports && !freeExports.nodeType) {
			if (freeModule) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = utf8;
			} else { // in Narwhal or RingoJS v0.7.0-
				var object = {};
				var hasOwnProperty = object.hasOwnProperty;
				for (var key in utf8) {
					hasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.utf8 = utf8;
		}

	}(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(41)(module), (function() { return this; }())))

/***/ },
/* 382 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/**
	 * Module exports.
	 */

	module.exports = deprecate;

	/**
	 * Mark that a method should not be used.
	 * Returns a modified function which warns once by default.
	 *
	 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
	 *
	 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
	 * will throw an Error when invoked.
	 *
	 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
	 * will invoke `console.trace()` instead of `console.error()`.
	 *
	 * @param {Function} fn - the function to deprecate
	 * @param {String} msg - the string to print to the console when `fn` is invoked
	 * @returns {Function} a new "deprecated" version of `fn`
	 * @api public
	 */

	function deprecate (fn, msg) {
	  if (config('noDeprecation')) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (config('throwDeprecation')) {
	        throw new Error(msg);
	      } else if (config('traceDeprecation')) {
	        console.trace(msg);
	      } else {
	        console.warn(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	}

	/**
	 * Checks `localStorage` for boolean values for the given `name`.
	 *
	 * @param {String} name
	 * @returns {Boolean}
	 * @api private
	 */

	function config (name) {
	  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
	  try {
	    if (!global.localStorage) return false;
	  } catch (_) {
	    return false;
	  }
	  var val = global.localStorage[name];
	  if (null == val) return false;
	  return String(val).toLowerCase() === 'true';
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 383 */
167,
/* 384 */
168,
/* 385 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var crypto = __webpack_require__(60)
	    ,uuidPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/
	    ;

	exports = module.exports = generateUuid;
	exports.async = generateUuidAsync;
	exports.sync = generateUuidSync;
	exports.valid = generateUuid;


	function isUUID(uuid) {
	  return uuidPattern.test(uuid);
	}


	function generateUuidSync() {
	  var rnd = crypto.randomBytes(16);
	  rnd[6] = (rnd[6] & 0x0f) | 0x40;
	  rnd[8] = (rnd[8] & 0x3f) | 0x80;
	  rnd = rnd.toString('hex').match(/(.{8})(.{4})(.{4})(.{4})(.{12})/);
	  rnd.shift();
	  return rnd.join('-');
	}

	function generateUuidAsync(callback) {
	  crypto.randomBytes(16, function(err, rnd) {
	    rnd[6] = (rnd[6] & 0x0f) | 0x40;
	    rnd[8] = (rnd[8] & 0x3f) | 0x80;
	    rnd = rnd.toString('hex').match(/(.{8})(.{4})(.{4})(.{4})(.{12})/);
	    rnd.shift();
	    callback(null, rnd.join('-'));
	  });
	}

	function generateUuid(callback) {
	  if (typeof callback !== 'function') return generateUuidSync();
	  return generateUuidAsync(callback);
	}


/***/ },
/* 386 */
/***/ function(module, exports, __webpack_require__) {

	var f = __webpack_require__(12);
	var SolidityType = __webpack_require__(17);

	/**
	 * SolidityTypeAddress is a prootype that represents address type
	 * It matches:
	 * address
	 * address[]
	 * address[4]
	 * address[][]
	 * address[3][]
	 * address[][6][], ...
	 */
	var SolidityTypeAddress = function () {
	    this._inputFormatter = f.formatInputInt;
	    this._outputFormatter = f.formatOutputAddress;
	};

	SolidityTypeAddress.prototype = new SolidityType({});
	SolidityTypeAddress.prototype.constructor = SolidityTypeAddress;

	SolidityTypeAddress.prototype.isType = function (name) {
	    return !!name.match(/address(\[([0-9]*)\])?/);
	};

	module.exports = SolidityTypeAddress;


/***/ },
/* 387 */
/***/ function(module, exports, __webpack_require__) {

	var f = __webpack_require__(12);
	var SolidityType = __webpack_require__(17);

	/**
	 * SolidityTypeBool is a prootype that represents bool type
	 * It matches:
	 * bool
	 * bool[]
	 * bool[4]
	 * bool[][]
	 * bool[3][]
	 * bool[][6][], ...
	 */
	var SolidityTypeBool = function () {
	    this._inputFormatter = f.formatInputBool;
	    this._outputFormatter = f.formatOutputBool;
	};

	SolidityTypeBool.prototype = new SolidityType({});
	SolidityTypeBool.prototype.constructor = SolidityTypeBool;

	SolidityTypeBool.prototype.isType = function (name) {
	    return !!name.match(/^bool(\[([0-9]*)\])*$/);
	};

	module.exports = SolidityTypeBool;


/***/ },
/* 388 */
/***/ function(module, exports, __webpack_require__) {

	var f = __webpack_require__(12);
	var SolidityType = __webpack_require__(17);

	/**
	 * SolidityTypeBytes is a prototype that represents the bytes type.
	 * It matches:
	 * bytes
	 * bytes[]
	 * bytes[4]
	 * bytes[][]
	 * bytes[3][]
	 * bytes[][6][], ...
	 * bytes32
	 * bytes8[4]
	 * bytes[3][]
	 */
	var SolidityTypeBytes = function () {
	    this._inputFormatter = f.formatInputBytes;
	    this._outputFormatter = f.formatOutputBytes;
	};

	SolidityTypeBytes.prototype = new SolidityType({});
	SolidityTypeBytes.prototype.constructor = SolidityTypeBytes;

	SolidityTypeBytes.prototype.isType = function (name) {
	    return !!name.match(/^bytes([0-9]{1,})(\[([0-9]*)\])*$/);
	};

	module.exports = SolidityTypeBytes;


/***/ },
/* 389 */
/***/ function(module, exports, __webpack_require__) {

	var f = __webpack_require__(12);
	var SolidityType = __webpack_require__(17);

	var SolidityTypeDynamicBytes = function () {
	    this._inputFormatter = f.formatInputDynamicBytes;
	    this._outputFormatter = f.formatOutputDynamicBytes;
	};

	SolidityTypeDynamicBytes.prototype = new SolidityType({});
	SolidityTypeDynamicBytes.prototype.constructor = SolidityTypeDynamicBytes;

	SolidityTypeDynamicBytes.prototype.isType = function (name) {
	    return !!name.match(/^bytes(\[([0-9]*)\])*$/);
	};

	SolidityTypeDynamicBytes.prototype.isDynamicType = function () {
	    return true;
	};

	module.exports = SolidityTypeDynamicBytes;


/***/ },
/* 390 */
/***/ function(module, exports, __webpack_require__) {

	var f = __webpack_require__(12);
	var SolidityType = __webpack_require__(17);

	/**
	 * SolidityTypeInt is a prootype that represents int type
	 * It matches:
	 * int
	 * int[]
	 * int[4]
	 * int[][]
	 * int[3][]
	 * int[][6][], ...
	 * int32
	 * int64[]
	 * int8[4]
	 * int256[][]
	 * int[3][]
	 * int64[][6][], ...
	 */
	var SolidityTypeInt = function () {
	    this._inputFormatter = f.formatInputInt;
	    this._outputFormatter = f.formatOutputInt;
	};

	SolidityTypeInt.prototype = new SolidityType({});
	SolidityTypeInt.prototype.constructor = SolidityTypeInt;

	SolidityTypeInt.prototype.isType = function (name) {
	    return !!name.match(/^int([0-9]*)?(\[([0-9]*)\])*$/);
	};

	module.exports = SolidityTypeInt;


/***/ },
/* 391 */
/***/ function(module, exports, __webpack_require__) {

	var f = __webpack_require__(12);
	var SolidityType = __webpack_require__(17);

	/**
	 * SolidityTypeReal is a prootype that represents real type
	 * It matches:
	 * real
	 * real[]
	 * real[4]
	 * real[][]
	 * real[3][]
	 * real[][6][], ...
	 * real32
	 * real64[]
	 * real8[4]
	 * real256[][]
	 * real[3][]
	 * real64[][6][], ...
	 */
	var SolidityTypeReal = function () {
	    this._inputFormatter = f.formatInputReal;
	    this._outputFormatter = f.formatOutputReal;
	};

	SolidityTypeReal.prototype = new SolidityType({});
	SolidityTypeReal.prototype.constructor = SolidityTypeReal;

	SolidityTypeReal.prototype.isType = function (name) {
	    return !!name.match(/real([0-9]*)?(\[([0-9]*)\])?/);
	};

	module.exports = SolidityTypeReal;


/***/ },
/* 392 */
/***/ function(module, exports, __webpack_require__) {

	var f = __webpack_require__(12);
	var SolidityType = __webpack_require__(17);

	var SolidityTypeString = function () {
	    this._inputFormatter = f.formatInputString;
	    this._outputFormatter = f.formatOutputString;
	};

	SolidityTypeString.prototype = new SolidityType({});
	SolidityTypeString.prototype.constructor = SolidityTypeString;

	SolidityTypeString.prototype.isType = function (name) {
	    return !!name.match(/^string(\[([0-9]*)\])*$/);
	};

	SolidityTypeString.prototype.isDynamicType = function () {
	    return true;
	};

	module.exports = SolidityTypeString;


/***/ },
/* 393 */
/***/ function(module, exports, __webpack_require__) {

	var f = __webpack_require__(12);
	var SolidityType = __webpack_require__(17);

	/**
	 * SolidityTypeUInt is a prootype that represents uint type
	 * It matches:
	 * uint
	 * uint[]
	 * uint[4]
	 * uint[][]
	 * uint[3][]
	 * uint[][6][], ...
	 * uint32
	 * uint64[]
	 * uint8[4]
	 * uint256[][]
	 * uint[3][]
	 * uint64[][6][], ...
	 */
	var SolidityTypeUInt = function () {
	    this._inputFormatter = f.formatInputInt;
	    this._outputFormatter = f.formatOutputUInt;
	};

	SolidityTypeUInt.prototype = new SolidityType({});
	SolidityTypeUInt.prototype.constructor = SolidityTypeUInt;

	SolidityTypeUInt.prototype.isType = function (name) {
	    return !!name.match(/^uint([0-9]*)?(\[([0-9]*)\])*$/);
	};

	module.exports = SolidityTypeUInt;


/***/ },
/* 394 */
/***/ function(module, exports, __webpack_require__) {

	var f = __webpack_require__(12);
	var SolidityType = __webpack_require__(17);

	/**
	 * SolidityTypeUReal is a prootype that represents ureal type
	 * It matches:
	 * ureal
	 * ureal[]
	 * ureal[4]
	 * ureal[][]
	 * ureal[3][]
	 * ureal[][6][], ...
	 * ureal32
	 * ureal64[]
	 * ureal8[4]
	 * ureal256[][]
	 * ureal[3][]
	 * ureal64[][6][], ...
	 */
	var SolidityTypeUReal = function () {
	    this._inputFormatter = f.formatInputReal;
	    this._outputFormatter = f.formatOutputUReal;
	};

	SolidityTypeUReal.prototype = new SolidityType({});
	SolidityTypeUReal.prototype.constructor = SolidityTypeUReal;

	SolidityTypeUReal.prototype.isType = function (name) {
	    return !!name.match(/^ureal([0-9]*)?(\[([0-9]*)\])*$/);
	};

	module.exports = SolidityTypeUReal;


/***/ },
/* 395 */
/***/ function(module, exports) {

	'use strict';

	// go env doesn't have and need XMLHttpRequest
	if (typeof XMLHttpRequest === 'undefined') {
	    exports.XMLHttpRequest = {};
	} else {
	    exports.XMLHttpRequest = XMLHttpRequest; // jshint ignore:line
	}



/***/ },
/* 396 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * web3.js - Ethereum JavaScript API
	 *
	 * @license lgpl-3.0
	 * @see https://github.com/ethereum/web3.js
	*/

	/*
	 * This file is part of web3.js.
	 * 
	 * web3.js is free software: you can redistribute it and/or modify
	 * it under the terms of the GNU Lesser General Public License as published by
	 * the Free Software Foundation, either version 3 of the License, or
	 * (at your option) any later version.
	 * 
	 * web3.js is distributed in the hope that it will be useful,
	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	 * GNU Lesser General Public License for more details.
	 * 
	 * You should have received a copy of the GNU Lesser General Public License
	 * along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	 *
	 * @file web3.js
	 * @authors:
	 *   Jeffrey Wilcke <jeff@ethdev.com>
	 *   Marek Kotewicz <marek@ethdev.com>
	 *   Marian Oancea <marian@ethdev.com>
	 *   Fabian Vogelsteller <fabian@ethdev.com>
	 *   Gav Wood <g@ethdev.com>
	 * @date 2014
	 */

	var RequestManager = __webpack_require__(411);
	var Iban = __webpack_require__(69);
	var Eth = __webpack_require__(405);
	var DB = __webpack_require__(404);
	var Shh = __webpack_require__(408);
	var Net = __webpack_require__(406);
	var Personal = __webpack_require__(407);
	var Swarm = __webpack_require__(409);
	var Settings = __webpack_require__(412);
	var version = __webpack_require__(319);
	var utils = __webpack_require__(9);
	var sha3 = __webpack_require__(50);
	var extend = __webpack_require__(400);
	var Batch = __webpack_require__(398);
	var Property = __webpack_require__(40);
	var HttpProvider = __webpack_require__(402);
	var IpcProvider = __webpack_require__(403);
	var BigNumber = __webpack_require__(42);



	function Web3 (provider) {
	    this._requestManager = new RequestManager(provider);
	    this.currentProvider = provider;
	    this.eth = new Eth(this);
	    this.db = new DB(this);
	    this.shh = new Shh(this);
	    this.net = new Net(this);
	    this.personal = new Personal(this);
	    this.bzz = new Swarm(this);
	    this.settings = new Settings();
	    this.version = {
	        api: version.version
	    };
	    this.providers = {
	        HttpProvider: HttpProvider,
	        IpcProvider: IpcProvider
	    };
	    this._extend = extend(this);
	    this._extend({
	        properties: properties()
	    });
	}

	// expose providers on the class
	Web3.providers = {
	    HttpProvider: HttpProvider,
	    IpcProvider: IpcProvider
	};

	Web3.prototype.setProvider = function (provider) {
	    this._requestManager.setProvider(provider);
	    this.currentProvider = provider;
	};

	Web3.prototype.reset = function (keepIsSyncing) {
	    this._requestManager.reset(keepIsSyncing);
	    this.settings = new Settings();
	};

	Web3.prototype.BigNumber = BigNumber;
	Web3.prototype.toHex = utils.toHex;
	Web3.prototype.toAscii = utils.toAscii;
	Web3.prototype.toUtf8 = utils.toUtf8;
	Web3.prototype.fromAscii = utils.fromAscii;
	Web3.prototype.fromUtf8 = utils.fromUtf8;
	Web3.prototype.toDecimal = utils.toDecimal;
	Web3.prototype.fromDecimal = utils.fromDecimal;
	Web3.prototype.toBigNumber = utils.toBigNumber;
	Web3.prototype.toWei = utils.toWei;
	Web3.prototype.fromWei = utils.fromWei;
	Web3.prototype.isAddress = utils.isAddress;
	Web3.prototype.isChecksumAddress = utils.isChecksumAddress;
	Web3.prototype.toChecksumAddress = utils.toChecksumAddress;
	Web3.prototype.isIBAN = utils.isIBAN;
	Web3.prototype.padLeft = utils.padLeft;
	Web3.prototype.padRight = utils.padRight;


	Web3.prototype.sha3 = function(string, options) {
	    return '0x' + sha3(string, options);
	};

	/**
	 * Transforms direct icap to address
	 */
	Web3.prototype.fromICAP = function (icap) {
	    var iban = new Iban(icap);
	    return iban.address();
	};

	var properties = function () {
	    return [
	        new Property({
	            name: 'version.node',
	            getter: 'web3_clientVersion'
	        }),
	        new Property({
	            name: 'version.network',
	            getter: 'net_version',
	            inputFormatter: utils.toDecimal
	        }),
	        new Property({
	            name: 'version.ethereum',
	            getter: 'eth_protocolVersion',
	            inputFormatter: utils.toDecimal
	        }),
	        new Property({
	            name: 'version.whisper',
	            getter: 'shh_version',
	            inputFormatter: utils.toDecimal
	        })
	    ];
	};

	Web3.prototype.isConnected = function(){
	    return (this.currentProvider && this.currentProvider.isConnected());
	};

	Web3.prototype.createBatch = function () {
	    return new Batch(this);
	};

	module.exports = Web3;



/***/ },
/* 397 */
/***/ function(module, exports, __webpack_require__) {

	/*
	    This file is part of web3.js.

	    web3.js is free software: you can redistribute it and/or modify
	    it under the terms of the GNU Lesser General Public License as published by
	    the Free Software Foundation, either version 3 of the License, or
	    (at your option) any later version.

	    web3.js is distributed in the hope that it will be useful,
	    but WITHOUT ANY WARRANTY; without even the implied warranty of
	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	    GNU Lesser General Public License for more details.

	    You should have received a copy of the GNU Lesser General Public License
	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	*/
	/**
	 * @file allevents.js
	 * @author Marek Kotewicz <marek@ethdev.com>
	 * @date 2014
	 */

	var sha3 = __webpack_require__(50);
	var SolidityEvent = __webpack_require__(159);
	var formatters = __webpack_require__(20);
	var utils = __webpack_require__(9);
	var Filter = __webpack_require__(68);
	var watches = __webpack_require__(70);

	var AllSolidityEvents = function (requestManager, json, address) {
	    this._requestManager = requestManager;
	    this._json = json;
	    this._address = address;
	};

	AllSolidityEvents.prototype.encode = function (options) {
	    options = options || {};
	    var result = {};

	    ['fromBlock', 'toBlock'].filter(function (f) {
	        return options[f] !== undefined;
	    }).forEach(function (f) {
	        result[f] = formatters.inputBlockNumberFormatter(options[f]);
	    });

	    result.address = this._address;

	    return result;
	};

	AllSolidityEvents.prototype.decode = function (data) {
	    data.data = data.data || '';


	    var eventTopic = (utils.isArray(data.topics) && utils.isString(data.topics[0])) ? data.topics[0].slice(2) : '';
	    var match = this._json.filter(function (j) {
	        return eventTopic === sha3(utils.transformToFullName(j));
	    })[0];

	    if (!match) { // cannot find matching event?
	        return formatters.outputLogFormatter(data);
	    }

	    var event = new SolidityEvent(this._requestManager, match, this._address);
	    return event.decode(data);
	};

	AllSolidityEvents.prototype.execute = function (options, callback) {

	    if (utils.isFunction(arguments[arguments.length - 1])) {
	        callback = arguments[arguments.length - 1];
	        if(arguments.length === 1)
	            options = null;
	    }

	    var o = this.encode(options);
	    var formatter = this.decode.bind(this);
	    return new Filter(o, 'eth', this._requestManager, watches.eth(), formatter, callback);
	};

	AllSolidityEvents.prototype.attachToContract = function (contract) {
	    var execute = this.execute.bind(this);
	    contract.allEvents = execute;
	};

	module.exports = AllSolidityEvents;



/***/ },
/* 398 */
/***/ function(module, exports, __webpack_require__) {

	/*
	    This file is part of web3.js.

	    web3.js is free software: you can redistribute it and/or modify
	    it under the terms of the GNU Lesser General Public License as published by
	    the Free Software Foundation, either version 3 of the License, or
	    (at your option) any later version.

	    web3.js is distributed in the hope that it will be useful,
	    but WITHOUT ANY WARRANTY; without even the implied warranty of
	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	    GNU Lesser General Public License for more details.

	    You should have received a copy of the GNU Lesser General Public License
	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	*/
	/** 
	 * @file batch.js
	 * @author Marek Kotewicz <marek@ethdev.com>
	 * @date 2015
	 */

	var Jsonrpc = __webpack_require__(160);
	var errors = __webpack_require__(39);

	var Batch = function (web3) {
	    this.requestManager = web3._requestManager;
	    this.requests = [];
	};

	/**
	 * Should be called to add create new request to batch request
	 *
	 * @method add
	 * @param {Object} jsonrpc requet object
	 */
	Batch.prototype.add = function (request) {
	    this.requests.push(request);
	};

	/**
	 * Should be called to execute batch request
	 *
	 * @method execute
	 */
	Batch.prototype.execute = function () {
	    var requests = this.requests;
	    this.requestManager.sendBatch(requests, function (err, results) {
	        results = results || [];
	        requests.map(function (request, index) {
	            return results[index] || {};
	        }).forEach(function (result, index) {
	            if (requests[index].callback) {

	                if (!Jsonrpc.isValidResponse(result)) {
	                    return requests[index].callback(errors.InvalidResponse(result));
	                }

	                requests[index].callback(null, (requests[index].format ? requests[index].format(result.result) : result.result));
	            }
	        });
	    }); 
	};

	module.exports = Batch;



/***/ },
/* 399 */
/***/ function(module, exports, __webpack_require__) {

	/*
	    This file is part of web3.js.

	    web3.js is free software: you can redistribute it and/or modify
	    it under the terms of the GNU Lesser General Public License as published by
	    the Free Software Foundation, either version 3 of the License, or
	    (at your option) any later version.

	    web3.js is distributed in the hope that it will be useful,
	    but WITHOUT ANY WARRANTY; without even the implied warranty of
	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	    GNU Lesser General Public License for more details.

	    You should have received a copy of the GNU Lesser General Public License
	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	*/
	/**
	 * @file contract.js
	 * @author Marek Kotewicz <marek@ethdev.com>
	 * @date 2014
	 */

	var utils = __webpack_require__(9);
	var coder = __webpack_require__(97);
	var SolidityEvent = __webpack_require__(159);
	var SolidityFunction = __webpack_require__(401);
	var AllEvents = __webpack_require__(397);

	/**
	 * Should be called to encode constructor params
	 *
	 * @method encodeConstructorParams
	 * @param {Array} abi
	 * @param {Array} constructor params
	 */
	var encodeConstructorParams = function (abi, params) {
	    return abi.filter(function (json) {
	        return json.type === 'constructor' && json.inputs.length === params.length;
	    }).map(function (json) {
	        return json.inputs.map(function (input) {
	            return input.type;
	        });
	    }).map(function (types) {
	        return coder.encodeParams(types, params);
	    })[0] || '';
	};

	/**
	 * Should be called to add functions to contract object
	 *
	 * @method addFunctionsToContract
	 * @param {Contract} contract
	 * @param {Array} abi
	 */
	var addFunctionsToContract = function (contract) {
	    contract.abi.filter(function (json) {
	        return json.type === 'function';
	    }).map(function (json) {
	        return new SolidityFunction(contract._eth, json, contract.address);
	    }).forEach(function (f) {
	        f.attachToContract(contract);
	    });
	};

	/**
	 * Should be called to add events to contract object
	 *
	 * @method addEventsToContract
	 * @param {Contract} contract
	 * @param {Array} abi
	 */
	var addEventsToContract = function (contract) {
	    var events = contract.abi.filter(function (json) {
	        return json.type === 'event';
	    });

	    var All = new AllEvents(contract._eth._requestManager, events, contract.address);
	    All.attachToContract(contract);

	    events.map(function (json) {
	        return new SolidityEvent(contract._eth._requestManager, json, contract.address);
	    }).forEach(function (e) {
	        e.attachToContract(contract);
	    });
	};


	/**
	 * Should be called to check if the contract gets properly deployed on the blockchain.
	 *
	 * @method checkForContractAddress
	 * @param {Object} contract
	 * @param {Function} callback
	 * @returns {Undefined}
	 */
	var checkForContractAddress = function(contract, callback){
	    var count = 0,
	        callbackFired = false;

	    // wait for receipt
	    var filter = contract._eth.filter('latest', function(e){
	        if (!e && !callbackFired) {
	            count++;

	            // stop watching after 50 blocks (timeout)
	            if (count > 50) {

	                filter.stopWatching(function() {});
	                callbackFired = true;

	                if (callback)
	                    callback(new Error('Contract transaction couldn\'t be found after 50 blocks'));
	                else
	                    throw new Error('Contract transaction couldn\'t be found after 50 blocks');


	            } else {

	                contract._eth.getTransactionReceipt(contract.transactionHash, function(e, receipt){
	                    if(receipt && receipt.blockHash && !callbackFired) {

	                        contract._eth.getCode(receipt.contractAddress, function(e, code){
	                            /*jshint maxcomplexity: 6 */

	                            if(callbackFired || !code)
	                                return;

	                            filter.stopWatching(function() {});
	                            callbackFired = true;

	                            if(code.length > 3) {

	                                // console.log('Contract code deployed!');

	                                contract.address = receipt.contractAddress;

	                                // attach events and methods again after we have
	                                addFunctionsToContract(contract);
	                                addEventsToContract(contract);

	                                // call callback for the second time
	                                if(callback)
	                                    callback(null, contract);

	                            } else {
	                                if(callback)
	                                    callback(new Error('The contract code couldn\'t be stored, please check your gas amount.'));
	                                else
	                                    throw new Error('The contract code couldn\'t be stored, please check your gas amount.');
	                            }
	                        });
	                    }
	                });
	            }
	        }
	    });
	};

	/**
	 * Should be called to create new ContractFactory instance
	 *
	 * @method ContractFactory
	 * @param {Array} abi
	 */
	var ContractFactory = function (eth, abi) {
	    this.eth = eth;
	    this.abi = abi;

	    /**
	     * Should be called to create new contract on a blockchain
	     *
	     * @method new
	     * @param {Any} contract constructor param1 (optional)
	     * @param {Any} contract constructor param2 (optional)
	     * @param {Object} contract transaction object (required)
	     * @param {Function} callback
	     * @returns {Contract} returns contract instance
	     */
	    this.new = function () {
	        /*jshint maxcomplexity: 7 */

	        var contract = new Contract(this.eth, this.abi);

	        // parse arguments
	        var options = {}; // required!
	        var callback;

	        var args = Array.prototype.slice.call(arguments);
	        if (utils.isFunction(args[args.length - 1])) {
	            callback = args.pop();
	        }

	        var last = args[args.length - 1];
	        if (utils.isObject(last) && !utils.isArray(last)) {
	            options = args.pop();
	        }

	        if (options.value > 0) {
	            var constructorAbi = abi.filter(function (json) {
	                return json.type === 'constructor' && json.inputs.length === args.length;
	            })[0] || {};

	            if (!constructorAbi.payable) {
	                throw new Error('Cannot send value to non-payable constructor');
	            }
	        }

	        var bytes = encodeConstructorParams(this.abi, args);
	        options.data += bytes;

	        if (callback) {

	            // wait for the contract address and check if the code was deployed
	            this.eth.sendTransaction(options, function (err, hash) {
	                if (err) {
	                    callback(err);
	                } else {
	                    // add the transaction hash
	                    contract.transactionHash = hash;

	                    // call callback for the first time
	                    callback(null, contract);

	                    checkForContractAddress(contract, callback);
	                }
	            });
	        } else {
	            var hash = this.eth.sendTransaction(options);
	            // add the transaction hash
	            contract.transactionHash = hash;
	            checkForContractAddress(contract);
	        }

	        return contract;
	    };

	    this.new.getData = this.getData.bind(this);
	};

	/**
	 * Should be called to create new ContractFactory
	 *
	 * @method contract
	 * @param {Array} abi
	 * @returns {ContractFactory} new contract factory
	 */
	//var contract = function (abi) {
	    //return new ContractFactory(abi);
	//};



	/**
	 * Should be called to get access to existing contract on a blockchain
	 *
	 * @method at
	 * @param {Address} contract address (required)
	 * @param {Function} callback {optional)
	 * @returns {Contract} returns contract if no callback was passed,
	 * otherwise calls callback function (err, contract)
	 */
	ContractFactory.prototype.at = function (address, callback) {
	    var contract = new Contract(this.eth, this.abi, address);

	    // this functions are not part of prototype,
	    // because we dont want to spoil the interface
	    addFunctionsToContract(contract);
	    addEventsToContract(contract);

	    if (callback) {
	        callback(null, contract);
	    }
	    return contract;
	};

	/**
	 * Gets the data, which is data to deploy plus constructor params
	 *
	 * @method getData
	 */
	ContractFactory.prototype.getData = function () {
	    var options = {}; // required!
	    var args = Array.prototype.slice.call(arguments);

	    var last = args[args.length - 1];
	    if (utils.isObject(last) && !utils.isArray(last)) {
	        options = args.pop();
	    }

	    var bytes = encodeConstructorParams(this.abi, args);
	    options.data += bytes;

	    return options.data;
	};

	/**
	 * Should be called to create new contract instance
	 *
	 * @method Contract
	 * @param {Array} abi
	 * @param {Address} contract address
	 */
	var Contract = function (eth, abi, address) {
	    this._eth = eth;
	    this.transactionHash = null;
	    this.address = address;
	    this.abi = abi;
	};

	module.exports = ContractFactory;


/***/ },
/* 400 */
/***/ function(module, exports, __webpack_require__) {

	var formatters = __webpack_require__(20);
	var utils = __webpack_require__(9);
	var Method = __webpack_require__(29);
	var Property = __webpack_require__(40);

	// TODO: refactor, so the input params are not altered.
	// it's necessary to make same 'extension' work with multiple providers
	var extend = function (web3) {
	    /* jshint maxcomplexity:5 */
	    var ex = function (extension) {

	        var extendedObject;
	        if (extension.property) {
	            if (!web3[extension.property]) {
	                web3[extension.property] = {};
	            }
	            extendedObject = web3[extension.property];
	        } else {
	            extendedObject = web3;
	        }

	        if (extension.methods) {
	            extension.methods.forEach(function (method) {
	                method.attachToObject(extendedObject);
	                method.setRequestManager(web3._requestManager);
	            });
	        }

	        if (extension.properties) {
	            extension.properties.forEach(function (property) {
	                property.attachToObject(extendedObject);
	                property.setRequestManager(web3._requestManager);
	            });
	        }
	    };

	    ex.formatters = formatters; 
	    ex.utils = utils;
	    ex.Method = Method;
	    ex.Property = Property;

	    return ex;
	};



	module.exports = extend;



/***/ },
/* 401 */
/***/ function(module, exports, __webpack_require__) {

	/*
	    This file is part of web3.js.

	    web3.js is free software: you can redistribute it and/or modify
	    it under the terms of the GNU Lesser General Public License as published by
	    the Free Software Foundation, either version 3 of the License, or
	    (at your option) any later version.

	    web3.js is distributed in the hope that it will be useful,
	    but WITHOUT ANY WARRANTY; without even the implied warranty of
	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	    GNU Lesser General Public License for more details.

	    You should have received a copy of the GNU Lesser General Public License
	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	*/
	/**
	 * @file function.js
	 * @author Marek Kotewicz <marek@ethdev.com>
	 * @date 2015
	 */

	var coder = __webpack_require__(97);
	var utils = __webpack_require__(9);
	var errors = __webpack_require__(39);
	var formatters = __webpack_require__(20);
	var sha3 = __webpack_require__(50);

	/**
	 * This prototype should be used to call/sendTransaction to solidity functions
	 */
	var SolidityFunction = function (eth, json, address) {
	    this._eth = eth;
	    this._inputTypes = json.inputs.map(function (i) {
	        return i.type;
	    });
	    this._outputTypes = json.outputs.map(function (i) {
	        return i.type;
	    });
	    this._constant = (json.stateMutability === "view" || json.stateMutability === "pure" || json.constant);
	    this._payable = (json.stateMutability === "payable" || json.payable);
	    this._name = utils.transformToFullName(json);
	    this._address = address;
	};

	SolidityFunction.prototype.extractCallback = function (args) {
	    if (utils.isFunction(args[args.length - 1])) {
	        return args.pop(); // modify the args array!
	    }
	};

	SolidityFunction.prototype.extractDefaultBlock = function (args) {
	    if (args.length > this._inputTypes.length && !utils.isObject(args[args.length -1])) {
	        return formatters.inputDefaultBlockNumberFormatter(args.pop()); // modify the args array!
	    }
	};

	/**
	 * Should be called to check if the number of arguments is correct
	 *
	 * @method validateArgs
	 * @param {Array} arguments
	 * @throws {Error} if it is not
	 */
	SolidityFunction.prototype.validateArgs = function (args) {
	    var inputArgs = args.filter(function (a) {
	      // filter the options object but not arguments that are arrays
	      return !( (utils.isObject(a) === true) &&
	                (utils.isArray(a) === false) &&
	                (utils.isBigNumber(a) === false)
	              );
	    });
	    if (inputArgs.length !== this._inputTypes.length) {
	        throw errors.InvalidNumberOfSolidityArgs();
	    }
	};

	/**
	 * Should be used to create payload from arguments
	 *
	 * @method toPayload
	 * @param {Array} solidity function params
	 * @param {Object} optional payload options
	 */
	SolidityFunction.prototype.toPayload = function (args) {
	    var options = {};
	    if (args.length > this._inputTypes.length && utils.isObject(args[args.length -1])) {
	        options = args[args.length - 1];
	    }
	    this.validateArgs(args);
	    options.to = this._address;
	    options.data = '0x' + this.signature() + coder.encodeParams(this._inputTypes, args);
	    return options;
	};

	/**
	 * Should be used to get function signature
	 *
	 * @method signature
	 * @return {String} function signature
	 */
	SolidityFunction.prototype.signature = function () {
	    return sha3(this._name).slice(0, 8);
	};


	SolidityFunction.prototype.unpackOutput = function (output) {
	    if (!output) {
	        return;
	    }

	    output = output.length >= 2 ? output.slice(2) : output;
	    var result = coder.decodeParams(this._outputTypes, output);
	    return result.length === 1 ? result[0] : result;
	};

	/**
	 * Calls a contract function.
	 *
	 * @method call
	 * @param {...Object} Contract function arguments
	 * @param {function} If the last argument is a function, the contract function
	 *   call will be asynchronous, and the callback will be passed the
	 *   error and result.
	 * @return {String} output bytes
	 */
	SolidityFunction.prototype.call = function () {
	    var args = Array.prototype.slice.call(arguments).filter(function (a) {return a !== undefined; });
	    var callback = this.extractCallback(args);
	    var defaultBlock = this.extractDefaultBlock(args);
	    var payload = this.toPayload(args);


	    if (!callback) {
	        var output = this._eth.call(payload, defaultBlock);
	        return this.unpackOutput(output);
	    }

	    var self = this;
	    this._eth.call(payload, defaultBlock, function (error, output) {
	        if (error) return callback(error, null);

	        var unpacked = null;
	        try {
	            unpacked = self.unpackOutput(output);
	        }
	        catch (e) {
	            error = e;
	        }

	        callback(error, unpacked);
	    });
	};

	/**
	 * Should be used to sendTransaction to solidity function
	 *
	 * @method sendTransaction
	 */
	SolidityFunction.prototype.sendTransaction = function () {
	    var args = Array.prototype.slice.call(arguments).filter(function (a) {return a !== undefined; });
	    var callback = this.extractCallback(args);
	    var payload = this.toPayload(args);

	    if (payload.value > 0 && !this._payable) {
	        throw new Error('Cannot send value to non-payable function');
	    }

	    if (!callback) {
	        return this._eth.sendTransaction(payload);
	    }

	    this._eth.sendTransaction(payload, callback);
	};

	/**
	 * Should be used to estimateGas of solidity function
	 *
	 * @method estimateGas
	 */
	SolidityFunction.prototype.estimateGas = function () {
	    var args = Array.prototype.slice.call(arguments);
	    var callback = this.extractCallback(args);
	    var payload = this.toPayload(args);

	    if (!callback) {
	        return this._eth.estimateGas(payload);
	    }

	    this._eth.estimateGas(payload, callback);
	};

	/**
	 * Return the encoded data of the call
	 *
	 * @method getData
	 * @return {String} the encoded data
	 */
	SolidityFunction.prototype.getData = function () {
	    var args = Array.prototype.slice.call(arguments);
	    var payload = this.toPayload(args);

	    return payload.data;
	};

	/**
	 * Should be used to get function display name
	 *
	 * @method displayName
	 * @return {String} display name of the function
	 */
	SolidityFunction.prototype.displayName = function () {
	    return utils.extractDisplayName(this._name);
	};

	/**
	 * Should be used to get function type name
	 *
	 * @method typeName
	 * @return {String} type name of the function
	 */
	SolidityFunction.prototype.typeName = function () {
	    return utils.extractTypeName(this._name);
	};

	/**
	 * Should be called to get rpc requests from solidity function
	 *
	 * @method request
	 * @returns {Object}
	 */
	SolidityFunction.prototype.request = function () {
	    var args = Array.prototype.slice.call(arguments);
	    var callback = this.extractCallback(args);
	    var payload = this.toPayload(args);
	    var format = this.unpackOutput.bind(this);

	    return {
	        method: this._constant ? 'eth_call' : 'eth_sendTransaction',
	        callback: callback,
	        params: [payload],
	        format: format
	    };
	};

	/**
	 * Should be called to execute function
	 *
	 * @method execute
	 */
	SolidityFunction.prototype.execute = function () {
	    var transaction = !this._constant;

	    // send transaction
	    if (transaction) {
	        return this.sendTransaction.apply(this, Array.prototype.slice.call(arguments));
	    }

	    // call
	    return this.call.apply(this, Array.prototype.slice.call(arguments));
	};

	/**
	 * Should be called to attach function to contract
	 *
	 * @method attachToContract
	 * @param {Contract}
	 */
	SolidityFunction.prototype.attachToContract = function (contract) {
	    var execute = this.execute.bind(this);
	    execute.request = this.request.bind(this);
	    execute.call = this.call.bind(this);
	    execute.sendTransaction = this.sendTransaction.bind(this);
	    execute.estimateGas = this.estimateGas.bind(this);
	    execute.getData = this.getData.bind(this);
	    var displayName = this.displayName();
	    if (!contract[displayName]) {
	        contract[displayName] = execute;
	    }
	    contract[displayName][this.typeName()] = execute; // circular!!!!
	};

	module.exports = SolidityFunction;


/***/ },
/* 402 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
	    This file is part of web3.js.

	    web3.js is free software: you can redistribute it and/or modify
	    it under the terms of the GNU Lesser General Public License as published by
	    the Free Software Foundation, either version 3 of the License, or
	    (at your option) any later version.

	    web3.js is distributed in the hope that it will be useful,
	    but WITHOUT ANY WARRANTY; without even the implied warranty of
	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	    GNU Lesser General Public License for more details.

	    You should have received a copy of the GNU Lesser General Public License
	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	*/
	/** @file httpprovider.js
	 * @authors:
	 *   Marek Kotewicz <marek@ethdev.com>
	 *   Marian Oancea <marian@ethdev.com>
	 *   Fabian Vogelsteller <fabian@ethdev.com>
	 * @date 2015
	 */

	var errors = __webpack_require__(39);

	// workaround to use httpprovider in different envs

	// browser
	if (typeof window !== 'undefined' && window.XMLHttpRequest) {
	  XMLHttpRequest = window.XMLHttpRequest; // jshint ignore: line
	// node
	} else {
	  XMLHttpRequest = __webpack_require__(395).XMLHttpRequest; // jshint ignore: line
	}

	var XHR2 = __webpack_require__(417).XMLHttpRequest; // jshint ignore: line

	/**
	 * HttpProvider should be used to send rpc calls over http
	 */
	var HttpProvider = function (host, timeout, user, password, headers) {
	  this.host = host || 'http://localhost:8545';
	  this.timeout = timeout || 0;
	  this.user = user;
	  this.password = password;
	  this.headers = headers;
	};

	/**
	 * Should be called to prepare new XMLHttpRequest
	 *
	 * @method prepareRequest
	 * @param {Boolean} true if request should be async
	 * @return {XMLHttpRequest} object
	 */
	HttpProvider.prototype.prepareRequest = function (async) {
	  var request;

	  if (async) {
	    request = new XHR2();
	    request.timeout = this.timeout;
	  } else {
	    request = new XMLHttpRequest();
	  }
	  request.withCredentials = true;

	  request.open('POST', this.host, async);
	  if (this.user && this.password) {
	    var auth = 'Basic ' + new Buffer(this.user + ':' + this.password).toString('base64');
	    request.setRequestHeader('Authorization', auth);
	  } request.setRequestHeader('Content-Type', 'application/json');
	  if(this.headers) {
	      this.headers.forEach(function(header) {
	          request.setRequestHeader(header.name, header.value);
	      });
	  }
	  return request;
	};

	/**
	 * Should be called to make sync request
	 *
	 * @method send
	 * @param {Object} payload
	 * @return {Object} result
	 */
	HttpProvider.prototype.send = function (payload) {
	  var request = this.prepareRequest(false);

	  try {
	    request.send(JSON.stringify(payload));
	  } catch (error) {
	    throw errors.InvalidConnection(this.host);
	  }

	  var result = request.responseText;

	  try {
	    result = JSON.parse(result);
	  } catch (e) {
	    throw errors.InvalidResponse(request.responseText);
	  }

	  return result;
	};

	/**
	 * Should be used to make async request
	 *
	 * @method sendAsync
	 * @param {Object} payload
	 * @param {Function} callback triggered on end with (err, result)
	 */
	HttpProvider.prototype.sendAsync = function (payload, callback) {
	  var request = this.prepareRequest(true);

	  request.onreadystatechange = function () {
	    if (request.readyState === 4 && request.timeout !== 1) {
	      var result = request.responseText;
	      var error = null;

	      try {
	        result = JSON.parse(result);
	      } catch (e) {
	        error = errors.InvalidResponse(request.responseText);
	      }

	      callback(error, result);
	    }
	  };

	  request.ontimeout = function () {
	    callback(errors.ConnectionTimeout(this.timeout));
	  };

	  try {
	    request.send(JSON.stringify(payload));
	  } catch (error) {
	    callback(errors.InvalidConnection(this.host));
	  }
	};

	/**
	 * Synchronously tries to make Http request
	 *
	 * @method isConnected
	 * @return {Boolean} returns true if request haven't failed. Otherwise false
	 */
	HttpProvider.prototype.isConnected = function () {
	  try {
	    this.send({
	      id: 9999999999,
	      jsonrpc: '2.0',
	      method: 'net_listening',
	      params: []
	    });
	    return true;
	  } catch (e) {
	    return false;
	  }
	};

	module.exports = HttpProvider;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 403 */
/***/ function(module, exports, __webpack_require__) {

	/*
	    This file is part of web3.js.

	    web3.js is free software: you can redistribute it and/or modify
	    it under the terms of the GNU Lesser General Public License as published by
	    the Free Software Foundation, either version 3 of the License, or
	    (at your option) any later version.

	    web3.js is distributed in the hope that it will be useful,
	    but WITHOUT ANY WARRANTY; without even the implied warranty of
	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	    GNU Lesser General Public License for more details.

	    You should have received a copy of the GNU Lesser General Public License
	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	*/
	/** @file ipcprovider.js
	 * @authors:
	 *   Fabian Vogelsteller <fabian@ethdev.com>
	 * @date 2015
	 */

	"use strict";

	var utils = __webpack_require__(9);
	var errors = __webpack_require__(39);


	var IpcProvider = function (path, net) {
	    var _this = this;
	    this.responseCallbacks = {};
	    this.path = path;
	    
	    this.connection = net.connect({path: this.path});

	    this.connection.on('error', function(e){
	        console.error('IPC Connection Error', e);
	        _this._timeout();
	    });

	    this.connection.on('end', function(){
	        _this._timeout();
	    }); 


	    // LISTEN FOR CONNECTION RESPONSES
	    this.connection.on('data', function(data) {
	        /*jshint maxcomplexity: 6 */

	        _this._parseResponse(data.toString()).forEach(function(result){

	            var id = null;

	            // get the id which matches the returned id
	            if(utils.isArray(result)) {
	                result.forEach(function(load){
	                    if(_this.responseCallbacks[load.id])
	                        id = load.id;
	                });
	            } else {
	                id = result.id;
	            }

	            // fire the callback
	            if(_this.responseCallbacks[id]) {
	                _this.responseCallbacks[id](null, result);
	                delete _this.responseCallbacks[id];
	            }
	        });
	    });
	};

	/**
	Will parse the response and make an array out of it.

	@method _parseResponse
	@param {String} data
	*/
	IpcProvider.prototype._parseResponse = function(data) {
	    var _this = this,
	        returnValues = [];
	    
	    // DE-CHUNKER
	    var dechunkedData = data
	        .replace(/\}[\n\r]?\{/g,'}|--|{') // }{
	        .replace(/\}\][\n\r]?\[\{/g,'}]|--|[{') // }][{
	        .replace(/\}[\n\r]?\[\{/g,'}|--|[{') // }[{
	        .replace(/\}\][\n\r]?\{/g,'}]|--|{') // }]{
	        .split('|--|');

	    dechunkedData.forEach(function(data){

	        // prepend the last chunk
	        if(_this.lastChunk)
	            data = _this.lastChunk + data;

	        var result = null;

	        try {
	            result = JSON.parse(data);

	        } catch(e) {

	            _this.lastChunk = data;

	            // start timeout to cancel all requests
	            clearTimeout(_this.lastChunkTimeout);
	            _this.lastChunkTimeout = setTimeout(function(){
	                _this._timeout();
	                throw errors.InvalidResponse(data);
	            }, 1000 * 15);

	            return;
	        }

	        // cancel timeout and set chunk to null
	        clearTimeout(_this.lastChunkTimeout);
	        _this.lastChunk = null;

	        if(result)
	            returnValues.push(result);
	    });

	    return returnValues;
	};


	/**
	Get the adds a callback to the responseCallbacks object,
	which will be called if a response matching the response Id will arrive.

	@method _addResponseCallback
	*/
	IpcProvider.prototype._addResponseCallback = function(payload, callback) {
	    var id = payload.id || payload[0].id;
	    var method = payload.method || payload[0].method;

	    this.responseCallbacks[id] = callback;
	    this.responseCallbacks[id].method = method;
	};

	/**
	Timeout all requests when the end/error event is fired

	@method _timeout
	*/
	IpcProvider.prototype._timeout = function() {
	    for(var key in this.responseCallbacks) {
	        if(this.responseCallbacks.hasOwnProperty(key)){
	            this.responseCallbacks[key](errors.InvalidConnection('on IPC'));
	            delete this.responseCallbacks[key];
	        }
	    }
	};


	/**
	Check if the current connection is still valid.

	@method isConnected
	*/
	IpcProvider.prototype.isConnected = function() {
	    var _this = this;

	    // try reconnect, when connection is gone
	    if(!_this.connection.writable)
	        _this.connection.connect({path: _this.path});

	    return !!this.connection.writable;
	};

	IpcProvider.prototype.send = function (payload) {

	    if(this.connection.writeSync) {
	        var result;

	        // try reconnect, when connection is gone
	        if(!this.connection.writable)
	            this.connection.connect({path: this.path});

	        var data = this.connection.writeSync(JSON.stringify(payload));

	        try {
	            result = JSON.parse(data);
	        } catch(e) {
	            throw errors.InvalidResponse(data);                
	        }

	        return result;

	    } else {
	        throw new Error('You tried to send "'+ payload.method +'" synchronously. Synchronous requests are not supported by the IPC provider.');
	    }
	};

	IpcProvider.prototype.sendAsync = function (payload, callback) {
	    // try reconnect, when connection is gone
	    if(!this.connection.writable)
	        this.connection.connect({path: this.path});


	    this.connection.write(JSON.stringify(payload));
	    this._addResponseCallback(payload, callback);
	};

	module.exports = IpcProvider;



/***/ },
/* 404 */
/***/ function(module, exports, __webpack_require__) {

	/*
	    This file is part of web3.js.

	    web3.js is free software: you can redistribute it and/or modify
	    it under the terms of the GNU Lesser General Public License as published by
	    the Free Software Foundation, either version 3 of the License, or
	    (at your option) any later version.

	    web3.js is distributed in the hope that it will be useful,
	    but WITHOUT ANY WARRANTY; without even the implied warranty of
	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	    GNU Lesser General Public License for more details.

	    You should have received a copy of the GNU Lesser General Public License
	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	*/
	/** @file db.js
	 * @authors:
	 *   Marek Kotewicz <marek@ethdev.com>
	 * @date 2015
	 */

	var Method = __webpack_require__(29);

	var DB = function (web3) {
	    this._requestManager = web3._requestManager;

	    var self = this;
	    
	    methods().forEach(function(method) { 
	        method.attachToObject(self);
	        method.setRequestManager(web3._requestManager);
	    });
	};

	var methods = function () {
	    var putString = new Method({
	        name: 'putString',
	        call: 'db_putString',
	        params: 3
	    });

	    var getString = new Method({
	        name: 'getString',
	        call: 'db_getString',
	        params: 2
	    });

	    var putHex = new Method({
	        name: 'putHex',
	        call: 'db_putHex',
	        params: 3
	    });

	    var getHex = new Method({
	        name: 'getHex',
	        call: 'db_getHex',
	        params: 2
	    });

	    return [
	        putString, getString, putHex, getHex
	    ];
	};

	module.exports = DB;


/***/ },
/* 405 */
/***/ function(module, exports, __webpack_require__) {

	/*
	    This file is part of web3.js.

	    web3.js is free software: you can redistribute it and/or modify
	    it under the terms of the GNU Lesser General Public License as published by
	    the Free Software Foundation, either version 3 of the License, or
	    (at your option) any later version.

	    web3.js is distributed in the hope that it will be useful,
	    but WITHOUT ANY WARRANTY; without even the implied warranty of
	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	    GNU Lesser General Public License for more details.

	    You should have received a copy of the GNU Lesser General Public License
	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	*/
	/**
	 * @file eth.js
	 * @author Marek Kotewicz <marek@ethdev.com>
	 * @author Fabian Vogelsteller <fabian@ethdev.com>
	 * @date 2015
	 */

	"use strict";

	var formatters = __webpack_require__(20);
	var utils = __webpack_require__(9);
	var Method = __webpack_require__(29);
	var Property = __webpack_require__(40);
	var c = __webpack_require__(67);
	var Contract = __webpack_require__(399);
	var watches = __webpack_require__(70);
	var Filter = __webpack_require__(68);
	var IsSyncing = __webpack_require__(413);
	var namereg = __webpack_require__(410);
	var Iban = __webpack_require__(69);
	var transfer = __webpack_require__(414);

	var blockCall = function (args) {
	    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? "eth_getBlockByHash" : "eth_getBlockByNumber";
	};

	var transactionFromBlockCall = function (args) {
	    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';
	};

	var uncleCall = function (args) {
	    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';
	};

	var getBlockTransactionCountCall = function (args) {
	    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';
	};

	var uncleCountCall = function (args) {
	    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';
	};

	function Eth(web3) {
	    this._requestManager = web3._requestManager;

	    var self = this;

	    methods().forEach(function(method) {
	        method.attachToObject(self);
	        method.setRequestManager(self._requestManager);
	    });

	    properties().forEach(function(p) {
	        p.attachToObject(self);
	        p.setRequestManager(self._requestManager);
	    });


	    this.iban = Iban;
	    this.sendIBANTransaction = transfer.bind(null, this);
	}

	Object.defineProperty(Eth.prototype, 'defaultBlock', {
	    get: function () {
	        return c.defaultBlock;
	    },
	    set: function (val) {
	        c.defaultBlock = val;
	        return val;
	    }
	});

	Object.defineProperty(Eth.prototype, 'defaultAccount', {
	    get: function () {
	        return c.defaultAccount;
	    },
	    set: function (val) {
	        c.defaultAccount = val;
	        return val;
	    }
	});

	var methods = function () {
	    var getBalance = new Method({
	        name: 'getBalance',
	        call: 'eth_getBalance',
	        params: 2,
	        inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],
	        outputFormatter: formatters.outputBigNumberFormatter
	    });

	    var getStorageAt = new Method({
	        name: 'getStorageAt',
	        call: 'eth_getStorageAt',
	        params: 3,
	        inputFormatter: [null, utils.toHex, formatters.inputDefaultBlockNumberFormatter]
	    });

	    var getCode = new Method({
	        name: 'getCode',
	        call: 'eth_getCode',
	        params: 2,
	        inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]
	    });

	    var getBlock = new Method({
	        name: 'getBlock',
	        call: blockCall,
	        params: 2,
	        inputFormatter: [formatters.inputBlockNumberFormatter, function (val) { return !!val; }],
	        outputFormatter: formatters.outputBlockFormatter
	    });

	    var getUncle = new Method({
	        name: 'getUncle',
	        call: uncleCall,
	        params: 2,
	        inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],
	        outputFormatter: formatters.outputBlockFormatter,

	    });

	    var getCompilers = new Method({
	        name: 'getCompilers',
	        call: 'eth_getCompilers',
	        params: 0
	    });

	    var getBlockTransactionCount = new Method({
	        name: 'getBlockTransactionCount',
	        call: getBlockTransactionCountCall,
	        params: 1,
	        inputFormatter: [formatters.inputBlockNumberFormatter],
	        outputFormatter: utils.toDecimal
	    });

	    var getBlockUncleCount = new Method({
	        name: 'getBlockUncleCount',
	        call: uncleCountCall,
	        params: 1,
	        inputFormatter: [formatters.inputBlockNumberFormatter],
	        outputFormatter: utils.toDecimal
	    });

	    var getTransaction = new Method({
	        name: 'getTransaction',
	        call: 'eth_getTransactionByHash',
	        params: 1,
	        outputFormatter: formatters.outputTransactionFormatter
	    });

	    var getTransactionFromBlock = new Method({
	        name: 'getTransactionFromBlock',
	        call: transactionFromBlockCall,
	        params: 2,
	        inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],
	        outputFormatter: formatters.outputTransactionFormatter
	    });

	    var getTransactionReceipt = new Method({
	        name: 'getTransactionReceipt',
	        call: 'eth_getTransactionReceipt',
	        params: 1,
	        outputFormatter: formatters.outputTransactionReceiptFormatter
	    });

	    var getTransactionCount = new Method({
	        name: 'getTransactionCount',
	        call: 'eth_getTransactionCount',
	        params: 2,
	        inputFormatter: [null, formatters.inputDefaultBlockNumberFormatter],
	        outputFormatter: utils.toDecimal
	    });

	    var sendRawTransaction = new Method({
	        name: 'sendRawTransaction',
	        call: 'eth_sendRawTransaction',
	        params: 1,
	        inputFormatter: [null]
	    });

	    var sendTransaction = new Method({
	        name: 'sendTransaction',
	        call: 'eth_sendTransaction',
	        params: 1,
	        inputFormatter: [formatters.inputTransactionFormatter]
	    });

	    var signTransaction = new Method({
	        name: 'signTransaction',
	        call: 'eth_signTransaction',
	        params: 1,
	        inputFormatter: [formatters.inputTransactionFormatter]
	    });

	    var sign = new Method({
	        name: 'sign',
	        call: 'eth_sign',
	        params: 2,
	        inputFormatter: [formatters.inputAddressFormatter, null]
	    });

	    var call = new Method({
	        name: 'call',
	        call: 'eth_call',
	        params: 2,
	        inputFormatter: [formatters.inputCallFormatter, formatters.inputDefaultBlockNumberFormatter]
	    });

	    var estimateGas = new Method({
	        name: 'estimateGas',
	        call: 'eth_estimateGas',
	        params: 1,
	        inputFormatter: [formatters.inputCallFormatter],
	        outputFormatter: utils.toDecimal
	    });

	    var compileSolidity = new Method({
	        name: 'compile.solidity',
	        call: 'eth_compileSolidity',
	        params: 1
	    });

	    var compileLLL = new Method({
	        name: 'compile.lll',
	        call: 'eth_compileLLL',
	        params: 1
	    });

	    var compileSerpent = new Method({
	        name: 'compile.serpent',
	        call: 'eth_compileSerpent',
	        params: 1
	    });

	    var submitWork = new Method({
	        name: 'submitWork',
	        call: 'eth_submitWork',
	        params: 3
	    });

	    var getWork = new Method({
	        name: 'getWork',
	        call: 'eth_getWork',
	        params: 0
	    });

	    return [
	        getBalance,
	        getStorageAt,
	        getCode,
	        getBlock,
	        getUncle,
	        getCompilers,
	        getBlockTransactionCount,
	        getBlockUncleCount,
	        getTransaction,
	        getTransactionFromBlock,
	        getTransactionReceipt,
	        getTransactionCount,
	        call,
	        estimateGas,
	        sendRawTransaction,
	        signTransaction,
	        sendTransaction,
	        sign,
	        compileSolidity,
	        compileLLL,
	        compileSerpent,
	        submitWork,
	        getWork
	    ];
	};


	var properties = function () {
	    return [
	        new Property({
	            name: 'coinbase',
	            getter: 'eth_coinbase'
	        }),
	        new Property({
	            name: 'mining',
	            getter: 'eth_mining'
	        }),
	        new Property({
	            name: 'hashrate',
	            getter: 'eth_hashrate',
	            outputFormatter: utils.toDecimal
	        }),
	        new Property({
	            name: 'syncing',
	            getter: 'eth_syncing',
	            outputFormatter: formatters.outputSyncingFormatter
	        }),
	        new Property({
	            name: 'gasPrice',
	            getter: 'eth_gasPrice',
	            outputFormatter: formatters.outputBigNumberFormatter
	        }),
	        new Property({
	            name: 'accounts',
	            getter: 'eth_accounts'
	        }),
	        new Property({
	            name: 'blockNumber',
	            getter: 'eth_blockNumber',
	            outputFormatter: utils.toDecimal
	        }),
	        new Property({
	            name: 'protocolVersion',
	            getter: 'eth_protocolVersion'
	        })
	    ];
	};

	Eth.prototype.contract = function (abi) {
	    var factory = new Contract(this, abi);
	    return factory;
	};

	Eth.prototype.filter = function (options, callback, filterCreationErrorCallback) {
	    return new Filter(options, 'eth', this._requestManager, watches.eth(), formatters.outputLogFormatter, callback, filterCreationErrorCallback);
	};

	Eth.prototype.namereg = function () {
	    return this.contract(namereg.global.abi).at(namereg.global.address);
	};

	Eth.prototype.icapNamereg = function () {
	    return this.contract(namereg.icap.abi).at(namereg.icap.address);
	};

	Eth.prototype.isSyncing = function (callback) {
	    return new IsSyncing(this._requestManager, callback);
	};

	module.exports = Eth;


/***/ },
/* 406 */
/***/ function(module, exports, __webpack_require__) {

	/*
	    This file is part of web3.js.

	    web3.js is free software: you can redistribute it and/or modify
	    it under the terms of the GNU Lesser General Public License as published by
	    the Free Software Foundation, either version 3 of the License, or
	    (at your option) any later version.

	    web3.js is distributed in the hope that it will be useful,
	    but WITHOUT ANY WARRANTY; without even the implied warranty of
	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	    GNU Lesser General Public License for more details.

	    You should have received a copy of the GNU Lesser General Public License
	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	*/
	/** @file eth.js
	 * @authors:
	 *   Marek Kotewicz <marek@ethdev.com>
	 * @date 2015
	 */

	var utils = __webpack_require__(9);
	var Property = __webpack_require__(40);

	var Net = function (web3) {
	    this._requestManager = web3._requestManager;

	    var self = this;

	    properties().forEach(function(p) { 
	        p.attachToObject(self);
	        p.setRequestManager(web3._requestManager);
	    });
	};

	/// @returns an array of objects describing web3.eth api properties
	var properties = function () {
	    return [
	        new Property({
	            name: 'listening',
	            getter: 'net_listening'
	        }),
	        new Property({
	            name: 'peerCount',
	            getter: 'net_peerCount',
	            outputFormatter: utils.toDecimal
	        })
	    ];
	};

	module.exports = Net;


/***/ },
/* 407 */
/***/ function(module, exports, __webpack_require__) {

	/*
	    This file is part of web3.js.

	    web3.js is free software: you can redistribute it and/or modify
	    it under the terms of the GNU Lesser General Public License as published by
	    the Free Software Foundation, either version 3 of the License, or
	    (at your option) any later version.

	    web3.js is distributed in the hope that it will be useful,
	    but WITHOUT ANY WARRANTY; without even the implied warranty of
	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	    GNU Lesser General Public License for more details.

	    You should have received a copy of the GNU Lesser General Public License
	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	*/
	/**
	 * @file eth.js
	 * @author Marek Kotewicz <marek@ethdev.com>
	 * @author Fabian Vogelsteller <fabian@ethdev.com>
	 * @date 2015
	 */

	"use strict";

	var Method = __webpack_require__(29);
	var Property = __webpack_require__(40);
	var formatters = __webpack_require__(20);

	function Personal(web3) {
	    this._requestManager = web3._requestManager;

	    var self = this;

	    methods().forEach(function(method) {
	        method.attachToObject(self);
	        method.setRequestManager(self._requestManager);
	    });

	    properties().forEach(function(p) {
	        p.attachToObject(self);
	        p.setRequestManager(self._requestManager);
	    });
	}

	var methods = function () {
	    var newAccount = new Method({
	        name: 'newAccount',
	        call: 'personal_newAccount',
	        params: 1,
	        inputFormatter: [null]
	    });

	    var importRawKey = new Method({
	        name: 'importRawKey',
			call: 'personal_importRawKey',
			params: 2
	    });

	    var sign = new Method({
	        name: 'sign',
			call: 'personal_sign',
			params: 3,
			inputFormatter: [null, formatters.inputAddressFormatter, null]
	    });

	    var ecRecover = new Method({
	        name: 'ecRecover',
			call: 'personal_ecRecover',
			params: 2
	    });

	    var unlockAccount = new Method({
	        name: 'unlockAccount',
	        call: 'personal_unlockAccount',
	        params: 3,
	        inputFormatter: [formatters.inputAddressFormatter, null, null]
	    });

	    var sendTransaction = new Method({
	        name: 'sendTransaction',
	        call: 'personal_sendTransaction',
	        params: 2,
	        inputFormatter: [formatters.inputTransactionFormatter, null]
	    });

	    var lockAccount = new Method({
	        name: 'lockAccount',
	        call: 'personal_lockAccount',
	        params: 1,
	        inputFormatter: [formatters.inputAddressFormatter]
	    });

	    return [
	        newAccount,
	        importRawKey,
	        unlockAccount,
	        ecRecover,
	        sign,
	        sendTransaction,
	        lockAccount
	    ];
	};

	var properties = function () {
	    return [
	        new Property({
	            name: 'listAccounts',
	            getter: 'personal_listAccounts'
	        })
	    ];
	};


	module.exports = Personal;


/***/ },
/* 408 */
/***/ function(module, exports, __webpack_require__) {

	/*
	    This file is part of web3.js.

	    web3.js is free software: you can redistribute it and/or modify
	    it under the terms of the GNU Lesser General Public License as published by
	    the Free Software Foundation, either version 3 of the License, or
	    (at your option) any later version.

	    web3.js is distributed in the hope that it will be useful,
	    but WITHOUT ANY WARRANTY; without even the implied warranty of
	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	    GNU Lesser General Public License for more details.

	    You should have received a copy of the GNU Lesser General Public License
	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	*/
	/** @file shh.js
	 * @authors:
	 *   Fabian Vogelsteller <fabian@ethereum.org>
	 *   Marek Kotewicz <marek@ethcore.io>
	 * @date 2017
	 */

	var Method = __webpack_require__(29);
	var Filter = __webpack_require__(68);
	var watches = __webpack_require__(70);

	var Shh = function (web3) {
	    this._requestManager = web3._requestManager;

	    var self = this;

	    methods().forEach(function(method) {
	        method.attachToObject(self);
	        method.setRequestManager(self._requestManager);
	    });
	};

	Shh.prototype.newMessageFilter = function (options, callback, filterCreationErrorCallback) {
	    return new Filter(options, 'shh', this._requestManager, watches.shh(), null, callback, filterCreationErrorCallback);
	};

	var methods = function () {

	    return [
	        new Method({
	            name: 'version',
	            call: 'shh_version',
	            params: 0
	        }),
	        new Method({
	            name: 'info',
	            call: 'shh_info',
	            params: 0
	        }),
	        new Method({
	            name: 'setMaxMessageSize',
	            call: 'shh_setMaxMessageSize',
	            params: 1
	        }),
	        new Method({
	            name: 'setMinPoW',
	            call: 'shh_setMinPoW',
	            params: 1
	        }),
	        new Method({
	            name: 'markTrustedPeer',
	            call: 'shh_markTrustedPeer',
	            params: 1
	        }),
	        new Method({
	            name: 'newKeyPair',
	            call: 'shh_newKeyPair',
	            params: 0
	        }),
	        new Method({
	            name: 'addPrivateKey',
	            call: 'shh_addPrivateKey',
	            params: 1
	        }),
	        new Method({
	            name: 'deleteKeyPair',
	            call: 'shh_deleteKeyPair',
	            params: 1
	        }),
	        new Method({
	            name: 'hasKeyPair',
	            call: 'shh_hasKeyPair',
	            params: 1
	        }),
	        new Method({
	            name: 'getPublicKey',
	            call: 'shh_getPublicKey',
	            params: 1
	        }),
	        new Method({
	            name: 'getPrivateKey',
	            call: 'shh_getPrivateKey',
	            params: 1
	        }),
	        new Method({
	            name: 'newSymKey',
	            call: 'shh_newSymKey',
	            params: 0
	        }),
	        new Method({
	            name: 'addSymKey',
	            call: 'shh_addSymKey',
	            params: 1
	        }),
	        new Method({
	            name: 'generateSymKeyFromPassword',
	            call: 'shh_generateSymKeyFromPassword',
	            params: 1
	        }),
	        new Method({
	            name: 'hasSymKey',
	            call: 'shh_hasSymKey',
	            params: 1
	        }),
	        new Method({
	            name: 'getSymKey',
	            call: 'shh_getSymKey',
	            params: 1
	        }),
	        new Method({
	            name: 'deleteSymKey',
	            call: 'shh_deleteSymKey',
	            params: 1
	        }),

	        // subscribe and unsubscribe missing

	        new Method({
	            name: 'post',
	            call: 'shh_post',
	            params: 1,
	            inputFormatter: [null]
	        })
	    ];
	};

	module.exports = Shh;



/***/ },
/* 409 */
/***/ function(module, exports, __webpack_require__) {

	/*
	    This file is part of web3.js.

	    web3.js is free software: you can redistribute it and/or modify
	    it under the terms of the GNU Lesser General Public License as published by
	    the Free Software Foundation, either version 3 of the License, or
	    (at your option) any later version.

	    web3.js is distributed in the hope that it will be useful,
	    but WITHOUT ANY WARRANTY; without even the implied warranty of
	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	    GNU Lesser General Public License for more details.

	    You should have received a copy of the GNU Lesser General Public License
	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	*/
	/**
	 * @file bzz.js
	 * @author Alex Beregszaszi <alex@rtfs.hu>
	 * @date 2016
	 *
	 * Reference: https://github.com/ethereum/go-ethereum/blob/swarm/internal/web3ext/web3ext.go#L33
	 */

	"use strict";

	var Method = __webpack_require__(29);
	var Property = __webpack_require__(40);

	function Swarm(web3) {
	    this._requestManager = web3._requestManager;

	    var self = this;

	    methods().forEach(function(method) {
	        method.attachToObject(self);
	        method.setRequestManager(self._requestManager);
	    });

	    properties().forEach(function(p) {
	        p.attachToObject(self);
	        p.setRequestManager(self._requestManager);
	    });
	}

	var methods = function () {
	    var blockNetworkRead = new Method({
	        name: 'blockNetworkRead',
	        call: 'bzz_blockNetworkRead',
	        params: 1,
	        inputFormatter: [null]
	    });

	    var syncEnabled = new Method({
	        name: 'syncEnabled',
	        call: 'bzz_syncEnabled',
	        params: 1,
	        inputFormatter: [null]
	    });

	    var swapEnabled = new Method({
	        name: 'swapEnabled',
	        call: 'bzz_swapEnabled',
	        params: 1,
	        inputFormatter: [null]
	    });

	    var download = new Method({
	        name: 'download',
	        call: 'bzz_download',
	        params: 2,
	        inputFormatter: [null, null]
	    });

	    var upload = new Method({
	        name: 'upload',
	        call: 'bzz_upload',
	        params: 2,
	        inputFormatter: [null, null]
	    });

	    var retrieve = new Method({
	        name: 'retrieve',
	        call: 'bzz_retrieve',
	        params: 1,
	        inputFormatter: [null]
	    });

	    var store = new Method({
	        name: 'store',
	        call: 'bzz_store',
	        params: 2,
	        inputFormatter: [null, null]
	    });

	    var get = new Method({
	        name: 'get',
	        call: 'bzz_get',
	        params: 1,
	        inputFormatter: [null]
	    });

	    var put = new Method({
	        name: 'put',
	        call: 'bzz_put',
	        params: 2,
	        inputFormatter: [null, null]
	    });

	    var modify = new Method({
	        name: 'modify',
	        call: 'bzz_modify',
	        params: 4,
	        inputFormatter: [null, null, null, null]
	    });

	    return [
	        blockNetworkRead,
	        syncEnabled,
	        swapEnabled,
	        download,
	        upload,
	        retrieve,
	        store,
	        get,
	        put,
	        modify
	    ];
	};

	var properties = function () {
	    return [
	        new Property({
	            name: 'hive',
	            getter: 'bzz_hive'
	        }),
	        new Property({
	            name: 'info',
	            getter: 'bzz_info'
	        })
	    ];
	};


	module.exports = Swarm;


/***/ },
/* 410 */
/***/ function(module, exports, __webpack_require__) {

	/*
	    This file is part of web3.js.

	    web3.js is free software: you can redistribute it and/or modify
	    it under the terms of the GNU Lesser General Public License as published by
	    the Free Software Foundation, either version 3 of the License, or
	    (at your option) any later version.

	    web3.js is distributed in the hope that it will be useful,
	    but WITHOUT ANY WARRANTY; without even the implied warranty of
	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	    GNU Lesser General Public License for more details.

	    You should have received a copy of the GNU Lesser General Public License
	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	*/
	/** 
	 * @file namereg.js
	 * @author Marek Kotewicz <marek@ethdev.com>
	 * @date 2015
	 */

	var globalRegistrarAbi = __webpack_require__(316);
	var icapRegistrarAbi= __webpack_require__(317);

	var globalNameregAddress = '0xc6d9d2cd449a754c494264e1809c50e34d64562b';
	var icapNameregAddress = '0xa1a111bc074c9cfa781f0c38e63bd51c91b8af00';

	module.exports = {
	    global: {
	        abi: globalRegistrarAbi,
	        address: globalNameregAddress
	    },
	    icap: {
	        abi: icapRegistrarAbi,
	        address: icapNameregAddress
	    }
	};



/***/ },
/* 411 */
/***/ function(module, exports, __webpack_require__) {

	/*
	    This file is part of web3.js.

	    web3.js is free software: you can redistribute it and/or modify
	    it under the terms of the GNU Lesser General Public License as published by
	    the Free Software Foundation, either version 3 of the License, or
	    (at your option) any later version.

	    web3.js is distributed in the hope that it will be useful,
	    but WITHOUT ANY WARRANTY; without even the implied warranty of
	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	    GNU Lesser General Public License for more details.

	    You should have received a copy of the GNU Lesser General Public License
	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	*/
	/** 
	 * @file requestmanager.js
	 * @author Jeffrey Wilcke <jeff@ethdev.com>
	 * @author Marek Kotewicz <marek@ethdev.com>
	 * @author Marian Oancea <marian@ethdev.com>
	 * @author Fabian Vogelsteller <fabian@ethdev.com>
	 * @author Gav Wood <g@ethdev.com>
	 * @date 2014
	 */

	var Jsonrpc = __webpack_require__(160);
	var utils = __webpack_require__(9);
	var c = __webpack_require__(67);
	var errors = __webpack_require__(39);

	/**
	 * It's responsible for passing messages to providers
	 * It's also responsible for polling the ethereum node for incoming messages
	 * Default poll timeout is 1 second
	 * Singleton
	 */
	var RequestManager = function (provider) {
	    this.provider = provider;
	    this.polls = {};
	    this.timeout = null;
	};

	/**
	 * Should be used to synchronously send request
	 *
	 * @method send
	 * @param {Object} data
	 * @return {Object}
	 */
	RequestManager.prototype.send = function (data) {
	    if (!this.provider) {
	        console.error(errors.InvalidProvider());
	        return null;
	    }

	    var payload = Jsonrpc.toPayload(data.method, data.params);
	    var result = this.provider.send(payload);

	    if (!Jsonrpc.isValidResponse(result)) {
	        throw errors.InvalidResponse(result);
	    }

	    return result.result;
	};

	/**
	 * Should be used to asynchronously send request
	 *
	 * @method sendAsync
	 * @param {Object} data
	 * @param {Function} callback
	 */
	RequestManager.prototype.sendAsync = function (data, callback) {
	    if (!this.provider) {
	        return callback(errors.InvalidProvider());
	    }

	    var payload = Jsonrpc.toPayload(data.method, data.params);
	    this.provider.sendAsync(payload, function (err, result) {
	        if (err) {
	            return callback(err);
	        }
	        
	        if (!Jsonrpc.isValidResponse(result)) {
	            return callback(errors.InvalidResponse(result));
	        }

	        callback(null, result.result);
	    });
	};

	/**
	 * Should be called to asynchronously send batch request
	 *
	 * @method sendBatch
	 * @param {Array} batch data
	 * @param {Function} callback
	 */
	RequestManager.prototype.sendBatch = function (data, callback) {
	    if (!this.provider) {
	        return callback(errors.InvalidProvider());
	    }

	    var payload = Jsonrpc.toBatchPayload(data);

	    this.provider.sendAsync(payload, function (err, results) {
	        if (err) {
	            return callback(err);
	        }

	        if (!utils.isArray(results)) {
	            return callback(errors.InvalidResponse(results));
	        }

	        callback(err, results);
	    }); 
	};

	/**
	 * Should be used to set provider of request manager
	 *
	 * @method setProvider
	 * @param {Object}
	 */
	RequestManager.prototype.setProvider = function (p) {
	    this.provider = p;
	};

	/**
	 * Should be used to start polling
	 *
	 * @method startPolling
	 * @param {Object} data
	 * @param {Number} pollId
	 * @param {Function} callback
	 * @param {Function} uninstall
	 *
	 * @todo cleanup number of params
	 */
	RequestManager.prototype.startPolling = function (data, pollId, callback, uninstall) {
	    this.polls[pollId] = {data: data, id: pollId, callback: callback, uninstall: uninstall};


	    // start polling
	    if (!this.timeout) {
	        this.poll();
	    }
	};

	/**
	 * Should be used to stop polling for filter with given id
	 *
	 * @method stopPolling
	 * @param {Number} pollId
	 */
	RequestManager.prototype.stopPolling = function (pollId) {
	    delete this.polls[pollId];

	    // stop polling
	    if(Object.keys(this.polls).length === 0 && this.timeout) {
	        clearTimeout(this.timeout);
	        this.timeout = null;
	    }
	};

	/**
	 * Should be called to reset the polling mechanism of the request manager
	 *
	 * @method reset
	 */
	RequestManager.prototype.reset = function (keepIsSyncing) {
	    /*jshint maxcomplexity:5 */

	    for (var key in this.polls) {
	        // remove all polls, except sync polls,
	        // they need to be removed manually by calling syncing.stopWatching()
	        if(!keepIsSyncing || key.indexOf('syncPoll_') === -1) {
	            this.polls[key].uninstall();
	            delete this.polls[key];
	        }
	    }

	    // stop polling
	    if(Object.keys(this.polls).length === 0 && this.timeout) {
	        clearTimeout(this.timeout);
	        this.timeout = null;
	    }
	};

	/**
	 * Should be called to poll for changes on filter with given id
	 *
	 * @method poll
	 */
	RequestManager.prototype.poll = function () {
	    /*jshint maxcomplexity: 6 */
	    this.timeout = setTimeout(this.poll.bind(this), c.ETH_POLLING_TIMEOUT);

	    if (Object.keys(this.polls).length === 0) {
	        return;
	    }

	    if (!this.provider) {
	        console.error(errors.InvalidProvider());
	        return;
	    }

	    var pollsData = [];
	    var pollsIds = [];
	    for (var key in this.polls) {
	        pollsData.push(this.polls[key].data);
	        pollsIds.push(key);
	    }

	    if (pollsData.length === 0) {
	        return;
	    }

	    var payload = Jsonrpc.toBatchPayload(pollsData);
	    
	    // map the request id to they poll id
	    var pollsIdMap = {};
	    payload.forEach(function(load, index){
	        pollsIdMap[load.id] = pollsIds[index];
	    });


	    var self = this;
	    this.provider.sendAsync(payload, function (error, results) {


	        // TODO: console log?
	        if (error) {
	            return;
	        }

	        if (!utils.isArray(results)) {
	            throw errors.InvalidResponse(results);
	        }
	        results.map(function (result) {
	            var id = pollsIdMap[result.id];

	            // make sure the filter is still installed after arrival of the request
	            if (self.polls[id]) {
	                result.callback = self.polls[id].callback;
	                return result;
	            } else
	                return false;
	        }).filter(function (result) {
	            return !!result; 
	        }).filter(function (result) {
	            var valid = Jsonrpc.isValidResponse(result);
	            if (!valid) {
	                result.callback(errors.InvalidResponse(result));
	            }
	            return valid;
	        }).forEach(function (result) {
	            result.callback(null, result.result);
	        });
	    });
	};

	module.exports = RequestManager;



/***/ },
/* 412 */
/***/ function(module, exports) {

	

	var Settings = function () {
	    this.defaultBlock = 'latest';
	    this.defaultAccount = undefined;
	};

	module.exports = Settings;



/***/ },
/* 413 */
/***/ function(module, exports, __webpack_require__) {

	/*
	    This file is part of web3.js.

	    web3.js is free software: you can redistribute it and/or modify
	    it under the terms of the GNU Lesser General Public License as published by
	    the Free Software Foundation, either version 3 of the License, or
	    (at your option) any later version.

	    web3.js is distributed in the hope that it will be useful,
	    but WITHOUT ANY WARRANTY; without even the implied warranty of
	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	    GNU Lesser General Public License for more details.

	    You should have received a copy of the GNU Lesser General Public License
	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	*/
	/** @file syncing.js
	 * @authors:
	 *   Fabian Vogelsteller <fabian@ethdev.com>
	 * @date 2015
	 */

	var formatters = __webpack_require__(20);
	var utils = __webpack_require__(9);

	var count = 1;

	/**
	Adds the callback and sets up the methods, to iterate over the results.

	@method pollSyncing
	@param {Object} self
	*/
	var pollSyncing = function(self) {

	    var onMessage = function (error, sync) {
	        if (error) {
	            return self.callbacks.forEach(function (callback) {
	                callback(error);
	            });
	        }

	        if(utils.isObject(sync) && sync.startingBlock)
	            sync = formatters.outputSyncingFormatter(sync);

	        self.callbacks.forEach(function (callback) {
	            if (self.lastSyncState !== sync) {
	                
	                // call the callback with true first so the app can stop anything, before receiving the sync data
	                if(!self.lastSyncState && utils.isObject(sync))
	                    callback(null, true);
	                
	                // call on the next CPU cycle, so the actions of the sync stop can be processes first
	                setTimeout(function() {
	                    callback(null, sync);
	                }, 0);
	                
	                self.lastSyncState = sync;
	            }
	        });
	    };

	    self.requestManager.startPolling({
	        method: 'eth_syncing',
	        params: [],
	    }, self.pollId, onMessage, self.stopWatching.bind(self));

	};

	var IsSyncing = function (requestManager, callback) {
	    this.requestManager = requestManager;
	    this.pollId = 'syncPoll_'+ count++;
	    this.callbacks = [];
	    this.addCallback(callback);
	    this.lastSyncState = false;
	    pollSyncing(this);

	    return this;
	};

	IsSyncing.prototype.addCallback = function (callback) {
	    if(callback)
	        this.callbacks.push(callback);
	    return this;
	};

	IsSyncing.prototype.stopWatching = function () {
	    this.requestManager.stopPolling(this.pollId);
	    this.callbacks = [];
	};

	module.exports = IsSyncing;



/***/ },
/* 414 */
/***/ function(module, exports, __webpack_require__) {

	/*
	    This file is part of web3.js.

	    web3.js is free software: you can redistribute it and/or modify
	    it under the terms of the GNU Lesser General Public License as published by
	    the Free Software Foundation, either version 3 of the License, or
	    (at your option) any later version.

	    web3.js is distributed in the hope that it will be useful,
	    but WITHOUT ANY WARRANTY; without even the implied warranty of
	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	    GNU Lesser General Public License for more details.

	    You should have received a copy of the GNU Lesser General Public License
	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	*/
	/** 
	 * @file transfer.js
	 * @author Marek Kotewicz <marek@ethdev.com>
	 * @date 2015
	 */

	var Iban = __webpack_require__(69);
	var exchangeAbi = __webpack_require__(318);

	/**
	 * Should be used to make Iban transfer
	 *
	 * @method transfer
	 * @param {String} from
	 * @param {String} to iban
	 * @param {Value} value to be tranfered
	 * @param {Function} callback, callback
	 */
	var transfer = function (eth, from, to, value, callback) {
	    var iban = new Iban(to); 
	    if (!iban.isValid()) {
	        throw new Error('invalid iban address');
	    }

	    if (iban.isDirect()) {
	        return transferToAddress(eth, from, iban.address(), value, callback);
	    }
	    
	    if (!callback) {
	        var address = eth.icapNamereg().addr(iban.institution());
	        return deposit(eth, from, address, value, iban.client());
	    }

	    eth.icapNamereg().addr(iban.institution(), function (err, address) {
	        return deposit(eth, from, address, value, iban.client(), callback);
	    });
	    
	};

	/**
	 * Should be used to transfer funds to certain address
	 *
	 * @method transferToAddress
	 * @param {String} from
	 * @param {String} to
	 * @param {Value} value to be tranfered
	 * @param {Function} callback, callback
	 */
	var transferToAddress = function (eth, from, to, value, callback) {
	    return eth.sendTransaction({
	        address: to,
	        from: from,
	        value: value
	    }, callback);
	};

	/**
	 * Should be used to deposit funds to generic Exchange contract (must implement deposit(bytes32) method!)
	 *
	 * @method deposit
	 * @param {String} from
	 * @param {String} to
	 * @param {Value} value to be transfered
	 * @param {String} client unique identifier
	 * @param {Function} callback, callback
	 */
	var deposit = function (eth, from, to, value, client, callback) {
	    var abi = exchangeAbi;
	    return eth.contract(abi).at(to).deposit(client, {
	        from: from,
	        value: value
	    }, callback);
	};

	module.exports = transfer;



/***/ },
/* 415 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var window = __webpack_require__(296)
	var isFunction = __webpack_require__(308)
	var parseHeaders = __webpack_require__(354)
	var xtend = __webpack_require__(71)

	module.exports = createXHR
	// Allow use of default import syntax in TypeScript
	module.exports.default = createXHR;
	createXHR.XMLHttpRequest = window.XMLHttpRequest || noop
	createXHR.XDomainRequest = "withCredentials" in (new createXHR.XMLHttpRequest()) ? createXHR.XMLHttpRequest : window.XDomainRequest

	forEachArray(["get", "put", "post", "patch", "head", "delete"], function(method) {
	    createXHR[method === "delete" ? "del" : method] = function(uri, options, callback) {
	        options = initParams(uri, options, callback)
	        options.method = method.toUpperCase()
	        return _createXHR(options)
	    }
	})

	function forEachArray(array, iterator) {
	    for (var i = 0; i < array.length; i++) {
	        iterator(array[i])
	    }
	}

	function isEmpty(obj){
	    for(var i in obj){
	        if(obj.hasOwnProperty(i)) return false
	    }
	    return true
	}

	function initParams(uri, options, callback) {
	    var params = uri

	    if (isFunction(options)) {
	        callback = options
	        if (typeof uri === "string") {
	            params = {uri:uri}
	        }
	    } else {
	        params = xtend(options, {uri: uri})
	    }

	    params.callback = callback
	    return params
	}

	function createXHR(uri, options, callback) {
	    options = initParams(uri, options, callback)
	    return _createXHR(options)
	}

	function _createXHR(options) {
	    if(typeof options.callback === "undefined"){
	        throw new Error("callback argument missing")
	    }

	    var called = false
	    var callback = function cbOnce(err, response, body){
	        if(!called){
	            called = true
	            options.callback(err, response, body)
	        }
	    }

	    function readystatechange() {
	        if (xhr.readyState === 4) {
	            setTimeout(loadFunc, 0)
	        }
	    }

	    function getBody() {
	        // Chrome with requestType=blob throws errors arround when even testing access to responseText
	        var body = undefined

	        if (xhr.response) {
	            body = xhr.response
	        } else {
	            body = xhr.responseText || getXml(xhr)
	        }

	        if (isJson) {
	            try {
	                body = JSON.parse(body)
	            } catch (e) {}
	        }

	        return body
	    }

	    function errorFunc(evt) {
	        clearTimeout(timeoutTimer)
	        if(!(evt instanceof Error)){
	            evt = new Error("" + (evt || "Unknown XMLHttpRequest Error") )
	        }
	        evt.statusCode = 0
	        return callback(evt, failureResponse)
	    }

	    // will load the data & process the response in a special response object
	    function loadFunc() {
	        if (aborted) return
	        var status
	        clearTimeout(timeoutTimer)
	        if(options.useXDR && xhr.status===undefined) {
	            //IE8 CORS GET successful response doesn't have a status field, but body is fine
	            status = 200
	        } else {
	            status = (xhr.status === 1223 ? 204 : xhr.status)
	        }
	        var response = failureResponse
	        var err = null

	        if (status !== 0){
	            response = {
	                body: getBody(),
	                statusCode: status,
	                method: method,
	                headers: {},
	                url: uri,
	                rawRequest: xhr
	            }
	            if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE
	                response.headers = parseHeaders(xhr.getAllResponseHeaders())
	            }
	        } else {
	            err = new Error("Internal XMLHttpRequest Error")
	        }
	        return callback(err, response, response.body)
	    }

	    var xhr = options.xhr || null

	    if (!xhr) {
	        if (options.cors || options.useXDR) {
	            xhr = new createXHR.XDomainRequest()
	        }else{
	            xhr = new createXHR.XMLHttpRequest()
	        }
	    }

	    var key
	    var aborted
	    var uri = xhr.url = options.uri || options.url
	    var method = xhr.method = options.method || "GET"
	    var body = options.body || options.data
	    var headers = xhr.headers = options.headers || {}
	    var sync = !!options.sync
	    var isJson = false
	    var timeoutTimer
	    var failureResponse = {
	        body: undefined,
	        headers: {},
	        statusCode: 0,
	        method: method,
	        url: uri,
	        rawRequest: xhr
	    }

	    if ("json" in options && options.json !== false) {
	        isJson = true
	        headers["accept"] || headers["Accept"] || (headers["Accept"] = "application/json") //Don't override existing accept header declared by user
	        if (method !== "GET" && method !== "HEAD") {
	            headers["content-type"] || headers["Content-Type"] || (headers["Content-Type"] = "application/json") //Don't override existing accept header declared by user
	            body = JSON.stringify(options.json === true ? body : options.json)
	        }
	    }

	    xhr.onreadystatechange = readystatechange
	    xhr.onload = loadFunc
	    xhr.onerror = errorFunc
	    // IE9 must have onprogress be set to a unique function.
	    xhr.onprogress = function () {
	        // IE must die
	    }
	    xhr.onabort = function(){
	        aborted = true;
	    }
	    xhr.ontimeout = errorFunc
	    xhr.open(method, uri, !sync, options.username, options.password)
	    //has to be after open
	    if(!sync) {
	        xhr.withCredentials = !!options.withCredentials
	    }
	    // Cannot set timeout with sync request
	    // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly
	    // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent
	    if (!sync && options.timeout > 0 ) {
	        timeoutTimer = setTimeout(function(){
	            if (aborted) return
	            aborted = true//IE9 may still call readystatechange
	            xhr.abort("timeout")
	            var e = new Error("XMLHttpRequest timeout")
	            e.code = "ETIMEDOUT"
	            errorFunc(e)
	        }, options.timeout )
	    }

	    if (xhr.setRequestHeader) {
	        for(key in headers){
	            if(headers.hasOwnProperty(key)){
	                xhr.setRequestHeader(key, headers[key])
	            }
	        }
	    } else if (options.headers && !isEmpty(options.headers)) {
	        throw new Error("Headers cannot be set on an XDomainRequest object")
	    }

	    if ("responseType" in options) {
	        xhr.responseType = options.responseType
	    }

	    if ("beforeSend" in options &&
	        typeof options.beforeSend === "function"
	    ) {
	        options.beforeSend(xhr)
	    }

	    // Microsoft Edge browser sends "undefined" when send is called with undefined value.
	    // XMLHttpRequest spec says to pass null as body to indicate no body
	    // See https://github.com/naugtur/xhr/issues/100.
	    xhr.send(body || null)

	    return xhr


	}

	function getXml(xhr) {
	    // xhr.responseXML will throw Exception "InvalidStateError" or "DOMException"
	    // See https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseXML.
	    try {
	        if (xhr.responseType === "document") {
	            return xhr.responseXML
	        }
	        var firefoxBugTakenEffect = xhr.responseXML && xhr.responseXML.documentElement.nodeName === "parsererror"
	        if (xhr.responseType === "" && !firefoxBugTakenEffect) {
	            return xhr.responseXML
	        }
	    } catch (e) {}

	    return null
	}

	function noop() {}


/***/ },
/* 416 */
/***/ function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var SecurityError = /** @class */ (function (_super) {
	    __extends(SecurityError, _super);
	    function SecurityError() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return SecurityError;
	}(Error));
	exports.SecurityError = SecurityError;
	var InvalidStateError = /** @class */ (function (_super) {
	    __extends(InvalidStateError, _super);
	    function InvalidStateError() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return InvalidStateError;
	}(Error));
	exports.InvalidStateError = InvalidStateError;
	var NetworkError = /** @class */ (function (_super) {
	    __extends(NetworkError, _super);
	    function NetworkError() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return NetworkError;
	}(Error));
	exports.NetworkError = NetworkError;
	var SyntaxError = /** @class */ (function (_super) {
	    __extends(SyntaxError, _super);
	    function SyntaxError() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return SyntaxError;
	}(Error));
	exports.SyntaxError = SyntaxError;
	//# sourceMappingURL=errors.js.map

/***/ },
/* 417 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	__export(__webpack_require__(420));
	var xml_http_request_event_target_1 = __webpack_require__(98);
	exports.XMLHttpRequestEventTarget = xml_http_request_event_target_1.XMLHttpRequestEventTarget;
	//# sourceMappingURL=index.js.map

/***/ },
/* 418 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var ProgressEvent = /** @class */ (function () {
	    function ProgressEvent(type) {
	        this.type = type;
	        this.bubbles = false;
	        this.cancelable = false;
	        this.loaded = 0;
	        this.lengthComputable = false;
	        this.total = 0;
	    }
	    return ProgressEvent;
	}());
	exports.ProgressEvent = ProgressEvent;
	//# sourceMappingURL=progress-event.js.map

/***/ },
/* 419 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var xml_http_request_event_target_1 = __webpack_require__(98);
	var XMLHttpRequestUpload = /** @class */ (function (_super) {
	    __extends(XMLHttpRequestUpload, _super);
	    function XMLHttpRequestUpload() {
	        var _this = _super.call(this) || this;
	        _this._contentType = null;
	        _this._body = null;
	        _this._reset();
	        return _this;
	    }
	    XMLHttpRequestUpload.prototype._reset = function () {
	        this._contentType = null;
	        this._body = null;
	    };
	    XMLHttpRequestUpload.prototype._setData = function (data) {
	        if (data == null) {
	            return;
	        }
	        if (typeof data === 'string') {
	            if (data.length !== 0) {
	                this._contentType = 'text/plain;charset=UTF-8';
	            }
	            this._body = new Buffer(data, 'utf-8');
	        }
	        else if (Buffer.isBuffer(data)) {
	            this._body = data;
	        }
	        else if (data instanceof ArrayBuffer) {
	            var body = new Buffer(data.byteLength);
	            var view = new Uint8Array(data);
	            for (var i = 0; i < data.byteLength; i++) {
	                body[i] = view[i];
	            }
	            this._body = body;
	        }
	        else if (data.buffer && data.buffer instanceof ArrayBuffer) {
	            var body = new Buffer(data.byteLength);
	            var offset = data.byteOffset;
	            var view = new Uint8Array(data.buffer);
	            for (var i = 0; i < data.byteLength; i++) {
	                body[i] = view[i + offset];
	            }
	            this._body = body;
	        }
	        else {
	            throw new Error("Unsupported send() data " + data);
	        }
	    };
	    XMLHttpRequestUpload.prototype._finalizeHeaders = function (headers, loweredHeaders) {
	        if (this._contentType && !loweredHeaders['content-type']) {
	            headers['Content-Type'] = this._contentType;
	        }
	        if (this._body) {
	            headers['Content-Length'] = this._body.length.toString();
	        }
	    };
	    XMLHttpRequestUpload.prototype._startUpload = function (request) {
	        if (this._body) {
	            request.write(this._body);
	        }
	        request.end();
	    };
	    return XMLHttpRequestUpload;
	}(xml_http_request_event_target_1.XMLHttpRequestEventTarget));
	exports.XMLHttpRequestUpload = XMLHttpRequestUpload;
	//# sourceMappingURL=xml-http-request-upload.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 420 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer) {"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var http = __webpack_require__(129);
	var https = __webpack_require__(306);
	var os = __webpack_require__(353);
	var url = __webpack_require__(156);
	var progress_event_1 = __webpack_require__(418);
	var errors_1 = __webpack_require__(416);
	var xml_http_request_event_target_1 = __webpack_require__(98);
	var xml_http_request_upload_1 = __webpack_require__(419);
	var Cookie = __webpack_require__(224);
	var XMLHttpRequest = /** @class */ (function (_super) {
	    __extends(XMLHttpRequest, _super);
	    function XMLHttpRequest(options) {
	        if (options === void 0) { options = {}; }
	        var _this = _super.call(this) || this;
	        _this.UNSENT = XMLHttpRequest.UNSENT;
	        _this.OPENED = XMLHttpRequest.OPENED;
	        _this.HEADERS_RECEIVED = XMLHttpRequest.HEADERS_RECEIVED;
	        _this.LOADING = XMLHttpRequest.LOADING;
	        _this.DONE = XMLHttpRequest.DONE;
	        _this.onreadystatechange = null;
	        _this.readyState = XMLHttpRequest.UNSENT;
	        _this.response = null;
	        _this.responseText = '';
	        _this.responseType = '';
	        _this.status = 0; // TODO: UNSENT?
	        _this.statusText = '';
	        _this.timeout = 0;
	        _this.upload = new xml_http_request_upload_1.XMLHttpRequestUpload();
	        _this.responseUrl = '';
	        _this.withCredentials = false;
	        _this._method = null;
	        _this._url = null;
	        _this._sync = false;
	        _this._headers = {};
	        _this._loweredHeaders = {};
	        _this._mimeOverride = null; // TODO: is type right?
	        _this._request = null;
	        _this._response = null;
	        _this._responseParts = null;
	        _this._responseHeaders = null;
	        _this._aborting = null; // TODO: type?
	        _this._error = null; // TODO: type?
	        _this._loadedBytes = 0;
	        _this._totalBytes = 0;
	        _this._lengthComputable = false;
	        _this._restrictedMethods = { CONNECT: true, TRACE: true, TRACK: true };
	        _this._restrictedHeaders = {
	            'accept-charset': true,
	            'accept-encoding': true,
	            'access-control-request-headers': true,
	            'access-control-request-method': true,
	            connection: true,
	            'content-length': true,
	            cookie: true,
	            cookie2: true,
	            date: true,
	            dnt: true,
	            expect: true,
	            host: true,
	            'keep-alive': true,
	            origin: true,
	            referer: true,
	            te: true,
	            trailer: true,
	            'transfer-encoding': true,
	            upgrade: true,
	            'user-agent': true,
	            via: true
	        };
	        _this._privateHeaders = { 'set-cookie': true, 'set-cookie2': true };
	        _this._userAgent = "Mozilla/5.0 (" + os.type() + " " + os.arch() + ") node.js/" + process.versions.node + " v8/" + process.versions.v8;
	        _this._anonymous = options.anon || false;
	        return _this;
	    }
	    XMLHttpRequest.prototype.open = function (method, url, async, user, password) {
	        if (async === void 0) { async = true; }
	        method = method.toUpperCase();
	        if (this._restrictedMethods[method]) {
	            throw new XMLHttpRequest.SecurityError("HTTP method " + method + " is not allowed in XHR");
	        }
	        ;
	        var xhrUrl = this._parseUrl(url, user, password);
	        if (this.readyState === XMLHttpRequest.HEADERS_RECEIVED || this.readyState === XMLHttpRequest.LOADING) {
	            // TODO(pwnall): terminate abort(), terminate send()
	        }
	        this._method = method;
	        this._url = xhrUrl;
	        this._sync = !async;
	        this._headers = {};
	        this._loweredHeaders = {};
	        this._mimeOverride = null;
	        this._setReadyState(XMLHttpRequest.OPENED);
	        this._request = null;
	        this._response = null;
	        this.status = 0;
	        this.statusText = '';
	        this._responseParts = [];
	        this._responseHeaders = null;
	        this._loadedBytes = 0;
	        this._totalBytes = 0;
	        this._lengthComputable = false;
	    };
	    XMLHttpRequest.prototype.setRequestHeader = function (name, value) {
	        if (this.readyState !== XMLHttpRequest.OPENED) {
	            throw new XMLHttpRequest.InvalidStateError('XHR readyState must be OPENED');
	        }
	        var loweredName = name.toLowerCase();
	        if (this._restrictedHeaders[loweredName] || /^sec-/.test(loweredName) || /^proxy-/.test(loweredName)) {
	            console.warn("Refused to set unsafe header \"" + name + "\"");
	            return;
	        }
	        value = value.toString();
	        if (this._loweredHeaders[loweredName] != null) {
	            name = this._loweredHeaders[loweredName];
	            this._headers[name] = this._headers[name] + ", " + value;
	        }
	        else {
	            this._loweredHeaders[loweredName] = name;
	            this._headers[name] = value;
	        }
	    };
	    XMLHttpRequest.prototype.send = function (data) {
	        if (this.readyState !== XMLHttpRequest.OPENED) {
	            throw new XMLHttpRequest.InvalidStateError('XHR readyState must be OPENED');
	        }
	        if (this._request) {
	            throw new XMLHttpRequest.InvalidStateError('send() already called');
	        }
	        switch (this._url.protocol) {
	            case 'file:':
	                return this._sendFile(data);
	            case 'http:':
	            case 'https:':
	                return this._sendHttp(data);
	            default:
	                throw new XMLHttpRequest.NetworkError("Unsupported protocol " + this._url.protocol);
	        }
	    };
	    XMLHttpRequest.prototype.abort = function () {
	        if (this._request == null) {
	            return;
	        }
	        this._request.abort();
	        this._setError();
	        this._dispatchProgress('abort');
	        this._dispatchProgress('loadend');
	    };
	    XMLHttpRequest.prototype.getResponseHeader = function (name) {
	        if (this._responseHeaders == null || name == null) {
	            return null;
	        }
	        var loweredName = name.toLowerCase();
	        return this._responseHeaders.hasOwnProperty(loweredName)
	            ? this._responseHeaders[name.toLowerCase()]
	            : null;
	    };
	    XMLHttpRequest.prototype.getAllResponseHeaders = function () {
	        var _this = this;
	        if (this._responseHeaders == null) {
	            return '';
	        }
	        return Object.keys(this._responseHeaders).map(function (key) { return key + ": " + _this._responseHeaders[key]; }).join('\r\n');
	    };
	    XMLHttpRequest.prototype.overrideMimeType = function (mimeType) {
	        if (this.readyState === XMLHttpRequest.LOADING || this.readyState === XMLHttpRequest.DONE) {
	            throw new XMLHttpRequest.InvalidStateError('overrideMimeType() not allowed in LOADING or DONE');
	        }
	        this._mimeOverride = mimeType.toLowerCase();
	    };
	    XMLHttpRequest.prototype.nodejsSet = function (options) {
	        this.nodejsHttpAgent = options.httpAgent || this.nodejsHttpAgent;
	        this.nodejsHttpsAgent = options.httpsAgent || this.nodejsHttpsAgent;
	        if (options.hasOwnProperty('baseUrl')) {
	            if (options.baseUrl != null) {
	                var parsedUrl = url.parse(options.baseUrl, false, true);
	                if (!parsedUrl.protocol) {
	                    throw new XMLHttpRequest.SyntaxError("baseUrl must be an absolute URL");
	                }
	            }
	            this.nodejsBaseUrl = options.baseUrl;
	        }
	    };
	    XMLHttpRequest.nodejsSet = function (options) {
	        XMLHttpRequest.prototype.nodejsSet(options);
	    };
	    XMLHttpRequest.prototype._setReadyState = function (readyState) {
	        this.readyState = readyState;
	        this.dispatchEvent(new progress_event_1.ProgressEvent('readystatechange'));
	    };
	    XMLHttpRequest.prototype._sendFile = function (data) {
	        // TODO
	        throw new Error('Protocol file: not implemented');
	    };
	    XMLHttpRequest.prototype._sendHttp = function (data) {
	        if (this._sync) {
	            throw new Error('Synchronous XHR processing not implemented');
	        }
	        if (data && (this._method === 'GET' || this._method === 'HEAD')) {
	            console.warn("Discarding entity body for " + this._method + " requests");
	            data = null;
	        }
	        else {
	            data = data || '';
	        }
	        this.upload._setData(data);
	        this._finalizeHeaders();
	        this._sendHxxpRequest();
	    };
	    XMLHttpRequest.prototype._sendHxxpRequest = function () {
	        var _this = this;
	        if (this.withCredentials) {
	            var cookie = XMLHttpRequest.cookieJar
	                .getCookies(Cookie.CookieAccessInfo(this._url.hostname, this._url.pathname, this._url.protocol === 'https:')).toValueString();
	            this._headers.cookie = this._headers.cookie2 = cookie;
	        }
	        var _a = this._url.protocol === 'http:' ? [http, this.nodejsHttpAgent] : [https, this.nodejsHttpsAgent], hxxp = _a[0], agent = _a[1];
	        var requestMethod = hxxp.request.bind(hxxp);
	        var request = requestMethod({
	            hostname: this._url.hostname,
	            port: +this._url.port,
	            path: this._url.path,
	            auth: this._url.auth,
	            method: this._method,
	            headers: this._headers,
	            agent: agent
	        });
	        this._request = request;
	        if (this.timeout) {
	            request.setTimeout(this.timeout, function () { return _this._onHttpTimeout(request); });
	        }
	        request.on('response', function (response) { return _this._onHttpResponse(request, response); });
	        request.on('error', function (error) { return _this._onHttpRequestError(request, error); });
	        this.upload._startUpload(request);
	        if (this._request === request) {
	            this._dispatchProgress('loadstart');
	        }
	    };
	    XMLHttpRequest.prototype._finalizeHeaders = function () {
	        this._headers = __assign({}, this._headers, { Connection: 'keep-alive', Host: this._url.host, 'User-Agent': this._userAgent }, this._anonymous ? { Referer: 'about:blank' } : {});
	        this.upload._finalizeHeaders(this._headers, this._loweredHeaders);
	    };
	    XMLHttpRequest.prototype._onHttpResponse = function (request, response) {
	        var _this = this;
	        if (this._request !== request) {
	            return;
	        }
	        if (this.withCredentials && (response.headers['set-cookie'] || response.headers['set-cookie2'])) {
	            XMLHttpRequest.cookieJar
	                .setCookies(response.headers['set-cookie'] || response.headers['set-cookie2']);
	        }
	        if ([301, 302, 303, 307, 308].indexOf(response.statusCode) >= 0) {
	            this._url = this._parseUrl(response.headers.location);
	            this._method = 'GET';
	            if (this._loweredHeaders['content-type']) {
	                delete this._headers[this._loweredHeaders['content-type']];
	                delete this._loweredHeaders['content-type'];
	            }
	            if (this._headers['Content-Type'] != null) {
	                delete this._headers['Content-Type'];
	            }
	            delete this._headers['Content-Length'];
	            this.upload._reset();
	            this._finalizeHeaders();
	            this._sendHxxpRequest();
	            return;
	        }
	        this._response = response;
	        this._response.on('data', function (data) { return _this._onHttpResponseData(response, data); });
	        this._response.on('end', function () { return _this._onHttpResponseEnd(response); });
	        this._response.on('close', function () { return _this._onHttpResponseClose(response); });
	        this.responseUrl = this._url.href.split('#')[0];
	        this.status = response.statusCode;
	        this.statusText = http.STATUS_CODES[this.status];
	        this._parseResponseHeaders(response);
	        var lengthString = this._responseHeaders['content-length'] || '';
	        this._totalBytes = +lengthString;
	        this._lengthComputable = !!lengthString;
	        this._setReadyState(XMLHttpRequest.HEADERS_RECEIVED);
	    };
	    XMLHttpRequest.prototype._onHttpResponseData = function (response, data) {
	        if (this._response !== response) {
	            return;
	        }
	        this._responseParts.push(new Buffer(data));
	        this._loadedBytes += data.length;
	        if (this.readyState !== XMLHttpRequest.LOADING) {
	            this._setReadyState(XMLHttpRequest.LOADING);
	        }
	        this._dispatchProgress('progress');
	    };
	    XMLHttpRequest.prototype._onHttpResponseEnd = function (response) {
	        if (this._response !== response) {
	            return;
	        }
	        this._parseResponse();
	        this._request = null;
	        this._response = null;
	        this._setReadyState(XMLHttpRequest.DONE);
	        this._dispatchProgress('load');
	        this._dispatchProgress('loadend');
	    };
	    XMLHttpRequest.prototype._onHttpResponseClose = function (response) {
	        if (this._response !== response) {
	            return;
	        }
	        var request = this._request;
	        this._setError();
	        request.abort();
	        this._setReadyState(XMLHttpRequest.DONE);
	        this._dispatchProgress('error');
	        this._dispatchProgress('loadend');
	    };
	    XMLHttpRequest.prototype._onHttpTimeout = function (request) {
	        if (this._request !== request) {
	            return;
	        }
	        this._setError();
	        request.abort();
	        this._setReadyState(XMLHttpRequest.DONE);
	        this._dispatchProgress('timeout');
	        this._dispatchProgress('loadend');
	    };
	    XMLHttpRequest.prototype._onHttpRequestError = function (request, error) {
	        if (this._request !== request) {
	            return;
	        }
	        this._setError();
	        request.abort();
	        this._setReadyState(XMLHttpRequest.DONE);
	        this._dispatchProgress('error');
	        this._dispatchProgress('loadend');
	    };
	    XMLHttpRequest.prototype._dispatchProgress = function (eventType) {
	        var event = new XMLHttpRequest.ProgressEvent(eventType);
	        event.lengthComputable = this._lengthComputable;
	        event.loaded = this._loadedBytes;
	        event.total = this._totalBytes;
	        this.dispatchEvent(event);
	    };
	    XMLHttpRequest.prototype._setError = function () {
	        this._request = null;
	        this._response = null;
	        this._responseHeaders = null;
	        this._responseParts = null;
	    };
	    XMLHttpRequest.prototype._parseUrl = function (urlString, user, password) {
	        var absoluteUrl = this.nodejsBaseUrl == null ? urlString : url.resolve(this.nodejsBaseUrl, urlString);
	        var xhrUrl = url.parse(absoluteUrl, false, true);
	        xhrUrl.hash = null;
	        var _a = (xhrUrl.auth || '').split(':'), xhrUser = _a[0], xhrPassword = _a[1];
	        if (xhrUser || xhrPassword || user || password) {
	            xhrUrl.auth = (user || xhrUser || '') + ":" + (password || xhrPassword || '');
	        }
	        return xhrUrl;
	    };
	    XMLHttpRequest.prototype._parseResponseHeaders = function (response) {
	        this._responseHeaders = {};
	        for (var name_1 in response.headers) {
	            var loweredName = name_1.toLowerCase();
	            if (this._privateHeaders[loweredName]) {
	                continue;
	            }
	            this._responseHeaders[loweredName] = response.headers[name_1];
	        }
	        if (this._mimeOverride != null) {
	            this._responseHeaders['content-type'] = this._mimeOverride;
	        }
	    };
	    XMLHttpRequest.prototype._parseResponse = function () {
	        var buffer = Buffer.concat(this._responseParts);
	        this._responseParts = null;
	        switch (this.responseType) {
	            case 'json':
	                this.responseText = null;
	                try {
	                    this.response = JSON.parse(buffer.toString('utf-8'));
	                }
	                catch (_a) {
	                    this.response = null;
	                }
	                return;
	            case 'buffer':
	                this.responseText = null;
	                this.response = buffer;
	                return;
	            case 'arraybuffer':
	                this.responseText = null;
	                var arrayBuffer = new ArrayBuffer(buffer.length);
	                var view = new Uint8Array(arrayBuffer);
	                for (var i = 0; i < buffer.length; i++) {
	                    view[i] = buffer[i];
	                }
	                this.response = arrayBuffer;
	                return;
	            case 'text':
	            default:
	                try {
	                    this.responseText = buffer.toString(this._parseResponseEncoding());
	                }
	                catch (_b) {
	                    this.responseText = buffer.toString('binary');
	                }
	                this.response = this.responseText;
	        }
	    };
	    XMLHttpRequest.prototype._parseResponseEncoding = function () {
	        return /;\s*charset=(.*)$/.exec(this._responseHeaders['content-type'] || '')[1] || 'utf-8';
	    };
	    XMLHttpRequest.ProgressEvent = progress_event_1.ProgressEvent;
	    XMLHttpRequest.InvalidStateError = errors_1.InvalidStateError;
	    XMLHttpRequest.NetworkError = errors_1.NetworkError;
	    XMLHttpRequest.SecurityError = errors_1.SecurityError;
	    XMLHttpRequest.SyntaxError = errors_1.SyntaxError;
	    XMLHttpRequest.XMLHttpRequestUpload = xml_http_request_upload_1.XMLHttpRequestUpload;
	    XMLHttpRequest.UNSENT = 0;
	    XMLHttpRequest.OPENED = 1;
	    XMLHttpRequest.HEADERS_RECEIVED = 2;
	    XMLHttpRequest.LOADING = 3;
	    XMLHttpRequest.DONE = 4;
	    XMLHttpRequest.cookieJar = Cookie.CookieJar();
	    return XMLHttpRequest;
	}(xml_http_request_event_target_1.XMLHttpRequestEventTarget));
	exports.XMLHttpRequest = XMLHttpRequest;
	XMLHttpRequest.prototype.nodejsHttpAgent = http.globalAgent;
	XMLHttpRequest.prototype.nodejsHttpsAgent = https.globalAgent;
	XMLHttpRequest.prototype.nodejsBaseUrl = null;
	//# sourceMappingURL=xml-http-request.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8), __webpack_require__(1).Buffer))

/***/ },
/* 421 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 422 */
421,
/* 423 */
421,
/* 424 */
421,
/* 425 */
421,
/* 426 */
421,
/* 427 */
421,
/* 428 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};


	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};


	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};


	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = __webpack_require__(__webpack_module_template_argument_0__);

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(__webpack_module_template_argument_1__);

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(8)))

/***/ },
/* 429 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	'use strict';

	function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
	  return typeof obj;
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	};

	var _require = __webpack_require__(63),
	    keccak224 = _require.keccak224,
	    keccak384 = _require.keccak384,
	    k256 = _require.keccak256,
	    keccak512 = _require.keccak512;

	var secp256k1 = __webpack_require__(__webpack_module_template_argument_0__);

	var assert = __webpack_require__(5);

	var rlp = __webpack_require__(22);

	var BN = __webpack_require__(4);

	var createHash = __webpack_require__(25);

	var Buffer = __webpack_require__(6).Buffer;

	_extends(exports, __webpack_require__(18));
	/**
	 * the max integer that this VM can handle (a ```BN```)
	 * @var {BN} MAX_INTEGER
	 */


	exports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);
	/**
	 * 2^256 (a ```BN```)
	 * @var {BN} TWO_POW256
	 */

	exports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16);
	/**
	 * Keccak-256 hash of null (a ```String```)
	 * @var {String} KECCAK256_NULL_S
	 */

	exports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
	exports.SHA3_NULL_S = exports.KECCAK256_NULL_S;
	/**
	 * Keccak-256 hash of null (a ```Buffer```)
	 * @var {Buffer} KECCAK256_NULL
	 */

	exports.KECCAK256_NULL = Buffer.from(exports.KECCAK256_NULL_S, 'hex');
	exports.SHA3_NULL = exports.KECCAK256_NULL;
	/**
	 * Keccak-256 of an RLP of an empty array (a ```String```)
	 * @var {String} KECCAK256_RLP_ARRAY_S
	 */

	exports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';
	exports.SHA3_RLP_ARRAY_S = exports.KECCAK256_RLP_ARRAY_S;
	/**
	 * Keccak-256 of an RLP of an empty array (a ```Buffer```)
	 * @var {Buffer} KECCAK256_RLP_ARRAY
	 */

	exports.KECCAK256_RLP_ARRAY = Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');
	exports.SHA3_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY;
	/**
	 * Keccak-256 hash of the RLP of null  (a ```String```)
	 * @var {String} KECCAK256_RLP_S
	 */

	exports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';
	exports.SHA3_RLP_S = exports.KECCAK256_RLP_S;
	/**
	 * Keccak-256 hash of the RLP of null (a ```Buffer```)
	 * @var {Buffer} KECCAK256_RLP
	 */

	exports.KECCAK256_RLP = Buffer.from(exports.KECCAK256_RLP_S, 'hex');
	exports.SHA3_RLP = exports.KECCAK256_RLP;
	/**
	 * [`BN`](https://github.com/indutny/bn.js)
	 * @var {Function}
	 */

	exports.BN = BN;
	/**
	 * [`rlp`](https://github.com/ethereumjs/rlp)
	 * @var {Function}
	 */

	exports.rlp = rlp;
	/**
	 * [`secp256k1`](https://github.com/cryptocoinjs/secp256k1-node/)
	 * @var {Object}
	 */

	exports.secp256k1 = secp256k1;
	/**
	 * Returns a buffer filled with 0s
	 * @method zeros
	 * @param {Number} bytes  the number of bytes the buffer should be
	 * @return {Buffer}
	 */

	exports.zeros = function (bytes) {
	  return Buffer.allocUnsafe(bytes).fill(0);
	};
	/**
	  * Returns a zero address
	  * @method zeroAddress
	  * @return {String}
	  */


	exports.zeroAddress = function () {
	  var addressLength = 20;
	  var zeroAddress = exports.zeros(addressLength);
	  return exports.bufferToHex(zeroAddress);
	};
	/**
	 * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
	 * Or it truncates the beginning if it exceeds.
	 * @method lsetLength
	 * @param {Buffer|Array} msg the value to pad
	 * @param {Number} length the number of bytes the output should be
	 * @param {Boolean} [right=false] whether to start padding form the left or right
	 * @return {Buffer|Array}
	 */


	exports.setLengthLeft = exports.setLength = function (msg, length, right) {
	  var buf = exports.zeros(length);
	  msg = exports.toBuffer(msg);

	  if (right) {
	    if (msg.length < length) {
	      msg.copy(buf);
	      return buf;
	    }

	    return msg.slice(0, length);
	  } else {
	    if (msg.length < length) {
	      msg.copy(buf, length - msg.length);
	      return buf;
	    }

	    return msg.slice(-length);
	  }
	};
	/**
	 * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
	 * Or it truncates the beginning if it exceeds.
	 * @param {Buffer|Array} msg the value to pad
	 * @param {Number} length the number of bytes the output should be
	 * @return {Buffer|Array}
	 */


	exports.setLengthRight = function (msg, length) {
	  return exports.setLength(msg, length, true);
	};
	/**
	 * Trims leading zeros from a `Buffer` or an `Array`
	 * @param {Buffer|Array|String} a
	 * @return {Buffer|Array|String}
	 */


	exports.unpad = exports.stripZeros = function (a) {
	  a = exports.stripHexPrefix(a);
	  var first = a[0];

	  while (a.length > 0 && first.toString() === '0') {
	    a = a.slice(1);
	    first = a[0];
	  }

	  return a;
	};
	/**
	 * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.
	 * @param {*} v the value
	 */


	exports.toBuffer = function (v) {
	  if (!Buffer.isBuffer(v)) {
	    if (Array.isArray(v)) {
	      v = Buffer.from(v);
	    } else if (typeof v === 'string') {
	      if (exports.isHexString(v)) {
	        v = Buffer.from(exports.padToEven(exports.stripHexPrefix(v)), 'hex');
	      } else {
	        v = Buffer.from(v);
	      }
	    } else if (typeof v === 'number') {
	      v = exports.intToBuffer(v);
	    } else if (v === null || v === undefined) {
	      v = Buffer.allocUnsafe(0);
	    } else if (BN.isBN(v)) {
	      v = v.toArrayLike(Buffer);
	    } else if (v.toArray) {
	      // converts a BN to a Buffer
	      v = Buffer.from(v.toArray());
	    } else {
	      throw new Error('invalid type');
	    }
	  }

	  return v;
	};
	/**
	 * Converts a `Buffer` to a `Number`
	 * @param {Buffer} buf
	 * @return {Number}
	 * @throws If the input number exceeds 53 bits.
	 */


	exports.bufferToInt = function (buf) {
	  return new BN(exports.toBuffer(buf)).toNumber();
	};
	/**
	 * Converts a `Buffer` into a hex `String`
	 * @param {Buffer} buf
	 * @return {String}
	 */


	exports.bufferToHex = function (buf) {
	  buf = exports.toBuffer(buf);
	  return '0x' + buf.toString('hex');
	};
	/**
	 * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.
	 * @param {Buffer} num
	 * @return {BN}
	 */


	exports.fromSigned = function (num) {
	  return new BN(num).fromTwos(256);
	};
	/**
	 * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.
	 * @param {BN} num
	 * @return {Buffer}
	 */


	exports.toUnsigned = function (num) {
	  return Buffer.from(num.toTwos(256).toArray());
	};
	/**
	 * Creates Keccak hash of the input
	 * @param {Buffer|Array|String|Number} a the input data
	 * @param {Number} [bits=256] the Keccak width
	 * @return {Buffer}
	 */


	exports.keccak = function (a, bits) {
	  a = exports.toBuffer(a);
	  if (!bits) bits = 256;

	  switch (bits) {
	    case 224:
	      {
	        return keccak224(a);
	      }

	    case 256:
	      {
	        return k256(a);
	      }

	    case 384:
	      {
	        return keccak384(a);
	      }

	    case 512:
	      {
	        return keccak512(a);
	      }

	    default:
	      {
	        throw new Error('Invald algorithm: keccak' + bits);
	      }
	  }
	};
	/**
	 * Creates Keccak-256 hash of the input, alias for keccak(a, 256)
	 * @param {Buffer|Array|String|Number} a the input data
	 * @return {Buffer}
	 */


	exports.keccak256 = function (a) {
	  return exports.keccak(a);
	};
	/**
	 * Creates SHA-3 (Keccak) hash of the input [OBSOLETE]
	 * @param {Buffer|Array|String|Number} a the input data
	 * @param {Number} [bits=256] the SHA-3 width
	 * @return {Buffer}
	 */


	exports.sha3 = exports.keccak;
	/**
	 * Creates SHA256 hash of the input
	 * @param {Buffer|Array|String|Number} a the input data
	 * @return {Buffer}
	 */

	exports.sha256 = function (a) {
	  a = exports.toBuffer(a);
	  return createHash('sha256').update(a).digest();
	};
	/**
	 * Creates RIPEMD160 hash of the input
	 * @param {Buffer|Array|String|Number} a the input data
	 * @param {Boolean} padded whether it should be padded to 256 bits or not
	 * @return {Buffer}
	 */


	exports.ripemd160 = function (a, padded) {
	  a = exports.toBuffer(a);
	  var hash = createHash('rmd160').update(a).digest();

	  if (padded === true) {
	    return exports.setLength(hash, 32);
	  } else {
	    return hash;
	  }
	};
	/**
	 * Creates SHA-3 hash of the RLP encoded version of the input
	 * @param {Buffer|Array|String|Number} a the input data
	 * @return {Buffer}
	 */


	exports.rlphash = function (a) {
	  return exports.keccak(rlp.encode(a));
	};
	/**
	 * Checks if the private key satisfies the rules of the curve secp256k1.
	 * @param {Buffer} privateKey
	 * @return {Boolean}
	 */


	exports.isValidPrivate = function (privateKey) {
	  return secp256k1.privateKeyVerify(privateKey);
	};
	/**
	 * Checks if the public key satisfies the rules of the curve secp256k1
	 * and the requirements of Ethereum.
	 * @param {Buffer} publicKey The two points of an uncompressed key, unless sanitize is enabled
	 * @param {Boolean} [sanitize=false] Accept public keys in other formats
	 * @return {Boolean}
	 */


	exports.isValidPublic = function (publicKey, sanitize) {
	  if (publicKey.length === 64) {
	    // Convert to SEC1 for secp256k1
	    return secp256k1.publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]));
	  }

	  if (!sanitize) {
	    return false;
	  }

	  return secp256k1.publicKeyVerify(publicKey);
	};
	/**
	 * Returns the ethereum address of a given public key.
	 * Accepts "Ethereum public keys" and SEC1 encoded keys.
	 * @param {Buffer} pubKey The two points of an uncompressed key, unless sanitize is enabled
	 * @param {Boolean} [sanitize=false] Accept public keys in other formats
	 * @return {Buffer}
	 */


	exports.pubToAddress = exports.publicToAddress = function (pubKey, sanitize) {
	  pubKey = exports.toBuffer(pubKey);

	  if (sanitize && pubKey.length !== 64) {
	    pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);
	  }

	  assert(pubKey.length === 64); // Only take the lower 160bits of the hash

	  return exports.keccak(pubKey).slice(-20);
	};
	/**
	 * Returns the ethereum public key of a given private key
	 * @param {Buffer} privateKey A private key must be 256 bits wide
	 * @return {Buffer}
	 */


	var privateToPublic = exports.privateToPublic = function (privateKey) {
	  privateKey = exports.toBuffer(privateKey); // skip the type flag and use the X, Y points

	  return secp256k1.publicKeyCreate(privateKey, false).slice(1);
	};
	/**
	 * Converts a public key to the Ethereum format.
	 * @param {Buffer} publicKey
	 * @return {Buffer}
	 */


	exports.importPublic = function (publicKey) {
	  publicKey = exports.toBuffer(publicKey);

	  if (publicKey.length !== 64) {
	    publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);
	  }

	  return publicKey;
	};
	/**
	 * ECDSA sign
	 * @param {Buffer} msgHash
	 * @param {Buffer} privateKey
	 * @return {Object}
	 */


	exports.ecsign = function (msgHash, privateKey) {
	  var sig = secp256k1.sign(msgHash, privateKey);
	  var ret = {};
	  ret.r = sig.signature.slice(0, 32);
	  ret.s = sig.signature.slice(32, 64);
	  ret.v = sig.recovery + 27;
	  return ret;
	};
	/**
	 * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.
	 * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`
	 * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key
	 * used to produce the signature.
	 * @param message
	 * @returns {Buffer} hash
	 */


	exports.hashPersonalMessage = function (message) {
	  var prefix = exports.toBuffer('\x19Ethereum Signed Message:\n' + message.length.toString());
	  return exports.keccak(Buffer.concat([prefix, message]));
	};
	/**
	 * ECDSA public key recovery from signature
	 * @param {Buffer} msgHash
	 * @param {Number} v
	 * @param {Buffer} r
	 * @param {Buffer} s
	 * @return {Buffer} publicKey
	 */


	exports.ecrecover = function (msgHash, v, r, s) {
	  var signature = Buffer.concat([exports.setLength(r, 32), exports.setLength(s, 32)], 64);
	  var recovery = v - 27;

	  if (recovery !== 0 && recovery !== 1) {
	    throw new Error('Invalid signature v value');
	  }

	  var senderPubKey = secp256k1.recover(msgHash, signature, recovery);
	  return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);
	};
	/**
	 * Convert signature parameters into the format of `eth_sign` RPC method
	 * @param {Number} v
	 * @param {Buffer} r
	 * @param {Buffer} s
	 * @return {String} sig
	 */


	exports.toRpcSig = function (v, r, s) {
	  // NOTE: with potential introduction of chainId this might need to be updated
	  if (v !== 27 && v !== 28) {
	    throw new Error('Invalid recovery id');
	  } // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin
	  // FIXME: this might change in the future - https://github.com/ethereum/go-ethereum/issues/2053


	  return exports.bufferToHex(Buffer.concat([exports.setLengthLeft(r, 32), exports.setLengthLeft(s, 32), exports.toBuffer(v - 27)]));
	};
	/**
	 * Convert signature format of the `eth_sign` RPC method to signature parameters
	 * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053
	 * @param {String} sig
	 * @return {Object}
	 */


	exports.fromRpcSig = function (sig) {
	  sig = exports.toBuffer(sig); // NOTE: with potential introduction of chainId this might need to be updated

	  if (sig.length !== 65) {
	    throw new Error('Invalid signature length');
	  }

	  var v = sig[64]; // support both versions of `eth_sign` responses

	  if (v < 27) {
	    v += 27;
	  }

	  return {
	    v: v,
	    r: sig.slice(0, 32),
	    s: sig.slice(32, 64)
	  };
	};
	/**
	 * Returns the ethereum address of a given private key
	 * @param {Buffer} privateKey A private key must be 256 bits wide
	 * @return {Buffer}
	 */


	exports.privateToAddress = function (privateKey) {
	  return exports.publicToAddress(privateToPublic(privateKey));
	};
	/**
	 * Checks if the address is a valid. Accepts checksummed addresses too
	 * @param {String} address
	 * @return {Boolean}
	 */


	exports.isValidAddress = function (address) {
	  return /^0x[0-9a-fA-F]{40}$/.test(address);
	};
	/**
	  * Checks if a given address is a zero address
	  * @method isZeroAddress
	  * @param {String} address
	  * @return {Boolean}
	  */


	exports.isZeroAddress = function (address) {
	  var zeroAddress = exports.zeroAddress();
	  return zeroAddress === exports.addHexPrefix(address);
	};
	/**
	 * Returns a checksummed address
	 * @param {String} address
	 * @return {String}
	 */


	exports.toChecksumAddress = function (address) {
	  address = exports.stripHexPrefix(address).toLowerCase();
	  var hash = exports.keccak(address).toString('hex');
	  var ret = '0x';

	  for (var i = 0; i < address.length; i++) {
	    if (parseInt(hash[i], 16) >= 8) {
	      ret += address[i].toUpperCase();
	    } else {
	      ret += address[i];
	    }
	  }

	  return ret;
	};
	/**
	 * Checks if the address is a valid checksummed address
	 * @param {Buffer} address
	 * @return {Boolean}
	 */


	exports.isValidChecksumAddress = function (address) {
	  return exports.isValidAddress(address) && exports.toChecksumAddress(address) === address;
	};
	/**
	 * Generates an address of a newly created contract
	 * @param {Buffer} from the address which is creating this new address
	 * @param {Buffer} nonce the nonce of the from account
	 * @return {Buffer}
	 */


	exports.generateAddress = function (from, nonce) {
	  from = exports.toBuffer(from);
	  nonce = new BN(nonce);

	  if (nonce.isZero()) {
	    // in RLP we want to encode null in the case of zero nonce
	    // read the RLP documentation for an answer if you dare
	    nonce = null;
	  } else {
	    nonce = Buffer.from(nonce.toArray());
	  } // Only take the lower 160bits of the hash


	  return exports.rlphash([from, nonce]).slice(-20);
	};
	/**
	 * Returns true if the supplied address belongs to a precompiled account (Byzantium)
	 * @param {Buffer|String} address
	 * @return {Boolean}
	 */


	exports.isPrecompiled = function (address) {
	  var a = exports.unpad(address);
	  return a.length === 1 && a[0] >= 1 && a[0] <= 8;
	};
	/**
	 * Adds "0x" to a given `String` if it does not already start with "0x"
	 * @param {String} str
	 * @return {String}
	 */


	exports.addHexPrefix = function (str) {
	  if (typeof str !== 'string') {
	    return str;
	  }

	  return exports.isHexPrefixed(str) ? str : '0x' + str;
	};
	/**
	 * Validate ECDSA signature
	 * @method isValidSignature
	 * @param {Buffer} v
	 * @param {Buffer} r
	 * @param {Buffer} s
	 * @param {Boolean} [homestead=true]
	 * @return {Boolean}
	 */


	exports.isValidSignature = function (v, r, s, homestead) {
	  var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
	  var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);

	  if (r.length !== 32 || s.length !== 32) {
	    return false;
	  }

	  if (v !== 27 && v !== 28) {
	    return false;
	  }

	  r = new BN(r);
	  s = new BN(s);

	  if (r.isZero() || r.gt(SECP256K1_N) || s.isZero() || s.gt(SECP256K1_N)) {
	    return false;
	  }

	  if (homestead === false && new BN(s).cmp(SECP256K1_N_DIV_2) === 1) {
	    return false;
	  }

	  return true;
	};
	/**
	 * Converts a `Buffer` or `Array` to JSON
	 * @param {Buffer|Array} ba
	 * @return {Array|String|null}
	 */


	exports.baToJSON = function (ba) {
	  if (Buffer.isBuffer(ba)) {
	    return '0x' + ba.toString('hex');
	  } else if (ba instanceof Array) {
	    var array = [];

	    for (var i = 0; i < ba.length; i++) {
	      array.push(exports.baToJSON(ba[i]));
	    }

	    return array;
	  }
	};
	/**
	 * Defines properties on a `Object`. It make the assumption that underlying data is binary.
	 * @param {Object} self the `Object` to define properties on
	 * @param {Array} fields an array fields to define. Fields can contain:
	 * * `name` - the name of the properties
	 * * `length` - the number of bytes the field can have
	 * * `allowLess` - if the field can be less than the length
	 * * `allowEmpty`
	 * @param {*} data data to be validated against the definitions
	 */


	exports.defineProperties = function (self, fields, data) {
	  self.raw = [];
	  self._fields = []; // attach the `toJSON`

	  self.toJSON = function (label) {
	    if (label) {
	      var obj = {};

	      self._fields.forEach(function (field) {
	        obj[field] = '0x' + self[field].toString('hex');
	      });

	      return obj;
	    }

	    return exports.baToJSON(this.raw);
	  };

	  self.serialize = function serialize() {
	    return rlp.encode(self.raw);
	  };

	  fields.forEach(function (field, i) {
	    self._fields.push(field.name);

	    function getter() {
	      return self.raw[i];
	    }

	    function setter(v) {
	      v = exports.toBuffer(v);

	      if (v.toString('hex') === '00' && !field.allowZero) {
	        v = Buffer.allocUnsafe(0);
	      }

	      if (field.allowLess && field.length) {
	        v = exports.stripZeros(v);
	        assert(field.length >= v.length, 'The field ' + field.name + ' must not have more ' + field.length + ' bytes');
	      } else if (!(field.allowZero && v.length === 0) && field.length) {
	        assert(field.length === v.length, 'The field ' + field.name + ' must have byte length of ' + field.length);
	      }

	      self.raw[i] = v;
	    }

	    Object.defineProperty(self, field.name, {
	      enumerable: true,
	      configurable: true,
	      get: getter,
	      set: setter
	    });

	    if (field.default) {
	      self[field.name] = field.default;
	    } // attach alias


	    if (field.alias) {
	      Object.defineProperty(self, field.alias, {
	        enumerable: false,
	        configurable: true,
	        set: setter,
	        get: getter
	      });
	    }
	  }); // if the constuctor is passed data

	  if (data) {
	    if (typeof data === 'string') {
	      data = Buffer.from(exports.stripHexPrefix(data), 'hex');
	    }

	    if (Buffer.isBuffer(data)) {
	      data = rlp.decode(data);
	    }

	    if (Array.isArray(data)) {
	      if (data.length > self._fields.length) {
	        throw new Error('wrong number of fields in data');
	      } // make sure all the items are buffers


	      data.forEach(function (d, i) {
	        self[self._fields[i]] = exports.toBuffer(d);
	      });
	    } else if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
	      var keys = Object.keys(data);
	      fields.forEach(function (field) {
	        if (keys.indexOf(field.name) !== -1) self[field.name] = data[field.name];
	        if (keys.indexOf(field.alias) !== -1) self[field.alias] = data[field.alias];
	      });
	    } else {
	      throw new Error('invalid data');
	    }
	  }
	};

/***/ },
/* 430 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

	var secp256k1 = __webpack_require__(64);

	var secp256k1v3 = __webpack_require__(__webpack_module_template_argument_0__);

	var der = __webpack_require__(__webpack_module_template_argument_1__);
	/**
	 * Verify an ECDSA privateKey
	 * @method privateKeyVerify
	 * @param {Buffer} privateKey
	 * @return {boolean}
	 */


	var privateKeyVerify = function privateKeyVerify(privateKey) {
	  // secp256k1 v4 version throws when privateKey length is not 32
	  if (privateKey.length !== 32) {
	    return false;
	  }

	  return secp256k1.privateKeyVerify(Uint8Array.from(privateKey));
	};
	/**
	 * Export a privateKey in DER format
	 * @method privateKeyExport
	 * @param {Buffer} privateKey
	 * @param {boolean} compressed
	 * @return {boolean}
	 */


	var privateKeyExport = function privateKeyExport(privateKey, compressed) {
	  // privateKeyExport method is not part of secp256k1 v4 package
	  // this implementation is based on v3
	  if (privateKey.length !== 32) {
	    throw new RangeError('private key length is invalid');
	  }

	  var publicKey = secp256k1v3.privateKeyExport(privateKey, compressed);
	  return der.privateKeyExport(privateKey, publicKey, compressed);
	};
	/**
	 * Import a privateKey in DER format
	 * @method privateKeyImport
	 * @param {Buffer} privateKey
	 * @return {Buffer}
	 */


	var privateKeyImport = function privateKeyImport(privateKey) {
	  // privateKeyImport method is not part of secp256k1 v4 package
	  // this implementation is based on v3
	  privateKey = der.privateKeyImport(privateKey);

	  if (privateKey !== null && privateKey.length === 32 && privateKeyVerify(privateKey)) {
	    return privateKey;
	  }

	  throw new Error("couldn't import from DER format");
	};
	/**
	 * Negate a privateKey by subtracting it from the order of the curve's base point
	 * @method privateKeyNegate
	 * @param {Buffer} privateKey
	 * @return {Buffer}
	 */


	var privateKeyNegate = function privateKeyNegate(privateKey) {
	  return Buffer.from(secp256k1.privateKeyNegate(Uint8Array.from(privateKey)));
	};
	/**
	 * Compute the inverse of a privateKey (modulo the order of the curve's base point).
	 * @method privateKeyModInverse
	 * @param {Buffer} privateKey
	 * @return {Buffer}
	 */


	var privateKeyModInverse = function privateKeyModInverse(privateKey) {
	  if (privateKey.length !== 32) {
	    throw new Error('private key length is invalid');
	  }

	  return Buffer.from(secp256k1v3.privateKeyModInverse(Uint8Array.from(privateKey)));
	};
	/**
	 * Tweak a privateKey by adding tweak to it.
	 * @method privateKeyTweakAdd
	 * @param {Buffer} privateKey
	 * @param {Buffer} tweak
	 * @return {Buffer}
	 */


	var privateKeyTweakAdd = function privateKeyTweakAdd(privateKey, tweak) {
	  return Buffer.from(secp256k1.privateKeyTweakAdd(Uint8Array.from(privateKey), tweak));
	};
	/**
	 * Tweak a privateKey by multiplying it by a tweak.
	 * @method privateKeyTweakMul
	 * @param {Buffer} privateKey
	 * @param {Buffer} tweak
	 * @return {Buffer}
	 */


	var privateKeyTweakMul = function privateKeyTweakMul(privateKey, tweak) {
	  return Buffer.from(secp256k1.privateKeyTweakMul(Uint8Array.from(privateKey), Uint8Array.from(tweak)));
	};
	/**
	 * Compute the public key for a privateKey.
	 * @method publicKeyCreate
	 * @param {Buffer} privateKey
	 * @param {boolean} compressed
	 * @return {Buffer}
	 */


	var publicKeyCreate = function publicKeyCreate(privateKey, compressed) {
	  return Buffer.from(secp256k1.publicKeyCreate(Uint8Array.from(privateKey), compressed));
	};
	/**
	 * Convert a publicKey to compressed or uncompressed form.
	 * @method publicKeyConvert
	 * @param {Buffer} publicKey
	 * @param {boolean} compressed
	 * @return {Buffer}
	 */


	var publicKeyConvert = function publicKeyConvert(publicKey, compressed) {
	  return Buffer.from(secp256k1.publicKeyConvert(Uint8Array.from(publicKey), compressed));
	};
	/**
	 * Verify an ECDSA publicKey.
	 * @method publicKeyVerify
	 * @param {Buffer} publicKey
	 * @return {boolean}
	 */


	var publicKeyVerify = function publicKeyVerify(publicKey) {
	  // secp256k1 v4 version throws when publicKey length is not 33 or 65
	  if (publicKey.length !== 33 && publicKey.length !== 65) {
	    return false;
	  }

	  return secp256k1.publicKeyVerify(Uint8Array.from(publicKey));
	};
	/**
	 * Tweak a publicKey by adding tweak times the generator to it.
	 * @method publicKeyTweakAdd
	 * @param {Buffer} publicKey
	 * @param {Buffer} tweak
	 * @param {boolean} compressed
	 * @return {Buffer}
	 */


	var publicKeyTweakAdd = function publicKeyTweakAdd(publicKey, tweak, compressed) {
	  return Buffer.from(secp256k1.publicKeyTweakAdd(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
	};
	/**
	 * Tweak a publicKey by multiplying it by a tweak value
	 * @method publicKeyTweakMul
	 * @param {Buffer} publicKey
	 * @param {Buffer} tweak
	 * @param {boolean} compressed
	 * @return {Buffer}
	 */


	var publicKeyTweakMul = function publicKeyTweakMul(publicKey, tweak, compressed) {
	  return Buffer.from(secp256k1.publicKeyTweakMul(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
	};
	/**
	 * Add a given publicKeys together.
	 * @method publicKeyCombine
	 * @param {Array<Buffer>} publicKeys
	 * @param {boolean} compressed
	 * @return {Buffer}
	 */


	var publicKeyCombine = function publicKeyCombine(publicKeys, compressed) {
	  var keys = [];
	  publicKeys.forEach(function (publicKey) {
	    keys.push(Uint8Array.from(publicKey));
	  });
	  return Buffer.from(secp256k1.publicKeyCombine(keys, compressed));
	};
	/**
	 * Convert a signature to a normalized lower-S form.
	 * @method signatureNormalize
	 * @param {Buffer} signature
	 * @return {Buffer}
	 */


	var signatureNormalize = function signatureNormalize(signature) {
	  return Buffer.from(secp256k1.signatureNormalize(Uint8Array.from(signature)));
	};
	/**
	 * Serialize an ECDSA signature in DER format.
	 * @method signatureExport
	 * @param {Buffer} signature
	 * @return {Buffer}
	 */


	var signatureExport = function signatureExport(signature) {
	  return Buffer.from(secp256k1.signatureExport(Uint8Array.from(signature)));
	};
	/**
	 * Parse a DER ECDSA signature (follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
	 * @method signatureImport
	 * @param {Buffer} signature
	 * @return {Buffer}
	 */


	var signatureImport = function signatureImport(signature) {
	  return Buffer.from(secp256k1.signatureImport(Uint8Array.from(signature)));
	};
	/**
	 * Parse a DER ECDSA signature (not follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
	 * @method signatureImportLax
	 * @param {Buffer} signature
	 * @return {Buffer}
	 */


	var signatureImportLax = function signatureImportLax(signature) {
	  // signatureImportLax method is not part of secp256k1 v4 package
	  // this implementation is based on v3
	  // ensure that signature is greater than 0
	  if (signature.length === 0) {
	    throw new RangeError('signature length is invalid');
	  }

	  var sigObj = der.signatureImportLax(signature);

	  if (sigObj === null) {
	    throw new Error("couldn't parse DER signature");
	  }

	  return secp256k1v3.signatureImport(sigObj);
	};
	/**
	 * Create an ECDSA signature. Always return low-S signature.
	 * @method sign
	 * @param {Buffer} message
	 * @param {Buffer} privateKey
	 * @param {Object} options
	 * @return {Buffer}
	 */


	var sign = function sign(message, privateKey, options) {
	  if (options === null) {
	    throw new TypeError('options should be an Object');
	  }

	  var signOptions = void 0;

	  if (options) {
	    signOptions = {};

	    if (options.data === null) {
	      throw new TypeError('options.data should be a Buffer');
	    }

	    if (options.data) {
	      // validate option.data length
	      if (options.data.length !== 32) {
	        throw new RangeError('options.data length is invalid');
	      }

	      signOptions.data = new Uint8Array(options.data);
	    }

	    if (options.noncefn === null) {
	      throw new TypeError('options.noncefn should be a Function');
	    }

	    if (options.noncefn) {
	      //  convert option.noncefn function signature
	      signOptions.noncefn = function (message, privateKey, algo, data, attempt) {
	        var bufferAlgo = algo != null ? Buffer.from(algo) : null;
	        var bufferData = data != null ? Buffer.from(data) : null;
	        var buffer = Buffer.from('');

	        if (options.noncefn) {
	          buffer = options.noncefn(Buffer.from(message), Buffer.from(privateKey), bufferAlgo, bufferData, attempt);
	        }

	        return Uint8Array.from(buffer);
	      };
	    }
	  }

	  var sig = secp256k1.ecdsaSign(Uint8Array.from(message), Uint8Array.from(privateKey), signOptions);
	  return {
	    signature: Buffer.from(sig.signature),
	    recovery: sig.recid
	  };
	};
	/**
	 * Verify an ECDSA signature.
	 * @method verify
	 * @param {Buffer} message
	 * @param {Buffer} signature
	 * @param {Buffer} publicKey
	 * @return {boolean}
	 */


	var verify = function verify(message, signature, publicKey) {
	  // note: secp256k1 v4 verify method has a different argument order
	  return secp256k1.ecdsaVerify(Uint8Array.from(signature), Uint8Array.from(message), publicKey);
	};
	/**
	 * Recover an ECDSA public key from a signature.
	 * @method recover
	 * @param {Buffer} message
	 * @param {Buffer} signature
	 * @param {Number} recid
	 * @param {boolean} compressed
	 * @return {Buffer}
	 */


	var recover = function recover(message, signature, recid, compressed) {
	  // note: secp256k1 v4 recover method has a different argument order
	  return Buffer.from(secp256k1.ecdsaRecover(Uint8Array.from(signature), recid, Uint8Array.from(message), compressed));
	};
	/**
	 * Compute an EC Diffie-Hellman secret and applied sha256 to compressed public key.
	 * @method ecdh
	 * @param {Buffer} publicKey
	 * @param {Buffer} privateKey
	 * @return {Buffer}
	 */


	var ecdh = function ecdh(publicKey, privateKey) {
	  // note: secp256k1 v3 doesn't allow optional parameter
	  return Buffer.from(secp256k1.ecdh(Uint8Array.from(publicKey), Uint8Array.from(privateKey), {}));
	};
	/**
	 * Compute an EC Diffie-Hellman secret and return public key as result
	 * @method ecdhUnsafe
	 * @param {Buffer} publicKey
	 * @param {Buffer} privateKey
	 * @param {boolean} compressed
	 * @return {Buffer}
	 */


	var ecdhUnsafe = function ecdhUnsafe(publicKey, privateKey, compressed) {
	  // ecdhUnsafe method is not part of secp256k1 v4 package
	  // this implementation is based on v3
	  // ensure valid publicKey length
	  if (publicKey.length !== 33 && publicKey.length !== 65) {
	    throw new RangeError('public key length is invalid');
	  } // ensure valid privateKey length


	  if (privateKey.length !== 32) {
	    throw new RangeError('private key length is invalid');
	  }

	  return Buffer.from(secp256k1v3.ecdhUnsafe(Uint8Array.from(publicKey), Uint8Array.from(privateKey), compressed));
	};

	module.exports = {
	  privateKeyVerify: privateKeyVerify,
	  privateKeyExport: privateKeyExport,
	  privateKeyImport: privateKeyImport,
	  privateKeyNegate: privateKeyNegate,
	  privateKeyModInverse: privateKeyModInverse,
	  privateKeyTweakAdd: privateKeyTweakAdd,
	  privateKeyTweakMul: privateKeyTweakMul,
	  publicKeyCreate: publicKeyCreate,
	  publicKeyConvert: publicKeyConvert,
	  publicKeyVerify: publicKeyVerify,
	  publicKeyTweakAdd: publicKeyTweakAdd,
	  publicKeyTweakMul: publicKeyTweakMul,
	  publicKeyCombine: publicKeyCombine,
	  signatureNormalize: signatureNormalize,
	  signatureExport: signatureExport,
	  signatureImport: signatureImport,
	  signatureImportLax: signatureImportLax,
	  sign: sign,
	  verify: verify,
	  recover: recover,
	  ecdh: ecdh,
	  ecdhUnsafe: ecdhUnsafe
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }
/******/ ])));